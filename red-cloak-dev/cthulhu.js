// Generated by Haxe 3.4.7
(function () { "use strict";
var $estr = function() { return js_Boot.__string_rec(this,''); };
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var _$ActionResultType = { __ename__ : true, __constructs__ : ["RESULT_CHAT","RESULT_CHAT_FINISH_SUCCESS","RESULT_CHAT_FINISH_FAIL","RESULT_CHAT_INTEREST"] };
_$ActionResultType.RESULT_CHAT = ["RESULT_CHAT",0];
_$ActionResultType.RESULT_CHAT.toString = $estr;
_$ActionResultType.RESULT_CHAT.__enum__ = _$ActionResultType;
_$ActionResultType.RESULT_CHAT_FINISH_SUCCESS = ["RESULT_CHAT_FINISH_SUCCESS",1];
_$ActionResultType.RESULT_CHAT_FINISH_SUCCESS.toString = $estr;
_$ActionResultType.RESULT_CHAT_FINISH_SUCCESS.__enum__ = _$ActionResultType;
_$ActionResultType.RESULT_CHAT_FINISH_FAIL = ["RESULT_CHAT_FINISH_FAIL",2];
_$ActionResultType.RESULT_CHAT_FINISH_FAIL.toString = $estr;
_$ActionResultType.RESULT_CHAT_FINISH_FAIL.__enum__ = _$ActionResultType;
_$ActionResultType.RESULT_CHAT_INTEREST = ["RESULT_CHAT_INTEREST",3];
_$ActionResultType.RESULT_CHAT_INTEREST.toString = $estr;
_$ActionResultType.RESULT_CHAT_INTEREST.__enum__ = _$ActionResultType;
var Adventure = function(g,info) {
	this.game = g;
	this.info = info;
};
Adventure.__name__ = true;
Adventure.prototype = {
	printKnownTopics: function() {
		var s_b = "";
		s_b += "Known special topics: ";
		var _g = 0;
		var _g1 = this.game.adventure.info.topics;
		while(_g < _g1.length) {
			var ch = _g1[_g];
			++_g;
			if(ch.isKnown) {
				s_b += Std.string(ch.name + ", ");
			}
		}
		var msg = s_b;
		msg = HxOverrides.substr(msg,0,msg.length - 2);
		this.game.console._console.print(msg);
	}
	,getKnownTopic: function(name) {
		var topic = null;
		var _g = 0;
		var _g1 = this.game.adventure.info.topics;
		while(_g < _g1.length) {
			var t = _g1[_g];
			++_g;
			if(t.isKnown && Lambda.has(t.names,name)) {
				return t;
			}
		}
		return null;
	}
	,getByID: function(id) {
		var topic = null;
		var _g = 0;
		var _g1 = this.game.adventure.info.topics;
		while(_g < _g1.length) {
			var t = _g1[_g];
			++_g;
			if(t.id == id) {
				return t;
			}
		}
		return null;
	}
};
var ChatConst = function() { };
ChatConst.__name__ = true;
ChatConst.printCommonTopics = function(game) {
	var s_b = "";
	s_b += "Common topics: ";
	var _this = ChatConst.commonTopics;
	var ch = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
	while(ch.hasNext()) {
		var ch1 = ch.next();
		s_b += Std.string(ch1.name + ", ");
	}
	var msg = s_b;
	msg = HxOverrides.substr(msg,0,msg.length - 2);
	game.console._console.print(msg);
};
ChatConst.getCommonTopic = function(name) {
	var topic = null;
	var _this = ChatConst.commonTopics;
	var t = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
	while(t.hasNext()) {
		var t1 = t.next();
		if(Lambda.has(t1.names,name)) {
			return t1;
		}
	}
	return null;
};
var Console = function(g) {
	this.game = g;
	this._console = new ConsoleJS(this.game);
};
Console.__name__ = true;
Console.prototype = {
	runCommand: function(str) {
		var tmp = str.split(" ");
		var tokens = [];
		var tokensFull = [];
		var _g = 0;
		while(_g < tmp.length) {
			var x = tmp[_g];
			++_g;
			if(!Lambda.has(Const.ignoredKeywords,x)) {
				tokens.push(x.toLowerCase());
			}
			tokensFull.push(x.toLowerCase());
		}
		var cmd = tokens.shift();
		tokensFull.shift();
		var ret = this.runCommandCommon(cmd,tokens);
		if(ret != 0) {
			return ret;
		}
		if(this.game.get_state() == _$GameState.STATE_LOCATION) {
			return this.runCommandLocation(cmd,tokens);
		} else if(this.game.get_state() == _$GameState.STATE_CHAT) {
			return this.game.npc.runCommand(cmd,tokens,tokensFull);
		}
		return 0;
	}
	,runCommandCommon: function(cmd,tokens) {
		if(cmd == "help" || cmd == "h" || cmd == "?") {
			if(tokens.length == 0) {
				var s = "Commonly available commands: " + "again (g), clues, skills/stats, topic/topics, who\n";
				if(this.game.get_state() == _$GameState.STATE_LOCATION) {
					s += "Location commands: " + "enter, examine (x), exit, go, " + "look (l), roll (r), talk (t), use (u)";
				} else if(this.game.get_state() == _$GameState.STATE_CHAT) {
					s += "Conversation commands: " + "chat (c), discuss (d), evaluate (e), " + "examine (x), exit, " + "look (l), probe (p), roll (r), use (u)";
				}
				this._console.print("<span class=consoleSys>" + s + "</span>");
			} else {
				var _this = Console.commandHelp;
				var key = tokens[0];
				var text = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
				if(text == null) {
					if(this.game.get_state() == _$GameState.STATE_LOCATION) {
						var _this1 = Location.commandHelp;
						var key1 = tokens[0];
						if(__map_reserved[key1] != null) {
							text = _this1.getReserved(key1);
						} else {
							text = _this1.h[key1];
						}
					} else if(this.game.get_state() == _$GameState.STATE_CHAT) {
						var _this2 = NPC.commandHelp;
						var key2 = tokens[0];
						if(__map_reserved[key2] != null) {
							text = _this2.getReserved(key2);
						} else {
							text = _this2.h[key2];
						}
					}
				}
				if(text != null) {
					this._console.print("<span class=consoleSys>" + text + "</span>");
				} else {
					this._console.print("<span class=consoleSys>" + "There is no such command or no help available." + "</span>");
				}
			}
			return 1;
		} else if(cmd == "again" || cmd == "g") {
			var _this3 = this._console;
			if(_this3.cmdHistory.length > 0) {
				_this3.cmdHistory.pop();
			}
			var _this4 = this._console;
			var command = _this4.cmdHistory.length == null ? null : _this4.cmdHistory[_this4.cmdHistory.length - 1];
			if(command != null) {
				return this.runCommand(command);
			}
		} else if(cmd == "skills" || cmd == "stats") {
			var sb_b = "";
			var stats = this.game.player.stats;
			sb_b += Std.string("<span class=consoleSys>STR " + stats.str + ", " + "CON " + stats.con + ", " + "DEX " + stats.dex + ", " + "SIZ " + stats.siz + ", " + "INT " + stats["int"] + ", " + "POW " + stats.pow + ", " + "CHA " + stats.cha + ", " + "EDU " + stats.edu + "\n");
			sb_b += "Skills: ";
			var _this5 = this.game.player.skills;
			var skill = new haxe_ds__$StringMap_StringMapIterator(_this5,_this5.arrayKeys());
			while(skill.hasNext()) {
				var skill1 = skill.next();
				sb_b += Std.string(skill1.info.name + " (" + skill1.val + "%), ");
			}
			var s1 = sb_b;
			s1 = HxOverrides.substr(s1,0,s1.length - 2);
			s1 += "</span>";
			this._console.print(s1);
			return 1;
		} else if(cmd == "topics" || cmd == "topic") {
			if(tokens.length < 1) {
				this.game.adventure.printKnownTopics();
				return 1;
			}
			var topic = this.game.adventure.getKnownTopic(tokens[0]);
			if(topic == null) {
				this._console.print("<span class=consoleSys>" + "I have no idea who or what that is." + "</span>");
				return 1;
			}
			this._console.print(topic.note);
			return 1;
		} else if(cmd == "who") {
			if(tokens.length < 1) {
				var s_b = "";
				s_b += "Known characters: ";
				var _g = 0;
				var _g1 = this.game.adventure.info.who;
				while(_g < _g1.length) {
					var ch = _g1[_g];
					++_g;
					if(ch.isKnown) {
						s_b += Std.string(ch.name + ", ");
					}
				}
				var msg = s_b;
				msg = HxOverrides.substr(msg,0,msg.length - 2);
				this._console.print(msg);
				return 1;
			}
			var name = tokens[0];
			var $char = null;
			var _g2 = 0;
			var _g11 = this.game.adventure.info.who;
			while(_g2 < _g11.length) {
				var ch1 = _g11[_g2];
				++_g2;
				if(ch1.isKnown && Lambda.has(ch1.names,name)) {
					$char = ch1;
					break;
				}
			}
			if($char == null) {
				this._console.print("<span class=consoleSys>" + "I have no idea who that is." + "</span>");
				return 1;
			}
			this._console.print($char.note);
			return 1;
		}
		return 0;
	}
	,runCommandLocation: function(cmd,tokens) {
		if(Lambda.has(["look","l","examine","x"],cmd)) {
			if(tokens.length < 1) {
				this.game.scene.printLocation();
				return 1;
			}
			var obj = this.game.scene.getObject(tokens[0]);
			if(obj == null) {
				this._console.print("<span class=consoleSys>" + "I did not understand what that referred to." + "</span>");
				return -1;
			}
			this._console.print(obj.note);
			return 1;
		} else {
			return this.game.scene.location.runCommand(cmd,tokens);
		}
	}
	,print: function(s) {
		this._console.print(s);
	}
	,debug: function(s) {
		var _this = this._console;
	}
	,error: function(s) {
		this._console.print("<span class=\"consoleError\">" + s + "</span>");
	}
	,system: function(s) {
		this._console.print("<span class=consoleSys>" + s + "</span>");
	}
	,clear: function() {
		this._console.output.html("");
	}
};
var ConsoleJS = function(g) {
	this.game = g;
	this.cmdHistory = [];
	this.output = $("#outputs");
	this.console = $(".console");
	this.inner = $(".console-inner");
	this.md = window.markdownit({ html : true, linkify : true, breaks : true});
	this.input = $(".console-input");
	this.input.on("keydown",null,$bind(this,this.onKeyDown));
	$('.console').click(function() {
          $('.console-input').focus();
        });
	autosize($('textarea'));
};
ConsoleJS.__name__ = true;
ConsoleJS.prototype = {
	onKeyDown: function(event) {
		if(event.which == 38 || event.key == "k" && event.ctrlKey == true) {
			event.preventDefault();
			if(this.cursorHistory == 0) {
				return;
			}
			this.cursorHistory--;
			this.input.val(this.cmdHistory[this.cursorHistory]);
		} else if(event.which == 40 || event.key == "j" && event.ctrlKey == true) {
			event.preventDefault();
			if(this.cursorHistory > this.cmdHistory.length - 1) {
				this.input.val("");
				return;
			}
			this.cursorHistory++;
			this.input.val(this.cmdHistory[this.cursorHistory]);
		} else if(event.which == 13) {
			event.preventDefault();
			var cmd = StringTools.trim(this.input.val());
			if(cmd.length == 0) {
				return;
			}
			if(this.cmdHistory[this.cmdHistory.length - 1] != cmd) {
				this.cmdHistory.push(cmd);
				if(this.cmdHistory.length > 10) {
					this.cmdHistory.shift();
				}
			}
			this.cursorHistory = this.cmdHistory.length;
			this.output.append("<div class='output-cmd'>" + cmd + "</div>");
			this.input.val("");
			autosize.update($('textarea'));
			$("html, body").animate({ scrollTop : $(window.document).height()},300);
			try {
				var ret = this.game.console.runCommand(cmd);
				if(ret == 0) {
					this.print("I did not understand that.");
					return;
				}
			} catch( e ) {
				haxe_CallStack.lastException = e;
				this.print("**Exception: " + haxe_CallStack.toString(haxe_CallStack.exceptionStack()) + "**");
			}
		}
	}
	,getLast: function() {
		if(this.cmdHistory.length == null) {
			return null;
		} else {
			return this.cmdHistory[this.cmdHistory.length - 1];
		}
	}
	,removeLast: function() {
		if(this.cmdHistory.length > 0) {
			this.cmdHistory.pop();
		}
	}
	,clear: function() {
		this.output.html("");
	}
	,print: function(s) {
		this.output.append(this.md.render(s));
		this.console.scrollTop(this.inner.height());
	}
	,error: function(s) {
		this.print("<span class=\"consoleError\">" + s + "</span>");
	}
	,debug: function(s) {
	}
};
var Const = function() { };
Const.__name__ = true;
Const.traceStack = function() {
	console.log(haxe_CallStack.toString(haxe_CallStack.callStack()));
};
Const.dice = function(x,y) {
	var r = 0;
	var _g1 = 0;
	var _g = x;
	while(_g1 < _g) {
		var i = _g1++;
		r += 1 + Std.random(y);
	}
	return r;
};
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
EReg.__name__ = true;
EReg.prototype = {
	match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw new js__$Boot_HaxeError("EReg::matched");
		}
	}
};
var Game = function() {
	this._state = _$GameState.STATE_MAP;
	this.npc = null;
	this.debug = { evaluate : false};
	var _g6 = Const.dice(3,6);
	var _g5 = Const.dice(3,6);
	var _g4 = Const.dice(3,6);
	var _g3 = 6 + Const.dice(2,6);
	var _g2 = 6 + Const.dice(2,6);
	var _g1 = Const.dice(3,6);
	var _g = 6 + Const.dice(2,6);
	this.player = new Player(this,new Stats(_g6,_g5,_g4,_g3,_g2,_g1,_g,3 + Const.dice(3,6)));
	this.console = new Console(this);
	var _this = this.player.skills;
	(__map_reserved["spotHidden"] != null ? _this.getReserved("spotHidden") : _this.h["spotHidden"]).val += 30;
	var _this1 = this.player.skills;
	(__map_reserved["psychology"] != null ? _this1.getReserved("psychology") : _this1.h["psychology"]).val = 65;
	var _this2 = this.player.skills;
	(__map_reserved["fastTalk"] != null ? _this2.getReserved("fastTalk") : _this2.h["fastTalk"]).val = 65;
	var _this3 = this.player.skills;
	(__map_reserved["persuade"] != null ? _this3.getReserved("persuade") : _this3.h["persuade"]).val = 65;
	this.console._console.print("### Welcome to Red Cloak DEMO.");
	this.console._console.print("<span style='color:#50f0d0'>*Both the mask and the magician are missing and the curator is keen on finding the former. Hopefully, these two events are related. The magician's house might hold some answers.*</span>");
	this.adventure = new Adventure(this,new infos_AdventureInfo(this));
	this.scene = new infos_ThorstonHouse(this);
	this.console.runCommand("stats");
	this.scene.enter();
	this.console.runCommand("ring bell");
};
Game.__name__ = true;
Game.main = function() {
	Game.inst = new Game();
};
Game.prototype = {
	get_state: function() {
		return this._state;
	}
	,set_state: function(st) {
		this._state = st;
		var s = "Game state: " + Std.string(this._state);
		var _this = this.console._console;
		return st;
	}
};
var HxOverrides = function() { };
HxOverrides.__name__ = true;
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
var Lambda = function() { };
Lambda.__name__ = true;
Lambda.has = function(it,elt) {
	var x = $iterator(it)();
	while(x.hasNext()) {
		var x1 = x.next();
		if(x1 == elt) {
			return true;
		}
	}
	return false;
};
var Location = function(id,game,name,note,objects) {
	this.id = id;
	this.game = game;
	this.name = name;
	this.note = note;
	this.objects = objects;
};
Location.__name__ = true;
Location.prototype = {
	runCommand: function(cmd,tokens) {
		if(tokens.length < 1) {
			return 0;
		}
		var obj = this.game.scene.getObject(tokens[0]);
		if(obj == null || obj.actions == null) {
			return 0;
		}
		var action = null;
		var _g = 0;
		var _g1 = obj.actions;
		while(_g < _g1.length) {
			var a = _g1[_g];
			++_g;
			if(Lambda.has(a.names,cmd)) {
				action = a;
				break;
			}
		}
		if(action == null) {
			return 0;
		}
		this.game.console._console.print(action.note);
		if(action.result != null) {
			return this.handleActionResult(action.result);
		}
		return 1;
	}
	,handleActionResult: function(result) {
		if(result.type == _$ActionResultType.RESULT_CHAT) {
			var npc = this.game.scene.getNPC(result.info);
			if(npc == null) {
				this.game.console._console.print("<span class=\"consoleError\">" + ("No such NPC found: " + result.info + ".") + "</span>");
				return -1;
			}
			return npc.startChat();
		} else if(result.type == _$ActionResultType.RESULT_CHAT_FINISH_SUCCESS) {
			this.game.npc.finishChat(true);
		} else {
			this.game.console._console.print("<span class=\"consoleError\">" + ("No result handler for " + Std.string(result)) + "</span>");
		}
		return 1;
	}
};
Math.__name__ = true;
var NPC = function(g,s) {
	this.game = g;
	this.scene = s;
	this.gender = false;
	this.pronoun = "he";
	this.id = "?";
	this.name = "?";
	this.nameUpper = "?";
	this.effects = [];
	this._anxiety = 0;
	this._rapport = 0;
	this.chatMode = ChatMode.CHAT_MODE_CAUTIOUS;
	this._chatState = ChatState.NPC_STATE_NORMAL;
	this.chatStateTimer = 0;
	this.chatSkills = new haxe_ds_StringMap();
	this.chatCommonTopics = new haxe_ds_StringMap();
	this.chatSpecialTopics = new haxe_ds_StringMap();
	this.chatTopicUnknown = null;
	this.chatTopicNotInterested = null;
	this.hints = null;
	this.isExamined = false;
	this.examineNote = null;
};
NPC.__name__ = true;
NPC.prototype = {
	startChatPre: function() {
		return true;
	}
	,turnPre: function() {
	}
	,finishChatSuccess: function() {
	}
	,finishChatFail: function() {
	}
	,startChat: function() {
		this._anxiety = 0;
		this._rapport = 0;
		if(!this.startChatPre()) {
			return -1;
		}
		this.game.set_state(_$GameState.STATE_CHAT);
		this.game.npc = this;
		this.evalTimer = 0;
		if(this.game.debug.evaluate) {
			this.evalTimer = 1;
		}
		this.chatStateTimer = 0;
		this._chatState = ChatState.NPC_STATE_NORMAL;
		var s = "You have started a conversation with " + this.name + ".";
		if(s.charAt(0) == "\"") {
			this.game.console._console.print("*" + s + "*");
		} else {
			this.game.console._console.print(s);
		}
		if(this.hints == null) {
			this.initHints();
		}
		this.printState();
		return 1;
	}
	,runCommand: function(cmd,tokens,tokensFull) {
		var ret = 0;
		if(cmd == "chat" || cmd == "c") {
			ret = this.chatCommand();
		} else if(cmd == "discuss" || cmd == "d") {
			if(tokens.length < 1) {
				this.game.adventure.printKnownTopics();
				ChatConst.printCommonTopics(this.game);
				return 1;
			}
			var topic = ChatConst.getCommonTopic(tokens[0]);
			if(topic != null) {
				ret = this.discussCommonCommand(topic);
			} else {
				var info = this.game.adventure.getKnownTopic(tokens[0]);
				if(info == null) {
					this.game.console._console.print("<span class=consoleSys>" + "I have no idea who or what that is." + "</span>");
					return 1;
				}
				ret = this.discussSpecialCommand(info);
			}
		} else if(cmd == "evaluate" || cmd == "eval" || cmd == "e") {
			var res = this.game.player.roll("psychology");
			if(res == _$RollResult.ROLL_SUCCESS || res == _$RollResult.ROLL_CRIT) {
				var lines = ["You appraise the emotional state of " + this.name + ".","You expertly assess the mood of " + this.name + "."];
				var s = lines[Std.random(lines.length)];
				if(s.charAt(0) == "\"") {
					this.game.console._console.print("*" + s + "*");
				} else {
					this.game.console._console.print(s);
				}
				this.evalTimer += res == _$RollResult.ROLL_SUCCESS ? 4 : 7;
			} else {
				var lines1 = ["You cannot quite grasp what " + this.name + " is thinking.","It is hard to figure out what " + this.name + " is all about.","It looks like interpreting the mood of " + this.name + " is beyond your capabilities."];
				var s1 = lines1[Std.random(lines1.length)];
				if(s1.charAt(0) == "\"") {
					this.game.console._console.print("*" + s1 + "*");
				} else {
					this.game.console._console.print(s1);
				}
			}
			ret = 1;
		} else if(Lambda.has(["look","l","examine","x"],cmd)) {
			if(this.isExamined) {
				var s2 = "You have already examined " + this.name + ".";
				if(s2.charAt(0) == "\"") {
					this.game.console._console.print("*" + s2 + "*");
				} else {
					this.game.console._console.print(s2);
				}
				if(this.examineNote != null) {
					var s3 = this.examineNote;
					if(s3.charAt(0) == "\"") {
						this.game.console._console.print("*" + s3 + "*");
					} else {
						this.game.console._console.print(s3);
					}
				}
				return 1;
			}
			var res1 = this.game.player.roll("spotHidden");
			if(res1 == _$RollResult.ROLL_SUCCESS || res1 == _$RollResult.ROLL_CRIT) {
				this.isExamined = true;
				var s4 = "You furtively examine " + this.name + " looking for clues on conversation topics.";
				if(s4.charAt(0) == "\"") {
					this.game.console._console.print("*" + s4 + "*");
				} else {
					this.game.console._console.print(s4);
				}
				if(this.examineNote != null) {
					var s5 = this.examineNote;
					if(s5.charAt(0) == "\"") {
						this.game.console._console.print("*" + s5 + "*");
					} else {
						this.game.console._console.print(s5);
					}
				}
			} else {
				var s6 = "You have failed to discover much about conversation topics with the " + this.name + ".";
				if(s6.charAt(0) == "\"") {
					this.game.console._console.print("*" + s6 + "*");
				} else {
					this.game.console._console.print(s6);
				}
			}
			this.gainHints(res1);
			ret = 1;
		} else if(cmd == "mode" || cmd == "m") {
			if(tokensFull.length < 1) {
				if("Available modes are: cautious (c), intimate (i) and aggressive (a).".charAt(0) == "\"") {
					this.game.console._console.print("*" + "Available modes are: cautious (c), intimate (i) and aggressive (a)." + "*");
				} else {
					this.game.console._console.print("Available modes are: cautious (c), intimate (i) and aggressive (a).");
				}
				return 1;
			}
			if(tokensFull[0] == "cautious" || tokensFull[0] == "c") {
				this.chatMode = ChatMode.CHAT_MODE_CAUTIOUS;
			} else if(tokensFull[0] == "intimate" || tokensFull[0] == "i") {
				this.chatMode = ChatMode.CHAT_MODE_INTIMATE;
			} else if(tokensFull[0] == "aggressive" || tokensFull[0] == "a") {
				this.chatMode = ChatMode.CHAT_MODE_AGGRESSIVE;
			} else {
				if("No such mode.".charAt(0) == "\"") {
					this.game.console._console.print("*" + "No such mode." + "*");
				} else {
					this.game.console._console.print("No such mode.");
				}
				return 1;
			}
			var s7 = new StringBuf();
			this.printModeString(s7);
			var s8 = s7.b;
			if(s8.charAt(0) == "\"") {
				this.game.console._console.print("*" + s8 + "*");
			} else {
				this.game.console._console.print(s8);
			}
			return 1;
		} else if(cmd == "probe" || cmd == "p") {
			if(tokens.length < 1) {
				ChatConst.printCommonTopics(this.game);
				return 1;
			}
			var info1 = ChatConst.getCommonTopic(tokens[0]);
			if(info1 == null) {
				this.game.console._console.print("<span class=consoleSys>" + "I have no idea what that is." + "</span>");
				ChatConst.printCommonTopics(this.game);
				return 1;
			}
			ret = this.probeCommand(info1);
		} else if(cmd == "roll" || cmd == "r") {
			if(tokens.length < 1) {
				SkillConst.printSkills(this.game);
				return 1;
			}
			var skill = SkillConst.getInfo(tokens[0]);
			if(skill == null) {
				if("No such skill found.".charAt(0) == "\"") {
					this.game.console._console.print("*" + "No such skill found." + "*");
				} else {
					this.game.console._console.print("No such skill found.");
				}
				return -1;
			}
			var key = skill.id;
			var _this = this.game.player.skills;
			var playerSkill = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
			if(playerSkill.val == 0) {
				if("You do not have this skill.".charAt(0) == "\"") {
					this.game.console._console.print("*" + "You do not have this skill." + "*");
				} else {
					this.game.console._console.print("You do not have this skill.");
				}
				return -1;
			}
			ret = this.rollCommand(skill,playerSkill);
		} else {
			return 0;
		}
		if(ret == 1 && this.game.get_state() == _$GameState.STATE_CHAT) {
			this.turnPre();
			if(this.get_anxiety() >= 100) {
				this.finishChat(false);
				return 1;
			}
			var _g = 0;
			var _g1 = this.effects;
			while(_g < _g1.length) {
				var e = _g1[_g];
				++_g;
				e.timer--;
				if(e.timer == 0) {
					HxOverrides.remove(this.effects,e);
					e.finish();
					if(this.game.get_state() != _$GameState.STATE_CHAT) {
						return 1;
					}
				}
			}
			if(this.evalTimer > 0) {
				this.evalTimer--;
			}
			if(this.game.debug.evaluate && this.evalTimer == 0) {
				this.evalTimer = 1;
			}
			if(this.chatStateTimer > 0) {
				this.chatStateTimer--;
				if(this.chatStateTimer == 0) {
					var s9 = this.nameUpper + " has somewhat calmed down.";
					if(s9.charAt(0) == "\"") {
						this.game.console._console.print("*" + s9 + "*");
					} else {
						this.game.console._console.print(s9);
					}
					this.set_chatState(ChatState.NPC_STATE_NORMAL);
				}
			}
			this.printState();
		}
		return ret;
	}
	,chatCommand: function() {
		var res = this.game.player.roll("charisma");
		var s_b = "";
		var rnd = ["You make small talk with " + this.name + ".","You converse with " + this.name + ".","You chat with " + this.name + " about trivialities."];
		s_b += Std.string(rnd[Std.random(rnd.length)]);
		this.gainHints(res);
		if(res != _$RollResult.ROLL_SUCCESS && res != _$RollResult.ROLL_CRIT) {
			var s = s_b;
			if(s.charAt(0) == "\"") {
				this.game.console._console.print("*" + s + "*");
			} else {
				this.game.console._console.print(s);
			}
			return 1;
		}
		var isFavorite = false;
		var rnd1 = Std.random(100);
		if(this.get_chatState() == ChatState.NPC_STATE_NORMAL && rnd1 < 50 || this.get_chatState() == ChatState.NPC_STATE_CONFUSION && rnd1 < 50 || this.get_chatState() == ChatState.NPC_STATE_ENMITY && rnd1 < 20 || this.get_chatState() == ChatState.NPC_STATE_AGREEMENT && rnd1 < 80) {
			isFavorite = true;
		}
		var tmp = [];
		var _this = this.chatCommonTopics;
		var t = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(t.hasNext()) {
			var t1 = t.next();
			if(t1.isFavorite == isFavorite && t1.points < t1.maxPoints) {
				tmp.push(t1);
			}
		}
		if(tmp.length == 0) {
			var s1 = s_b;
			if(s1.charAt(0) == "\"") {
				this.game.console._console.print("*" + s1 + "*");
			} else {
				this.game.console._console.print(s1);
			}
			return 1;
		}
		var topic = tmp[Std.random(tmp.length)];
		var points = res == _$RollResult.ROLL_SUCCESS ? 1 : 3;
		if(topic.points + points > topic.maxPoints) {
			points = topic.maxPoints - topic.points;
		}
		topic.points += points;
		var info = ChatConst.getCommonTopic(topic.id);
		s_b += Std.string(" [+" + points + " " + info.name + "]");
		var s2 = s_b;
		if(s2.charAt(0) == "\"") {
			this.game.console._console.print("*" + s2 + "*");
		} else {
			this.game.console._console.print(s2);
		}
		return 1;
	}
	,discussCommonCommand: function(info) {
		var key = info.id;
		var _this = this.chatCommonTopics;
		var chatTopic = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
		if(chatTopic == null) {
			if(this.chatTopicNotInterested != null) {
				var s = this.chatTopicNotInterested;
				if(s.charAt(0) == "\"") {
					this.game.console._console.print("*" + s + "*");
				} else {
					this.game.console._console.print(s);
				}
			} else {
				var s1 = "You spend some time discussing " + info.name + "with " + this.name + ". It does not appear that " + this.pronoun + " is interested.";
				if(s1.charAt(0) == "\"") {
					this.game.console._console.print("*" + s1 + "*");
				} else {
					this.game.console._console.print(s1);
				}
			}
			return 1;
		}
		if(chatTopic.points <= 0) {
			if("This topic is currently exhausted.".charAt(0) == "\"") {
				this.game.console._console.print("*" + "This topic is currently exhausted." + "*");
			} else {
				this.game.console._console.print("This topic is currently exhausted.");
			}
			return -1;
		}
		chatTopic.points--;
		var s_b = "";
		s_b += "You ";
		if(this.chatMode == ChatMode.CHAT_MODE_CAUTIOUS) {
			s_b += Std.string("discreetly converse about **" + info.nameLower + "** with " + this.name);
		} else if(this.chatMode == ChatMode.CHAT_MODE_INTIMATE) {
			s_b += Std.string("intimately discuss **" + info.nameLower + "** with " + this.name);
		} else if(this.chatMode == ChatMode.CHAT_MODE_AGGRESSIVE) {
			s_b += Std.string("aggressively confront " + this.name + " about **" + info.nameLower + "**");
		}
		var skillID = null;
		if(this.chatMode == ChatMode.CHAT_MODE_CAUTIOUS) {
			skillID = "fastTalk";
		} else if(this.chatMode == ChatMode.CHAT_MODE_INTIMATE) {
			skillID = "persuade";
		} else if(this.chatMode == ChatMode.CHAT_MODE_AGGRESSIVE) {
			skillID = "knowledge";
		}
		var res = this.game.player.roll(skillID);
		var coef = 1.0;
		if(res == _$RollResult.ROLL_FUMBLE) {
			s_b += " sounding like a blabbering fool.";
			coef = 0.25;
		} else if(res == _$RollResult.ROLL_FAIL) {
			s_b += " with a miniscule amount of expertise.";
			coef = 0.5;
		} else if(res == _$RollResult.ROLL_SUCCESS) {
			s_b += " with a degree of competence.";
			coef = 1.0;
		} else if(res == _$RollResult.ROLL_CRIT) {
			s_b += " making excellent points.";
			coef = 1.5;
		}
		var hint = this.getHint(ChatHintType.HINT_COMMON_TOPIC,info.id);
		if(hint.stage < 4) {
			hint.stage = 4;
			hint.text = hint.fullText;
			s_b += Std.string(" It appears that " + this.pronoun + (chatTopic.isFavorite ? " loves" : " hates") + " talking about it.");
		}
		var oldChatState = this.get_chatState();
		if(this.get_chatState() == ChatState.NPC_STATE_NORMAL && chatTopic.isFavorite) {
			if(this.chatMode == ChatMode.CHAT_MODE_CAUTIOUS) {
				var _g = this;
				_g.set_rapport(_g.get_rapport() + (10 * coef | 0));
			} else if(this.chatMode == ChatMode.CHAT_MODE_INTIMATE) {
				var _g1 = this;
				_g1.set_rapport(_g1.get_rapport() + (10 * coef | 0));
				var _g2 = this;
				_g2.set_anxiety(_g2.get_anxiety() - (10 * coef | 0));
			} else if(this.chatMode == ChatMode.CHAT_MODE_AGGRESSIVE) {
				var _g3 = this;
				_g3.set_anxiety(_g3.get_anxiety() + (10 * coef | 0));
				var rnd = Std.random(100);
				if(rnd < 80) {
					this.set_chatState(ChatState.NPC_STATE_CONFUSION);
				} else {
					this.set_chatState(ChatState.NPC_STATE_AGREEMENT);
				}
			}
		} else if(this.get_chatState() == ChatState.NPC_STATE_NORMAL && !chatTopic.isFavorite) {
			if(this.chatMode == ChatMode.CHAT_MODE_CAUTIOUS) {
				var _g4 = this;
				_g4.set_anxiety(_g4.get_anxiety() - (10 * coef | 0));
			} else if(this.chatMode == ChatMode.CHAT_MODE_INTIMATE) {
				var _g5 = this;
				_g5.set_rapport(_g5.get_rapport() - (10 * coef | 0));
				var _g6 = this;
				_g6.set_anxiety(_g6.get_anxiety() + (10 * coef | 0));
			} else if(this.chatMode == ChatMode.CHAT_MODE_AGGRESSIVE) {
				var _g7 = this;
				_g7.set_anxiety(_g7.get_anxiety() + (10 * coef | 0));
				var rnd1 = Std.random(100);
				if(rnd1 < 80) {
					this.set_chatState(ChatState.NPC_STATE_CONFUSION);
				} else {
					this.set_chatState(ChatState.NPC_STATE_ENMITY);
				}
			}
		} else if(this.get_chatState() == ChatState.NPC_STATE_CONFUSION && chatTopic.isFavorite) {
			if(this.chatMode == ChatMode.CHAT_MODE_CAUTIOUS) {
				var _g8 = this;
				_g8.set_rapport(_g8.get_rapport() - (10 * coef | 0));
			} else if(this.chatMode == ChatMode.CHAT_MODE_INTIMATE) {
				var rnd2 = Std.random(100);
				if(rnd2 < 80) {
					this.set_chatState(ChatState.NPC_STATE_AGREEMENT);
				} else {
					this.set_chatState(ChatState.NPC_STATE_ENMITY);
				}
			} else if(this.chatMode == ChatMode.CHAT_MODE_AGGRESSIVE) {
				var _g9 = this;
				_g9.set_anxiety(_g9.get_anxiety() + (10 * coef | 0));
				var rnd3 = Std.random(100);
				if(rnd3 < 80) {
					this.set_chatState(ChatState.NPC_STATE_ENMITY);
				} else {
					this.set_chatState(ChatState.NPC_STATE_AGREEMENT);
				}
			}
		} else if(this.get_chatState() == ChatState.NPC_STATE_CONFUSION && !chatTopic.isFavorite) {
			if(this.chatMode == ChatMode.CHAT_MODE_CAUTIOUS) {
				var _g10 = this;
				_g10.set_anxiety(_g10.get_anxiety() + (10 * coef | 0));
			} else if(this.chatMode == ChatMode.CHAT_MODE_INTIMATE) {
				var _g11 = this;
				_g11.set_rapport(_g11.get_rapport() + (10 * coef | 0));
				var _g12 = this;
				_g12.set_anxiety(_g12.get_anxiety() - (10 * coef | 0));
			} else if(this.chatMode == ChatMode.CHAT_MODE_AGGRESSIVE) {
				var _g13 = this;
				_g13.set_anxiety(_g13.get_anxiety() + (10 * coef | 0));
				var rnd4 = Std.random(100);
				if(rnd4 < 80) {
					this.set_chatState(ChatState.NPC_STATE_ENMITY);
				} else {
					this.set_chatState(ChatState.NPC_STATE_AGREEMENT);
				}
			}
		} else if(this.get_chatState() == ChatState.NPC_STATE_ENMITY && chatTopic.isFavorite) {
			if(this.chatMode == ChatMode.CHAT_MODE_CAUTIOUS) {
				var _g14 = this;
				_g14.set_rapport(_g14.get_rapport() - (10 * coef | 0));
				var rnd5 = Std.random(100);
				if(rnd5 < 10) {
					this.set_chatState(ChatState.NPC_STATE_CONFUSION);
				}
			} else if(this.chatMode == ChatMode.CHAT_MODE_INTIMATE) {
				var _g15 = this;
				_g15.set_rapport(_g15.get_rapport() - (20 * coef | 0));
				var rnd6 = Std.random(100);
				if(rnd6 < 10) {
					this.set_chatState(ChatState.NPC_STATE_CONFUSION);
				}
			} else if(this.chatMode == ChatMode.CHAT_MODE_AGGRESSIVE) {
				var _g16 = this;
				_g16.set_rapport(_g16.get_rapport() - (30 * coef | 0));
			}
		} else if(this.get_chatState() == ChatState.NPC_STATE_ENMITY && !chatTopic.isFavorite) {
			if(this.chatMode == ChatMode.CHAT_MODE_CAUTIOUS) {
				var _g17 = this;
				_g17.set_anxiety(_g17.get_anxiety() + (10 * coef | 0));
				var rnd7 = Std.random(100);
				if(rnd7 < 20) {
					this.set_chatState(ChatState.NPC_STATE_CONFUSION);
				}
			} else if(this.chatMode == ChatMode.CHAT_MODE_INTIMATE) {
				var _g18 = this;
				_g18.set_anxiety(_g18.get_anxiety() + (20 * coef | 0));
				var rnd8 = Std.random(100);
				if(rnd8 < 20) {
					this.set_chatState(ChatState.NPC_STATE_CONFUSION);
				}
			} else if(this.chatMode == ChatMode.CHAT_MODE_AGGRESSIVE) {
				var _g19 = this;
				_g19.set_anxiety(_g19.get_anxiety() + (30 * coef | 0));
			}
		} else if(this.get_chatState() == ChatState.NPC_STATE_AGREEMENT && chatTopic.isFavorite) {
			if(this.chatMode == ChatMode.CHAT_MODE_CAUTIOUS) {
				var _g20 = this;
				_g20.set_rapport(_g20.get_rapport() + (10 * coef | 0));
				var rnd9 = Std.random(100);
				if(rnd9 < 10) {
					this.set_chatState(ChatState.NPC_STATE_CONFUSION);
				}
			} else if(this.chatMode == ChatMode.CHAT_MODE_INTIMATE) {
				var _g21 = this;
				_g21.set_rapport(_g21.get_rapport() + (20 * coef | 0));
				var rnd10 = Std.random(100);
				if(rnd10 < 20) {
					this.set_chatState(ChatState.NPC_STATE_CONFUSION);
				}
			} else if(this.chatMode == ChatMode.CHAT_MODE_AGGRESSIVE) {
				var _g22 = this;
				_g22.set_rapport(_g22.get_rapport() + (30 * coef | 0));
				var rnd11 = Std.random(100);
				if(rnd11 < 10) {
					this.set_chatState(ChatState.NPC_STATE_CONFUSION);
				} else if(rnd11 < 20) {
					this.set_chatState(ChatState.NPC_STATE_ENMITY);
				}
			}
		} else if(this.get_chatState() == ChatState.NPC_STATE_AGREEMENT && !chatTopic.isFavorite) {
			if(this.chatMode == ChatMode.CHAT_MODE_CAUTIOUS) {
				var _g23 = this;
				_g23.set_anxiety(_g23.get_anxiety() - (10 * coef | 0));
				var rnd12 = Std.random(100);
				if(rnd12 < 10) {
					this.set_chatState(ChatState.NPC_STATE_CONFUSION);
				}
			} else if(this.chatMode == ChatMode.CHAT_MODE_INTIMATE) {
				var _g24 = this;
				_g24.set_anxiety(_g24.get_anxiety() - (20 * coef | 0));
				var rnd13 = Std.random(100);
				if(rnd13 < 20) {
					this.set_chatState(ChatState.NPC_STATE_CONFUSION);
				}
			} else if(this.chatMode == ChatMode.CHAT_MODE_AGGRESSIVE) {
				var _g25 = this;
				_g25.set_anxiety(_g25.get_anxiety() - (30 * coef | 0));
				var rnd14 = Std.random(100);
				if(rnd14 < 10) {
					this.set_chatState(ChatState.NPC_STATE_CONFUSION);
				} else if(rnd14 < 20) {
					this.set_chatState(ChatState.NPC_STATE_ENMITY);
				}
			}
		}
		if(oldChatState != this.get_chatState()) {
			if(this.get_chatState() == ChatState.NPC_STATE_CONFUSION) {
				s_b += Std.string(" You have managed to confuse " + this.name + ".");
			} else if(this.get_chatState() == ChatState.NPC_STATE_ENMITY) {
				s_b += Std.string(" You have succeeded in making " + this.name + " annoyed.");
			} else if(this.get_chatState() == ChatState.NPC_STATE_AGREEMENT) {
				s_b += Std.string(" " + this.nameUpper + " completely agrees with you now.");
			}
		}
		var s2 = s_b;
		if(s2.charAt(0) == "\"") {
			this.game.console._console.print("*" + s2 + "*");
		} else {
			this.game.console._console.print(s2);
		}
		return 1;
	}
	,setState: function(st) {
		if(this.get_chatState() == st) {
			return;
		}
		this.set_chatState(ChatState.NPC_STATE_AGREEMENT);
		if(this.get_chatState() == ChatState.NPC_STATE_CONFUSION) {
			var s = "You have managed to confuse " + this.name + ".";
			if(s.charAt(0) == "\"") {
				this.game.console._console.print("*" + s + "*");
			} else {
				this.game.console._console.print(s);
			}
		} else if(this.get_chatState() == ChatState.NPC_STATE_ENMITY) {
			var s1 = "You have succeeded in making " + this.name + " annoyed.";
			if(s1.charAt(0) == "\"") {
				this.game.console._console.print("*" + s1 + "*");
			} else {
				this.game.console._console.print(s1);
			}
		} else if(this.get_chatState() == ChatState.NPC_STATE_AGREEMENT) {
			var s2 = this.nameUpper + " completely agrees with you now.";
			if(s2.charAt(0) == "\"") {
				this.game.console._console.print("*" + s2 + "*");
			} else {
				this.game.console._console.print(s2);
			}
		}
	}
	,discussSpecialCommand: function(info) {
		var key = info.id;
		var _this = this.chatSpecialTopics;
		var topic = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
		if(!topic.isEnabled) {
			var s = this.nameUpper + " is not interested in this topic.";
			if(s.charAt(0) == "\"") {
				this.game.console._console.print("*" + s + "*");
			} else {
				this.game.console._console.print(s);
			}
			return -1;
		}
		var hint = this.getHint(ChatHintType.HINT_SPECIAL_TOPIC,info.id);
		if(hint.stage < 4) {
			hint.stage = 4;
			hint.text = hint.fullText;
		}
		if(topic.func != null) {
			topic.func();
		}
		return 1;
	}
	,probeCommand: function(info) {
		var key = info.id;
		var _this = this.chatCommonTopics;
		var topic = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
		if(topic == null) {
			if(this.chatTopicUnknown != null) {
				var s = this.chatTopicUnknown;
				if(s.charAt(0) == "\"") {
					this.game.console._console.print("*" + s + "*");
				} else {
					this.game.console._console.print(s);
				}
			} else {
				var s1 = "You spend some time probing " + this.name + " on " + info.nameLower + " topic. It does not appear that they're interested.";
				if(s1.charAt(0) == "\"") {
					this.game.console._console.print("*" + s1 + "*");
				} else {
					this.game.console._console.print(s1);
				}
			}
			return 1;
		}
		var hint = this.getHint(ChatHintType.HINT_COMMON_TOPIC,info.id);
		var res = this.game.player.roll("fastTalk");
		var s_b = "";
		s_b += Std.string("You probe " + this.name + " on the topic of " + info.nameLower + ".");
		if(hint.stage < 4) {
			s_b += Std.string(" It appears that " + this.pronoun + (topic.isFavorite ? " loves" : " hates") + " talking about it.");
			hint.stage = 4;
			hint.text = hint.fullText;
		}
		if(topic.points < topic.maxPoints && (res == _$RollResult.ROLL_SUCCESS || res == _$RollResult.ROLL_CRIT)) {
			var points = res == _$RollResult.ROLL_SUCCESS ? 1 : 3;
			if(topic.points + points > topic.maxPoints) {
				points = topic.maxPoints - topic.points;
			}
			topic.points += points;
			s_b += Std.string(" [+" + points + " " + info.name + "]");
		}
		var s2 = s_b;
		if(s2.charAt(0) == "\"") {
			this.game.console._console.print("*" + s2 + "*");
		} else {
			this.game.console._console.print(s2);
		}
		this.gainHints(res);
		return 1;
	}
	,rollCommand: function(info,playerSkill) {
		var key = info.id;
		var _this = this.chatSkills;
		var chatSkill = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
		if(chatSkill == null || !chatSkill.isEnabled) {
			if("This skill is useless here.".charAt(0) == "\"") {
				this.game.console._console.print("*" + "This skill is useless here." + "*");
			} else {
				this.game.console._console.print("This skill is useless here.");
			}
			return 1;
		}
		var mods = null;
		if(this.get_chatState() != ChatState.NPC_STATE_NORMAL) {
			var mod = 10;
			if(this.get_chatState() == ChatState.NPC_STATE_CONFUSION) {
				mod = -5;
			} else if(this.get_chatState() == ChatState.NPC_STATE_AGREEMENT) {
				mod = 10;
			} else if(this.get_chatState() == ChatState.NPC_STATE_ENMITY) {
				mod = -10;
			}
			mods = [{ src : "NPC state", val : mod}];
		}
		var roll = this.game.player.roll(info.id,mods);
		if(roll == _$RollResult.ROLL_CRIT || roll == _$RollResult.ROLL_SUCCESS) {
			if(chatSkill.print != null) {
				var s = chatSkill.print;
				if(s.charAt(0) == "\"") {
					this.game.console._console.print("*" + s + "*");
				} else {
					this.game.console._console.print(s);
				}
			}
			if(chatSkill.say != null) {
				this.game.console._console.print("*\"" + chatSkill.say + "\"*" + "");
			}
			this.scene.location.handleActionResult(chatSkill.result);
		} else {
			var _g = 0;
			var _g1 = this.hints;
			while(_g < _g1.length) {
				var hint = _g1[_g];
				++_g;
				if(hint.type == ChatHintType.HINT_SKILL && hint.id == info.id) {
					hint.stage = 4;
					this.updateHintText(hint);
					break;
				}
			}
			if(chatSkill.sayFail != null) {
				this.game.console._console.print("*\"" + chatSkill.sayFail + "\"*" + "");
			}
		}
		var id = chatSkill.id;
		if(!(!this.chatSkills.get(id).isEnabled)) {
			var _this1 = this.game.console._console;
			this.chatSkills.get(id).isEnabled = false;
		}
		return 1;
	}
	,initHints: function() {
		this.hints = [];
		var _this = this.chatCommonTopics;
		var topic = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(topic.hasNext()) {
			var topic1 = topic.next();
			this.hints.push({ type : ChatHintType.HINT_COMMON_TOPIC, text : "", id : topic1.id, knownLetters : [], fullText : ChatConst.getCommonTopic(topic1.id).name, stage : 0});
		}
		var _this1 = this.chatSpecialTopics;
		var topic2 = new haxe_ds__$StringMap_StringMapIterator(_this1,_this1.arrayKeys());
		while(topic2.hasNext()) {
			var topic3 = topic2.next();
			var info = this.game.adventure.getByID(topic3.id);
			if(!info.isKnown) {
				continue;
			}
			this.hints.push({ type : ChatHintType.HINT_SPECIAL_TOPIC, text : "", id : topic3.id, knownLetters : [], fullText : info.name, stage : 0});
		}
		var _this2 = this.chatSkills;
		var skill = new haxe_ds__$StringMap_StringMapIterator(_this2,_this2.arrayKeys());
		while(skill.hasNext()) {
			var skill1 = skill.next();
			this.hints.push({ type : ChatHintType.HINT_SKILL, text : "", id : skill1.id, knownLetters : [], fullText : SkillConst.getByID(skill1.id).name, stage : 0});
		}
	}
	,gainHints: function(res) {
		var _g = 0;
		var _g1 = this.hints;
		while(_g < _g1.length) {
			var hint = _g1[_g];
			++_g;
			if(res == _$RollResult.ROLL_FUMBLE) {
				if(Std.random(100) < 75) {
					continue;
				}
			} else if(res == _$RollResult.ROLL_FAIL) {
				if(Std.random(100) < 50) {
					continue;
				}
			} else if(res == _$RollResult.ROLL_SUCCESS) {
				if(Std.random(100) < 25) {
					continue;
				}
			}
			if(hint.stage == 0) {
				hint.stage = 1;
			} else if(hint.stage == 1) {
				hint.stage = 2;
				this.openHintLetter(hint);
			} else if(hint.stage == 2) {
				if(Std.random(100) < 50) {
					hint.stage = 3;
				}
				this.openHintLetter(hint);
			} else if(hint.stage == 3) {
				this.openHintLetter(hint);
			}
		}
	}
	,openHintLetter: function(hint) {
		if(hint.stage == 4 || hint.knownLetters.length >= hint.fullText.length) {
			return;
		}
		var idx = Std.random(hint.fullText.length);
		hint.knownLetters.push(idx);
		this.updateHintText(hint);
	}
	,updateHintText: function(hint) {
		if(hint.stage == 4) {
			hint.text = hint.fullText;
			return;
		}
		var text = [];
		var firstLetterKnown = false;
		var lastLetterKnown = false;
		var _g = 0;
		var _g1 = hint.knownLetters;
		while(_g < _g1.length) {
			var idx = _g1[_g];
			++_g;
			text[idx] = hint.fullText.charAt(idx);
			if(idx == 0) {
				firstLetterKnown = true;
			}
			if(idx == hint.fullText.length - 1) {
				lastLetterKnown = true;
			}
		}
		var _g11 = 0;
		var _g2 = text.length;
		while(_g11 < _g2) {
			var i = _g11++;
			if(text[i] == null) {
				text[i] = "?";
			}
		}
		if(!firstLetterKnown) {
			while(text[0] == "?") text.shift();
			text.unshift("+");
		}
		hint.text = text.join("");
		if(!lastLetterKnown) {
			hint.text += "+";
		}
	}
	,finishChat: function(success) {
		if(success) {
			this.finishChatSuccess();
		} else {
			this.finishChatFail();
		}
		this.game.set_state(_$GameState.STATE_LOCATION);
		this.game.npc = null;
	}
	,printState: function() {
		var ss = new StringBuf();
		if(this.get_chatState() == ChatState.NPC_STATE_CONFUSION) {
			ss.b += Std.string(this.nameUpper + " looks baffled.");
		} else if(this.get_chatState() == ChatState.NPC_STATE_ENMITY) {
			ss.b += Std.string(this.nameUpper + " looks irritated.");
		} else if(this.get_chatState() == ChatState.NPC_STATE_AGREEMENT) {
			ss.b += Std.string(this.nameUpper + " looks at you smiling.");
		} else if(this.get_chatState() == ChatState.NPC_STATE_NORMAL) {
			ss.b += Std.string(this.nameUpper + " looks at you expectantly.");
		}
		if(this.evalTimer > 0 && this.get_chatState() != ChatState.NPC_STATE_NORMAL) {
			ss.b += Std.string(" " + ("<span class=consoleSys>[" + (this.chatStateTimer + " turns left") + "]</span>"));
		}
		ss.b += "\n";
		if(this.evalTimer > 0) {
			var _g = 0;
			var _g1 = this.effects;
			while(_g < _g1.length) {
				var e = _g1[_g];
				++_g;
				e.print(ss,e);
			}
			var x = "<span class=consoleSys>[" + ("Anxiety: " + this.get_anxiety() + "/100, " + "Rapport: " + this.get_rapport() + "/100, " + "Eval timer: " + this.evalTimer + " turns left") + "]</span>\n";
			ss.b += Std.string(x);
		}
		this.printModeString(ss);
		var hintstr = this.printHints();
		if(hintstr.length > 0) {
			ss.b += Std.string("Hints: " + hintstr);
		}
		var s = ss.b;
		if(s.charAt(0) == "\"") {
			this.game.console._console.print("*" + s + "*");
		} else {
			this.game.console._console.print(s);
		}
	}
	,printModeString: function(s) {
		s.b += "Mode: ";
		if(this.chatMode == ChatMode.CHAT_MODE_CAUTIOUS) {
			s.b += "Cautious <span class=consoleSys>";
			if(this.get_chatState() == ChatState.NPC_STATE_NORMAL) {
				s.b += "[L: R+, H: A-]";
			} else if(this.get_chatState() == ChatState.NPC_STATE_CONFUSION) {
				s.b += "[L: R-, H: A+]";
			} else if(this.get_chatState() == ChatState.NPC_STATE_ENMITY) {
				s.b += "[L: R- %Conf, H: A+ %Conf]";
			} else if(this.get_chatState() == ChatState.NPC_STATE_AGREEMENT) {
				s.b += "[L: R+ %Conf, H: A- %Conf]";
			}
		} else if(this.chatMode == ChatMode.CHAT_MODE_INTIMATE) {
			s.b += "Intimate <span class=consoleSys>";
			if(this.get_chatState() == ChatState.NPC_STATE_NORMAL) {
				s.b += "[L: R+ A-, H: R- A+]";
			} else if(this.get_chatState() == ChatState.NPC_STATE_CONFUSION) {
				s.b += "[L: %%Agree %Enmity, H: R+ A-]";
			} else if(this.get_chatState() == ChatState.NPC_STATE_ENMITY) {
				s.b += "[L: R-- %Conf, H: A++ %Conf]";
			} else if(this.get_chatState() == ChatState.NPC_STATE_AGREEMENT) {
				s.b += "[L: R++ %Conf, H: A-- %Conf]";
			}
		} else if(this.chatMode == ChatMode.CHAT_MODE_AGGRESSIVE) {
			s.b += "Aggressive <span class=consoleSys>";
			if(this.get_chatState() == ChatState.NPC_STATE_NORMAL) {
				s.b += "[L: A+ %%Conf %Agree, H: A+ %%Conf %Enmity]";
			} else if(this.get_chatState() == ChatState.NPC_STATE_CONFUSION) {
				s.b += "[L: A+ %%Enmity %Agree, H: A+ %%Enmity %Agree]";
			} else if(this.get_chatState() == ChatState.NPC_STATE_ENMITY) {
				s.b += "[L: R---, H: A+++]";
			} else if(this.get_chatState() == ChatState.NPC_STATE_AGREEMENT) {
				s.b += "[L: R+++ %Conf, H: A--- %Conf %Enmity]";
			}
		}
		s.b += "</span>\n";
	}
	,printHints: function() {
		var sb_b = "";
		var _g = 0;
		var _g1 = this.hints;
		while(_g < _g1.length) {
			var hint = _g1[_g];
			++_g;
			var tmp;
			var tmp1;
			if(hint.type == ChatHintType.HINT_SPECIAL_TOPIC) {
				var key = hint.id;
				var _this = this.chatSpecialTopics;
				tmp1 = !(__map_reserved[key] != null ? _this.getReserved(key) : _this.h[key]).isEnabled;
			} else {
				tmp1 = false;
			}
			if(!tmp1) {
				if(hint.type == ChatHintType.HINT_SKILL) {
					var key1 = hint.id;
					var _this1 = this.chatSkills;
					tmp = !(__map_reserved[key1] != null ? _this1.getReserved(key1) : _this1.h[key1]).isEnabled;
				} else {
					tmp = false;
				}
			} else {
				tmp = true;
			}
			if(tmp) {
				continue;
			}
			if(hint.stage == 0) {
				continue;
			} else if(hint.stage == 1) {
				sb_b += "[?] ";
				continue;
			}
			sb_b += "[";
			if(hint.stage >= 3) {
				if(hint.type == ChatHintType.HINT_SKILL) {
					sb_b += "Skill ";
				} else if(hint.type == ChatHintType.HINT_COMMON_TOPIC || hint.type == ChatHintType.HINT_SPECIAL_TOPIC) {
					sb_b += "Topic ";
				} else if(hint.type == ChatHintType.HINT_ITEM) {
					sb_b += "Item ";
				}
			}
			if(hint.type == ChatHintType.HINT_COMMON_TOPIC && hint.stage == 4) {
				var key2 = hint.id;
				var _this2 = this.chatCommonTopics;
				var topic = __map_reserved[key2] != null ? _this2.getReserved(key2) : _this2.h[key2];
				sb_b += Std.string("<span class=topic" + (topic.isFavorite ? "Loves" : "Hates") + ">" + hint.text + "</span>");
				if(this.evalTimer > 0) {
					sb_b += Std.string(" (" + topic.points + ")");
				}
			} else {
				sb_b += Std.string(hint.text);
			}
			sb_b += "] ";
		}
		return sb_b;
	}
	,addEffect: function(e) {
		this.effects.push(e);
	}
	,say: function(s,sysText) {
		this.game.console._console.print("*\"" + s + "\"*" + (sysText != null ? " " + ("<span class=consoleSys>[" + sysText + "]</span>\n") : ""));
	}
	,sayRandom: function(lines) {
		var _this = this.game.console;
		var s = "*\"" + lines[Std.random(lines.length)] + "\"*";
		_this._console.print(s);
	}
	,print: function(s) {
		if(s.charAt(0) == "\"") {
			this.game.console._console.print("*" + s + "*");
		} else {
			this.game.console._console.print(s);
		}
	}
	,printRandom: function(lines) {
		var s = lines[Std.random(lines.length)];
		if(s.charAt(0) == "\"") {
			this.game.console._console.print("*" + s + "*");
		} else {
			this.game.console._console.print(s);
		}
	}
	,sysn: function(s) {
		return "<span class=consoleSys>[" + s + "]</span>";
	}
	,sys: function(s) {
		return "<span class=consoleSys>[" + s + "]</span>\n";
	}
	,get_anxiety: function() {
		return this._anxiety;
	}
	,set_anxiety: function(v) {
		if(v == this._anxiety) {
			return v;
		}
		if(v < 0) {
			v = 0;
		}
		if(v > 100) {
			v = 100;
		}
		var mod = v - this._anxiety;
		var s = "anxiety " + this._anxiety + " " + (mod > 0 ? "+" : "") + mod + " = " + v;
		var _this = this.game.console._console;
		this._anxiety = v;
		return v;
	}
	,getHint: function(t,id) {
		var _g = 0;
		var _g1 = this.hints;
		while(_g < _g1.length) {
			var h = _g1[_g];
			++_g;
			if(h.type == t && h.id == id) {
				return h;
			}
		}
		return null;
	}
	,enableSkill: function(id) {
		var _this = this.chatSkills;
		if((__map_reserved[id] != null ? _this.getReserved(id) : _this.h[id]).isEnabled) {
			return;
		}
		var _this1 = this.game.console._console;
		var _this2 = this.chatSkills;
		(__map_reserved[id] != null ? _this2.getReserved(id) : _this2.h[id]).isEnabled = true;
	}
	,disableSkill: function(id) {
		var _this = this.chatSkills;
		if(!(__map_reserved[id] != null ? _this.getReserved(id) : _this.h[id]).isEnabled) {
			return;
		}
		var _this1 = this.game.console._console;
		var _this2 = this.chatSkills;
		(__map_reserved[id] != null ? _this2.getReserved(id) : _this2.h[id]).isEnabled = false;
	}
	,enableSpecialTopic: function(id) {
		var _this = this.chatSpecialTopics;
		if((__map_reserved[id] != null ? _this.getReserved(id) : _this.h[id]).isEnabled) {
			return;
		}
		var _this1 = this.game.console._console;
		var _this2 = this.chatSpecialTopics;
		(__map_reserved[id] != null ? _this2.getReserved(id) : _this2.h[id]).isEnabled = true;
	}
	,disableSpecialTopic: function(id) {
		var _this = this.chatSpecialTopics;
		if(!(__map_reserved[id] != null ? _this.getReserved(id) : _this.h[id]).isEnabled) {
			return;
		}
		var _this1 = this.game.console._console;
		var _this2 = this.chatSpecialTopics;
		(__map_reserved[id] != null ? _this2.getReserved(id) : _this2.h[id]).isEnabled = false;
	}
	,get_rapport: function() {
		return this._rapport;
	}
	,set_rapport: function(v) {
		if(v == this._rapport) {
			return v;
		}
		if(v < 0) {
			v = 0;
		}
		if(v > 100) {
			v = 100;
		}
		var mod = v - this._rapport;
		var s = "rapport " + this._rapport + " " + (mod > 0 ? "+" : "") + mod + " = " + v;
		var _this = this.game.console._console;
		this._rapport = v;
		return v;
	}
	,get_chatState: function() {
		return this._chatState;
	}
	,set_chatState: function(v) {
		if(this._chatState == v) {
			return v;
		}
		this._chatState = v;
		if(v != ChatState.NPC_STATE_NORMAL) {
			this.chatStateTimer = 4;
		}
		var s = "set state to " + Std.string(v);
		var _this = this.game.console._console;
		return v;
	}
};
var ChatHintType = { __ename__ : true, __constructs__ : ["HINT_SKILL","HINT_COMMON_TOPIC","HINT_SPECIAL_TOPIC","HINT_ITEM"] };
ChatHintType.HINT_SKILL = ["HINT_SKILL",0];
ChatHintType.HINT_SKILL.toString = $estr;
ChatHintType.HINT_SKILL.__enum__ = ChatHintType;
ChatHintType.HINT_COMMON_TOPIC = ["HINT_COMMON_TOPIC",1];
ChatHintType.HINT_COMMON_TOPIC.toString = $estr;
ChatHintType.HINT_COMMON_TOPIC.__enum__ = ChatHintType;
ChatHintType.HINT_SPECIAL_TOPIC = ["HINT_SPECIAL_TOPIC",2];
ChatHintType.HINT_SPECIAL_TOPIC.toString = $estr;
ChatHintType.HINT_SPECIAL_TOPIC.__enum__ = ChatHintType;
ChatHintType.HINT_ITEM = ["HINT_ITEM",3];
ChatHintType.HINT_ITEM.toString = $estr;
ChatHintType.HINT_ITEM.__enum__ = ChatHintType;
var ChatMode = { __ename__ : true, __constructs__ : ["CHAT_MODE_CAUTIOUS","CHAT_MODE_INTIMATE","CHAT_MODE_AGGRESSIVE"] };
ChatMode.CHAT_MODE_CAUTIOUS = ["CHAT_MODE_CAUTIOUS",0];
ChatMode.CHAT_MODE_CAUTIOUS.toString = $estr;
ChatMode.CHAT_MODE_CAUTIOUS.__enum__ = ChatMode;
ChatMode.CHAT_MODE_INTIMATE = ["CHAT_MODE_INTIMATE",1];
ChatMode.CHAT_MODE_INTIMATE.toString = $estr;
ChatMode.CHAT_MODE_INTIMATE.__enum__ = ChatMode;
ChatMode.CHAT_MODE_AGGRESSIVE = ["CHAT_MODE_AGGRESSIVE",2];
ChatMode.CHAT_MODE_AGGRESSIVE.toString = $estr;
ChatMode.CHAT_MODE_AGGRESSIVE.__enum__ = ChatMode;
var ChatState = { __ename__ : true, __constructs__ : ["NPC_STATE_NORMAL","NPC_STATE_CONFUSION","NPC_STATE_ENMITY","NPC_STATE_AGREEMENT"] };
ChatState.NPC_STATE_NORMAL = ["NPC_STATE_NORMAL",0];
ChatState.NPC_STATE_NORMAL.toString = $estr;
ChatState.NPC_STATE_NORMAL.__enum__ = ChatState;
ChatState.NPC_STATE_CONFUSION = ["NPC_STATE_CONFUSION",1];
ChatState.NPC_STATE_CONFUSION.toString = $estr;
ChatState.NPC_STATE_CONFUSION.__enum__ = ChatState;
ChatState.NPC_STATE_ENMITY = ["NPC_STATE_ENMITY",2];
ChatState.NPC_STATE_ENMITY.toString = $estr;
ChatState.NPC_STATE_ENMITY.__enum__ = ChatState;
ChatState.NPC_STATE_AGREEMENT = ["NPC_STATE_AGREEMENT",3];
ChatState.NPC_STATE_AGREEMENT.toString = $estr;
ChatState.NPC_STATE_AGREEMENT.__enum__ = ChatState;
var Player = function(g,s) {
	this.game = g;
	this.stats = s;
	this.skills = new haxe_ds_StringMap();
	SkillConst.addDefaults(this.skills);
	var _this = this.skills;
	(__map_reserved["strength"] != null ? _this.getReserved("strength") : _this.h["strength"]).val = this.stats.str * 5;
	var _this1 = this.skills;
	(__map_reserved["idea"] != null ? _this1.getReserved("idea") : _this1.h["idea"]).val = this.stats["int"] * 5;
	var _this2 = this.skills;
	(__map_reserved["knowledge"] != null ? _this2.getReserved("knowledge") : _this2.h["knowledge"]).val = this.stats.edu * 5;
	var _this3 = this.skills;
	(__map_reserved["willpower"] != null ? _this3.getReserved("willpower") : _this3.h["willpower"]).val = this.stats.pow * 5;
	var _this4 = this.skills;
	(__map_reserved["charisma"] != null ? _this4.getReserved("charisma") : _this4.h["charisma"]).val = this.stats.cha * 5;
};
Player.__name__ = true;
Player.prototype = {
	roll: function(id,mods) {
		var _this = this.skills;
		var skill = __map_reserved[id] != null ? _this.getReserved(id) : _this.h[id];
		if(skill == null) {
			throw new js__$Boot_HaxeError("No such skill: " + id);
		}
		if(skill.val == 0) {
			return _$RollResult.ROLL_ZERO;
		}
		var value = skill.val;
		var valuestr = "" + value;
		if(mods != null) {
			valuestr = "";
			var _g = 0;
			while(_g < mods.length) {
				var m = mods[_g];
				++_g;
				value += m.val;
				valuestr += " " + (m.val > 0 ? "+" : "") + m.val;
			}
			if(value < 0) {
				value = 0;
			}
			valuestr = value + " (" + skill.val + valuestr + ")";
		}
		var roll = 1 + Std.random(100);
		var success = roll <= value;
		var str = "";
		var res = null;
		if(success && roll == 1) {
			str = "<span class=rollSuccess>**Critical Success**</span>";
			res = _$RollResult.ROLL_CRIT;
		} else if(success) {
			str = "<span class=rollSuccess>Success</span>";
			res = _$RollResult.ROLL_SUCCESS;
		} else if(!success && roll == 100) {
			str = "<span class=rollFail>**Fumble**</span>";
			res = _$RollResult.ROLL_FUMBLE;
		} else if(!success) {
			str = "<span class=rollFail>Failure</span>";
			res = _$RollResult.ROLL_FAIL;
		}
		this.game.console._console.print("<span class=consoleSys>" + ("[Roll " + skill.info.name + ", " + roll + "/" + valuestr + ", " + str + "]") + "</span>");
		return res;
	}
};
var Reflect = function() { };
Reflect.__name__ = true;
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		haxe_CallStack.lastException = e;
		return null;
	}
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
Reflect.copy = function(o) {
	var o2 = { };
	var _g = 0;
	var _g1 = Reflect.fields(o);
	while(_g < _g1.length) {
		var f = _g1[_g];
		++_g;
		o2[f] = Reflect.field(o,f);
	}
	return o2;
};
var Scene = function(g) {
	this.game = g;
	this.location = null;
	this.locations = [];
	this.npcs = [];
	this.console = this.game.console;
};
Scene.__name__ = true;
Scene.prototype = {
	enter: function() {
		this.location = this.startingLocation;
		this.game.set_state(_$GameState.STATE_LOCATION);
		this.printLocation();
	}
	,printLocation: function() {
		this.console._console.print("**" + this.location.name + "**\n" + this.location.note);
		var _g = 0;
		var _g1 = this.location.objects;
		while(_g < _g1.length) {
			var o = _g1[_g];
			++_g;
			if(o.isKnown && o.locationNote != null) {
				this.console._console.print(o.locationNote);
			}
		}
	}
	,getObject: function(name) {
		var _g = 0;
		var _g1 = this.location.objects;
		while(_g < _g1.length) {
			var o = _g1[_g];
			++_g;
			if(o.isKnown && Lambda.has(o.names,name)) {
				return o;
			}
		}
		return null;
	}
	,getNPC: function(id) {
		var _g = 0;
		var _g1 = this.npcs;
		while(_g < _g1.length) {
			var npc = _g1[_g];
			++_g;
			if(npc.id == id) {
				return npc;
			}
		}
		return null;
	}
	,move: function(id) {
		var newloc = null;
		var _g = 0;
		var _g1 = this.locations;
		while(_g < _g1.length) {
			var loc = _g1[_g];
			++_g;
			if(loc.id == id) {
				newloc = loc;
				break;
			}
		}
		if(newloc == null) {
			this.game.console._console.print("<span class=\"consoleError\">" + ("No such location: " + id + ".") + "</span>");
			return;
		}
		this.location = newloc;
		this.printLocation();
	}
};
var Skill = function(val,info) {
	this.val = val;
	this.info = info;
};
Skill.__name__ = true;
var SkillConst = function() { };
SkillConst.__name__ = true;
SkillConst.addDefaults = function(skills) {
	var _g = 0;
	var _g1 = SkillConst.infos;
	while(_g < _g1.length) {
		var info = _g1[_g];
		++_g;
		var key = info.id;
		var value = new Skill(info.val,info);
		if(__map_reserved[key] != null) {
			skills.setReserved(key,value);
		} else {
			skills.h[key] = value;
		}
	}
};
SkillConst.getByID = function(id) {
	var _g = 0;
	var _g1 = SkillConst.infos;
	while(_g < _g1.length) {
		var info = _g1[_g];
		++_g;
		if(info.id == id) {
			return info;
		}
	}
	return null;
};
SkillConst.getInfo = function(name) {
	var _g = 0;
	var _g1 = SkillConst.infos;
	while(_g < _g1.length) {
		var info = _g1[_g];
		++_g;
		if(Lambda.has(info.names,name)) {
			return info;
		}
	}
	return null;
};
SkillConst.printSkills = function(game) {
	var sb_b = "";
	sb_b += "Skills: ";
	var _this = game.player.skills;
	var skill = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
	while(skill.hasNext()) {
		var skill1 = skill.next();
		sb_b += Std.string(skill1.info.name + " (" + skill1.val + "%), ");
	}
	var s = sb_b;
	s = HxOverrides.substr(s,0,s.length - 2);
	s += "</span>";
	game.console._console.print(s);
};
var Stats = function(str,con,dex,siz,$int,pow,cha,edu) {
	this.str = str;
	this.con = con;
	this.dex = dex;
	this.siz = siz;
	this["int"] = $int;
	this.pow = pow;
	this.cha = cha;
	this.edu = edu;
};
Stats.__name__ = true;
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	var v = parseInt(x,10);
	if(v == 0 && (HxOverrides.cca(x,1) == 120 || HxOverrides.cca(x,1) == 88)) {
		v = parseInt(x);
	}
	if(isNaN(v)) {
		return null;
	}
	return v;
};
Std.random = function(x) {
	if(x <= 0) {
		return 0;
	} else {
		return Math.floor(Math.random() * x);
	}
};
var StringBuf = function() {
	this.b = "";
};
StringBuf.__name__ = true;
var StringTools = function() { };
StringTools.__name__ = true;
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
var _$GameState = { __ename__ : true, __constructs__ : ["STATE_MAP","STATE_LOCATION","STATE_CHAT","STATE_COMBAT"] };
_$GameState.STATE_MAP = ["STATE_MAP",0];
_$GameState.STATE_MAP.toString = $estr;
_$GameState.STATE_MAP.__enum__ = _$GameState;
_$GameState.STATE_LOCATION = ["STATE_LOCATION",1];
_$GameState.STATE_LOCATION.toString = $estr;
_$GameState.STATE_LOCATION.__enum__ = _$GameState;
_$GameState.STATE_CHAT = ["STATE_CHAT",2];
_$GameState.STATE_CHAT.toString = $estr;
_$GameState.STATE_CHAT.__enum__ = _$GameState;
_$GameState.STATE_COMBAT = ["STATE_COMBAT",3];
_$GameState.STATE_COMBAT.toString = $estr;
_$GameState.STATE_COMBAT.__enum__ = _$GameState;
var _$RollResult = { __ename__ : true, __constructs__ : ["ROLL_ZERO","ROLL_SUCCESS","ROLL_CRIT","ROLL_FAIL","ROLL_FUMBLE"] };
_$RollResult.ROLL_ZERO = ["ROLL_ZERO",0];
_$RollResult.ROLL_ZERO.toString = $estr;
_$RollResult.ROLL_ZERO.__enum__ = _$RollResult;
_$RollResult.ROLL_SUCCESS = ["ROLL_SUCCESS",1];
_$RollResult.ROLL_SUCCESS.toString = $estr;
_$RollResult.ROLL_SUCCESS.__enum__ = _$RollResult;
_$RollResult.ROLL_CRIT = ["ROLL_CRIT",2];
_$RollResult.ROLL_CRIT.toString = $estr;
_$RollResult.ROLL_CRIT.__enum__ = _$RollResult;
_$RollResult.ROLL_FAIL = ["ROLL_FAIL",3];
_$RollResult.ROLL_FAIL.toString = $estr;
_$RollResult.ROLL_FAIL.__enum__ = _$RollResult;
_$RollResult.ROLL_FUMBLE = ["ROLL_FUMBLE",4];
_$RollResult.ROLL_FUMBLE.toString = $estr;
_$RollResult.ROLL_FUMBLE.__enum__ = _$RollResult;
var haxe_StackItem = { __ename__ : true, __constructs__ : ["CFunction","Module","FilePos","Method","LocalFunction"] };
haxe_StackItem.CFunction = ["CFunction",0];
haxe_StackItem.CFunction.toString = $estr;
haxe_StackItem.CFunction.__enum__ = haxe_StackItem;
haxe_StackItem.Module = function(m) { var $x = ["Module",1,m]; $x.__enum__ = haxe_StackItem; $x.toString = $estr; return $x; };
haxe_StackItem.FilePos = function(s,file,line) { var $x = ["FilePos",2,s,file,line]; $x.__enum__ = haxe_StackItem; $x.toString = $estr; return $x; };
haxe_StackItem.Method = function(classname,method) { var $x = ["Method",3,classname,method]; $x.__enum__ = haxe_StackItem; $x.toString = $estr; return $x; };
haxe_StackItem.LocalFunction = function(v) { var $x = ["LocalFunction",4,v]; $x.__enum__ = haxe_StackItem; $x.toString = $estr; return $x; };
var haxe_CallStack = function() { };
haxe_CallStack.__name__ = true;
haxe_CallStack.getStack = function(e) {
	if(e == null) {
		return [];
	}
	var oldValue = Error.prepareStackTrace;
	Error.prepareStackTrace = function(error,callsites) {
		var stack = [];
		var _g = 0;
		while(_g < callsites.length) {
			var site = callsites[_g];
			++_g;
			if(haxe_CallStack.wrapCallSite != null) {
				site = haxe_CallStack.wrapCallSite(site);
			}
			var method = null;
			var fullName = site.getFunctionName();
			if(fullName != null) {
				var idx = fullName.lastIndexOf(".");
				if(idx >= 0) {
					var className = HxOverrides.substr(fullName,0,idx);
					var methodName = HxOverrides.substr(fullName,idx + 1,null);
					method = haxe_StackItem.Method(className,methodName);
				}
			}
			stack.push(haxe_StackItem.FilePos(method,site.getFileName(),site.getLineNumber()));
		}
		return stack;
	};
	var a = haxe_CallStack.makeStack(e.stack);
	Error.prepareStackTrace = oldValue;
	return a;
};
haxe_CallStack.callStack = function() {
	try {
		throw new Error();
	} catch( e ) {
		haxe_CallStack.lastException = e;
		if (e instanceof js__$Boot_HaxeError) e = e.val;
		var a = haxe_CallStack.getStack(e);
		a.shift();
		return a;
	}
};
haxe_CallStack.exceptionStack = function() {
	return haxe_CallStack.getStack(haxe_CallStack.lastException);
};
haxe_CallStack.toString = function(stack) {
	var b = new StringBuf();
	var _g = 0;
	while(_g < stack.length) {
		var s = stack[_g];
		++_g;
		b.b += "\nCalled from ";
		haxe_CallStack.itemToString(b,s);
	}
	return b.b;
};
haxe_CallStack.itemToString = function(b,s) {
	switch(s[1]) {
	case 0:
		b.b += "a C function";
		break;
	case 1:
		var m = s[2];
		b.b += "module ";
		b.b += m == null ? "null" : "" + m;
		break;
	case 2:
		var line = s[4];
		var file = s[3];
		var s1 = s[2];
		if(s1 != null) {
			haxe_CallStack.itemToString(b,s1);
			b.b += " (";
		}
		b.b += file == null ? "null" : "" + file;
		b.b += " line ";
		b.b += line == null ? "null" : "" + line;
		if(s1 != null) {
			b.b += ")";
		}
		break;
	case 3:
		var meth = s[3];
		var cname = s[2];
		b.b += cname == null ? "null" : "" + cname;
		b.b += ".";
		b.b += meth == null ? "null" : "" + meth;
		break;
	case 4:
		var n = s[2];
		b.b += "local function #";
		b.b += n == null ? "null" : "" + n;
		break;
	}
};
haxe_CallStack.makeStack = function(s) {
	if(s == null) {
		return [];
	} else if(typeof(s) == "string") {
		var stack = s.split("\n");
		if(stack[0] == "Error") {
			stack.shift();
		}
		var m = [];
		var rie10 = new EReg("^   at ([A-Za-z0-9_. ]+) \\(([^)]+):([0-9]+):([0-9]+)\\)$","");
		var _g = 0;
		while(_g < stack.length) {
			var line = stack[_g];
			++_g;
			if(rie10.match(line)) {
				var path = rie10.matched(1).split(".");
				var meth = path.pop();
				var file = rie10.matched(2);
				var line1 = Std.parseInt(rie10.matched(3));
				m.push(haxe_StackItem.FilePos(meth == "Anonymous function" ? haxe_StackItem.LocalFunction() : meth == "Global code" ? null : haxe_StackItem.Method(path.join("."),meth),file,line1));
			} else {
				m.push(haxe_StackItem.Module(StringTools.trim(line)));
			}
		}
		return m;
	} else {
		return s;
	}
};
var haxe_IMap = function() { };
haxe_IMap.__name__ = true;
var haxe_ds__$StringMap_StringMapIterator = function(map,keys) {
	this.map = map;
	this.keys = keys;
	this.index = 0;
	this.count = keys.length;
};
haxe_ds__$StringMap_StringMapIterator.__name__ = true;
haxe_ds__$StringMap_StringMapIterator.prototype = {
	hasNext: function() {
		return this.index < this.count;
	}
	,next: function() {
		var _this = this.map;
		var key = this.keys[this.index++];
		if(__map_reserved[key] != null) {
			return _this.getReserved(key);
		} else {
			return _this.h[key];
		}
	}
};
var haxe_ds_StringMap = function() {
	this.h = { };
};
haxe_ds_StringMap.__name__ = true;
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	get: function(key) {
		if(__map_reserved[key] != null) {
			return this.getReserved(key);
		}
		return this.h[key];
	}
	,setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
	,arrayKeys: function() {
		var out = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) {
			out.push(key);
		}
		}
		if(this.rh != null) {
			for( var key in this.rh ) {
			if(key.charCodeAt(0) == 36) {
				out.push(key.substr(1));
			}
			}
		}
		return out;
	}
};
var infos_AdventureInfo = function(g) {
	this.game = g;
	this.who = [{ id : "curator", name : "Edward Balog", names : ["balog","curator","edward"], note : "Edward Balog is the curator of the Metropolis Art Museum and your business partner. You often procure various art objects for him in return for handsome paychecks.", isKnown : true},{ id : "thorston", name : "Harold Thorston", names : ["great","harold","illusionist","mage","magician","thorston"], note : "Great Harold is a famous illusionist known for his elaborate and expensive stunts. Reported missing since yesterday's performance in the museum.", isKnown : true}];
	var topicThorston = Reflect.copy(this.who[1]);
	this.topics = [{ id : "redCloak", name : "Red Cloak", names : ["cloak","red","murders","murderer"], note : "Red Cloak is the name the press gave to the mysterious murderer that has recently started terrorizing the inhabitants of Metro city.", isKnown : true},topicThorston];
};
infos_AdventureInfo.__name__ = true;
var infos_ButlerThorston = function(g,s) {
	var _gthis = this;
	NPC.call(this,g,s);
	this.id = "butlerThorston";
	this.name = "the butler";
	this.nameUpper = "The butler";
	this.tries = 3;
	var _g = new haxe_ds_StringMap();
	var value = { id : "credit", isOneTime : true, isEnabled : true, say : "Oh, you are a business partner of mister Thorston? Please, do come in!", sayFail : "I do not believe I have had the pleasure of meeting you before.", result : { type : _$ActionResultType.RESULT_CHAT_FINISH_SUCCESS}};
	if(__map_reserved["credit"] != null) {
		_g.setReserved("credit",value);
	} else {
		_g.h["credit"] = value;
	}
	var value1 = { id : "law", isOneTime : true, isEnabled : true, say : "So you are helping the police with the investigation? Please, do come in!", sayFail : "Let me see some credentials first.", result : { type : _$ActionResultType.RESULT_CHAT_FINISH_SUCCESS}};
	if(__map_reserved["law"] != null) {
		_g.setReserved("law",value1);
	} else {
		_g.h["law"] = value1;
	}
	this.chatSkills = _g;
	this.chatTopicUnknown = "The butler looks at you politely feigning interest.";
	this.chatTopicNotInterested = "The butler is not interested in that topic.";
	var _g1 = new haxe_ds_StringMap();
	var value2 = { id : "politics", points : 3, maxPoints : 3, isFavorite : true};
	if(__map_reserved["politics"] != null) {
		_g1.setReserved("politics",value2);
	} else {
		_g1.h["politics"] = value2;
	}
	var value3 = { id : "news", points : 3, maxPoints : 3, isFavorite : false};
	if(__map_reserved["news"] != null) {
		_g1.setReserved("news",value3);
	} else {
		_g1.h["news"] = value3;
	}
	this.chatCommonTopics = _g1;
	this.examineNote = "When irritated, the butler can be exploited to gain favor.";
	var _g2 = new haxe_ds_StringMap();
	var value4 = { id : "redCloak", isEnabled : true, func : function() {
		if(_gthis.get_chatState() != ChatState.NPC_STATE_ENMITY) {
			var lines = ["Outrageous! The police should immediately find the murderer!","What are we paying the taxes for?!"];
			var _this = _gthis.game.console;
			var s1 = "*\"" + lines[Std.random(lines.length)] + "\"*";
			_this._console.print(s1);
		} else {
			_gthis.game.console._console.print("*\"" + "Someone should do something about it!" + "\"*" + (" " + ("<span class=consoleSys>[" + "+20 Rapport" + "]</span>\n")));
			var _g21 = _gthis;
			_g21.set_rapport(_g21.get_rapport() + 20);
			if(!(!_gthis.chatSpecialTopics.get("redCloak").isEnabled)) {
				var _this1 = _gthis.game.console._console;
				_gthis.chatSpecialTopics.get("redCloak").isEnabled = false;
			}
			_gthis.setState(ChatState.NPC_STATE_AGREEMENT);
		}
	}};
	if(__map_reserved["redCloak"] != null) {
		_g2.setReserved("redCloak",value4);
	} else {
		_g2.h["redCloak"] = value4;
	}
	var value5 = { id : "thorston", isEnabled : true, func : function() {
		if(_gthis.get_rapport() < 75) {
			var lines1 = ["Mister Thorston is not available at the moment.","Mister Thorston is missing and the police have been notified.","I am not at liberty to discuss my employer with strangers."];
			var _this2 = _gthis.game.console;
			var s2 = "*\"" + lines1[Std.random(lines1.length)] + "\"*";
			_this2._console.print(s2);
		} else {
			_gthis.game.console._console.print("*\"" + "I see you are also troubled by his disappearance. I suppose I could let you check the house out." + "\"*" + "");
			_gthis.finishChat(true);
		}
	}};
	if(__map_reserved["thorston"] != null) {
		_g2.setReserved("thorston",value5);
	} else {
		_g2.h["thorston"] = value5;
	}
	this.chatSpecialTopics = _g2;
};
infos_ButlerThorston.__name__ = true;
infos_ButlerThorston.__super__ = NPC;
infos_ButlerThorston.prototype = $extend(NPC.prototype,{
	startChatPre: function() {
		var _gthis = this;
		if(this.tries == 0) {
			this.game.console._console.print("*\"" + "Please leave or I will call the police!" + "\"*" + "");
			if("The butler goes back into the house.".charAt(0) == "\"") {
				this.game.console._console.print("*" + "The butler goes back into the house." + "*");
			} else {
				this.game.console._console.print("The butler goes back into the house.");
			}
			return false;
		}
		if(this.tries > 1) {
			this.game.console._console.print("*\"" + "What is your business here?" + "\"*" + "");
		} else {
			this.game.console._console.print("*\"" + "This is the last time I am talking to you!" + "\"*" + "");
		}
		this.tries--;
		this.set_anxiety(0);
		this.set_rapport(0);
		if(!this.chatSpecialTopics.get("redCloak").isEnabled) {
			var _this = this.game.console._console;
			this.chatSpecialTopics.get("redCloak").isEnabled = true;
		}
		if(!this.chatSkills.get("law").isEnabled) {
			var _this1 = this.game.console._console;
			this.chatSkills.get("law").isEnabled = true;
		}
		if(!this.chatSkills.get("credit").isEnabled) {
			var _this2 = this.game.console._console;
			this.chatSkills.get("credit").isEnabled = true;
		}
		this.effects.push({ id : "impatient", timer : 10, print : function(s,e) {
			s.b += Std.string("Impatient " + ("<span class=consoleSys>[" + (e.timer + " turns left") + "]</span>\n"));
		}, finish : function() {
			_gthis.finishChat(false);
		}});
		return true;
	}
	,turnPre: function() {
	}
	,finishChatFail: function() {
		if(this.tries > 0) {
			this.game.console._console.print("*\"" + "I do not have time for this!" + "\"*" + "");
		} else {
			this.game.console._console.print("*\"" + "Stop wasting my time or I will call the police!" + "\"*" + "");
		}
		if("The butler goes back into the house.".charAt(0) == "\"") {
			this.game.console._console.print("*" + "The butler goes back into the house." + "*");
		} else {
			this.game.console._console.print("The butler goes back into the house.");
		}
	}
	,finishChatSuccess: function() {
		if("You follow the butler into the house.".charAt(0) == "\"") {
			this.game.console._console.print("*" + "You follow the butler into the house." + "*");
		} else {
			this.game.console._console.print("You follow the butler into the house.");
		}
		this.game.scene.move("firstFloor");
	}
});
var infos_ThorstonHouse = function(g) {
	Scene.call(this,g);
	this.locations = [new Location("gates",this.game,"At the gates","You are at the gates in the fence surrounding the nice two-storied house where Great Harold lives when he is in the city.",[{ id : "bell", isKnown : true, names : ["bell","button"], locationNote : "There is an electric door bell near the gates here.", note : "This is a button for an electric door bell.", actions : [{ names : ["ring","push"], note : "You can't hear the sound from here but soon the front door opens and a man comes up to the gates. He must be the butler.", result : { type : _$ActionResultType.RESULT_CHAT, info : "butlerThorston"}}]},{ id : "fence", isKnown : true, note : "The wrought iron fence is significantly taller than you are.", names : ["wall","fence"], actions : [{ names : ["climb"], note : "You cannot climb the fence here."}]},{ id : "gates", isKnown : true, note : "The gates are tall and imposing.", names : ["gates","gate"], actions : [{ names : ["climb"], note : "You cannot climb the gates."},{ names : ["open"], note : "The gates are locked from the inside."}]}]),new Location("firstFloor",this.game,"First floor corridor.","You are in the corridor at the first floor. There are a couple doors here.",[])];
	this.startingLocation = this.locations[0];
	this.npcs = [new infos_ButlerThorston(this.game,this)];
};
infos_ThorstonHouse.__name__ = true;
infos_ThorstonHouse.__super__ = Scene;
infos_ThorstonHouse.prototype = $extend(Scene.prototype,{
});
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	this.message = String(val);
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.__name__ = true;
js__$Boot_HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
});
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0 ? "," : "") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			haxe_CallStack.lastException = e;
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
var js_jquery_JqEltsIterator = function(j) {
	this.i = 0;
	this.j = j;
};
js_jquery_JqEltsIterator.__name__ = true;
js_jquery_JqEltsIterator.prototype = {
	hasNext: function() {
		return this.i < this.j.length;
	}
	,next: function() {
		return $(this.j[this.i++]);
	}
};
var js_jquery_JqIterator = function(j) {
	this.i = 0;
	this.j = j;
};
js_jquery_JqIterator.__name__ = true;
js_jquery_JqIterator.prototype = {
	hasNext: function() {
		return this.i < this.j.length;
	}
	,next: function() {
		return this.j[this.i++];
	}
};
function $iterator(o) { if( o instanceof Array ) return function() { return HxOverrides.iter(o); }; return typeof(o.iterator) == 'function' ? $bind(o,o.iterator) : o.iterator; }
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
String.__name__ = true;
Array.__name__ = true;
var __map_reserved = {};
var typeofJQuery = typeof($);
if(typeofJQuery != "undefined" && $.fn != null) {
	$.fn.elements = function() {
		return new js_jquery_JqEltsIterator(this);
	};
}
var typeofJQuery = typeof($);
if(typeofJQuery != "undefined" && $.fn != null) {
	$.fn.iterator = function() {
		return new js_jquery_JqIterator(this);
	};
}
ChatConst.commonTopics = (function($this) {
	var $r;
	var _g = new haxe_ds_StringMap();
	{
		var value = { id : "politics", name : "Politics", nameLower : "politics", names : ["politics","pol"]};
		if(__map_reserved["politics"] != null) {
			_g.setReserved("politics",value);
		} else {
			_g.h["politics"] = value;
		}
	}
	{
		var value1 = { id : "science", name : "Science", nameLower : "science", names : ["science","sci"]};
		if(__map_reserved["science"] != null) {
			_g.setReserved("science",value1);
		} else {
			_g.h["science"] = value1;
		}
	}
	{
		var value2 = { id : "news", name : "News", nameLower : "news", names : ["news","new"]};
		if(__map_reserved["news"] != null) {
			_g.setReserved("news",value2);
		} else {
			_g.h["news"] = value2;
		}
	}
	{
		var value3 = { id : "sports", name : "Sports", nameLower : "sports", names : ["sports","spo"]};
		if(__map_reserved["sports"] != null) {
			_g.setReserved("sports",value3);
		} else {
			_g.h["sports"] = value3;
		}
	}
	{
		var value4 = { id : "entertainment", name : "Entertainment", nameLower : "entertainment", names : ["entertainment","ent"]};
		if(__map_reserved["entertainment"] != null) {
			_g.setReserved("entertainment",value4);
		} else {
			_g.h["entertainment"] = value4;
		}
	}
	{
		var value5 = { id : "business", name : "Business", nameLower : "business", names : ["business","bus"]};
		if(__map_reserved["business"] != null) {
			_g.setReserved("business",value5);
		} else {
			_g.h["business"] = value5;
		}
	}
	{
		var value6 = { id : "culture", name : "Culture", nameLower : "culture", names : ["culture","cul"]};
		if(__map_reserved["culture"] != null) {
			_g.setReserved("culture",value6);
		} else {
			_g.h["culture"] = value6;
		}
	}
	$r = _g;
	return $r;
}(this));
Console.commandHelp = (function($this) {
	var $r;
	var _g = new haxe_ds_StringMap();
	if(__map_reserved["again"] != null) {
		_g.setReserved("again","again, g - Repeats previous command again.");
	} else {
		_g.h["again"] = "again, g - Repeats previous command again.";
	}
	if(__map_reserved["examine"] != null) {
		_g.setReserved("examine","examine, x, look, l <object> - Examines the given object.");
	} else {
		_g.h["examine"] = "examine, x, look, l <object> - Examines the given object.";
	}
	if(__map_reserved["look"] != null) {
		_g.setReserved("look","examine, x, look, l <object> - Examines the given object.");
	} else {
		_g.h["look"] = "examine, x, look, l <object> - Examines the given object.";
	}
	if(__map_reserved["roll"] != null) {
		_g.setReserved("roll","roll, r <skill> - Makes a roll for a given skill.");
	} else {
		_g.h["roll"] = "roll, r <skill> - Makes a roll for a given skill.";
	}
	if(__map_reserved["stats"] != null) {
		_g.setReserved("stats","stats, skills - Lists player skills and stats.");
	} else {
		_g.h["stats"] = "stats, skills - Lists player skills and stats.";
	}
	if(__map_reserved["skills"] != null) {
		_g.setReserved("skills","stats, skills - Lists player skills and stats.");
	} else {
		_g.h["skills"] = "stats, skills - Lists player skills and stats.";
	}
	if(__map_reserved["topic"] != null) {
		_g.setReserved("topic","topics, topic <topic> - Prints information about a known conversation topic. If the name is not given, lists known topics.");
	} else {
		_g.h["topic"] = "topics, topic <topic> - Prints information about a known conversation topic. If the name is not given, lists known topics.";
	}
	if(__map_reserved["topics"] != null) {
		_g.setReserved("topics","topics, topic <topic> - Prints information about a known conversation topic. If the name is not given, lists known topics.");
	} else {
		_g.h["topics"] = "topics, topic <topic> - Prints information about a known conversation topic. If the name is not given, lists known topics.";
	}
	if(__map_reserved["who"] != null) {
		_g.setReserved("who","who <name> - Prints information about a non-player character. If the name is not given, lists known characters.");
	} else {
		_g.h["who"] = "who <name> - Prints information about a non-player character. If the name is not given, lists known characters.";
	}
	$r = _g;
	return $r;
}(this));
Const.ignoredKeywords = ["","a","at","in","is","on","the"];
Location.commandHelp = (function($this) {
	var $r;
	var _g = new haxe_ds_StringMap();
	if(__map_reserved["examine"] != null) {
		_g.setReserved("examine","examine, x, look, l <object> - Examines the given object. If no object is given, describes the scene.");
	} else {
		_g.h["examine"] = "examine, x, look, l <object> - Examines the given object. If no object is given, describes the scene.";
	}
	if(__map_reserved["look"] != null) {
		_g.setReserved("look","examine, x, look, l <object> - Examines the given object. If no object is given, describes the scene.");
	} else {
		_g.h["look"] = "examine, x, look, l <object> - Examines the given object. If no object is given, describes the scene.";
	}
	$r = _g;
	return $r;
}(this));
NPC.commandHelp = (function($this) {
	var $r;
	var _g = new haxe_ds_StringMap();
	if(__map_reserved["again"] != null) {
		_g.setReserved("again","again, g - Repeats previous command again.");
	} else {
		_g.h["again"] = "again, g - Repeats previous command again.";
	}
	if(__map_reserved["chat"] != null) {
		_g.setReserved("chat","chat, c - (Roll Charisma) Make small talk to the character. Raises character anxiety and gives some hints.");
	} else {
		_g.h["chat"] = "chat, c - (Roll Charisma) Make small talk to the character. Raises character anxiety and gives some hints.";
	}
	if(__map_reserved["discuss"] != null) {
		_g.setReserved("discuss","discuss, d <topic> - Discuss this topic in conversation.");
	} else {
		_g.h["discuss"] = "discuss, d <topic> - Discuss this topic in conversation.";
	}
	if(__map_reserved["evaluate"] != null) {
		_g.setReserved("evaluate","evaluate, eval, e - (Roll Psychology) Assess the emotional state of the character. Shows detailed information for the next three turns.");
	} else {
		_g.h["evaluate"] = "evaluate, eval, e - (Roll Psychology) Assess the emotional state of the character. Shows detailed information for the next three turns.";
	}
	if(__map_reserved["examine"] != null) {
		_g.setReserved("examine","examine, x, look, l - (Roll Spot Hidden) Examines the NPC and surroundings, giving some hints.");
	} else {
		_g.h["examine"] = "examine, x, look, l - (Roll Spot Hidden) Examines the NPC and surroundings, giving some hints.";
	}
	if(__map_reserved["look"] != null) {
		_g.setReserved("look","examine, x, look, l - (Roll Spot Hidden) Examines the NPC and surroundings, giving some hints.");
	} else {
		_g.h["look"] = "examine, x, look, l - (Roll Spot Hidden) Examines the NPC and surroundings, giving some hints.";
	}
	if(__map_reserved["probe"] != null) {
		_g.setReserved("probe","probe, p - (Roll Fast Talk) Converse about some general topics in-depth with the character. Raises character rapport and gives some hints.");
	} else {
		_g.h["probe"] = "probe, p - (Roll Fast Talk) Converse about some general topics in-depth with the character. Raises character rapport and gives some hints.";
	}
	if(__map_reserved["roll"] != null) {
		_g.setReserved("roll","roll, r <skill> - Makes a roll for a given skill.");
	} else {
		_g.h["roll"] = "roll, r <skill> - Makes a roll for a given skill.";
	}
	if(__map_reserved["topic"] != null) {
		_g.setReserved("topic","topics, topic <topic> - Prints information about a known conversation topic. If the name is not given, lists known topics.");
	} else {
		_g.h["topic"] = "topics, topic <topic> - Prints information about a known conversation topic. If the name is not given, lists known topics.";
	}
	if(__map_reserved["topics"] != null) {
		_g.setReserved("topics","topics, topic <topic> - Prints information about a known conversation topic. If the name is not given, lists known topics.");
	} else {
		_g.h["topics"] = "topics, topic <topic> - Prints information about a known conversation topic. If the name is not given, lists known topics.";
	}
	if(__map_reserved["who"] != null) {
		_g.setReserved("who","who <name> - Prints information about a non-player character.");
	} else {
		_g.h["who"] = "who <name> - Prints information about a non-player character.";
	}
	$r = _g;
	return $r;
}(this));
SkillConst.infos = [{ id : "libraryUse", name : "Library Use", names : ["library use","lib"], val : 25},{ id : "listen", name : "Listen", names : ["listen"], val : 25},{ id : "spotHidden", name : "Spot Hidden", names : ["spot hidden","spot"], val : 25},{ id : "idea", name : "Idea", names : ["idea"], val : 0},{ id : "knowledge", name : "Knowledge", names : ["knowledge","know"], val : 0},{ id : "willpower", name : "Willpower", names : ["willpower","will","wp"], val : 0},{ id : "charisma", name : "Charisma", names : ["charisma","cha"], val : 0},{ id : "credit", name : "Credit Rating", names : ["credit rating","credit"], val : 15},{ id : "fastTalk", name : "Fast Talk", names : ["fast talk","talk","fast"], val : 5},{ id : "persuade", name : "Persuade", names : ["persuade","per"], val : 15},{ id : "psychology", name : "Psychology", names : ["psychology","psy"], val : 5},{ id : "strength", name : "Strength", names : ["strength","str"], val : 0},{ id : "law", name : "Law", names : ["law"], val : 5}];
Game.main();
})();
