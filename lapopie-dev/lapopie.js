// Generated by Haxe 4.1.0
(function ($hx_exports, $global) { "use strict";
var $hxClasses = {},$estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var _$ActionResultType = $hxEnums["_ActionResultType"] = { __ename__ : "_ActionResultType", __constructs__ : ["RESULT_CHAT","RESULT_CHAT_FINISH_SUCCESS","RESULT_CHAT_FINISH_FAIL","RESULT_CHAT_INTEREST"]
	,RESULT_CHAT: {_hx_index:0,__enum__:"_ActionResultType",toString:$estr}
	,RESULT_CHAT_FINISH_SUCCESS: {_hx_index:1,__enum__:"_ActionResultType",toString:$estr}
	,RESULT_CHAT_FINISH_FAIL: {_hx_index:2,__enum__:"_ActionResultType",toString:$estr}
	,RESULT_CHAT_INTEREST: {_hx_index:3,__enum__:"_ActionResultType",toString:$estr}
};
_$ActionResultType.__empty_constructs__ = [_$ActionResultType.RESULT_CHAT,_$ActionResultType.RESULT_CHAT_FINISH_SUCCESS,_$ActionResultType.RESULT_CHAT_FINISH_FAIL,_$ActionResultType.RESULT_CHAT_INTEREST];
var Character = function(g,c,s) {
	this.game = g;
	this.stats = s;
	this.className = c;
	this.inventory = new Inventory(this.game,this);
	if(c == _$CharacterClass.CLASS_FIGHTER) {
		this.classTables = _$TablesFighter.instance;
	} else if(c == _$CharacterClass.CLASS_CLERIC) {
		this.classTables = _$TablesCleric.instance;
	} else if(c == _$CharacterClass.CLASS_THIEF) {
		this.classTables = _$TablesThief.instance;
	} else {
		throw haxe_Exception.thrown("No class tables for " + Std.string(c));
	}
	this.isPlayer = false;
	this.name = "?";
	this.nameCapped = "?";
	while(true) {
		this.hp = this.maxHP = Const.dice(1,this.classTables.hitDie) + this.classTables.conStats.h[this.stats.con].hpBonus;
		if(this.hp >= 4) {
			break;
		}
	}
	this.xp = 0;
	this.level = 1;
	this.unarmedItem = new Item();
	this.unarmedItem.weapon = _$ItemsTables.weapons.h["unarmed"];
	this.weapon = this.unarmedItem;
	this.noArmorItem = new Item();
	this.noArmorItem.type = "ITEM_ARMOR";
	this.noArmorItem.armor = _$ItemsTables.armor.h["none"];
	this.armor = this.shield = this.noArmorItem;
	this.ac = 0;
	this.move = 90;
	this.recalc();
};
$hxClasses["Character"] = Character;
Character.__name__ = "Character";
Character.prototype = {
	game: null
	,stats: null
	,strStats: null
	,name: null
	,nameCapped: null
	,className: null
	,classTables: null
	,isPlayer: null
	,hp: null
	,maxHP: null
	,xp: null
	,level: null
	,ac: null
	,move: null
	,inventory: null
	,armor: null
	,weapon: null
	,shield: null
	,unarmedItem: null
	,noArmorItem: null
	,giveItem: function(t,key,wear) {
		if(t == "ITEM_ARMOR") {
			var tmp = _$ItemsTables.armor.h[key];
			if(tmp == null) {
				throw haxe_Exception.thrown("no such armor: " + key);
			}
			var item = new Item();
			item.id = this.inventory.getEmptyID();
			item.type = t;
			item.armor = tmp;
			if(wear) {
				if(tmp.isShield) {
					this.shield = item;
				} else {
					this.armor = item;
				}
			} else {
				this.inventory.add(item);
			}
		} else if(t == "ITEM_POTION") {
			var tmp = _$ItemsTables.potions.h[key];
			if(tmp == null) {
				throw haxe_Exception.thrown("no such potion: " + key);
			}
			var item = new Item();
			item.id = this.inventory.getEmptyID();
			item.type = t;
			item.potion = tmp;
			item.potionDoses = item.potion.doses;
			this.inventory.add(item);
		} else if(t == "ITEM_WEAPON") {
			var tmp = _$ItemsTables.weapons.h[key];
			if(tmp == null) {
				throw haxe_Exception.thrown("no such weapon: " + key);
			}
			var item = new Item();
			item.id = this.inventory.getEmptyID();
			item.type = t;
			item.weapon = tmp;
			this.inventory.add(item);
			if(wear) {
				this.draw(item);
			}
		} else {
			throw haxe_Exception.thrown("Not implemented: giveItem(" + t + ")");
		}
		this.recalc();
	}
	,draw: function(item) {
		if(this.weapon.weapon.id != "unarmed") {
			this.weapon.id = this.inventory.getEmptyID();
			this.inventory.list.add(this.weapon);
		}
		if(!item.weapon.canShield && this.shield.armor.id != "none") {
			this.shield.id = this.inventory.getEmptyID();
			this.inventory.list.add(this.shield);
			this.shield = this.noArmorItem;
		}
		this.inventory.list.remove(item);
		this.weapon = item;
		if(this.weapon.weapon.canShield) {
			var bestShield = null;
			var _g_head = this.inventory.list.h;
			while(_g_head != null) {
				var val = _g_head.item;
				_g_head = _g_head.next;
				var item1 = val;
				if(item1.type != "ITEM_ARMOR") {
					continue;
				}
				if(!item1.armor.isShield) {
					continue;
				}
				if(bestShield == null || item1.armor.cost > bestShield.armor.cost) {
					bestShield = item1;
				}
			}
			if(bestShield != null) {
				this.inventory.list.remove(item);
				this.shield = bestShield;
			}
		}
		this.recalc();
	}
	,recalc: function() {
		var strval = this.stats.str * 100 + this.stats.str18;
		var strkey = 0;
		var key = _$TablesClass.instance.strStats.keys();
		while(key.hasNext()) {
			var key1 = key.next();
			if(strval <= key1) {
				strkey = key1;
				break;
			}
		}
		this.strStats = _$TablesClass.instance.strStats.h[strkey];
		this.ac = 10 + this.armor.armor.ac + _$TablesClass.instance.dexStats.h[this.stats.dex].acAdj;
	}
	,printHP: function() {
		var perc = 100.0 * this.hp / this.maxHP;
		if(perc < 33 || this.hp < this.maxHP && this.hp <= 2) {
			return "<span class=wounded33>" + this.hp + "</span>";
		} else if(perc < 66) {
			return "<span class=wounded66>" + this.hp + "</span>";
		} else if(perc < 100) {
			return "<span class=wounded99>" + this.hp + "</span>";
		} else {
			return "" + this.hp;
		}
	}
	,print: function() {
		var sb_b = "";
		sb_b += Std.string("**" + this.nameCapped + "**\n" + "STR " + this.stats.str + (this.stats.str18 > 0 ? "(" + this.stats.str18 + ")" : "") + ", " + "DEX " + this.stats.dex + ", " + "CON " + this.stats.con + ", " + "INT " + this.stats.int + ", " + "WIS " + this.stats.wis + ", " + "CHA " + this.stats.cha + " | " + "HP " + this.printHP() + "/" + this.maxHP + ", " + "AC " + this.ac + ", " + "XP " + this.xp + ", " + "LVL " + this.level + "\n");
		var wpn = this.weapon.weapon;
		var dmgBonus = wpn.damageVsMedium[2];
		var tmp = wpn.type == _$WeaponType.WEAPONTYPE_MELEE || wpn.type == _$WeaponType.WEAPONTYPE_BOTH;
		sb_b += Std.string("&nbsp;&nbsp;" + wpn.name + " (" + wpn.damageVsMedium[0] + "d" + wpn.damageVsMedium[1] + (dmgBonus < 0 ? "" + dmgBonus : "") + (dmgBonus > 0 ? "+" + dmgBonus : "") + ")");
		if(wpn.type == _$WeaponType.WEAPONTYPE_RANGED) {
			sb_b += Std.string(", range " + wpn.range + "'");
		}
		sb_b += "\n";
		if(this.shield.armor.id != "none") {
			sb_b += Std.string("&nbsp;&nbsp;" + this.shield.getName() + "\n");
		}
		var s = sb_b += Std.string("&nbsp;&nbsp;" + this.armor.getName() + " (AC " + (10 + this.armor.armor.ac) + ")");
		return s;
	}
	,get_dexStats: function() {
		return _$TablesClass.instance.dexStats.h[this.stats.dex];
	}
	,__class__: Character
	,__properties__: {get_dexStats:"get_dexStats"}
};
var Chargen = function(g) {
	this.game = g;
	this.state = "CHARGEN_METHOD";
};
$hxClasses["Chargen"] = Chargen;
Chargen.__name__ = "Chargen";
Chargen.prototype = {
	game: null
	,state: null
	,method: null
	,stats: null
	,runCommand: function(cmd,tokens) {
		if(this.state == "CHARGEN_METHOD") {
			if(cmd.length > 1) {
				this.game.console._console.print("Select method: a-c.");
				return -1;
			}
			this.method = Const.letterToNum(cmd);
			if(this.method < 0 || this.method > 2) {
				this.game.console._console.print("Select method: a-c.");
				return -1;
			}
			this.state = "CHARGEN_ABILITIES";
			this.roll();
			this.print();
			return 1;
		} else if(this.state == "CHARGEN_ABILITIES") {
			if(cmd == "reroll" || cmd == "roll" || cmd == "r") {
				this.roll();
				this.print();
				return 1;
			} else if(cmd == "swap" || cmd == "s") {
				if(this.method != Chargen.METHOD_3D6 && this.method != Chargen.METHOD_4D6) {
					this.game.console._console.print("You cannot swap scores in this generation method.");
					return -1;
				}
				if(tokens.length != 2 || tokens[0].length > 1 || tokens[1].length > 1) {
					this.game.console._console.print("Usage: swap &lt;a-f&gt; &lt;a-f&gt;");
					return -1;
				}
				var from = Const.letterToNum(tokens[0]);
				var to = Const.letterToNum(tokens[1]);
				if(from < 0 || from > 5 || to < 0 || to > 5) {
					this.game.console._console.print("Usage: swap &lt;a-f&gt; &lt;a-f&gt;");
					return -1;
				}
				if(from == to) {
					this.game.console._console.print("Abilities need to be different.");
					return -1;
				}
				var fromVal = this.stats.get(from);
				var toVal = this.stats.get(to);
				this.stats.set(from,toVal);
				this.stats.set(to,fromVal);
				this.print();
				return 1;
			} else if(cmd == "start") {
				var minStats = _$TablesCleric.minStats;
				var ret = this.stats.checkMin(minStats);
				if(ret != "") {
					this.game.console._console.print(ret);
					return -1;
				}
				this.game.start(this.stats);
				return 1;
			}
		}
		return 0;
	}
	,print: function() {
		if(this.state == "CHARGEN_METHOD") {
			this.game.console._console.print("Select your ability scores generation method:\n" + "a) Roll 3d6 for all ability scores in order (hard)\n" + "b) Roll six 3d6, can swap scores (normal)\n" + "c) Roll 4d6 and drop lowest for each score, can swap (easy)");
		} else if(this.state == "CHARGEN_ABILITIES") {
			var strStats = _$TablesClass.instance.strStats.h[this.stats.str * 100];
			var dexStats = _$TablesClass.instance.dexStats.h[this.stats.dex];
			var conStats = _$TablesClass.instance.conStats.h[this.stats.con];
			var wisStats = _$TablesCleric.instance.wisStats.h[this.stats.wis];
			if(wisStats == null) {
				wisStats = { bonusSpells : [0,0], spellFailureChance : 100};
			}
			var chaStats = _$TablesClass.instance.chaStats.h[this.stats.cha];
			var minStats = _$TablesCleric.minStats;
			var bonusSpells = [0,0];
			bonusSpells[0] = wisStats.bonusSpells[0];
			bonusSpells[1] = wisStats.bonusSpells[1];
			var s = "Ability scores:\n" + "a) " + this.stats.getChargenString(0,minStats) + " (melee to hit: " + strStats.toHitBonus + ", to damage: " + strStats.toDamageBonus + ", encumbrance adj: " + strStats.encAdj + ")\n" + "b) " + this.stats.getChargenString(1,minStats) + " (surprise bonus: " + dexStats.surpriseBonus + ", missile to hit: " + dexStats.missileBonusToHit + ", AC adj: " + dexStats.acAdj + ")\n" + "c) " + this.stats.getChargenString(2,minStats) + " (HP bonus: " + conStats.hpBonus + ")\n" + "d) " + this.stats.getChargenString(3,minStats) + " (dump stat)\n" + "e) " + this.stats.getChargenString(4,minStats) + " (bonus spells: " + Std.string(bonusSpells) + ", chance of spell failure: " + wisStats.spellFailureChance + "%)\n" + "f) " + this.stats.getChargenString(5,minStats) + " (max henchmen: " + chaStats.maxHenchmen + ", loyalty bonus: " + chaStats.loyaltyBonus + "%, reaction bonus: " + chaStats.reactionBonus + "%)";
			this.game.console._console.print(s);
			this.game.console._console.print("You can use roll (r) command to reroll" + (this.method == Chargen.METHOD_3D6 || this.method == Chargen.METHOD_4D6 ? ", and swap (s) command to swap any two abilities." : ".") + " Type \"start\" to start the game.");
		}
	}
	,roll: function() {
		if(this.method == Chargen.METHOD_RANDOM || this.method == Chargen.METHOD_3D6) {
			var _g = Const.dice(3,6);
			var _g1 = Const.dice(3,6);
			var _g2 = Const.dice(3,6);
			var _g3 = Const.dice(3,6);
			var _g4 = Const.dice(3,6);
			this.stats = new Stats(_g,-1,_g1,_g2,_g3,Const.dice(3,6),_g4);
		} else if(this.method == Chargen.METHOD_4D6) {
			this.stats = new Stats(0,-1,0,0,0,0,0);
			var _g = 0;
			while(_g < 6) {
				var i = _g++;
				var rolls = new haxe_ds_List();
				rolls.push(Const.dice(1,6));
				rolls.push(Const.dice(1,6));
				rolls.push(Const.dice(1,6));
				rolls.push(Const.dice(1,6));
				var min = 1000;
				var _g_head = rolls.h;
				while(_g_head != null) {
					var val = _g_head.item;
					_g_head = _g_head.next;
					var r = val;
					if(r < min) {
						min = r;
					}
				}
				rolls.remove(min);
				var sum = 0;
				var _g1_head = rolls.h;
				while(_g1_head != null) {
					var val1 = _g1_head.item;
					_g1_head = _g1_head.next;
					var r1 = val1;
					sum += r1;
				}
				this.stats.set(i,sum);
			}
		}
	}
	,p: function(s) {
		this.game.console._console.print(s);
	}
	,__class__: Chargen
};
var Combat = function(g) {
	this.game = g;
	this.opponents = [];
	this.round = 1;
	this.logRound = "";
	this.logSegment = 0;
};
$hxClasses["Combat"] = Combat;
Combat.__name__ = "Combat";
Combat.prototype = {
	game: null
	,opponents: null
	,player: null
	,round: null
	,logRound: null
	,logSegment: null
	,addMonsterGroup: function(monsters,distance) {
		var maxGroup = this.getMaxGroup();
		var _g = 0;
		while(_g < monsters.length) {
			var monsterID = monsters[_g];
			++_g;
			var m = _$MonstersTable.list.h[monsterID];
			if(m == null) {
				throw haxe_Exception.thrown("no such monster: " + monsterID);
			}
			var op = new CombatOpponent(this.game);
			op.type = "COMBAT_MONSTER";
			op.monster = m;
			var letter = this.getMonsterLetter(monsterID);
			op.name = op.monster.name + " " + letter;
			op.nameCapped = op.monster.nameCapped + " " + letter;
			op.group = maxGroup + 1;
			op.x = distance;
			op.isEnemy = true;
			op.init();
			this.opponents.push(op);
		}
	}
	,getMonsterLetter: function(monsterID) {
		var cnt = 0;
		var _g = 0;
		var _g1 = this.opponents;
		while(_g < _g1.length) {
			var op = _g1[_g];
			++_g;
			if(op.type == "COMBAT_MONSTER" && op.monster.id == monsterID) {
				++cnt;
			}
		}
		return String.fromCodePoint((65 + cnt));
	}
	,getMaxGroup: function() {
		var maxGroup = 0;
		var _g = 0;
		var _g1 = this.opponents;
		while(_g < _g1.length) {
			var op = _g1[_g];
			++_g;
			if(op.group > maxGroup) {
				maxGroup = op.group;
			}
		}
		return maxGroup;
	}
	,getMinFreeGroup: function() {
		var maxGroup = this.getMaxGroup();
		var _g = 0;
		var _g1 = maxGroup;
		while(_g < _g1) {
			var group = _g++;
			if(this.getGroupMembers(group) == 0) {
				return group;
			}
		}
		return maxGroup + 1;
	}
	,getGroupMembers: function(group) {
		var cnt = 0;
		var _g = 0;
		var _g1 = this.opponents;
		while(_g < _g1.length) {
			var op = _g1[_g];
			++_g;
			if(op.group == group && !op.isDead) {
				++cnt;
			}
		}
		return cnt;
	}
	,getGroupEnemies: function(group,isEnemy) {
		var cnt = 0;
		var _g = 0;
		var _g1 = this.opponents;
		while(_g < _g1.length) {
			var op = _g1[_g];
			++_g;
			if(op.group == group && op.isEnemy != isEnemy && !op.isDead) {
				++cnt;
			}
		}
		return cnt;
	}
	,getFirstGroupOpponent: function(group) {
		var _g = 0;
		var _g1 = this.opponents;
		while(_g < _g1.length) {
			var op = _g1[_g];
			++_g;
			if(op.group == group) {
				return op;
			}
		}
		return null;
	}
	,start: function() {
		this.game.console._console.print("**COMBAT BEGINS**");
		var _g = 0;
		var _g1 = this.game.party.length;
		while(_g < _g1) {
			var i = _g++;
			var char = this.game.party[this.game.party.length - i - 1];
			var op = new CombatOpponent(this.game);
			op.type = "COMBAT_PARTY_MEMBER";
			op.nameCapped = char.nameCapped;
			op.name = char.name;
			op.isEnemy = false;
			op.character = char;
			op.group = 0;
			op.x = 0;
			op.init();
			this.opponents.splice(0,0,op);
			if(char.isPlayer) {
				this.player = op;
				op.isPlayer = true;
			}
		}
		this.game.set_state("STATE_COMBAT");
		this.print();
	}
	,print: function() {
		var maxGroup = this.getMaxGroup();
		this.game.console._console.print("Round " + this.round);
		var _g = 0;
		var _g1 = maxGroup + 1;
		while(_g < _g1) {
			var group = _g++;
			var op = this.getFirstGroupOpponent(group);
			if(op == null) {
				continue;
			}
			var distance = this.player.x - op.x;
			if(distance < 0) {
				distance = -distance;
			}
			var s = "Group " + String.fromCodePoint((65 + group)) + (distance > 0 ? " (" + distance + "')" : "") + ":\n";
			var _g2 = 0;
			var _g3 = this.opponents;
			while(_g2 < _g3.length) {
				var op1 = _g3[_g2];
				++_g2;
				if(op1.group != group) {
					continue;
				}
				s += op1.print();
			}
			this.game.console._console.print(s);
		}
	}
	,runCommand: function(cmd,tokens,tokensFull) {
		if(cmd == "wait") {
			this.player.declaredAction = "ACTION_WAIT";
		} else if(cmd == "examine") {
			if(tokens.length == 0) {
				this.game.console._console.print("You are currently in combat.");
				return 1;
			}
			if(this.game.player.inventory.examine(tokens) == 1) {
				return 1;
			} else {
				this.game.console._console.print("I do not know what that is.");
				return -1;
			}
		} else if(cmd == "attack") {
			if(this.getGroupEnemies(this.player.group,this.player.isEnemy) == 0) {
				this.game.console._console.print("There are no enemies close to you.");
				return -1;
			}
			if(this.player.character.weapon.weapon.type != _$WeaponType.WEAPONTYPE_MELEE && this.player.character.weapon.weapon.type != _$WeaponType.WEAPONTYPE_BOTH) {
				this.game.console._console.print("You don't have a melee weapon drawn.");
				return -1;
			}
			this.player.declaredAction = "ACTION_ATTACK";
		} else if(cmd == "charge") {
			if(tokens.length == 0 || tokens[0].length > 1) {
				this.game.console._console.print("Usage: charge &lt;group letter&gt;");
				return -1;
			}
			var group = Const.letterToNum(tokens[0]);
			if(this.player.group == group) {
				this.game.console._console.print("You are in that group.");
				return -1;
			}
			if(this.getGroupMembers(group) == 0) {
				this.game.console._console.print("No such combat group.");
				return -1;
			}
			if(this.getGroupEnemies(group,this.player.isEnemy) == 0) {
				this.game.console._console.print("That group has no opponents.");
				return -1;
			}
			if(this.getGroupEnemies(this.player.group,this.player.isEnemy) > 0) {
				this.game.console._console.print("You are engaged in melee.");
				return -1;
			}
			if(this.player.distanceToGroup(group) > this.player.character.move * 2) {
				this.game.console._console.print("That group is too far away.");
				return -1;
			}
			if(this.round - this.player.lastChargeRound < 10) {
				this.game.console._console.print("You have to wait " + (10 - this.round + this.player.lastChargeRound) + " more rounds before charging.");
				return -1;
			}
			if(this.player.character.weapon.weapon.type != _$WeaponType.WEAPONTYPE_MELEE && this.player.character.weapon.weapon.type != _$WeaponType.WEAPONTYPE_BOTH) {
				this.game.console._console.print("You cannot charge without a melee weapon drawn.");
				return -1;
			}
			this.player.declaredAction = "ACTION_CHARGE";
			this.player.targetID = group;
		} else if(cmd == "draw") {
			if(tokens.length == 0 || tokens[0].length > 1) {
				this.player.character.inventory.print("ITEM_WEAPON");
				this.game.console._console.print("Usage: draw &lt;item letter&gt;");
				return -1;
			}
			var itemIndex = Const.letterToNum(tokens[0]);
			var item = this.player.character.inventory.get("ITEM_WEAPON",itemIndex);
			if(item == null) {
				this.game.console._console.print("There is no such item in your inventory.");
				return -1;
			}
			this.player.declaredAction = "ACTION_DRAW";
			this.player.targetID = item.id;
		} else if(cmd == "drink") {
			if(tokens.length == 0 || tokens[0].length > 1) {
				this.player.character.inventory.print("ITEM_POTION");
				this.game.console._console.print("Usage: drink &lt;item letter&gt; [&lt;full|dose&gt;]");
				return -1;
			}
			var itemIndex = Const.letterToNum(tokens[0]);
			var item = this.player.character.inventory.get("ITEM_POTION",itemIndex);
			if(item == null) {
				this.game.console._console.print("There is no such item in your inventory.");
				return -1;
			}
			var dose = 1;
			if(tokens.length > 1) {
				var key = tokens[1];
				var am_h = Object.create(null);
				am_h["full"] = 1;
				am_h["dose"] = 2;
				dose = am_h[key];
				if(am_h[key] == null) {
					var doses = "";
					if(item.potion.doses == 1) {
						doses = "full";
					} else if(item.potion.doses > 1) {
						doses = "full, dose";
					}
					this.game.console._console.print("Doses accepted: " + doses + ".");
					return -1;
				}
			}
			if(dose == 1 && item.potion.doses > 1 && item.potionDoses < item.potion.doses) {
				dose = 2;
			}
			if(this.getGroupEnemies(this.player.group,this.player.isEnemy) > 0) {
				this.game.console._console.print("You cannot drink potions while engaging in melee combat.");
				return -1;
			}
			var ret = item.potion.canDrink(this.player.character);
			if(!ret.result) {
				this.game.console._console.print(ret.msg);
				return -1;
			}
			this.player.declaredAction = "ACTION_DRINK";
			this.player.targetID = item.id;
			this.player.drinkDose = dose;
		} else if(cmd == "retreat") {
			if(this.getGroupEnemies(this.player.group,this.player.isEnemy) == 0) {
				this.game.console._console.print("You are not in a melee.");
				return -1;
			}
			this.player.isParrying = true;
			this.player.declaredAction = "ACTION_RETREAT";
		} else if(cmd == "parry") {
			if(this.player.character.weapon.weapon.id == "unarmed") {
				this.game.console._console.print("You cannot parry without a melee weapon.");
				return -1;
			}
			this.player.isParrying = true;
			this.player.declaredAction = "ACTION_PARRY";
		} else if(cmd == "move") {
			if(tokens.length == 0 || tokens[0].length > 1) {
				this.game.console._console.print("Usage: move|close &lt;group letter&gt;");
				return -1;
			}
			var group = HxOverrides.cca(tokens[0],0);
			if(group >= 65 && group <= 90) {
				group -= 65;
			} else if(group >= 97 && group <= 122) {
				group -= 97;
			}
			if(this.player.group == group) {
				this.game.console._console.print("You are in that group.");
				return -1;
			}
			if(this.getGroupMembers(group) == 0) {
				this.game.console._console.print("No such combat group.");
				return -1;
			}
			this.player.declaredAction = "ACTION_MOVE";
			this.player.targetID = group;
		} else if(cmd == "shoot") {
			if(tokens.length == 0 || tokens[0].length > 1) {
				this.game.console._console.print("Usage: shoot &lt;group letter&gt;");
				return -1;
			}
			var group = Const.letterToNum(tokens[0]);
			if(this.player.group == group) {
				this.game.console._console.print("You are in that group.");
				return -1;
			}
			if(this.getGroupMembers(group) == 0) {
				this.game.console._console.print("No such combat group.");
				return -1;
			}
			if(this.getGroupEnemies(group,this.player.isEnemy) == 0) {
				this.game.console._console.print("That group has no opponents.");
				return -1;
			}
			if(this.getGroupEnemies(this.player.group,this.player.isEnemy) > 0) {
				this.game.console._console.print("You are engaged in melee.");
				return -1;
			}
			if(this.player.character.weapon.weapon.type != _$WeaponType.WEAPONTYPE_RANGED && this.player.character.weapon.weapon.type != _$WeaponType.WEAPONTYPE_BOTH) {
				this.game.console._console.print("You cannot shoot without a ranged weapon drawn.");
				return -1;
			}
			if(this.player.distanceToGroup(group) > this.player.character.weapon.weapon.range * 4) {
				this.game.console._console.print("That group is too far away.");
				return -1;
			}
			this.player.declaredAction = "ACTION_SHOOT";
			this.player.targetID = group;
		} else {
			return 0;
		}
		this.turn();
		return 1;
	}
	,turn: function() {
		var _g = 0;
		var _g1 = this.opponents;
		while(_g < _g1.length) {
			var op = _g1[_g];
			++_g;
			if(op.isPlayer || op.isDead) {
				continue;
			}
			op.aiDeclareAction();
		}
		var playerRoll = Const.dice(1,6);
		var enemyRoll = Const.dice(1,6);
		while(enemyRoll == playerRoll) enemyRoll = Const.dice(1,6);
		if(this.game.debug.initiative) {
			playerRoll = 1;
			enemyRoll = 6;
		}
		this.game.console._console.print("Roll initiative (1d6): player side " + playerRoll + ", enemy side " + enemyRoll);
		var order_h = { };
		var _g = 0;
		var _g1 = this.opponents;
		while(_g < _g1.length) {
			var op = _g1[_g];
			++_g;
			if(!op.isDead) {
				var segment = op.isEnemy ? enemyRoll : playerRoll;
				if(op.declaredAction == "ACTION_SHOOT" && (op.type == "COMBAT_PARTY_MEMBER" || op.type == "COMBAT_NPC")) {
					segment -= op.character.get_dexStats().missileBonusToHit;
				} else if(op.declaredAction == "ACTION_DRINK") {
					segment += Const.dice(1,4) + 1;
				}
				if(segment < 1) {
					segment = 1;
				}
				if(segment > 10) {
					segment = 10;
				}
				var list = order_h[segment];
				if(list == null) {
					list = [];
					order_h[segment] = list;
				}
				list.push(op);
			}
		}
		this.logRound = "";
		this.logSegment = 0;
		var _g = 1;
		while(_g < 11) {
			var segment = _g++;
			var list = order_h[segment];
			if(list == null) {
				continue;
			}
			var _g1 = 0;
			while(_g1 < list.length) {
				var op = list[_g1];
				++_g1;
				if(!op.isDead) {
					op.resolveAction(segment);
				}
			}
		}
		this.game.console._console.print(this.logRound);
		this.round++;
		var _g = 0;
		var _g1 = this.opponents;
		while(_g < _g1.length) {
			var op = _g1[_g];
			++_g;
			op.clear();
		}
		this.print();
		this.checkFinish();
	}
	,checkFinish: function() {
		if(this.player.isDead) {
			this.game.finish("loseHP");
			return;
		}
		var _g = 0;
		var _g1 = this.opponents;
		while(_g < _g1.length) {
			var op = _g1[_g];
			++_g;
			if(op.isEnemy && !op.isDead) {
				return;
			}
		}
		this.game.console._console.print("The battle is over. You are victorious.");
		this.game.console._console.print("<span class=narrative>" + "Your first test is over, but many more await you in the future. Thank you for playing!" + "</span>");
		this.game.set_state("STATE_LOCATION");
	}
	,p: function(s) {
		this.game.console._console.print(s);
	}
	,__class__: Combat
};
var CombatOpponent = function(g) {
	this.game = g;
	this.combat = this.game.combat;
	this.name = "?";
	this.nameCapped = "?";
	this.group = 0;
	this.x = 0;
	this._hp = 0;
	this._maxHP = 0;
	this.lastChargeRound = -10;
	this.declaredAction = "ACTION_WAIT";
	this.targetID = 0;
	this.isPlayer = false;
	this.isParrying = false;
	this.isEnemy = false;
	this.isDead = false;
	this.wasAttacked = 0;
	this.drinkDose = 0;
};
$hxClasses["CombatOpponent"] = CombatOpponent;
CombatOpponent.__name__ = "CombatOpponent";
CombatOpponent.prototype = {
	game: null
	,combat: null
	,type: null
	,character: null
	,monster: null
	,isPlayer: null
	,isEnemy: null
	,isDead: null
	,isParrying: null
	,wasAttacked: null
	,declaredAction: null
	,targetID: null
	,drinkDose: null
	,lastChargeRound: null
	,name: null
	,nameCapped: null
	,_hp: null
	,_maxHP: null
	,group: null
	,x: null
	,clear: function() {
		this.wasAttacked = 0;
		this.isParrying = false;
	}
	,init: function() {
		if(this.type == "COMBAT_MONSTER") {
			this._hp = this._maxHP = Const.dice(this.monster.hitDice[0],this.monster.hitDice[1]) + this.monster.hitDice[2];
		} else {
			var tmp = this.type == "COMBAT_PARTY_MEMBER";
		}
	}
	,distanceToOpponent: function(op) {
		var dst = op.x - this.x;
		if(dst < 0) {
			dst = -dst;
		}
		return dst;
	}
	,distanceToGroup: function(group) {
		var op = this.combat.getFirstGroupOpponent(group);
		var dst = op.x - this.x;
		if(dst < 0) {
			dst = -dst;
		}
		return dst;
	}
	,aiDeclareAction: function() {
		var tgt = null;
		var dst = 10000;
		var _g = 0;
		var _g1 = this.combat.opponents;
		while(_g < _g1.length) {
			var op = _g1[_g];
			++_g;
			if(op.isEnemy == this.isEnemy || op.isDead) {
				continue;
			}
			var opdst = this.distanceToOpponent(op);
			if(opdst > dst) {
				continue;
			}
			dst = opdst;
			tgt = op;
		}
		if(tgt == null) {
			this.declaredAction = "ACTION_WAIT";
			return;
		}
		this.targetID = tgt.group;
		if(this.distanceToOpponent(tgt) <= 10) {
			this.declaredAction = "ACTION_ATTACK";
		} else if(Std.random(100) > 70) {
			this.declaredAction = "ACTION_CHARGE";
		} else {
			this.declaredAction = "ACTION_MOVE";
		}
	}
	,resolveAction: function(segment) {
		if(this.declaredAction == "ACTION_MOVE") {
			this.actionMove(segment,false);
		} else if(this.declaredAction == "ACTION_CHARGE") {
			if(this.actionMove(segment,true)) {
				this.actionAttack(segment,{ isCharge : true, isRanged : false});
			}
		} else if(this.declaredAction == "ACTION_DRAW") {
			var item = this.character.inventory.getByID(this.targetID);
			var oldWeapon = this.character.weapon.getName().toLowerCase();
			var oldWeaponID = this.character.weapon.getID();
			var oldShield = this.character.shield.getName().toLowerCase();
			var oldShieldID = this.character.shield.getID();
			this.character.draw(item);
			if(oldWeaponID != "unarmed") {
				this.log(segment,this.nameCapped + " sheathe" + (this.isPlayer ? " your " : "s their ") + oldWeapon + (oldShieldID != "none" ? " and " + oldShield : "") + ", then draw" + (this.isPlayer ? "" : "s") + " the " + item.getName().toLowerCase() + (this.character.shield.getID() != "none" ? " and " + this.character.shield.getName().toLowerCase() : "") + ".");
			} else {
				this.log(segment,this.nameCapped + " draw" + (this.isPlayer ? "" : "s") + " a " + item.getName().toLowerCase() + ".");
			}
		} else if(this.declaredAction == "ACTION_DRINK") {
			var item = this.character.inventory.getByID(this.targetID);
			var msg = Const.potionDrinkMsg(this.character,item,this.drinkDose,!this.isEnemy);
			var ret = item.potion.onDrink(this.character,this.drinkDose);
			if(!this.isEnemy) {
				msg += ret;
			} else {
				msg += ".";
			}
			this.log(segment,msg);
			if(this.drinkDose == 1) {
				this.character.inventory.remove(item);
			} else if(this.drinkDose == 2) {
				item.potionDoses--;
				if(item.potionDoses == 0) {
					this.character.inventory.remove(item);
				}
			}
		} else if(this.declaredAction == "ACTION_WAIT") {
			this.log(segment,this.nameCapped + " cautiously wait" + (this.isPlayer ? "" : "s") + ".");
		} else if(this.declaredAction == "ACTION_ATTACK") {
			this.actionAttack(segment,{ isCharge : false, isRanged : false});
		} else if(this.declaredAction == "ACTION_PARRY") {
			if(this.wasAttacked > 0) {
				this.log(segment,this.nameCapped + " " + (this.isPlayer ? "try" : "tries") + " to parry incoming enemy attacks.");
			} else {
				this.log(segment,this.nameCapped + " stand" + (this.isPlayer ? "" : "s") + " ready to parry enemy attacks.");
			}
		} else if(this.declaredAction == "ACTION_RETREAT") {
			this.actionRetreat(segment);
		} else if(this.declaredAction == "ACTION_SHOOT") {
			var numAttacks = 1;
			if(this.type == "COMBAT_PARTY_MEMBER" || this.type == "COMBAT_NPC") {
				numAttacks = this.character.weapon.weapon.shots;
			}
			if(numAttacks < 1) {
				numAttacks = 1;
			}
			var _g = 0;
			var _g1 = numAttacks;
			while(_g < _g1) {
				var i = _g++;
				this.actionAttack(segment,{ isCharge : false, isRanged : true});
			}
		}
		this.declaredAction = "ACTION_WAIT";
	}
	,actionRetreat: function(segment) {
		if(this.combat.getGroupEnemies(this.group,this.isEnemy) > 0 && this.combat.getGroupEnemies(this.group,!this.isEnemy) == 1) {
			this.log(segment,this.nameCapped + " do" + (this.isPlayer ? "" : "es") + " not manage to retreat from combat.");
			return;
		}
		var minx = 10000;
		var maxx = 0;
		var _g = 0;
		var _g1 = this.combat.opponents;
		while(_g < _g1.length) {
			var op = _g1[_g];
			++_g;
			if(op.x < minx) {
				minx = op.x;
			}
			if(op.x > maxx) {
				maxx = op.x;
			}
		}
		var move = this.getMove() / 2 | 0;
		move -= move % 10;
		if(this.x - minx > maxx - this.x) {
			this.x -= move;
		} else {
			this.x += move;
		}
		this.group = this.combat.getMinFreeGroup();
		this.log(segment,this.nameCapped + " retreat" + (this.isPlayer ? "" : "s") + " from combat " + (move > 0 ? " (" + move + "')" : "") + ".");
	}
	,actionMove: function(segment,isCharge) {
		var move = this.getMove();
		if(isCharge) {
			move *= 2;
		}
		var hasEnemyClose = false;
		var _g = 0;
		var _g1 = this.combat.opponents;
		while(_g < _g1.length) {
			var op = _g1[_g];
			++_g;
			if(op.group == this.group && op.isEnemy != this.isEnemy && !op.isDead) {
				hasEnemyClose = true;
				break;
			}
		}
		if(hasEnemyClose) {
			this.log(segment,this.nameCapped + " cautiously wait" + (this.isPlayer ? "" : "s") + ".");
			return false;
		}
		var target = this.combat.getFirstGroupOpponent(this.targetID);
		var dst = this.distanceToOpponent(target);
		if(dst <= move + 10) {
			this.x = target.x;
			this.group = this.targetID;
			move = dst - 10;
			if(move < 0) {
				move = 0;
			}
		} else {
			if(this.combat.getGroupMembers(this.group) > 1) {
				this.group = this.combat.getMaxGroup() + 1;
			}
			if(target.x < this.x) {
				this.x -= move;
			} else {
				this.x += move;
			}
		}
		var code = 65 + this.targetID;
		var targetStr = " group " + String.fromCodePoint(code);
		if(this.combat.getGroupEnemies(this.targetID,this.isEnemy) == 1) {
			var targetOp = this.combat.getFirstGroupOpponent(this.targetID);
			targetStr = targetOp.name;
		}
		this.log(segment,this.nameCapped + " " + (isCharge ? "charge" : "close") + (this.isPlayer ? "" : "s") + " into combat " + (move > 0 ? " (" + move + "')" : "") + " with " + targetStr + ".");
		return true;
	}
	,actionAttack: function(segment,opts) {
		var isRanged = opts.isRanged;
		var isCharge = opts.isCharge;
		if(isRanged && this.combat.getGroupEnemies(this.group,this.isEnemy) > 0) {
			this.log(segment,this.nameCapped + (this.isPlayer ? " are blocked" : " is blocked") + " from using a ranged weapon by engaging in melee.");
			return;
		}
		var targets = [];
		var _g = 0;
		var _g1 = this.combat.opponents;
		while(_g < _g1.length) {
			var op = _g1[_g];
			++_g;
			if(op.isDead) {
				continue;
			}
			if(opts.isRanged) {
				if(op.group != this.targetID) {
					continue;
				}
			} else if(op.group != this.group || op.isEnemy == this.isEnemy) {
				continue;
			}
			targets.push(op);
		}
		if(targets.length == 0) {
			if(!isCharge) {
				this.log(segment,this.nameCapped + " cautiously wait" + (this.isPlayer ? "" : "s") + ".");
			}
			return;
		}
		if(isCharge) {
			this.lastChargeRound = this.combat.round;
		}
		var target = targets[Std.random(targets.length)];
		target.wasAttacked++;
		var targetAC = target.getAC();
		var shieldAC = 0;
		if((target.type == "COMBAT_NPC" || target.type == "COMBAT_PARTY_MEMBER") && target.character.shield.armor.maxAttacksBlocked >= target.wasAttacked) {
			shieldAC = target.character.shield.armor.ac;
			targetAC += shieldAC;
		}
		var parryBonus = 0;
		if((target.type == "COMBAT_NPC" || target.type == "COMBAT_PARTY_MEMBER") && target.isParrying && !isRanged) {
			parryBonus = -2 - target.character.strStats.toHitBonus;
			if(parryBonus > 0) {
				parryBonus = 0;
			}
		}
		if(this.type == "COMBAT_MONSTER") {
			var thac = _$TablesFighter.instance.thac(this.monster.level,targetAC);
			var _g = 0;
			var _g1 = this.monster.attacks;
			while(_g < _g1) {
				var atk = _g++;
				var atkName = this.monster.attackNames[atk];
				var roll = Const.dice(1,20) + (isCharge ? 2 : 0) + parryBonus;
				var ext = " <span class=extInfo>[rolls " + roll + " vs " + thac + " (AC " + targetAC + ")" + (isCharge ? ", +2 from charge" : "") + (target.isParrying ? ", " + parryBonus + " from parry" : "") + (shieldAC != 0 ? ", " + shieldAC + " AC from shield" : "") + "]</span>";
				if(roll < thac) {
					this.log(segment,this.nameCapped + " " + (this.isPlayer ? "try" : "tries") + " to " + atkName + " " + target.name + ", but miss" + (this.isPlayer ? "" : "es") + "." + (this.game.extendedInfo ? ext : ""));
					continue;
				}
				var row = this.monster.damage[atk];
				var dmg = Const.dice(row[0],row[1]) + row[2];
				if(dmg < 0) {
					dmg = 0;
				}
				ext += " <span class=extInfo>[DMG " + row[0] + "d" + row[1] + (row[2] > 0 ? "+" + row[2] : "") + (row[2] < 0 ? "" + row[2] : "") + " = " + dmg + "]</span>";
				this.log(segment,this.nameCapped + " " + atkName + (this.isPlayer ? "" : "s") + " " + target.name + " for " + dmg + " damage." + (this.game.extendedInfo ? ext : ""));
				var _g2 = target;
				_g2.set_hp(_g2.get_hp() - dmg);
				if(target.get_hp() <= 0) {
					target.isDead = true;
					break;
				}
			}
		} else if(this.type == "COMBAT_PARTY_MEMBER" || this.type == "COMBAT_NPC") {
			var wpn = this.character.weapon.weapon;
			var thac = this.character.classTables.thac(this.character.level,targetAC);
			var toHitBonus = isRanged ? this.character.get_dexStats().missileBonusToHit : this.character.strStats.toHitBonus;
			var rangeBonus = 0;
			if(isRanged) {
				var distance = this.distanceToOpponent(target);
				var mod = Math.floor(1.0 * distance / wpn.range);
				rangeBonus = -2 * mod;
			}
			var roll = Const.dice(1,20) + toHitBonus + (isCharge ? 2 : 0) + rangeBonus;
			var ext = " <span class=extInfo>[rolls " + roll + " vs " + thac + " (AC " + targetAC + ")";
			if(toHitBonus != 0) {
				if(toHitBonus > 0) {
					ext += ", +" + toHitBonus;
				} else {
					ext += ", " + toHitBonus;
				}
				ext += " from " + (isRanged ? "DEX" : "STR");
			}
			if(isRanged && rangeBonus != 0) {
				ext += ", " + rangeBonus + " from range";
			}
			if(isCharge) {
				ext += ", +2 from charge";
			}
			if(target.isParrying) {
				ext += ", " + parryBonus + " from parry";
			}
			ext += "]</span>";
			if(roll < thac) {
				this.log(segment,this.nameCapped + " " + (this.isPlayer ? "try" : "tries") + " to " + (isRanged ? wpn.attackRanged : wpn.attackMelee) + " " + target.name + ", but miss" + (this.isPlayer ? "" : "es") + "." + (this.game.extendedInfo ? ext : ""));
				return;
			}
			var attackStr = null;
			if(isRanged) {
				attackStr = this.isPlayer ? wpn.attackRanged : wpn.attackRanged2;
			} else {
				attackStr = this.isPlayer ? wpn.attackMelee : wpn.attackMelee2;
			}
			var row = Reflect.copy(wpn.damageVsMedium);
			row[2] += this.character.strStats.toDamageBonus;
			var dmg = Const.dice(row[0],row[1]) + row[2];
			if(dmg < 0) {
				dmg = 0;
			}
			ext += " <span class=extInfo>[DMG " + row[0] + "d" + row[1] + (row[2] > 0 ? "+" + row[2] : "") + (row[2] < 0 ? "" + row[2] : "") + " = " + dmg + "]</span>";
			this.log(segment,this.nameCapped + " " + attackStr + " " + target.name + " for " + dmg + " damage." + (this.game.extendedInfo ? ext : ""));
			var _g = target;
			_g.set_hp(_g.get_hp() - dmg);
			if(target.get_hp() <= 0) {
				target.isDead = true;
			}
		}
	}
	,getMove: function() {
		if(this.type == "COMBAT_MONSTER") {
			return this.monster.move;
		} else if(this.type == "COMBAT_PARTY_MEMBER" || this.type == "COMBAT_NPC") {
			return this.character.move;
		}
		return 0;
	}
	,getAC: function() {
		if(this.type == "COMBAT_MONSTER") {
			return this.monster.ac;
		} else if(this.type == "COMBAT_PARTY_MEMBER" || this.type == "COMBAT_NPC") {
			return this.character.ac;
		}
		return 0;
	}
	,log: function(segment,s) {
		if(this.combat.logSegment != segment) {
			this.combat.logRound += "S" + segment + ":\n";
		}
		this.combat.logRound += "&nbsp;&nbsp;" + s + "\n";
		this.combat.logSegment = segment;
	}
	,print: function() {
		var s = "&nbsp;&nbsp;&nbsp;&nbsp;";
		if(this.isDead) {
			s += "~~";
		}
		s += "**" + this.nameCapped + "**";
		if(this.type == "COMBAT_MONSTER") {
			if(this.get_hp() > 0) {
				var perc = 100.0 * this.get_hp() / this.get_maxHP();
				if(perc < 33 || this.get_hp() < this.get_maxHP() && this.get_hp() <= 2) {
					s += " <span class=wounded33>(wounded)</span>";
				} else if(perc < 66) {
					s += " <span class=wounded66>(wounded)</span>";
				} else if(perc < 100) {
					s += " <span class=wounded99>(wounded)</span>";
				}
			}
			if(this.isDead) {
				s += "~~";
			}
		} else if(this.type == "COMBAT_PARTY_MEMBER") {
			s += " (" + this.character.printHP() + "/" + this.get_maxHP() + " hp)";
			if(this.isDead) {
				s += "~~";
			}
		}
		return s + "\n";
	}
	,get_hp: function() {
		if(this.type == "COMBAT_PARTY_MEMBER" || this.type == "COMBAT_NPC") {
			return this.character.hp;
		} else if(this.type == "COMBAT_MONSTER") {
			return this._hp;
		}
		return this._hp;
	}
	,set_hp: function(v) {
		if(this.type == "COMBAT_PARTY_MEMBER" || this.type == "COMBAT_NPC") {
			this.character.hp = v;
		} else if(this.type == "COMBAT_MONSTER") {
			this._hp = v;
		}
		return v;
	}
	,get_maxHP: function() {
		if(this.type == "COMBAT_PARTY_MEMBER" || this.type == "COMBAT_NPC") {
			return this.character.maxHP;
		} else if(this.type == "COMBAT_MONSTER") {
			return this._maxHP;
		}
		return this._maxHP;
	}
	,__class__: CombatOpponent
	,__properties__: {get_maxHP:"get_maxHP",set_hp:"set_hp",get_hp:"get_hp"}
};
var Console = function(g) {
	this.game = g;
	this._console = new ConsoleJS(this.game);
	this.lastCommand = "";
};
$hxClasses["Console"] = Console;
Console.__name__ = "Console";
Console.getCommandInfo = function(cmds,list) {
	var cmd = null;
	var _g = 0;
	while(_g < list.length) {
		var c = list[_g];
		++_g;
		var _g1 = 0;
		var _g2 = c.variants;
		while(_g1 < _g2.length) {
			var v = _g2[_g1];
			++_g1;
			if(cmds == v) {
				cmd = c;
				break;
			}
		}
		if(cmd != null) {
			break;
		}
	}
	return cmd;
};
Console.getCommandHelp = function(cmds,list) {
	var cmd = Console.getCommandInfo(cmds,list);
	if(cmd == null) {
		return null;
	}
	var s = "";
	var _g = 0;
	var _g1 = cmd.variants;
	while(_g < _g1.length) {
		var v = _g1[_g];
		++_g;
		s += v + ", ";
	}
	s = HxOverrides.substr(s,0,s.length - 2) + (cmd.args != null ? " " + cmd.args : "") + " - " + cmd.help;
	return s;
};
Console.prototype = {
	game: null
	,_console: null
	,lastCommand: null
	,runCommand: function(str) {
		var tmp = str.split(" ");
		var tokens = [];
		var tokensFull = [];
		var ignored = Const.ignoredKeywords;
		if(this.game.get_state() == "STATE_COMBAT") {
			ignored = Const.ignoredCombatKeywords;
		}
		if(this.game.get_state() == "STATE_CHARGEN") {
			ignored = [];
		}
		var _g = 0;
		while(_g < tmp.length) {
			var x = tmp[_g];
			++_g;
			if(!Lambda.has(ignored,x)) {
				tokens.push(x.toLowerCase());
			}
			tokensFull.push(x.toLowerCase());
		}
		this.lastCommand = tokensFull.join(" ");
		var cmd = tokens.shift();
		tokensFull.shift();
		if(this.game.get_state() == "STATE_CHARGEN") {
			return this.game.chargen.runCommand(cmd,tokens);
		}
		var info = Console.getCommandInfo(cmd,Console.commonCommands);
		if(info != null) {
			var ret = this.runCommandCommon(info.id,tokens);
			if(ret != 0) {
				if(ret > 0) {
					this.runCommandPost();
				}
				return ret;
			}
			if(this.game.isOver) {
				this._console.print("Game over, please start a new one.");
				return -1;
			}
		}
		if(this.game.get_state() == "STATE_LOCATION") {
			var ret = this.runCommandLocation(cmd,tokens);
			if(ret == 1) {
				this.runCommandPost();
			}
			return ret;
		} else if(this.game.get_state() == "STATE_COMBAT") {
			var info = Console.getCommandInfo(cmd,Combat.commands);
			if(info == null) {
				return 0;
			}
			return this.game.combat.runCommand(info.id,tokens,tokensFull);
		}
		return 0;
	}
	,runCommandPost: function() {
		this.game.turn();
	}
	,runCommandCommon: function(cmd,tokens) {
		if(cmd == "help") {
			if(tokens.length == 0) {
				var s = "Type \"help &lt;command&gt;\" to read command help.\n" + this.getCommandList("Commonly available commands: ",Console.commonCommands) + "\n";
				if(this.game.get_state() == "STATE_LOCATION") {
					s += "Location commands: " + "wait (z)";
				} else if(this.game.get_state() == "STATE_COMBAT") {
					s += this.getCommandList("Combat commands: ",Combat.commands);
				}
				this._console.print("<span class=consoleSys>" + s + "</span>");
			} else {
				var text = Console.getCommandHelp(tokens[0],Console.commonCommands);
				if(text == null) {
					if(this.game.get_state() == "STATE_LOCATION") {
						text = Location.commandHelp.h[tokens[0]];
					} else if(this.game.get_state() == "STATE_COMBAT") {
						text = Console.getCommandHelp(tokens[0],Combat.commands);
					}
				}
				if(text != null) {
					text = Const.replaceSpecial(text);
					this._console.print("<span class=consoleSys>" + text + "</span>");
				} else {
					this._console.print("<span class=consoleSys>" + "There is no such command or no help available." + "</span>");
				}
			}
			return -1;
		} else if(cmd == "options") {
			return this.game.options.runCommand(tokens);
		} else if(cmd == "again") {
			var _this = this._console;
			if(_this.cmdHistory.length > 0) {
				_this.cmdHistory.pop();
			}
			var _this = this._console;
			var command = _this.cmdHistory.length == null ? null : _this.cmdHistory[_this.cmdHistory.length - 1];
			if(command != null) {
				return this.runCommand(command);
			}
		} else if(cmd == "inventory") {
			this.game.player.inventory.print(null);
			return -1;
		} else if(cmd == "party") {
			var _g = 0;
			var _g1 = this.game.party;
			while(_g < _g1.length) {
				var ch = _g1[_g];
				++_g;
				var s = ch.print();
				this._console.print(s);
			}
			return 1;
		}
		return 0;
	}
	,runCommandLocation: function(cmd,tokens) {
		var ret = this.game.location.runSpecialCommand(this.lastCommand);
		if(ret == 1) {
			return ret;
		}
		if(cmd == "pick" && tokens[0] == "up") {
			cmd = "get";
			tokens.shift();
		}
		if(Lambda.has(["look","l","examine","x"],cmd)) {
			if(tokens.length < 1) {
				this.game.location.print();
				return 1;
			}
			var obj = this.game.location.getEnabledObject(tokens[0]);
			if(obj == null) {
				if(this.game.player.inventory.examine(tokens) == 1) {
					return 1;
				}
				this._console.print("<span class=consoleSys>" + "I did not understand what that referred to." + "</span>");
				return -1;
			}
			if(obj.note != null) {
				this._console.print(obj.note);
			} else {
				return this.game.location.runCommand("x",tokens);
			}
			return 1;
		} else if(cmd == "wait" || cmd == "z") {
			this._console.print("Time passes...");
			return 1;
		} else {
			return this.game.location.runCommand(cmd,tokens);
		}
	}
	,print: function(s) {
		this._console.print(s);
	}
	,printNarrative: function(s) {
		this._console.print("<span class=narrative>" + s + "</span>");
	}
	,debug: function(s) {
	}
	,error: function(s) {
		this._console.print("<span class=\"consoleError\">" + s + "</span>");
	}
	,system: function(s) {
		this._console.print("<span class=consoleSys>" + s + "</span>");
	}
	,printFail: function(id) {
		if(Const.stringsFail.h[id] != null) {
			var s = Const.stringsFail.h[id][Std.random(Const.stringsFail.h[id].length)];
			this._console.print(s);
			return true;
		}
		return false;
	}
	,printString: function(id) {
		var s = Const.stringsFail.h[id][Std.random(Const.strings.h[id].length)];
		this._console.print(s);
	}
	,clear: function() {
		this._console.output.html("");
	}
	,getCommandList: function(prefix,list) {
		var s = prefix;
		var _g = 0;
		while(_g < list.length) {
			var c = list[_g];
			++_g;
			var _g1 = 0;
			var _g2 = c.variants.length;
			while(_g1 < _g2) {
				var v = _g1++;
				if(v == 0) {
					s += c.variants[v] + " (";
				} else {
					s += c.variants[v] + ", ";
				}
			}
			s = HxOverrides.substr(s,0,s.length - 2) + "), ";
		}
		s = HxOverrides.substr(s,0,s.length - 2);
		return s;
	}
	,__class__: Console
};
var ConsoleJS = function(g) {
	this.game = g;
	this.cmdHistory = [];
	this.output = $("#outputs");
	this.console = $(".console");
	this.inner = $(".console-inner");
	this.md = window.markdownit({ html : true, linkify : true, breaks : true});
	this.input = $(".console-input");
	this.input.on("keydown",null,$bind(this,this.onKeyDown));
	$('.console').click(function() {
          $('.console-input').focus();
        });
	autosize($('textarea'));
};
$hxClasses["ConsoleJS"] = ConsoleJS;
ConsoleJS.__name__ = "ConsoleJS";
ConsoleJS.prototype = {
	game: null
	,console: null
	,output: null
	,input: null
	,inner: null
	,md: null
	,cursorHistory: null
	,cmdHistory: null
	,onKeyDown: function(event) {
		if(event.which == 38 || event.key == "k" && event.ctrlKey == true) {
			event.preventDefault();
			if(this.cursorHistory == 0) {
				return;
			}
			this.cursorHistory--;
			this.input.val(this.cmdHistory[this.cursorHistory]);
		} else if(event.which == 40 || event.key == "j" && event.ctrlKey == true) {
			event.preventDefault();
			if(this.cursorHistory > this.cmdHistory.length - 1) {
				this.input.val("");
				return;
			}
			this.cursorHistory++;
			this.input.val(this.cmdHistory[this.cursorHistory]);
		} else if(event.which == 13) {
			event.preventDefault();
			var cmd = StringTools.trim(this.input.val());
			if(cmd.length == 0) {
				return;
			}
			if(this.cmdHistory[this.cmdHistory.length - 1] != cmd) {
				this.cmdHistory.push(cmd);
				if(this.cmdHistory.length > 10) {
					this.cmdHistory.shift();
				}
			}
			this.cursorHistory = this.cmdHistory.length;
			this.output.append("<div class='output-cmd'>" + cmd + "</div>");
			this.input.val("");
			autosize.update($('textarea'));
			$("html, body").animate({ scrollTop : $(window.document).height()},300);
			try {
				var ret = this.game.console.runCommand(cmd);
				if(ret == 0) {
					this.print("I did not understand that.");
					return;
				}
			} catch( _g ) {
				haxe_NativeStackTrace.lastError = _g;
				this.print("**Exception: " + haxe_CallStack.toString(haxe_CallStack.exceptionStack()) + "**");
			}
		}
	}
	,getLast: function() {
		if(this.cmdHistory.length == null) {
			return null;
		} else {
			return this.cmdHistory[this.cmdHistory.length - 1];
		}
	}
	,removeLast: function() {
		if(this.cmdHistory.length > 0) {
			this.cmdHistory.pop();
		}
	}
	,clear: function() {
		this.output.html("");
	}
	,print: function(s) {
		this.output.append(this.md.render(s));
		this.console.scrollTop(this.inner.height());
	}
	,error: function(s) {
		this.print("<span class=\"consoleError\">" + s + "</span>");
	}
	,debug: function(s) {
	}
	,__class__: ConsoleJS
};
var haxe_ds_Map = {};
haxe_ds_Map.set = function(this1,key,value) {
	this1.set(key,value);
};
haxe_ds_Map.get = function(this1,key) {
	return this1.get(key);
};
haxe_ds_Map.exists = function(this1,key) {
	return this1.exists(key);
};
haxe_ds_Map.remove = function(this1,key) {
	return this1.remove(key);
};
haxe_ds_Map.keys = function(this1) {
	return this1.keys();
};
haxe_ds_Map.iterator = function(this1) {
	return this1.iterator();
};
haxe_ds_Map.keyValueIterator = function(this1) {
	return this1.keyValueIterator();
};
haxe_ds_Map.copy = function(this1) {
	return this1.copy();
};
haxe_ds_Map.toString = function(this1) {
	return this1.toString();
};
haxe_ds_Map.clear = function(this1) {
	this1.clear();
};
haxe_ds_Map.arrayWrite = function(this1,k,v) {
	this1.set(k,v);
	return v;
};
haxe_ds_Map.toStringMap = function(t) {
	return new haxe_ds_StringMap();
};
haxe_ds_Map.toIntMap = function(t) {
	return new haxe_ds_IntMap();
};
haxe_ds_Map.toEnumValueMapMap = function(t) {
	return new haxe_ds_EnumValueMap();
};
haxe_ds_Map.toObjectMap = function(t) {
	return new haxe_ds_ObjectMap();
};
haxe_ds_Map.fromStringMap = function(map) {
	return map;
};
haxe_ds_Map.fromIntMap = function(map) {
	return map;
};
haxe_ds_Map.fromObjectMap = function(map) {
	return map;
};
var Const = function() { };
$hxClasses["Const"] = Const;
Const.__name__ = "Const";
Const.traceStack = function() {
	haxe_Log.trace(haxe_CallStack.toString(haxe_CallStack.callStack()),{ fileName : "Const.hx", lineNumber : 66, className : "Const", methodName : "traceStack"});
};
Const.dice = function(x,y) {
	var r = 0;
	var _g = 0;
	var _g1 = x;
	while(_g < _g1) {
		var i = _g++;
		r += 1 + Std.random(y);
	}
	return r;
};
Const.replaceSpecial = function(s) {
	s = StringTools.replace(s,"<","&lt;");
	s = StringTools.replace(s,">","&gt;");
	return s;
};
Const.letterToNum = function(s) {
	var group = HxOverrides.cca(s,0);
	if(group >= 65 && group <= 90) {
		return group - 65;
	} else if(group >= 97 && group <= 122) {
		return group - 97;
	} else {
		return -1;
	}
};
Const.potionDrinkMsg = function(char,item,dose,isKnown) {
	var potion = item.potion;
	var potionName = isKnown ? potion.name.toLowerCase() : "potion of some kind";
	var doseStr = "";
	if(dose == 1) {
		doseStr = " a full ";
	} else if(dose == 2) {
		if(potion.doses == 2) {
			doseStr = " a half of a ";
		} else if(potion.doses == 3) {
			doseStr = " a third of a ";
		}
		if(item.potionDoses == 1) {
			doseStr = " the last of a ";
		}
	}
	return char.nameCapped + " drink" + (char.isPlayer ? "" : "s") + doseStr + " " + potionName;
};
Const.getVar = function(s) {
	return window.getComputedStyle(window.document.documentElement).getPropertyValue(s);
};
Const.getVarInt = function(s) {
	return Std.parseInt(window.getComputedStyle(window.document.documentElement).getPropertyValue(s));
};
Const.setVar = function(key,val) {
	window.document.documentElement.style.setProperty(key,val);
};
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
$hxClasses["EReg"] = EReg;
EReg.__name__ = "EReg";
EReg.escape = function(s) {
	return s.replace(EReg.escapeRe,"\\$&");
};
EReg.prototype = {
	r: null
	,match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw haxe_Exception.thrown("EReg::matched");
		}
	}
	,matchedLeft: function() {
		if(this.r.m == null) {
			throw haxe_Exception.thrown("No string matched");
		}
		return HxOverrides.substr(this.r.s,0,this.r.m.index);
	}
	,matchedRight: function() {
		if(this.r.m == null) {
			throw haxe_Exception.thrown("No string matched");
		}
		var sz = this.r.m.index + this.r.m[0].length;
		return HxOverrides.substr(this.r.s,sz,this.r.s.length - sz);
	}
	,matchedPos: function() {
		if(this.r.m == null) {
			throw haxe_Exception.thrown("No string matched");
		}
		return { pos : this.r.m.index, len : this.r.m[0].length};
	}
	,matchSub: function(s,pos,len) {
		if(len == null) {
			len = -1;
		}
		if(this.r.global) {
			this.r.lastIndex = pos;
			this.r.m = this.r.exec(len < 0 ? s : HxOverrides.substr(s,0,pos + len));
			var b = this.r.m != null;
			if(b) {
				this.r.s = s;
			}
			return b;
		} else {
			var b = this.match(len < 0 ? HxOverrides.substr(s,pos,null) : HxOverrides.substr(s,pos,len));
			if(b) {
				this.r.s = s;
				this.r.m.index += pos;
			}
			return b;
		}
	}
	,split: function(s) {
		var d = "#__delim__#";
		return s.replace(this.r,d).split(d);
	}
	,replace: function(s,by) {
		return s.replace(this.r,by);
	}
	,map: function(s,f) {
		var offset = 0;
		var buf_b = "";
		while(true) {
			if(offset >= s.length) {
				break;
			} else if(!this.matchSub(s,offset)) {
				buf_b += Std.string(HxOverrides.substr(s,offset,null));
				break;
			}
			var p = this.matchedPos();
			buf_b += Std.string(HxOverrides.substr(s,offset,p.pos - offset));
			buf_b += Std.string(f(this));
			if(p.len == 0) {
				buf_b += Std.string(HxOverrides.substr(s,p.pos,1));
				offset = p.pos + 1;
			} else {
				offset = p.pos + p.len;
			}
			if(!this.r.global) {
				break;
			}
		}
		if(!this.r.global && offset > 0 && offset < s.length) {
			buf_b += Std.string(HxOverrides.substr(s,offset,null));
		}
		return buf_b;
	}
	,__class__: EReg
};
var EnumValue = {};
EnumValue.match = function(this1,pattern) {
	return false;
};
var Event = function(game) {
	this.id = "?";
	this.game = game;
	this.name = "?";
	this.isEnabled = true;
	this.state = 0;
};
$hxClasses["Event"] = Event;
Event.__name__ = "Event";
Event.prototype = {
	id: null
	,game: null
	,name: null
	,isEnabled: null
	,state: null
	,print: function(s) {
		this.game.console._console.print(s);
	}
	,turn: function() {
		return _$EventResult.EVENT_CONTINUE;
	}
	,__class__: Event
};
var Game = $hx_exports["Game"] = function() {
	this.isOver = false;
	this._state = "STATE_CHARGEN";
	this.location = null;
	this.extendedInfo = true;
	this.options = new Options(this);
	this.combat = new Combat(this);
	this.chargen = new Chargen(this);
	this.debug = { initiative : false};
	this.party = [];
	this.console = new Console(this);
	this.console._console.print("### Welcome to Lapopie DEMO.");
	this.console._console.print("Let's start with generating your character.");
	this.chargen.print();
};
$hxClasses["Game"] = Game;
Game.__name__ = "Game";
Game.inst = null;
Game.main = function() {
	_$ItemsTables.fixWeapons();
	Game.inst = new Game();
};
Game.prototype = {
	chargen: null
	,options: null
	,console: null
	,scene: null
	,location: null
	,combat: null
	,player: null
	,party: null
	,extendedInfo: null
	,debug: null
	,_state: null
	,isOver: null
	,start: function(playerStats) {
		this.set_state("STATE_LOCATION");
		this.player = new Character(this,_$CharacterClass.CLASS_CLERIC,playerStats);
		this.player.name = "you";
		this.player.nameCapped = "You";
		this.player.isPlayer = true;
		this.player.giveItem("ITEM_ARMOR","chain",true);
		this.player.giveItem("ITEM_ARMOR","shieldMedium",true);
		this.player.giveItem("ITEM_WEAPON","heavyMace",true);
		this.player.giveItem("ITEM_POTION","healing",false);
		this.player.giveItem("ITEM_POTION","healing",false);
		this.player.giveItem("ITEM_POTION","extraHealing",false);
		this.party.push(this.player);
		var _g = 6 + Const.dice(2,6);
		var _g1 = 6 + Const.dice(2,6);
		var _g2 = 6 + Const.dice(2,6);
		var _g3 = 6 + Const.dice(2,6);
		var _g4 = 6 + Const.dice(2,6);
		var jean = new Character(this,_$CharacterClass.CLASS_FIGHTER,new Stats(_g,0,_g1,_g2,_g3,6 + Const.dice(2,6),_g4));
		jean.name = "Jean";
		jean.nameCapped = "Jean";
		jean.giveItem("ITEM_ARMOR","studded",true);
		jean.giveItem("ITEM_WEAPON","club",true);
		this.party.push(jean);
		this.console._console.print("<span class=narrative>" + "The dusk came over the Rez forest. You and your companion were settling in for an evening by the fire near the road leading to Lapopie. But then you've heard a distant howling from somewhere in the thick woods..." + "</span>");
		this.scene = new infos_ForestRoadDemo(this);
		this.console.runCommand("stats");
		this.scene.enter();
		this.console._console.print("_Note: You can only \"wait\" on this scene so far._");
		this.console._console.print("<u>Hint: Use \"help\" command.</u>");
	}
	,turn: function() {
		this.scene.turn();
	}
	,finish: function(res) {
		this.isOver = true;
		if(res == "loseHP") {
			this.console._console.print("<span class=narrative>" + "Bleeding from your wounds, you lose consciousness never to wake up..." + "</span>");
		}
		this.console._console.print("### GAME OVER");
	}
	,todo: function(s) {
		this.console._console.print("<span class=todo>TODO " + s + "</span>");
	}
	,get_state: function() {
		return this._state;
	}
	,set_state: function(st) {
		this._state = st;
		return st;
	}
	,__class__: Game
	,__properties__: {set_state:"set_state",get_state:"get_state"}
};
var HxOverrides = function() { };
$hxClasses["HxOverrides"] = HxOverrides;
HxOverrides.__name__ = "HxOverrides";
HxOverrides.dateStr = function(date) {
	var m = date.getMonth() + 1;
	var d = date.getDate();
	var h = date.getHours();
	var mi = date.getMinutes();
	var s = date.getSeconds();
	return date.getFullYear() + "-" + (m < 10 ? "0" + m : "" + m) + "-" + (d < 10 ? "0" + d : "" + d) + " " + (h < 10 ? "0" + h : "" + h) + ":" + (mi < 10 ? "0" + mi : "" + mi) + ":" + (s < 10 ? "0" + s : "" + s);
};
HxOverrides.strDate = function(s) {
	switch(s.length) {
	case 8:
		var k = s.split(":");
		var d = new Date();
		d["setTime"](0);
		d["setUTCHours"](k[0]);
		d["setUTCMinutes"](k[1]);
		d["setUTCSeconds"](k[2]);
		return d;
	case 10:
		var k = s.split("-");
		return new Date(k[0],k[1] - 1,k[2],0,0,0);
	case 19:
		var k = s.split(" ");
		var y = k[0].split("-");
		var t = k[1].split(":");
		return new Date(y[0],y[1] - 1,y[2],t[0],t[1],t[2]);
	default:
		throw haxe_Exception.thrown("Invalid date format : " + s);
	}
};
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.indexOf = function(a,obj,i) {
	var len = a.length;
	if(i < 0) {
		i += len;
		if(i < 0) {
			i = 0;
		}
	}
	while(i < len) {
		if(((a[i]) === obj)) {
			return i;
		}
		++i;
	}
	return -1;
};
HxOverrides.lastIndexOf = function(a,obj,i) {
	var len = a.length;
	if(i >= len) {
		i = len - 1;
	} else if(i < 0) {
		i += len;
	}
	while(i >= 0) {
		if(((a[i]) === obj)) {
			return i;
		}
		--i;
	}
	return -1;
};
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
HxOverrides.keyValueIter = function(a) {
	return new haxe_iterators_ArrayKeyValueIterator(a);
};
HxOverrides.now = function() {
	return Date.now();
};
var IntIterator = function(min,max) {
	this.min = min;
	this.max = max;
};
$hxClasses["IntIterator"] = IntIterator;
IntIterator.__name__ = "IntIterator";
IntIterator.prototype = {
	min: null
	,max: null
	,hasNext: function() {
		return this.min < this.max;
	}
	,next: function() {
		return this.min++;
	}
	,__class__: IntIterator
};
var Inventory = function(g,ch) {
	this.game = g;
	this.character = ch;
	this.list = new haxe_ds_List();
};
$hxClasses["Inventory"] = Inventory;
Inventory.__name__ = "Inventory";
Inventory.prototype = {
	game: null
	,character: null
	,list: null
	,getEmptyID: function() {
		var maxID = 1;
		var _g_head = this.list.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var item = val;
			if(item.id > maxID) {
				maxID = item.id;
			}
		}
		return maxID + 1;
	}
	,add: function(item) {
		this.list.add(item);
	}
	,examine: function(tokens) {
		var name = tokens.join(" ");
		var item = null;
		var _g_head = this.list.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var it = val;
			if(it.getName().toLowerCase() == name) {
				item = it;
				break;
			}
		}
		if(item == null) {
			return 0;
		}
		var _this = this.game.console;
		var s = item.getNote();
		_this._console.print(s);
		return 1;
	}
	,remove: function(item,amount) {
		if(amount == null) {
			amount = 1;
		}
		this.list.remove(item);
	}
	,print: function(type) {
		var s = "";
		var idx = 0;
		var _g_head = this.list.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var item = val;
			if(type != null && item.type != type) {
				continue;
			}
			s += String.fromCodePoint((97 + idx)) + ") " + item.print() + "\n";
			++idx;
		}
		this.game.console._console.print(s);
	}
	,get: function(type,itemIndex) {
		var idx = 0;
		var _g_head = this.list.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var item = val;
			if(item.type != type) {
				continue;
			}
			if(itemIndex == idx) {
				return item;
			}
			++idx;
		}
		return null;
	}
	,getByID: function(id) {
		var _g_head = this.list.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var item = val;
			if(item.id == id) {
				return item;
			}
		}
		return null;
	}
	,__class__: Inventory
};
var Item = function() {
	this.id = 0;
	this.amount = 1;
};
$hxClasses["Item"] = Item;
Item.__name__ = "Item";
Item.prototype = {
	id: null
	,amount: null
	,type: null
	,weapon: null
	,armor: null
	,potion: null
	,potionDoses: null
	,print: function() {
		var s = this.getName();
		if(this.type == "ITEM_WEAPON") {
			var dmg = this.weapon.damageVsMedium;
			s += " (" + dmg[0] + "d" + dmg[1] + (dmg[2] < 0 ? "" + dmg[2] : "") + (dmg[2] > 0 ? "+" + dmg[2] : "") + ")";
		} else if(this.type == "ITEM_ARMOR") {
			s += " (AC adj " + this.armor.ac + ")";
		} else if(this.type == "ITEM_POTION") {
			s += " (" + this.potionDoses + "/" + this.potion.doses + " doses left)";
		}
		return s;
	}
	,getID: function() {
		if(this.type == "ITEM_WEAPON") {
			return this.weapon.id;
		} else if(this.type == "ITEM_ARMOR") {
			return this.armor.id;
		} else if(this.type == "ITEM_POTION") {
			return this.potion.id;
		}
		return "?todo?";
	}
	,getName: function() {
		if(this.type == "ITEM_WEAPON") {
			return this.weapon.name;
		} else if(this.type == "ITEM_ARMOR") {
			return this.armor.name;
		} else if(this.type == "ITEM_POTION") {
			return this.potion.name;
		}
		return "?todo?";
	}
	,getNameLower: function() {
		return this.getName().toLowerCase();
	}
	,getNote: function() {
		if(this.type == "ITEM_WEAPON") {
			return "?todo?";
		} else if(this.type == "ITEM_ARMOR") {
			return "?todo?";
		} else if(this.type == "ITEM_POTION") {
			return this.potion.note;
		}
		return "?todo?";
	}
	,__class__: Item
};
var Lambda = function() { };
$hxClasses["Lambda"] = Lambda;
Lambda.__name__ = "Lambda";
Lambda.array = function(it) {
	var a = [];
	var i = $getIterator(it);
	while(i.hasNext()) {
		var i1 = i.next();
		a.push(i1);
	}
	return a;
};
Lambda.list = function(it) {
	var l = new haxe_ds_List();
	var i = $getIterator(it);
	while(i.hasNext()) {
		var i1 = i.next();
		l.add(i1);
	}
	return l;
};
Lambda.map = function(it,f) {
	var _g = [];
	var x = $getIterator(it);
	while(x.hasNext()) {
		var x1 = x.next();
		_g.push(f(x1));
	}
	return _g;
};
Lambda.mapi = function(it,f) {
	var i = 0;
	var _g = [];
	var x = $getIterator(it);
	while(x.hasNext()) {
		var x1 = x.next();
		_g.push(f(i++,x1));
	}
	return _g;
};
Lambda.flatten = function(it) {
	var _g = [];
	var e = $getIterator(it);
	while(e.hasNext()) {
		var e1 = e.next();
		var x = $getIterator(e1);
		while(x.hasNext()) {
			var x1 = x.next();
			_g.push(x1);
		}
	}
	return _g;
};
Lambda.flatMap = function(it,f) {
	var _g = [];
	var x = $getIterator(it);
	while(x.hasNext()) {
		var x1 = x.next();
		_g.push(f(x1));
	}
	var _g1 = [];
	var e = $getIterator(_g);
	while(e.hasNext()) {
		var e1 = e.next();
		var x = $getIterator(e1);
		while(x.hasNext()) {
			var x1 = x.next();
			_g1.push(x1);
		}
	}
	return _g1;
};
Lambda.has = function(it,elt) {
	var x = $getIterator(it);
	while(x.hasNext()) {
		var x1 = x.next();
		if(x1 == elt) {
			return true;
		}
	}
	return false;
};
Lambda.exists = function(it,f) {
	var x = $getIterator(it);
	while(x.hasNext()) {
		var x1 = x.next();
		if(f(x1)) {
			return true;
		}
	}
	return false;
};
Lambda.foreach = function(it,f) {
	var x = $getIterator(it);
	while(x.hasNext()) {
		var x1 = x.next();
		if(!f(x1)) {
			return false;
		}
	}
	return true;
};
Lambda.iter = function(it,f) {
	var x = $getIterator(it);
	while(x.hasNext()) {
		var x1 = x.next();
		f(x1);
	}
};
Lambda.filter = function(it,f) {
	var _g = [];
	var x = $getIterator(it);
	while(x.hasNext()) {
		var x1 = x.next();
		if(f(x1)) {
			_g.push(x1);
		}
	}
	return _g;
};
Lambda.fold = function(it,f,first) {
	var x = $getIterator(it);
	while(x.hasNext()) {
		var x1 = x.next();
		first = f(x1,first);
	}
	return first;
};
Lambda.foldi = function(it,f,first) {
	var i = 0;
	var x = $getIterator(it);
	while(x.hasNext()) {
		var x1 = x.next();
		first = f(x1,first,i);
		++i;
	}
	return first;
};
Lambda.count = function(it,pred) {
	var n = 0;
	if(pred == null) {
		var _ = $getIterator(it);
		while(_.hasNext()) {
			var _1 = _.next();
			++n;
		}
	} else {
		var x = $getIterator(it);
		while(x.hasNext()) {
			var x1 = x.next();
			if(pred(x1)) {
				++n;
			}
		}
	}
	return n;
};
Lambda.empty = function(it) {
	return !$getIterator(it).hasNext();
};
Lambda.indexOf = function(it,v) {
	var i = 0;
	var v2 = $getIterator(it);
	while(v2.hasNext()) {
		var v21 = v2.next();
		if(v == v21) {
			return i;
		}
		++i;
	}
	return -1;
};
Lambda.find = function(it,f) {
	var v = $getIterator(it);
	while(v.hasNext()) {
		var v1 = v.next();
		if(f(v1)) {
			return v1;
		}
	}
	return null;
};
Lambda.findIndex = function(it,f) {
	var i = 0;
	var v = $getIterator(it);
	while(v.hasNext()) {
		var v1 = v.next();
		if(f(v1)) {
			return i;
		}
		++i;
	}
	return -1;
};
Lambda.concat = function(a,b) {
	var l = [];
	var x = $getIterator(a);
	while(x.hasNext()) {
		var x1 = x.next();
		l.push(x1);
	}
	var x = $getIterator(b);
	while(x.hasNext()) {
		var x1 = x.next();
		l.push(x1);
	}
	return l;
};
var Location = function(id,game,name,note,actions,objects) {
	this.id = id;
	this.game = game;
	this.name = name;
	this.note = note;
	this.actions = actions;
	this.objects = objects;
};
$hxClasses["Location"] = Location;
Location.__name__ = "Location";
Location.prototype = {
	id: null
	,game: null
	,name: null
	,note: null
	,actions: null
	,objects: null
	,runSpecialCommand: function(cmd) {
		var _g = 0;
		var _g1 = this.actions;
		while(_g < _g1.length) {
			var a = _g1[_g];
			++_g;
			if(Lambda.has(a.names,cmd)) {
				if(a.func != null) {
					a.func();
				}
				return 1;
			}
		}
		return 0;
	}
	,runCommand: function(cmd,tokens) {
		if(tokens.length < 1) {
			return 0;
		}
		var obj = null;
		var action = null;
		obj = this.game.location.getEnabledObject(tokens[0]);
		if(obj == null) {
			return 0;
		}
		if(obj.simpleActions != null && obj.simpleActions.h[cmd] != null) {
			this.game.console._console.print(obj.simpleActions.h[cmd]);
			return 1;
		}
		if(obj.actions != null) {
			var _g = 0;
			var _g1 = obj.actions;
			while(_g < _g1.length) {
				var a = _g1[_g];
				++_g;
				if(Lambda.has(a.names,cmd)) {
					action = a;
					break;
				}
			}
		}
		if(action == null) {
			var _this = this.game.console;
			var ret;
			if(Const.stringsFail.h[cmd] != null) {
				var s = Const.stringsFail.h[cmd][Std.random(Const.stringsFail.h[cmd].length)];
				_this._console.print(s);
				ret = true;
			} else {
				ret = false;
			}
			if(ret) {
				return -1;
			}
			return 0;
		}
		if(action.onlyOnce && action.isEnabled == false) {
			this.game.console._console.print("You have already tried that.");
			return -1;
		}
		if(action.note != null) {
			this.game.console._console.print(action.note);
		}
		if(action.func != null) {
			action.func(obj);
		}
		if(action.onlyOnce) {
			action.isEnabled = false;
		}
		if(action.result != null) {
			return this.handleActionResult(action.result);
		}
		return 1;
	}
	,handleActionResult: function(result) {
		this.game.console._console.print("<span class=\"consoleError\">" + ("No result handler for " + Std.string(result)) + "</span>");
		return 1;
	}
	,print: function() {
		this.game.console._console.print("**" + this.name + "**\n" + this.note);
		var s_b = "";
		var o = haxe_ds_StringMap.valueIterator(this.objects.h);
		while(o.hasNext()) {
			var o1 = o.next();
			if(o1.isEnabled && o1.locationNote != null) {
				s_b += Std.string(o1.locationNote);
				s_b += " ";
			}
		}
		if(s_b.length > 0) {
			this.game.console._console.print(s_b);
		}
	}
	,getEnabledObject: function(name) {
		var o = haxe_ds_StringMap.valueIterator(this.objects.h);
		while(o.hasNext()) {
			var o1 = o.next();
			if(o1.isEnabled && Lambda.has(o1.names,name)) {
				return o1;
			}
		}
		return null;
	}
	,__class__: Location
};
Math.__name__ = "Math";
var Options = function(g) {
	var _g = new haxe_ds_StringMap();
	_g.h["font"] = { id : "font", type : "string", name : "Font family", values : ["crimson","dos","monospace","ps55","vt323"]};
	_g.h["fontsize"] = { id : "fontSize", type : "int", name : "Font size"};
	this.options = _g;
	this.game = g;
	this.font = window.getComputedStyle(window.document.documentElement).getPropertyValue("--text-font");
	this.fontSize = Std.parseInt(window.getComputedStyle(window.document.documentElement).getPropertyValue("--text-font-size"));
};
$hxClasses["Options"] = Options;
Options.__name__ = "Options";
Options.prototype = {
	game: null
	,font: null
	,fontSize: null
	,runCommand: function(tokens) {
		if(tokens.length == 0) {
			this.print();
			return -1;
		}
		var key = tokens[0];
		var info = this.options.h[key];
		if(info == null) {
			this.game.console._console.print("No such option.");
			return -1;
		}
		if(tokens.length == 1) {
			this.game.console._console.print(key + " = " + Std.string(Reflect.field(this,info.id)));
			return -1;
		}
		var val = tokens[1];
		if(info.values != null) {
			if(!Lambda.has(info.values,val)) {
				var s = "Allowed values: [" + info.values.join(", ") + "]";
				this.game.console._console.print(s);
				return -1;
			}
		}
		if(info.type == "int") {
			val = Std.parseInt(val);
		}
		this[info.id] = val;
		this.setPost(info.id);
		return -1;
	}
	,setPost: function(key) {
		if(key == "font") {
			var val = this.font;
			window.document.documentElement.style.setProperty("--text-font",val);
		} else if(key == "fontSize") {
			var val = this.fontSize + "px";
			window.document.documentElement.style.setProperty("--text-font-size",val);
		}
	}
	,print: function() {
		var s = "Options:\n";
		var f = haxe_ds_StringMap.keysIterator(this.options.h);
		while(f.hasNext()) {
			var f1 = f.next();
			var o = this.options.h[f1];
			s += "&nbsp;&nbsp;&nbsp;&nbsp;" + o.id + " = " + Std.string(Reflect.field(this,o.id)) + " - " + o.name;
			if(o.values != null) {
				s += " [" + o.values.join(", ") + "]";
			}
			s += "\n";
		}
		this.game.console._console.print(s);
	}
	,p: function(s) {
		this.game.console._console.print(s);
	}
	,options: null
	,__class__: Options
};
var Reflect = function() { };
$hxClasses["Reflect"] = Reflect;
Reflect.__name__ = "Reflect";
Reflect.hasField = function(o,field) {
	return Object.prototype.hasOwnProperty.call(o,field);
};
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( _g ) {
		return null;
	}
};
Reflect.setField = function(o,field,value) {
	o[field] = value;
};
Reflect.getProperty = function(o,field) {
	var tmp;
	if(o == null) {
		return null;
	} else {
		var tmp1;
		if(o.__properties__) {
			tmp = o.__properties__["get_" + field];
			tmp1 = tmp;
		} else {
			tmp1 = false;
		}
		if(tmp1) {
			return o[tmp]();
		} else {
			return o[field];
		}
	}
};
Reflect.setProperty = function(o,field,value) {
	var tmp;
	var tmp1;
	if(o.__properties__) {
		tmp = o.__properties__["set_" + field];
		tmp1 = tmp;
	} else {
		tmp1 = false;
	}
	if(tmp1) {
		o[tmp](value);
	} else {
		o[field] = value;
	}
};
Reflect.callMethod = function(o,func,args) {
	return func.apply(o,args);
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
Reflect.isFunction = function(f) {
	if(typeof(f) == "function") {
		return !(f.__name__ || f.__ename__);
	} else {
		return false;
	}
};
Reflect.compare = function(a,b) {
	if(a == b) {
		return 0;
	} else if(a > b) {
		return 1;
	} else {
		return -1;
	}
};
Reflect.compareMethods = function(f1,f2) {
	if(f1 == f2) {
		return true;
	}
	if(!Reflect.isFunction(f1) || !Reflect.isFunction(f2)) {
		return false;
	}
	if(f1.scope == f2.scope && f1.method == f2.method) {
		return f1.method != null;
	} else {
		return false;
	}
};
Reflect.isObject = function(v) {
	if(v == null) {
		return false;
	}
	var t = typeof(v);
	if(!(t == "string" || t == "object" && v.__enum__ == null)) {
		if(t == "function") {
			return (v.__name__ || v.__ename__) != null;
		} else {
			return false;
		}
	} else {
		return true;
	}
};
Reflect.isEnumValue = function(v) {
	if(v != null) {
		return v.__enum__ != null;
	} else {
		return false;
	}
};
Reflect.deleteField = function(o,field) {
	if(!Object.prototype.hasOwnProperty.call(o,field)) {
		return false;
	}
	delete(o[field]);
	return true;
};
Reflect.copy = function(o) {
	if(o == null) {
		return null;
	}
	var o2 = { };
	var _g = 0;
	var _g1 = Reflect.fields(o);
	while(_g < _g1.length) {
		var f = _g1[_g];
		++_g;
		o2[f] = Reflect.field(o,f);
	}
	return o2;
};
Reflect.makeVarArgs = function(f) {
	return function() {
		var a = Array.prototype.slice;
		var a1 = arguments;
		var a2 = a.call(a1);
		return f(a2);
	};
};
var Scene = function(g) {
	this.game = g;
	this.locations = [];
	this.events = [];
	this.console = this.game.console;
};
$hxClasses["Scene"] = Scene;
Scene.__name__ = "Scene";
Scene.prototype = {
	game: null
	,console: null
	,locations: null
	,events: null
	,startingLocation: null
	,turn: function() {
		var _g = 0;
		var _g1 = this.events;
		while(_g < _g1.length) {
			var e = _g1[_g];
			++_g;
			if(e.isEnabled) {
				var ret = e.turn();
				if(ret == _$EventResult.EVENT_STOP) {
					e.isEnabled = false;
				}
			}
		}
	}
	,enter: function() {
		var _g = 0;
		var _g1 = this.locations;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			var o = haxe_ds_StringMap.valueIterator(l.objects.h);
			while(o.hasNext()) {
				var o1 = o.next();
				if(o1.state == null) {
					o1.state = 0;
				}
				if(o1.isEnabled == null) {
					o1.isEnabled = true;
				}
			}
		}
		this.game.location = this.startingLocation;
		this.game.set_state("STATE_LOCATION");
		this.game.location.print();
	}
	,moveTo: function(id) {
		if(this.game.isOver) {
			return;
		}
		var _g = 0;
		var _g1 = this.locations;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(l.id == id) {
				this.game.location = l;
				this.game.location.print();
				return;
			}
		}
	}
	,move: function(id) {
		var newloc = null;
		var _g = 0;
		var _g1 = this.locations;
		while(_g < _g1.length) {
			var loc = _g1[_g];
			++_g;
			if(loc.id == id) {
				newloc = loc;
				break;
			}
		}
		if(newloc == null) {
			this.game.console._console.print("<span class=\"consoleError\">" + ("No such location: " + id + ".") + "</span>");
			return;
		}
		this.game.location = newloc;
		this.game.location.print();
	}
	,print: function(s) {
		this.game.console._console.print(s);
	}
	,printFail: function(id) {
		var _this = this.game.console;
		if(Const.stringsFail.h[id] != null) {
			var s = Const.stringsFail.h[id][Std.random(Const.stringsFail.h[id].length)];
			_this._console.print(s);
		}
	}
	,printString: function(id) {
		var _this = this.game.console;
		var s = Const.stringsFail.h[id][Std.random(Const.strings.h[id].length)];
		_this._console.print(s);
	}
	,__class__: Scene
};
var Stats = function(str,str18,dex,con,int,wis,cha) {
	this.str = str;
	this.str18 = str18;
	if(this.str == 18 && this.str18 == 0) {
		this.str18 = Std.random(100);
	}
	this.dex = dex;
	this.con = con;
	this.int = int;
	this.wis = wis;
	this.cha = cha;
};
$hxClasses["Stats"] = Stats;
Stats.__name__ = "Stats";
Stats.prototype = {
	str: null
	,str18: null
	,dex: null
	,con: null
	,int: null
	,wis: null
	,cha: null
	,get: function(idx) {
		return Reflect.field(this,Stats.order[idx]);
	}
	,set: function(idx,val) {
		this[Stats.order[idx]] = val;
	}
	,getChargenString: function(idx,minStats) {
		var val = this.get(idx);
		var s = "<span class=" + (val >= minStats[idx] ? "normal" : "red") + ">" + Stats.order[idx].toUpperCase() + " " + val + (val < minStats[idx] ? " (min " + minStats[idx] + ")" : "") + "</span>";
		return s;
	}
	,checkMin: function(minStats) {
		var s = "";
		var val = this.get(0);
		if(val < minStats[0]) {
			s += "Your " + Stats.names[0] + " is too low.\n";
		}
		var val = this.get(1);
		if(val < minStats[1]) {
			s += "Your " + Stats.names[1] + " is too low.\n";
		}
		var val = this.get(2);
		if(val < minStats[2]) {
			s += "Your " + Stats.names[2] + " is too low.\n";
		}
		var val = this.get(3);
		if(val < minStats[3]) {
			s += "Your " + Stats.names[3] + " is too low.\n";
		}
		var val = this.get(4);
		if(val < minStats[4]) {
			s += "Your " + Stats.names[4] + " is too low.\n";
		}
		var val = this.get(5);
		if(val < minStats[5]) {
			s += "Your " + Stats.names[5] + " is too low.\n";
		}
		return s;
	}
	,__class__: Stats
};
var Std = function() { };
$hxClasses["Std"] = Std;
Std.__name__ = "Std";
Std.is = function(v,t) {
	return js_Boot.__instanceof(v,t);
};
Std.isOfType = function(v,t) {
	return js_Boot.__instanceof(v,t);
};
Std.downcast = function(value,c) {
	if(js_Boot.__downcastCheck(value,c)) {
		return value;
	} else {
		return null;
	}
};
Std.instance = function(value,c) {
	if(js_Boot.__downcastCheck(value,c)) {
		return value;
	} else {
		return null;
	}
};
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.int = function(x) {
	return x | 0;
};
Std.parseInt = function(x) {
	if(x != null) {
		var _g = 0;
		var _g1 = x.length;
		while(_g < _g1) {
			var i = _g++;
			var c = x.charCodeAt(i);
			if(c <= 8 || c >= 14 && c != 32 && c != 45) {
				var nc = x.charCodeAt(i + 1);
				var v = parseInt(x,nc == 120 || nc == 88 ? 16 : 10);
				if(isNaN(v)) {
					return null;
				} else {
					return v;
				}
			}
		}
	}
	return null;
};
Std.parseFloat = function(x) {
	return parseFloat(x);
};
Std.random = function(x) {
	if(x <= 0) {
		return 0;
	} else {
		return Math.floor(Math.random() * x);
	}
};
var StringBuf = function() {
	this.b = "";
};
$hxClasses["StringBuf"] = StringBuf;
StringBuf.__name__ = "StringBuf";
StringBuf.prototype = {
	b: null
	,get_length: function() {
		return this.b.length;
	}
	,add: function(x) {
		this.b += Std.string(x);
	}
	,addChar: function(c) {
		this.b += String.fromCodePoint(c);
	}
	,addSub: function(s,pos,len) {
		this.b += len == null ? HxOverrides.substr(s,pos,null) : HxOverrides.substr(s,pos,len);
	}
	,toString: function() {
		return this.b;
	}
	,__class__: StringBuf
	,__properties__: {get_length:"get_length"}
};
var haxe_SysTools = function() { };
$hxClasses["haxe.SysTools"] = haxe_SysTools;
haxe_SysTools.__name__ = "haxe.SysTools";
haxe_SysTools.quoteUnixArg = function(argument) {
	if(argument == "") {
		return "''";
	}
	if(!new EReg("[^a-zA-Z0-9_@%+=:,./-]","").match(argument)) {
		return argument;
	}
	return "'" + StringTools.replace(argument,"'","'\"'\"'") + "'";
};
haxe_SysTools.quoteWinArg = function(argument,escapeMetaCharacters) {
	if(!new EReg("^[^ \t\\\\\"]+$","").match(argument)) {
		var result_b = "";
		var needquote = argument.indexOf(" ") != -1 || argument.indexOf("\t") != -1 || argument == "";
		if(needquote) {
			result_b += "\"";
		}
		var bs_buf = new StringBuf();
		var _g = 0;
		var _g1 = argument.length;
		while(_g < _g1) {
			var i = _g++;
			var _g2 = HxOverrides.cca(argument,i);
			if(_g2 == null) {
				var c = _g2;
				if(bs_buf.b.length > 0) {
					result_b += Std.string(bs_buf.b);
					bs_buf = new StringBuf();
				}
				result_b += String.fromCodePoint(c);
			} else {
				switch(_g2) {
				case 34:
					var bs = bs_buf.b;
					result_b += bs == null ? "null" : "" + bs;
					result_b += bs == null ? "null" : "" + bs;
					bs_buf = new StringBuf();
					result_b += "\\\"";
					break;
				case 92:
					bs_buf.b += "\\";
					break;
				default:
					var c1 = _g2;
					if(bs_buf.b.length > 0) {
						result_b += Std.string(bs_buf.b);
						bs_buf = new StringBuf();
					}
					result_b += String.fromCodePoint(c1);
				}
			}
		}
		result_b += Std.string(bs_buf.b);
		if(needquote) {
			result_b += Std.string(bs_buf.b);
			result_b += "\"";
		}
		argument = result_b;
	}
	if(escapeMetaCharacters) {
		var result_b = "";
		var _g = 0;
		var _g1 = argument.length;
		while(_g < _g1) {
			var i = _g++;
			var c = HxOverrides.cca(argument,i);
			if(haxe_SysTools.winMetaCharacters.indexOf(c) >= 0) {
				result_b += String.fromCodePoint(94);
			}
			result_b += String.fromCodePoint(c);
		}
		return result_b;
	} else {
		return argument;
	}
};
var StringTools = function() { };
$hxClasses["StringTools"] = StringTools;
StringTools.__name__ = "StringTools";
StringTools.urlEncode = function(s) {
	return encodeURIComponent(s);
};
StringTools.urlDecode = function(s) {
	return decodeURIComponent(s.split("+").join(" "));
};
StringTools.htmlEscape = function(s,quotes) {
	var buf_b = "";
	var _g_offset = 0;
	var _g_s = s;
	while(_g_offset < _g_s.length) {
		var s = _g_s;
		var index = _g_offset++;
		var c = s.charCodeAt(index);
		if(c >= 55296 && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(index + 1) & 1023;
		}
		var c1 = c;
		if(c1 >= 65536) {
			++_g_offset;
		}
		var code = c1;
		switch(code) {
		case 34:
			if(quotes) {
				buf_b += "&quot;";
			} else {
				buf_b += String.fromCodePoint(code);
			}
			break;
		case 38:
			buf_b += "&amp;";
			break;
		case 39:
			if(quotes) {
				buf_b += "&#039;";
			} else {
				buf_b += String.fromCodePoint(code);
			}
			break;
		case 60:
			buf_b += "&lt;";
			break;
		case 62:
			buf_b += "&gt;";
			break;
		default:
			buf_b += String.fromCodePoint(code);
		}
	}
	return buf_b;
};
StringTools.htmlUnescape = function(s) {
	return s.split("&gt;").join(">").split("&lt;").join("<").split("&quot;").join("\"").split("&#039;").join("'").split("&amp;").join("&");
};
StringTools.contains = function(s,value) {
	return s.indexOf(value) != -1;
};
StringTools.startsWith = function(s,start) {
	if(s.length >= start.length) {
		return s.lastIndexOf(start,0) == 0;
	} else {
		return false;
	}
};
StringTools.endsWith = function(s,end) {
	var elen = end.length;
	var slen = s.length;
	if(slen >= elen) {
		return s.indexOf(end,slen - elen) == slen - elen;
	} else {
		return false;
	}
};
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
StringTools.lpad = function(s,c,l) {
	if(c.length <= 0) {
		return s;
	}
	var buf_b = "";
	l -= s.length;
	while(buf_b.length < l) buf_b += c == null ? "null" : "" + c;
	buf_b += s == null ? "null" : "" + s;
	return buf_b;
};
StringTools.rpad = function(s,c,l) {
	if(c.length <= 0) {
		return s;
	}
	var buf_b = "";
	buf_b += s == null ? "null" : "" + s;
	while(buf_b.length < l) buf_b += c == null ? "null" : "" + c;
	return buf_b;
};
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
StringTools.hex = function(n,digits) {
	var s = "";
	var hexChars = "0123456789ABCDEF";
	while(true) {
		s = hexChars.charAt(n & 15) + s;
		n >>>= 4;
		if(!(n > 0)) {
			break;
		}
	}
	if(digits != null) {
		while(s.length < digits) s = "0" + s;
	}
	return s;
};
StringTools.fastCodeAt = function(s,index) {
	return s.charCodeAt(index);
};
StringTools.iterator = function(s) {
	return new haxe_iterators_StringIterator(s);
};
StringTools.keyValueIterator = function(s) {
	return new haxe_iterators_StringKeyValueIterator(s);
};
StringTools.isEof = function(c) {
	return c != c;
};
StringTools.quoteUnixArg = function(argument) {
	if(argument == "") {
		return "''";
	} else if(!new EReg("[^a-zA-Z0-9_@%+=:,./-]","").match(argument)) {
		return argument;
	} else {
		return "'" + StringTools.replace(argument,"'","'\"'\"'") + "'";
	}
};
StringTools.quoteWinArg = function(argument,escapeMetaCharacters) {
	var argument1 = argument;
	if(!new EReg("^[^ \t\\\\\"]+$","").match(argument1)) {
		var result_b = "";
		var needquote = argument1.indexOf(" ") != -1 || argument1.indexOf("\t") != -1 || argument1 == "";
		if(needquote) {
			result_b += "\"";
		}
		var bs_buf = new StringBuf();
		var _g = 0;
		var _g1 = argument1.length;
		while(_g < _g1) {
			var i = _g++;
			var _g2 = HxOverrides.cca(argument1,i);
			if(_g2 == null) {
				var c = _g2;
				if(bs_buf.b.length > 0) {
					result_b += Std.string(bs_buf.b);
					bs_buf = new StringBuf();
				}
				result_b += String.fromCodePoint(c);
			} else {
				switch(_g2) {
				case 34:
					var bs = bs_buf.b;
					result_b += Std.string(bs);
					result_b += Std.string(bs);
					bs_buf = new StringBuf();
					result_b += "\\\"";
					break;
				case 92:
					bs_buf.b += "\\";
					break;
				default:
					var c1 = _g2;
					if(bs_buf.b.length > 0) {
						result_b += Std.string(bs_buf.b);
						bs_buf = new StringBuf();
					}
					result_b += String.fromCodePoint(c1);
				}
			}
		}
		result_b += Std.string(bs_buf.b);
		if(needquote) {
			result_b += Std.string(bs_buf.b);
			result_b += "\"";
		}
		argument1 = result_b;
	}
	if(escapeMetaCharacters) {
		var result_b = "";
		var _g = 0;
		var _g1 = argument1.length;
		while(_g < _g1) {
			var i = _g++;
			var c = HxOverrides.cca(argument1,i);
			if(haxe_SysTools.winMetaCharacters.indexOf(c) >= 0) {
				result_b += String.fromCodePoint(94);
			}
			result_b += String.fromCodePoint(c);
		}
		return result_b;
	} else {
		return argument1;
	}
};
StringTools.utf16CodePointAt = function(s,index) {
	var c = s.charCodeAt(index);
	if(c >= 55296 && c <= 56319) {
		c = c - 55232 << 10 | s.charCodeAt(index + 1) & 1023;
	}
	return c;
};
var ValueType = $hxEnums["ValueType"] = { __ename__ : "ValueType", __constructs__ : ["TNull","TInt","TFloat","TBool","TObject","TFunction","TClass","TEnum","TUnknown"]
	,TNull: {_hx_index:0,__enum__:"ValueType",toString:$estr}
	,TInt: {_hx_index:1,__enum__:"ValueType",toString:$estr}
	,TFloat: {_hx_index:2,__enum__:"ValueType",toString:$estr}
	,TBool: {_hx_index:3,__enum__:"ValueType",toString:$estr}
	,TObject: {_hx_index:4,__enum__:"ValueType",toString:$estr}
	,TFunction: {_hx_index:5,__enum__:"ValueType",toString:$estr}
	,TClass: ($_=function(c) { return {_hx_index:6,c:c,__enum__:"ValueType",toString:$estr}; },$_.__params__ = ["c"],$_)
	,TEnum: ($_=function(e) { return {_hx_index:7,e:e,__enum__:"ValueType",toString:$estr}; },$_.__params__ = ["e"],$_)
	,TUnknown: {_hx_index:8,__enum__:"ValueType",toString:$estr}
};
ValueType.__empty_constructs__ = [ValueType.TNull,ValueType.TInt,ValueType.TFloat,ValueType.TBool,ValueType.TObject,ValueType.TFunction,ValueType.TUnknown];
var Type = function() { };
$hxClasses["Type"] = Type;
Type.__name__ = "Type";
Type.getClass = function(o) {
	return js_Boot.getClass(o);
};
Type.getEnum = function(o) {
	if(o == null) {
		return null;
	}
	return $hxEnums[o.__enum__];
};
Type.getSuperClass = function(c) {
	return c.__super__;
};
Type.getClassName = function(c) {
	return c.__name__;
};
Type.getEnumName = function(e) {
	return e.__ename__;
};
Type.resolveClass = function(name) {
	return $hxClasses[name];
};
Type.resolveEnum = function(name) {
	return $hxEnums[name];
};
Type.createInstance = function(cl,args) {
	var ctor = Function.prototype.bind.apply(cl,[null].concat(args));
	return new (ctor);
};
Type.createEmptyInstance = function(cl) {
	return Object.create(cl.prototype);
};
Type.createEnum = function(e,constr,params) {
	var f = Reflect.field(e,constr);
	if(f == null) {
		throw haxe_Exception.thrown("No such constructor " + constr);
	}
	if(Reflect.isFunction(f)) {
		if(params == null) {
			throw haxe_Exception.thrown("Constructor " + constr + " need parameters");
		}
		return f.apply(e,params);
	}
	if(params != null && params.length != 0) {
		throw haxe_Exception.thrown("Constructor " + constr + " does not need parameters");
	}
	return f;
};
Type.createEnumIndex = function(e,index,params) {
	var c = e.__constructs__[index];
	if(c == null) {
		throw haxe_Exception.thrown(index + " is not a valid enum constructor index");
	}
	return Type.createEnum(e,c,params);
};
Type.getInstanceFields = function(c) {
	var a = [];
	for(var i in c.prototype) a.push(i);
	HxOverrides.remove(a,"__class__");
	HxOverrides.remove(a,"__properties__");
	return a;
};
Type.getClassFields = function(c) {
	var a = Reflect.fields(c);
	HxOverrides.remove(a,"__name__");
	HxOverrides.remove(a,"__interfaces__");
	HxOverrides.remove(a,"__properties__");
	HxOverrides.remove(a,"__super__");
	HxOverrides.remove(a,"__meta__");
	HxOverrides.remove(a,"prototype");
	return a;
};
Type.getEnumConstructs = function(e) {
	return e.__constructs__.slice();
};
Type.typeof = function(v) {
	switch(typeof(v)) {
	case "boolean":
		return ValueType.TBool;
	case "function":
		if(v.__name__ || v.__ename__) {
			return ValueType.TObject;
		}
		return ValueType.TFunction;
	case "number":
		if(Math.ceil(v) == v % 2147483648.0) {
			return ValueType.TInt;
		}
		return ValueType.TFloat;
	case "object":
		if(v == null) {
			return ValueType.TNull;
		}
		var e = v.__enum__;
		if(e != null) {
			return ValueType.TEnum($hxEnums[e]);
		}
		var c = js_Boot.getClass(v);
		if(c != null) {
			return ValueType.TClass(c);
		}
		return ValueType.TObject;
	case "string":
		return ValueType.TClass(String);
	case "undefined":
		return ValueType.TNull;
	default:
		return ValueType.TUnknown;
	}
};
Type.enumEq = function(a,b) {
	if(a == b) {
		return true;
	}
	try {
		var e = a.__enum__;
		if(e == null || e != b.__enum__) {
			return false;
		}
		if(a._hx_index != b._hx_index) {
			return false;
		}
		var enm = $hxEnums[e];
		var ctorName = enm.__constructs__[a._hx_index];
		var params = enm[ctorName].__params__;
		var _g = 0;
		while(_g < params.length) {
			var f = params[_g];
			++_g;
			if(!Type.enumEq(a[f],b[f])) {
				return false;
			}
		}
	} catch( _g ) {
		return false;
	}
	return true;
};
Type.enumConstructor = function(e) {
	return $hxEnums[e.__enum__].__constructs__[e._hx_index];
};
Type.enumParameters = function(e) {
	var enm = $hxEnums[e.__enum__];
	var ctorName = enm.__constructs__[e._hx_index];
	var params = enm[ctorName].__params__;
	if(params != null) {
		var _g = [];
		var _g1 = 0;
		while(_g1 < params.length) {
			var p = params[_g1];
			++_g1;
			_g.push(e[p]);
		}
		return _g;
	} else {
		return [];
	}
};
Type.enumIndex = function(e) {
	return e._hx_index;
};
Type.allEnums = function(e) {
	return e.__empty_constructs__.slice();
};
var _$CharacterClass = $hxEnums["_CharacterClass"] = { __ename__ : "_CharacterClass", __constructs__ : ["CLASS_FIGHTER","CLASS_CLERIC","CLASS_THIEF"]
	,CLASS_FIGHTER: {_hx_index:0,__enum__:"_CharacterClass",toString:$estr}
	,CLASS_CLERIC: {_hx_index:1,__enum__:"_CharacterClass",toString:$estr}
	,CLASS_THIEF: {_hx_index:2,__enum__:"_CharacterClass",toString:$estr}
};
_$CharacterClass.__empty_constructs__ = [_$CharacterClass.CLASS_FIGHTER,_$CharacterClass.CLASS_CLERIC,_$CharacterClass.CLASS_THIEF];
var _$EventResult = $hxEnums["_EventResult"] = { __ename__ : "_EventResult", __constructs__ : ["EVENT_CONTINUE","EVENT_STOP"]
	,EVENT_CONTINUE: {_hx_index:0,__enum__:"_EventResult",toString:$estr}
	,EVENT_STOP: {_hx_index:1,__enum__:"_EventResult",toString:$estr}
};
_$EventResult.__empty_constructs__ = [_$EventResult.EVENT_CONTINUE,_$EventResult.EVENT_STOP];
var _$WeaponType = $hxEnums["_WeaponType"] = { __ename__ : "_WeaponType", __constructs__ : ["WEAPONTYPE_MELEE","WEAPONTYPE_RANGED","WEAPONTYPE_BOTH"]
	,WEAPONTYPE_MELEE: {_hx_index:0,__enum__:"_WeaponType",toString:$estr}
	,WEAPONTYPE_RANGED: {_hx_index:1,__enum__:"_WeaponType",toString:$estr}
	,WEAPONTYPE_BOTH: {_hx_index:2,__enum__:"_WeaponType",toString:$estr}
};
_$WeaponType.__empty_constructs__ = [_$WeaponType.WEAPONTYPE_MELEE,_$WeaponType.WEAPONTYPE_RANGED,_$WeaponType.WEAPONTYPE_BOTH];
var _$ItemsTables = function() { };
$hxClasses["_ItemsTables"] = _$ItemsTables;
_$ItemsTables.__name__ = "_ItemsTables";
_$ItemsTables.fixWeapons = function() {
	var w = haxe_ds_StringMap.valueIterator(_$ItemsTables.weapons.h);
	while(w.hasNext()) {
		var w1 = w.next();
		if(w1.type == _$WeaponType.WEAPONTYPE_BOTH || w1.type == _$WeaponType.WEAPONTYPE_RANGED) {
			if(w1.shots == null) {
				w1.shots = 1;
			}
		}
	}
};
var haxe_IMap = function() { };
$hxClasses["haxe.IMap"] = haxe_IMap;
haxe_IMap.__name__ = "haxe.IMap";
haxe_IMap.__isInterface__ = true;
haxe_IMap.prototype = {
	get: null
	,set: null
	,exists: null
	,remove: null
	,keys: null
	,iterator: null
	,keyValueIterator: null
	,copy: null
	,toString: null
	,clear: null
	,__class__: haxe_IMap
};
var haxe_ds_StringMap = function() {
	this.h = Object.create(null);
};
$hxClasses["haxe.ds.StringMap"] = haxe_ds_StringMap;
haxe_ds_StringMap.__name__ = "haxe.ds.StringMap";
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.keysIterator = function(h) {
	var keys = Object.keys(h);
	var len = keys.length;
	var idx = 0;
	return { hasNext : function() {
		return idx < len;
	}, next : function() {
		idx += 1;
		return keys[idx - 1];
	}};
};
haxe_ds_StringMap.valueIterator = function(h) {
	var keys = Object.keys(h);
	var len = keys.length;
	var idx = 0;
	return { hasNext : function() {
		return idx < len;
	}, next : function() {
		idx += 1;
		return h[keys[idx - 1]];
	}};
};
haxe_ds_StringMap.kvIterator = function(h) {
	var keys = Object.keys(h);
	var len = keys.length;
	var idx = 0;
	return { hasNext : function() {
		return idx < len;
	}, next : function() {
		idx += 1;
		var k = keys[idx - 1];
		return { key : k, value : h[k]};
	}};
};
haxe_ds_StringMap.createCopy = function(h) {
	var copy = new haxe_ds_StringMap();
	for (var key in h) copy.h[key] = h[key];
	return copy;
};
haxe_ds_StringMap.stringify = function(h) {
	var s = "{";
	var first = true;
	for (var key in h) {
		if (first) first = false; else s += ',';
		s += key + ' => ' + Std.string(h[key]);
	}
	return s + "}";
};
haxe_ds_StringMap.prototype = {
	h: null
	,exists: function(key) {
		return Object.prototype.hasOwnProperty.call(this.h,key);
	}
	,get: function(key) {
		return this.h[key];
	}
	,set: function(key,value) {
		this.h[key] = value;
	}
	,remove: function(key) {
		if(Object.prototype.hasOwnProperty.call(this.h,key)) {
			delete(this.h[key]);
			return true;
		} else {
			return false;
		}
	}
	,keys: function() {
		return haxe_ds_StringMap.keysIterator(this.h);
	}
	,iterator: function() {
		return haxe_ds_StringMap.valueIterator(this.h);
	}
	,keyValueIterator: function() {
		return haxe_ds_StringMap.kvIterator(this.h);
	}
	,copy: function() {
		return haxe_ds_StringMap.createCopy(this.h);
	}
	,clear: function() {
		this.h = Object.create(null);
	}
	,toString: function() {
		return haxe_ds_StringMap.stringify(this.h);
	}
	,__class__: haxe_ds_StringMap
};
var _$MonstersTable = function() { };
$hxClasses["_MonstersTable"] = _$MonstersTable;
_$MonstersTable.__name__ = "_MonstersTable";
var _$Tables = $hx_exports["_Tables"] = function() { };
$hxClasses["_Tables"] = _$Tables;
_$Tables.__name__ = "_Tables";
_$Tables.printThac = function(thacf) {
	var s = "Level " + 0 + " : ";
	s += thacf(0,-10) + ", ";
	s += thacf(0,-9) + ", ";
	s += thacf(0,-8) + ", ";
	s += thacf(0,-7) + ", ";
	s += thacf(0,-6) + ", ";
	s += thacf(0,-5) + ", ";
	s += thacf(0,-4) + ", ";
	s += thacf(0,-3) + ", ";
	s += thacf(0,-2) + ", ";
	s += thacf(0,-1) + ", ";
	s += thacf(0,0) + ", ";
	s += thacf(0,1) + ", ";
	s += thacf(0,2) + ", ";
	s += thacf(0,3) + ", ";
	s += thacf(0,4) + ", ";
	s += thacf(0,5) + ", ";
	s += thacf(0,6) + ", ";
	s += thacf(0,7) + ", ";
	s += thacf(0,8) + ", ";
	s += thacf(0,9) + ", ";
	s += thacf(0,10) + ", ";
	haxe_Log.trace(s,{ fileName : "_Tables.hx", lineNumber : 12, className : "_Tables", methodName : "printThac"});
	var s = "Level " + 1 + " : ";
	s += thacf(1,-10) + ", ";
	s += thacf(1,-9) + ", ";
	s += thacf(1,-8) + ", ";
	s += thacf(1,-7) + ", ";
	s += thacf(1,-6) + ", ";
	s += thacf(1,-5) + ", ";
	s += thacf(1,-4) + ", ";
	s += thacf(1,-3) + ", ";
	s += thacf(1,-2) + ", ";
	s += thacf(1,-1) + ", ";
	s += thacf(1,0) + ", ";
	s += thacf(1,1) + ", ";
	s += thacf(1,2) + ", ";
	s += thacf(1,3) + ", ";
	s += thacf(1,4) + ", ";
	s += thacf(1,5) + ", ";
	s += thacf(1,6) + ", ";
	s += thacf(1,7) + ", ";
	s += thacf(1,8) + ", ";
	s += thacf(1,9) + ", ";
	s += thacf(1,10) + ", ";
	haxe_Log.trace(s,{ fileName : "_Tables.hx", lineNumber : 12, className : "_Tables", methodName : "printThac"});
	var s = "Level " + 2 + " : ";
	s += thacf(2,-10) + ", ";
	s += thacf(2,-9) + ", ";
	s += thacf(2,-8) + ", ";
	s += thacf(2,-7) + ", ";
	s += thacf(2,-6) + ", ";
	s += thacf(2,-5) + ", ";
	s += thacf(2,-4) + ", ";
	s += thacf(2,-3) + ", ";
	s += thacf(2,-2) + ", ";
	s += thacf(2,-1) + ", ";
	s += thacf(2,0) + ", ";
	s += thacf(2,1) + ", ";
	s += thacf(2,2) + ", ";
	s += thacf(2,3) + ", ";
	s += thacf(2,4) + ", ";
	s += thacf(2,5) + ", ";
	s += thacf(2,6) + ", ";
	s += thacf(2,7) + ", ";
	s += thacf(2,8) + ", ";
	s += thacf(2,9) + ", ";
	s += thacf(2,10) + ", ";
	haxe_Log.trace(s,{ fileName : "_Tables.hx", lineNumber : 12, className : "_Tables", methodName : "printThac"});
	var s = "Level " + 3 + " : ";
	s += thacf(3,-10) + ", ";
	s += thacf(3,-9) + ", ";
	s += thacf(3,-8) + ", ";
	s += thacf(3,-7) + ", ";
	s += thacf(3,-6) + ", ";
	s += thacf(3,-5) + ", ";
	s += thacf(3,-4) + ", ";
	s += thacf(3,-3) + ", ";
	s += thacf(3,-2) + ", ";
	s += thacf(3,-1) + ", ";
	s += thacf(3,0) + ", ";
	s += thacf(3,1) + ", ";
	s += thacf(3,2) + ", ";
	s += thacf(3,3) + ", ";
	s += thacf(3,4) + ", ";
	s += thacf(3,5) + ", ";
	s += thacf(3,6) + ", ";
	s += thacf(3,7) + ", ";
	s += thacf(3,8) + ", ";
	s += thacf(3,9) + ", ";
	s += thacf(3,10) + ", ";
	haxe_Log.trace(s,{ fileName : "_Tables.hx", lineNumber : 12, className : "_Tables", methodName : "printThac"});
	var s = "Level " + 4 + " : ";
	s += thacf(4,-10) + ", ";
	s += thacf(4,-9) + ", ";
	s += thacf(4,-8) + ", ";
	s += thacf(4,-7) + ", ";
	s += thacf(4,-6) + ", ";
	s += thacf(4,-5) + ", ";
	s += thacf(4,-4) + ", ";
	s += thacf(4,-3) + ", ";
	s += thacf(4,-2) + ", ";
	s += thacf(4,-1) + ", ";
	s += thacf(4,0) + ", ";
	s += thacf(4,1) + ", ";
	s += thacf(4,2) + ", ";
	s += thacf(4,3) + ", ";
	s += thacf(4,4) + ", ";
	s += thacf(4,5) + ", ";
	s += thacf(4,6) + ", ";
	s += thacf(4,7) + ", ";
	s += thacf(4,8) + ", ";
	s += thacf(4,9) + ", ";
	s += thacf(4,10) + ", ";
	haxe_Log.trace(s,{ fileName : "_Tables.hx", lineNumber : 12, className : "_Tables", methodName : "printThac"});
	var s = "Level " + 5 + " : ";
	s += thacf(5,-10) + ", ";
	s += thacf(5,-9) + ", ";
	s += thacf(5,-8) + ", ";
	s += thacf(5,-7) + ", ";
	s += thacf(5,-6) + ", ";
	s += thacf(5,-5) + ", ";
	s += thacf(5,-4) + ", ";
	s += thacf(5,-3) + ", ";
	s += thacf(5,-2) + ", ";
	s += thacf(5,-1) + ", ";
	s += thacf(5,0) + ", ";
	s += thacf(5,1) + ", ";
	s += thacf(5,2) + ", ";
	s += thacf(5,3) + ", ";
	s += thacf(5,4) + ", ";
	s += thacf(5,5) + ", ";
	s += thacf(5,6) + ", ";
	s += thacf(5,7) + ", ";
	s += thacf(5,8) + ", ";
	s += thacf(5,9) + ", ";
	s += thacf(5,10) + ", ";
	haxe_Log.trace(s,{ fileName : "_Tables.hx", lineNumber : 12, className : "_Tables", methodName : "printThac"});
	var s = "Level " + 6 + " : ";
	s += thacf(6,-10) + ", ";
	s += thacf(6,-9) + ", ";
	s += thacf(6,-8) + ", ";
	s += thacf(6,-7) + ", ";
	s += thacf(6,-6) + ", ";
	s += thacf(6,-5) + ", ";
	s += thacf(6,-4) + ", ";
	s += thacf(6,-3) + ", ";
	s += thacf(6,-2) + ", ";
	s += thacf(6,-1) + ", ";
	s += thacf(6,0) + ", ";
	s += thacf(6,1) + ", ";
	s += thacf(6,2) + ", ";
	s += thacf(6,3) + ", ";
	s += thacf(6,4) + ", ";
	s += thacf(6,5) + ", ";
	s += thacf(6,6) + ", ";
	s += thacf(6,7) + ", ";
	s += thacf(6,8) + ", ";
	s += thacf(6,9) + ", ";
	s += thacf(6,10) + ", ";
	haxe_Log.trace(s,{ fileName : "_Tables.hx", lineNumber : 12, className : "_Tables", methodName : "printThac"});
	var s = "Level " + 7 + " : ";
	s += thacf(7,-10) + ", ";
	s += thacf(7,-9) + ", ";
	s += thacf(7,-8) + ", ";
	s += thacf(7,-7) + ", ";
	s += thacf(7,-6) + ", ";
	s += thacf(7,-5) + ", ";
	s += thacf(7,-4) + ", ";
	s += thacf(7,-3) + ", ";
	s += thacf(7,-2) + ", ";
	s += thacf(7,-1) + ", ";
	s += thacf(7,0) + ", ";
	s += thacf(7,1) + ", ";
	s += thacf(7,2) + ", ";
	s += thacf(7,3) + ", ";
	s += thacf(7,4) + ", ";
	s += thacf(7,5) + ", ";
	s += thacf(7,6) + ", ";
	s += thacf(7,7) + ", ";
	s += thacf(7,8) + ", ";
	s += thacf(7,9) + ", ";
	s += thacf(7,10) + ", ";
	haxe_Log.trace(s,{ fileName : "_Tables.hx", lineNumber : 12, className : "_Tables", methodName : "printThac"});
	var s = "Level " + 8 + " : ";
	s += thacf(8,-10) + ", ";
	s += thacf(8,-9) + ", ";
	s += thacf(8,-8) + ", ";
	s += thacf(8,-7) + ", ";
	s += thacf(8,-6) + ", ";
	s += thacf(8,-5) + ", ";
	s += thacf(8,-4) + ", ";
	s += thacf(8,-3) + ", ";
	s += thacf(8,-2) + ", ";
	s += thacf(8,-1) + ", ";
	s += thacf(8,0) + ", ";
	s += thacf(8,1) + ", ";
	s += thacf(8,2) + ", ";
	s += thacf(8,3) + ", ";
	s += thacf(8,4) + ", ";
	s += thacf(8,5) + ", ";
	s += thacf(8,6) + ", ";
	s += thacf(8,7) + ", ";
	s += thacf(8,8) + ", ";
	s += thacf(8,9) + ", ";
	s += thacf(8,10) + ", ";
	haxe_Log.trace(s,{ fileName : "_Tables.hx", lineNumber : 12, className : "_Tables", methodName : "printThac"});
	var s = "Level " + 9 + " : ";
	s += thacf(9,-10) + ", ";
	s += thacf(9,-9) + ", ";
	s += thacf(9,-8) + ", ";
	s += thacf(9,-7) + ", ";
	s += thacf(9,-6) + ", ";
	s += thacf(9,-5) + ", ";
	s += thacf(9,-4) + ", ";
	s += thacf(9,-3) + ", ";
	s += thacf(9,-2) + ", ";
	s += thacf(9,-1) + ", ";
	s += thacf(9,0) + ", ";
	s += thacf(9,1) + ", ";
	s += thacf(9,2) + ", ";
	s += thacf(9,3) + ", ";
	s += thacf(9,4) + ", ";
	s += thacf(9,5) + ", ";
	s += thacf(9,6) + ", ";
	s += thacf(9,7) + ", ";
	s += thacf(9,8) + ", ";
	s += thacf(9,9) + ", ";
	s += thacf(9,10) + ", ";
	haxe_Log.trace(s,{ fileName : "_Tables.hx", lineNumber : 12, className : "_Tables", methodName : "printThac"});
};
_$Tables.thacCommon = function(level,ac,last20ac) {
	if(ac >= last20ac) {
		return 20 + last20ac - ac;
	} else if(ac > last20ac - 5 && ac < last20ac) {
		return 20;
	} else if(ac <= last20ac - 5) {
		return 15 - ac + last20ac;
	}
	return 99;
};
_$Tables.hitDiceToLevel = function(hitDice,hdBonus) {
	var x = hitDice * 10 + hdBonus;
	if(x < 9) {
		return 0;
	} else if(x == 9) {
		return 1;
	} else if(x == 10) {
		return 2;
	} else if(x <= 20) {
		return 3;
	} else if(x <= 30) {
		return 4;
	} else if(x <= 40) {
		return 5;
	} else if(x <= 50) {
		return 6;
	} else if(x <= 60) {
		return 7;
	} else if(x <= 70) {
		return 8;
	} else if(x <= 80) {
		return 9;
	} else if(x <= 90) {
		return 10;
	} else {
		throw haxe_Exception.thrown("hit dice too high: " + x);
	}
};
var _$TablesClass = function() {
	var _g = new haxe_ds_IntMap();
	_g.h[3] = { maxHenchmen : 1, loyaltyBonus : -30, reactionBonus : -25};
	_g.h[4] = { maxHenchmen : 1, loyaltyBonus : -25, reactionBonus : -20};
	_g.h[5] = { maxHenchmen : 2, loyaltyBonus : -20, reactionBonus : -15};
	_g.h[6] = { maxHenchmen : 2, loyaltyBonus : -15, reactionBonus : -10};
	_g.h[7] = { maxHenchmen : 3, loyaltyBonus : -10, reactionBonus : -5};
	_g.h[8] = { maxHenchmen : 3, loyaltyBonus : -5, reactionBonus : 0};
	_g.h[9] = { maxHenchmen : 4, loyaltyBonus : 0, reactionBonus : 0};
	_g.h[10] = { maxHenchmen : 4, loyaltyBonus : 0, reactionBonus : 0};
	_g.h[11] = { maxHenchmen : 4, loyaltyBonus : 0, reactionBonus : 0};
	_g.h[12] = { maxHenchmen : 5, loyaltyBonus : 0, reactionBonus : 0};
	_g.h[13] = { maxHenchmen : 5, loyaltyBonus : 0, reactionBonus : 5};
	_g.h[14] = { maxHenchmen : 6, loyaltyBonus : 5, reactionBonus : 10};
	_g.h[15] = { maxHenchmen : 7, loyaltyBonus : 15, reactionBonus : 15};
	_g.h[16] = { maxHenchmen : 8, loyaltyBonus : 20, reactionBonus : 25};
	_g.h[17] = { maxHenchmen : 10, loyaltyBonus : 30, reactionBonus : 30};
	_g.h[18] = { maxHenchmen : 15, loyaltyBonus : 40, reactionBonus : 35};
	_g.h[19] = { maxHenchmen : 20, loyaltyBonus : 50, reactionBonus : 40};
	this.chaStats = _g;
	var _g = new haxe_ds_IntMap();
	_g.h[3] = { mentalSavingThrowBonus : -3};
	_g.h[4] = { mentalSavingThrowBonus : -2};
	_g.h[5] = { mentalSavingThrowBonus : -1};
	_g.h[6] = { mentalSavingThrowBonus : -1};
	_g.h[7] = { mentalSavingThrowBonus : -1};
	_g.h[8] = { mentalSavingThrowBonus : 0};
	_g.h[9] = { mentalSavingThrowBonus : 0};
	_g.h[10] = { mentalSavingThrowBonus : 0};
	_g.h[11] = { mentalSavingThrowBonus : 0};
	_g.h[12] = { mentalSavingThrowBonus : 0};
	_g.h[13] = { mentalSavingThrowBonus : 0};
	_g.h[14] = { mentalSavingThrowBonus : 0};
	_g.h[15] = { mentalSavingThrowBonus : 1};
	_g.h[16] = { mentalSavingThrowBonus : 2};
	_g.h[17] = { mentalSavingThrowBonus : 3};
	_g.h[18] = { mentalSavingThrowBonus : 4};
	_g.h[19] = { mentalSavingThrowBonus : 5};
	this.wisStatsCommon = _g;
	var _g = new haxe_ds_IntMap();
	_g.h[3] = { hpBonus : -2, surviveRaiseDead : 40, surviveSystemShock : 35};
	_g.h[4] = { hpBonus : -1, surviveRaiseDead : 45, surviveSystemShock : 40};
	_g.h[5] = { hpBonus : -1, surviveRaiseDead : 50, surviveSystemShock : 45};
	_g.h[6] = { hpBonus : -1, surviveRaiseDead : 55, surviveSystemShock : 50};
	_g.h[7] = { hpBonus : 0, surviveRaiseDead : 60, surviveSystemShock : 55};
	_g.h[8] = { hpBonus : 0, surviveRaiseDead : 65, surviveSystemShock : 60};
	_g.h[9] = { hpBonus : 0, surviveRaiseDead : 70, surviveSystemShock : 65};
	_g.h[10] = { hpBonus : 0, surviveRaiseDead : 75, surviveSystemShock : 70};
	_g.h[11] = { hpBonus : 0, surviveRaiseDead : 80, surviveSystemShock : 75};
	_g.h[12] = { hpBonus : 0, surviveRaiseDead : 85, surviveSystemShock : 80};
	_g.h[13] = { hpBonus : 0, surviveRaiseDead : 90, surviveSystemShock : 85};
	_g.h[14] = { hpBonus : 0, surviveRaiseDead : 92, surviveSystemShock : 88};
	_g.h[15] = { hpBonus : 1, surviveRaiseDead : 94, surviveSystemShock : 91};
	_g.h[16] = { hpBonus : 2, surviveRaiseDead : 96, surviveSystemShock : 95};
	_g.h[17] = { hpBonus : 2, surviveRaiseDead : 98, surviveSystemShock : 97};
	_g.h[18] = { hpBonus : 2, surviveRaiseDead : 100, surviveSystemShock : 99};
	_g.h[19] = { hpBonus : 2, surviveRaiseDead : 100, surviveSystemShock : 99};
	this.conStats = _g;
	var _g = new haxe_ds_IntMap();
	_g.h[3] = { surpriseBonus : -3, missileBonusToHit : -3, acAdj : 4};
	_g.h[4] = { surpriseBonus : -2, missileBonusToHit : -2, acAdj : 3};
	_g.h[5] = { surpriseBonus : -1, missileBonusToHit : -1, acAdj : 2};
	_g.h[6] = { surpriseBonus : 0, missileBonusToHit : 0, acAdj : 1};
	_g.h[7] = { surpriseBonus : 0, missileBonusToHit : 0, acAdj : 0};
	_g.h[8] = { surpriseBonus : 0, missileBonusToHit : 0, acAdj : 0};
	_g.h[9] = { surpriseBonus : 0, missileBonusToHit : 0, acAdj : 0};
	_g.h[10] = { surpriseBonus : 0, missileBonusToHit : 0, acAdj : 0};
	_g.h[11] = { surpriseBonus : 0, missileBonusToHit : 0, acAdj : 0};
	_g.h[12] = { surpriseBonus : 0, missileBonusToHit : 0, acAdj : 0};
	_g.h[13] = { surpriseBonus : 0, missileBonusToHit : 0, acAdj : 0};
	_g.h[14] = { surpriseBonus : 0, missileBonusToHit : 0, acAdj : 0};
	_g.h[15] = { surpriseBonus : 0, missileBonusToHit : 0, acAdj : -1};
	_g.h[16] = { surpriseBonus : 1, missileBonusToHit : 1, acAdj : -2};
	_g.h[17] = { surpriseBonus : 2, missileBonusToHit : 2, acAdj : -3};
	_g.h[18] = { surpriseBonus : 3, missileBonusToHit : 3, acAdj : -4};
	_g.h[19] = { surpriseBonus : 3, missileBonusToHit : 3, acAdj : -4};
	this.dexStats = _g;
	var _g = new haxe_ds_IntMap();
	_g.h[300] = { toHitBonus : -3, toDamageBonus : -1, encAdj : -35, minorTests : 1, majorTests : 0};
	_g.h[400] = { toHitBonus : -2, toDamageBonus : -1, encAdj : -25, minorTests : 1, majorTests : 0};
	_g.h[500] = { toHitBonus : -2, toDamageBonus : -1, encAdj : -25, minorTests : 1, majorTests : 0};
	_g.h[600] = { toHitBonus : -1, toDamageBonus : 0, encAdj : -15, minorTests : 1, majorTests : 0};
	_g.h[700] = { toHitBonus : -1, toDamageBonus : 0, encAdj : -15, minorTests : 1, majorTests : 0};
	_g.h[800] = { toHitBonus : 0, toDamageBonus : 0, encAdj : 0, minorTests : 2, majorTests : 1};
	_g.h[900] = { toHitBonus : 0, toDamageBonus : 0, encAdj : 0, minorTests : 2, majorTests : 1};
	_g.h[1000] = { toHitBonus : 0, toDamageBonus : 0, encAdj : 0, minorTests : 1, majorTests : 2};
	_g.h[1100] = { toHitBonus : 0, toDamageBonus : 0, encAdj : 0, minorTests : 1, majorTests : 2};
	_g.h[1200] = { toHitBonus : 0, toDamageBonus : 0, encAdj : 10, minorTests : 2, majorTests : 4};
	_g.h[1300] = { toHitBonus : 0, toDamageBonus : 0, encAdj : 10, minorTests : 2, majorTests : 4};
	_g.h[1400] = { toHitBonus : 0, toDamageBonus : 0, encAdj : 20, minorTests : 2, majorTests : 7};
	_g.h[1500] = { toHitBonus : 0, toDamageBonus : 0, encAdj : 20, minorTests : 2, majorTests : 7};
	_g.h[1600] = { toHitBonus : 0, toDamageBonus : 1, encAdj : 35, minorTests : 3, majorTests : 10};
	_g.h[1700] = { toHitBonus : 1, toDamageBonus : 1, encAdj : 50, minorTests : 3, majorTests : 13};
	_g.h[1800] = { toHitBonus : 1, toDamageBonus : 2, encAdj : 75, minorTests : 3, majorTests : 16};
	_g.h[1850] = { toHitBonus : 1, toDamageBonus : 3, encAdj : 100, minorTests : 3, majorTests : 20};
	_g.h[1875] = { toHitBonus : 2, toDamageBonus : 3, encAdj : 125, minorTests : 4, majorTests : 25};
	_g.h[1890] = { toHitBonus : 2, toDamageBonus : 4, encAdj : 150, minorTests : 4, majorTests : 30};
	_g.h[1899] = { toHitBonus : 2, toDamageBonus : 5, encAdj : 200, minorTests : 4, majorTests : 35};
	_g.h[1900] = { toHitBonus : 3, toDamageBonus : 6, encAdj : 300, minorTests : 5, majorTests : 40};
	this.strStats = _g;
	this.hitDie = 0;
};
$hxClasses["_TablesClass"] = _$TablesClass;
_$TablesClass.__name__ = "_TablesClass";
_$TablesClass.prototype = {
	hitDie: null
	,thac: function(level,ac) {
		throw haxe_Exception.thrown("cannot call base thac()");
	}
	,strStats: null
	,dexStats: null
	,conStats: null
	,wisStatsCommon: null
	,chaStats: null
	,__class__: _$TablesClass
};
var haxe_ds_IntMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.IntMap"] = haxe_ds_IntMap;
haxe_ds_IntMap.__name__ = "haxe.ds.IntMap";
haxe_ds_IntMap.__interfaces__ = [haxe_IMap];
haxe_ds_IntMap.prototype = {
	h: null
	,set: function(key,value) {
		this.h[key] = value;
	}
	,get: function(key) {
		return this.h[key];
	}
	,exists: function(key) {
		return this.h.hasOwnProperty(key);
	}
	,remove: function(key) {
		if(!this.h.hasOwnProperty(key)) {
			return false;
		}
		delete(this.h[key]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h ) if(this.h.hasOwnProperty(key)) a.push(key | 0);
		return new haxe_iterators_ArrayIterator(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i];
		}};
	}
	,keyValueIterator: function() {
		return new haxe_iterators_MapKeyValueIterator(this);
	}
	,copy: function() {
		var copied = new haxe_ds_IntMap();
		var key = this.keys();
		while(key.hasNext()) {
			var key1 = key.next();
			copied.h[key1] = this.h[key1];
		}
		return copied;
	}
	,toString: function() {
		var s_b = "";
		s_b += "{";
		var it = this.keys();
		var i = it;
		while(i.hasNext()) {
			var i1 = i.next();
			s_b += i1 == null ? "null" : "" + i1;
			s_b += " => ";
			s_b += Std.string(Std.string(this.h[i1]));
			if(it.hasNext()) {
				s_b += ", ";
			}
		}
		s_b += "}";
		return s_b;
	}
	,clear: function() {
		this.h = { };
	}
	,__class__: haxe_ds_IntMap
};
var _$TablesCleric = $hx_exports["_TablesCleric"] = function() {
	var _g = new haxe_ds_IntMap();
	_g.h[9] = { bonusSpells : [0,0,0,0], spellFailureChance : 15};
	_g.h[10] = { bonusSpells : [0,0,0,0], spellFailureChance : 10};
	_g.h[11] = { bonusSpells : [0,0,0,0], spellFailureChance : 5};
	_g.h[12] = { bonusSpells : [0,0,0,0], spellFailureChance : 1};
	_g.h[13] = { bonusSpells : [1,0,0,0], spellFailureChance : 0};
	_g.h[14] = { bonusSpells : [2,0,0,0], spellFailureChance : 0};
	_g.h[15] = { bonusSpells : [2,1,0,0], spellFailureChance : 0};
	_g.h[16] = { bonusSpells : [2,2,0,0], spellFailureChance : 0};
	_g.h[17] = { bonusSpells : [2,2,1,0], spellFailureChance : 0};
	_g.h[18] = { bonusSpells : [2,2,1,1], spellFailureChance : 0};
	_g.h[19] = { bonusSpells : [3,2,1,1], spellFailureChance : 0};
	this.wisStats = _g;
	_$TablesClass.call(this);
	this.hitDie = 8;
};
$hxClasses["_TablesCleric"] = _$TablesCleric;
_$TablesCleric.__name__ = "_TablesCleric";
_$TablesCleric.__super__ = _$TablesClass;
_$TablesCleric.prototype = $extend(_$TablesClass.prototype,{
	thac: function(level,ac) {
		return _$Tables.thacCommon(level,ac,_$TablesCleric.levelToMod[level]);
	}
	,wisStats: null
	,__class__: _$TablesCleric
});
var _$TablesFighter = $hx_exports["_TablesFighter"] = function() {
	_$TablesClass.call(this);
	this.hitDie = 10;
	this.conStats.h[17].hpBonus = 3;
	this.conStats.h[18].hpBonus = 4;
	this.conStats.h[19].hpBonus = 5;
};
$hxClasses["_TablesFighter"] = _$TablesFighter;
_$TablesFighter.__name__ = "_TablesFighter";
_$TablesFighter.__super__ = _$TablesClass;
_$TablesFighter.prototype = $extend(_$TablesClass.prototype,{
	thac: function(level,ac) {
		return _$Tables.thacCommon(level,ac,1 - level);
	}
	,__class__: _$TablesFighter
});
var _$TablesThief = $hx_exports["_TablesThief"] = function() {
	_$TablesClass.call(this);
	this.hitDie = 6;
};
$hxClasses["_TablesThief"] = _$TablesThief;
_$TablesThief.__name__ = "_TablesThief";
_$TablesThief.__super__ = _$TablesClass;
_$TablesThief.prototype = $extend(_$TablesClass.prototype,{
	thac: function(level,ac) {
		return _$Tables.thacCommon(level,ac,_$TablesThief.levelToMod[level]);
	}
	,__class__: _$TablesThief
});
var haxe_StackItem = $hxEnums["haxe.StackItem"] = { __ename__ : "haxe.StackItem", __constructs__ : ["CFunction","Module","FilePos","Method","LocalFunction"]
	,CFunction: {_hx_index:0,__enum__:"haxe.StackItem",toString:$estr}
	,Module: ($_=function(m) { return {_hx_index:1,m:m,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["m"],$_)
	,FilePos: ($_=function(s,file,line,column) { return {_hx_index:2,s:s,file:file,line:line,column:column,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["s","file","line","column"],$_)
	,Method: ($_=function(classname,method) { return {_hx_index:3,classname:classname,method:method,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["classname","method"],$_)
	,LocalFunction: ($_=function(v) { return {_hx_index:4,v:v,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["v"],$_)
};
haxe_StackItem.__empty_constructs__ = [haxe_StackItem.CFunction];
var haxe_CallStack = {};
haxe_CallStack.__properties__ = {get_length:"get_length"};
haxe_CallStack.get_length = function(this1) {
	return this1.length;
};
haxe_CallStack.callStack = function() {
	return haxe_NativeStackTrace.toHaxe(haxe_NativeStackTrace.callStack());
};
haxe_CallStack.exceptionStack = function() {
	var eStack = haxe_NativeStackTrace.toHaxe(haxe_NativeStackTrace.exceptionStack());
	return haxe_CallStack.subtract(eStack,haxe_CallStack.callStack());
};
haxe_CallStack.toString = function(stack) {
	var b = new StringBuf();
	var _g = 0;
	var _g1 = stack;
	while(_g < _g1.length) {
		var s = _g1[_g];
		++_g;
		b.b += "\nCalled from ";
		haxe_CallStack.itemToString(b,s);
	}
	return b.b;
};
haxe_CallStack.subtract = function(this1,stack) {
	var startIndex = -1;
	var i = -1;
	while(++i < this1.length) {
		var _g = 0;
		var _g1 = stack.length;
		while(_g < _g1) {
			var j = _g++;
			if(haxe_CallStack.equalItems(this1[i],stack[j])) {
				if(startIndex < 0) {
					startIndex = i;
				}
				++i;
				if(i >= this1.length) {
					break;
				}
			} else {
				startIndex = -1;
			}
		}
		if(startIndex >= 0) {
			break;
		}
	}
	if(startIndex >= 0) {
		return this1.slice(0,startIndex);
	} else {
		return this1;
	}
};
haxe_CallStack.copy = function(this1) {
	return this1.slice();
};
haxe_CallStack.get = function(this1,index) {
	return this1[index];
};
haxe_CallStack.asArray = function(this1) {
	return this1;
};
haxe_CallStack.equalItems = function(item1,item2) {
	if(item1 == null) {
		if(item2 == null) {
			return true;
		} else {
			return false;
		}
	} else {
		switch(item1._hx_index) {
		case 0:
			if(item2 == null) {
				return false;
			} else if(item2._hx_index == 0) {
				return true;
			} else {
				return false;
			}
			break;
		case 1:
			if(item2 == null) {
				return false;
			} else if(item2._hx_index == 1) {
				var m1 = item1.m;
				var m2 = item2.m;
				return m1 == m2;
			} else {
				return false;
			}
			break;
		case 2:
			if(item2 == null) {
				return false;
			} else if(item2._hx_index == 2) {
				var item11 = item1.s;
				var file1 = item1.file;
				var line1 = item1.line;
				var col1 = item1.column;
				var col2 = item2.column;
				var line2 = item2.line;
				var file2 = item2.file;
				var item21 = item2.s;
				if(file1 == file2 && line1 == line2 && col1 == col2) {
					return haxe_CallStack.equalItems(item11,item21);
				} else {
					return false;
				}
			} else {
				return false;
			}
			break;
		case 3:
			if(item2 == null) {
				return false;
			} else if(item2._hx_index == 3) {
				var class1 = item1.classname;
				var method1 = item1.method;
				var method2 = item2.method;
				var class2 = item2.classname;
				if(class1 == class2) {
					return method1 == method2;
				} else {
					return false;
				}
			} else {
				return false;
			}
			break;
		case 4:
			if(item2 == null) {
				return false;
			} else if(item2._hx_index == 4) {
				var v1 = item1.v;
				var v2 = item2.v;
				return v1 == v2;
			} else {
				return false;
			}
			break;
		}
	}
};
haxe_CallStack.exceptionToString = function(e) {
	if(e.get_previous() == null) {
		var tmp = "Exception: " + e.get_message();
		var tmp1 = e.get_stack();
		return tmp + (tmp1 == null ? "null" : haxe_CallStack.toString(tmp1));
	}
	var result = "";
	var e1 = e;
	var prev = null;
	while(e1 != null) {
		if(prev == null) {
			var result1 = "Exception: " + e1.get_message();
			var tmp = e1.get_stack();
			result = result1 + (tmp == null ? "null" : haxe_CallStack.toString(tmp)) + result;
		} else {
			var prevStack = haxe_CallStack.subtract(e1.get_stack(),prev.get_stack());
			result = "Exception: " + e1.get_message() + (prevStack == null ? "null" : haxe_CallStack.toString(prevStack)) + "\n\nNext " + result;
		}
		prev = e1;
		e1 = e1.get_previous();
	}
	return result;
};
haxe_CallStack.itemToString = function(b,s) {
	switch(s._hx_index) {
	case 0:
		b.b += "a C function";
		break;
	case 1:
		var m = s.m;
		b.b += "module ";
		b.b += m == null ? "null" : "" + m;
		break;
	case 2:
		var col = s.column;
		var line = s.line;
		var file = s.file;
		var s1 = s.s;
		if(s1 != null) {
			haxe_CallStack.itemToString(b,s1);
			b.b += " (";
		}
		b.b += file == null ? "null" : "" + file;
		b.b += " line ";
		b.b += line == null ? "null" : "" + line;
		if(col != null) {
			b.b += " column ";
			b.b += col == null ? "null" : "" + col;
		}
		if(s1 != null) {
			b.b += ")";
		}
		break;
	case 3:
		var meth = s.method;
		var cname = s.classname;
		b.b += Std.string(cname == null ? "<unknown>" : cname);
		b.b += ".";
		b.b += meth == null ? "null" : "" + meth;
		break;
	case 4:
		var n = s.v;
		b.b += "local function #";
		b.b += n == null ? "null" : "" + n;
		break;
	}
};
var haxe_DynamicAccess = {};
haxe_DynamicAccess._new = function() {
	var this1 = { };
	return this1;
};
haxe_DynamicAccess.get = function(this1,key) {
	return this1[key];
};
haxe_DynamicAccess.set = function(this1,key,value) {
	return this1[key] = value;
};
haxe_DynamicAccess.exists = function(this1,key) {
	return Object.prototype.hasOwnProperty.call(this1,key);
};
haxe_DynamicAccess.remove = function(this1,key) {
	return Reflect.deleteField(this1,key);
};
haxe_DynamicAccess.keys = function(this1) {
	return Reflect.fields(this1);
};
haxe_DynamicAccess.copy = function(this1) {
	return Reflect.copy(this1);
};
haxe_DynamicAccess.iterator = function(this1) {
	return new haxe_iterators_DynamicAccessIterator(this1);
};
haxe_DynamicAccess.keyValueIterator = function(this1) {
	return new haxe_iterators_DynamicAccessKeyValueIterator(this1);
};
var haxe_Exception = function(message,previous,native) {
	Error.call(this,message);
	this.message = message;
	this.__previousException = previous;
	this.__nativeException = native != null ? native : this;
	this.__skipStack = 0;
	var old = Error.prepareStackTrace;
	Error.prepareStackTrace = function(e) { return e.stack; }
	if(((native) instanceof Error)) {
		this.stack = native.stack;
	} else {
		var e = null;
		if(Error.captureStackTrace) {
			Error.captureStackTrace(this,haxe_Exception);
			e = this;
		} else {
			e = new Error();
			if(typeof(e.stack) == "undefined") {
				try { throw e; } catch(_) {}
				this.__skipStack++;
			}
		}
		this.stack = e.stack;
	}
	Error.prepareStackTrace = old;
};
$hxClasses["haxe.Exception"] = haxe_Exception;
haxe_Exception.__name__ = "haxe.Exception";
haxe_Exception.caught = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value;
	} else if(((value) instanceof Error)) {
		return new haxe_Exception(value.message,null,value);
	} else {
		return new haxe_ValueException(value,null,value);
	}
};
haxe_Exception.thrown = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value.get_native();
	} else if(((value) instanceof Error)) {
		return value;
	} else {
		var e = new haxe_ValueException(value);
		e.__skipStack++;
		return e;
	}
};
haxe_Exception.__super__ = Error;
haxe_Exception.prototype = $extend(Error.prototype,{
	__skipStack: null
	,__nativeException: null
	,__previousException: null
	,unwrap: function() {
		return this.__nativeException;
	}
	,toString: function() {
		return this.get_message();
	}
	,details: function() {
		if(this.get_previous() == null) {
			var tmp = "Exception: " + this.get_message();
			var tmp1 = this.get_stack();
			return tmp + (tmp1 == null ? "null" : haxe_CallStack.toString(tmp1));
		} else {
			var result = "";
			var e = this;
			var prev = null;
			while(e != null) {
				if(prev == null) {
					var result1 = "Exception: " + e.get_message();
					var tmp = e.get_stack();
					result = result1 + (tmp == null ? "null" : haxe_CallStack.toString(tmp)) + result;
				} else {
					var prevStack = haxe_CallStack.subtract(e.get_stack(),prev.get_stack());
					result = "Exception: " + e.get_message() + (prevStack == null ? "null" : haxe_CallStack.toString(prevStack)) + "\n\nNext " + result;
				}
				prev = e;
				e = e.get_previous();
			}
			return result;
		}
	}
	,__shiftStack: function() {
		this.__skipStack++;
	}
	,get_message: function() {
		return this.message;
	}
	,get_previous: function() {
		return this.__previousException;
	}
	,get_native: function() {
		return this.__nativeException;
	}
	,get_stack: function() {
		var _g = this.__exceptionStack;
		if(_g == null) {
			var value = haxe_NativeStackTrace.toHaxe(haxe_NativeStackTrace.normalize(this.stack),this.__skipStack);
			this.setProperty("__exceptionStack",value);
			return value;
		} else {
			var s = _g;
			return s;
		}
	}
	,setProperty: function(name,value) {
		try {
			Object.defineProperty(this,name,{ value : value});
		} catch( _g ) {
			this[name] = value;
		}
	}
	,get___exceptionStack: function() {
		return this.__exceptionStack;
	}
	,set___exceptionStack: function(value) {
		this.setProperty("__exceptionStack",value);
		return value;
	}
	,get___skipStack: function() {
		return this.__skipStack;
	}
	,set___skipStack: function(value) {
		this.setProperty("__skipStack",value);
		return value;
	}
	,get___nativeException: function() {
		return this.__nativeException;
	}
	,set___nativeException: function(value) {
		this.setProperty("__nativeException",value);
		return value;
	}
	,get___previousException: function() {
		return this.__previousException;
	}
	,set___previousException: function(value) {
		this.setProperty("__previousException",value);
		return value;
	}
	,__class__: haxe_Exception
	,__properties__: {set___exceptionStack:"set___exceptionStack",get___exceptionStack:"get___exceptionStack",get_native:"get_native",get_previous:"get_previous",get_stack:"get_stack",get_message:"get_message"}
});
var haxe_Log = function() { };
$hxClasses["haxe.Log"] = haxe_Log;
haxe_Log.__name__ = "haxe.Log";
haxe_Log.formatOutput = function(v,infos) {
	var str = Std.string(v);
	if(infos == null) {
		return str;
	}
	var pstr = infos.fileName + ":" + infos.lineNumber;
	if(infos.customParams != null) {
		var _g = 0;
		var _g1 = infos.customParams;
		while(_g < _g1.length) {
			var v = _g1[_g];
			++_g;
			str += ", " + Std.string(v);
		}
	}
	return pstr + ": " + str;
};
haxe_Log.trace = function(v,infos) {
	var str = haxe_Log.formatOutput(v,infos);
	if(typeof(console) != "undefined" && console.log != null) {
		console.log(str);
	}
};
var haxe_NativeStackTrace = function() { };
$hxClasses["haxe.NativeStackTrace"] = haxe_NativeStackTrace;
haxe_NativeStackTrace.__name__ = "haxe.NativeStackTrace";
haxe_NativeStackTrace.lastError = null;
haxe_NativeStackTrace.wrapCallSite = null;
haxe_NativeStackTrace.saveStack = function(e) {
	haxe_NativeStackTrace.lastError = e;
};
haxe_NativeStackTrace.callStack = function() {
	var e = new Error("");
	var stack = haxe_NativeStackTrace.tryHaxeStack(e);
	if(typeof(stack) == "undefined") {
		try {
			throw e;
		} catch( _g ) {
		}
		stack = e.stack;
	}
	return haxe_NativeStackTrace.normalize(stack,2);
};
haxe_NativeStackTrace.exceptionStack = function() {
	return haxe_NativeStackTrace.normalize(haxe_NativeStackTrace.tryHaxeStack(haxe_NativeStackTrace.lastError));
};
haxe_NativeStackTrace.toHaxe = function(s,skip) {
	if(skip == null) {
		skip = 0;
	}
	if(s == null) {
		return [];
	} else if(typeof(s) == "string") {
		var stack = s.split("\n");
		if(stack[0] == "Error") {
			stack.shift();
		}
		var m = [];
		var _g = 0;
		var _g1 = stack.length;
		while(_g < _g1) {
			var i = _g++;
			if(skip > i) {
				continue;
			}
			var line = stack[i];
			var matched = line.match(/^    at ([A-Za-z0-9_. ]+) \(([^)]+):([0-9]+):([0-9]+)\)$/);
			if(matched != null) {
				var path = matched[1].split(".");
				if(path[0] == "$hxClasses") {
					path.shift();
				}
				var meth = path.pop();
				var file = matched[2];
				var line1 = Std.parseInt(matched[3]);
				var column = Std.parseInt(matched[4]);
				m.push(haxe_StackItem.FilePos(meth == "Anonymous function" ? haxe_StackItem.LocalFunction() : meth == "Global code" ? null : haxe_StackItem.Method(path.join("."),meth),file,line1,column));
			} else {
				m.push(haxe_StackItem.Module(StringTools.trim(line)));
			}
		}
		return m;
	} else if(skip > 0 && Array.isArray(s)) {
		return s.slice(skip);
	} else {
		return s;
	}
};
haxe_NativeStackTrace.tryHaxeStack = function(e) {
	if(e == null) {
		return [];
	}
	var oldValue = Error.prepareStackTrace;
	Error.prepareStackTrace = haxe_NativeStackTrace.prepareHxStackTrace;
	var stack = e.stack;
	Error.prepareStackTrace = oldValue;
	return stack;
};
haxe_NativeStackTrace.prepareHxStackTrace = function(e,callsites) {
	var stack = [];
	var _g = 0;
	while(_g < callsites.length) {
		var site = callsites[_g];
		++_g;
		if(haxe_NativeStackTrace.wrapCallSite != null) {
			site = haxe_NativeStackTrace.wrapCallSite(site);
		}
		var method = null;
		var fullName = site.getFunctionName();
		if(fullName != null) {
			var idx = fullName.lastIndexOf(".");
			if(idx >= 0) {
				var className = fullName.substring(0,idx);
				var methodName = fullName.substring(idx + 1);
				method = haxe_StackItem.Method(className,methodName);
			} else {
				method = haxe_StackItem.Method(null,fullName);
			}
		}
		var fileName = site.getFileName();
		var fileAddr = fileName == null ? -1 : fileName.indexOf("file:");
		if(haxe_NativeStackTrace.wrapCallSite != null && fileAddr > 0) {
			fileName = fileName.substring(fileAddr + 6);
		}
		stack.push(haxe_StackItem.FilePos(method,fileName,site.getLineNumber(),site.getColumnNumber()));
	}
	return stack;
};
haxe_NativeStackTrace.normalize = function(stack,skipItems) {
	if(skipItems == null) {
		skipItems = 0;
	}
	if(Array.isArray(stack) && skipItems > 0) {
		return stack.slice(skipItems);
	} else if(typeof(stack) == "string") {
		switch(stack.substring(0,6)) {
		case "Error\n":case "Error:":
			++skipItems;
			break;
		default:
		}
		return haxe_NativeStackTrace.skipLines(stack,skipItems);
	} else {
		return stack;
	}
};
haxe_NativeStackTrace.skipLines = function(stack,skip,pos) {
	if(pos == null) {
		pos = 0;
	}
	if(skip > 0) {
		pos = stack.indexOf("\n",pos);
		if(pos < 0) {
			return "";
		} else {
			return haxe_NativeStackTrace.skipLines(stack,--skip,pos + 1);
		}
	} else {
		return stack.substring(pos);
	}
};
var haxe_ValueException = function(value,previous,native) {
	haxe_Exception.call(this,String(value),previous,native);
	this.value = value;
	this.__skipStack++;
};
$hxClasses["haxe.ValueException"] = haxe_ValueException;
haxe_ValueException.__name__ = "haxe.ValueException";
haxe_ValueException.__super__ = haxe_Exception;
haxe_ValueException.prototype = $extend(haxe_Exception.prototype,{
	value: null
	,unwrap: function() {
		return this.value;
	}
	,__class__: haxe_ValueException
});
var haxe_ds_BalancedTree = function() {
};
$hxClasses["haxe.ds.BalancedTree"] = haxe_ds_BalancedTree;
haxe_ds_BalancedTree.__name__ = "haxe.ds.BalancedTree";
haxe_ds_BalancedTree.__interfaces__ = [haxe_IMap];
haxe_ds_BalancedTree.iteratorLoop = function(node,acc) {
	if(node != null) {
		haxe_ds_BalancedTree.iteratorLoop(node.left,acc);
		acc.push(node.value);
		haxe_ds_BalancedTree.iteratorLoop(node.right,acc);
	}
};
haxe_ds_BalancedTree.prototype = {
	root: null
	,set: function(key,value) {
		this.root = this.setLoop(key,value,this.root);
	}
	,get: function(key) {
		var node = this.root;
		while(node != null) {
			var c = this.compare(key,node.key);
			if(c == 0) {
				return node.value;
			}
			if(c < 0) {
				node = node.left;
			} else {
				node = node.right;
			}
		}
		return null;
	}
	,remove: function(key) {
		try {
			this.root = this.removeLoop(key,this.root);
			return true;
		} catch( _g ) {
			if(typeof(haxe_Exception.caught(_g).unwrap()) == "string") {
				return false;
			} else {
				throw _g;
			}
		}
	}
	,exists: function(key) {
		var node = this.root;
		while(node != null) {
			var c = this.compare(key,node.key);
			if(c == 0) {
				return true;
			} else if(c < 0) {
				node = node.left;
			} else {
				node = node.right;
			}
		}
		return false;
	}
	,iterator: function() {
		var ret = [];
		haxe_ds_BalancedTree.iteratorLoop(this.root,ret);
		return new haxe_iterators_ArrayIterator(ret);
	}
	,keyValueIterator: function() {
		return new haxe_iterators_MapKeyValueIterator(this);
	}
	,keys: function() {
		var ret = [];
		this.keysLoop(this.root,ret);
		return new haxe_iterators_ArrayIterator(ret);
	}
	,copy: function() {
		var copied = new haxe_ds_BalancedTree();
		copied.root = this.root;
		return copied;
	}
	,setLoop: function(k,v,node) {
		if(node == null) {
			return new haxe_ds_TreeNode(null,k,v,null);
		}
		var c = this.compare(k,node.key);
		if(c == 0) {
			return new haxe_ds_TreeNode(node.left,k,v,node.right,node == null ? 0 : node._height);
		} else if(c < 0) {
			var nl = this.setLoop(k,v,node.left);
			return this.balance(nl,node.key,node.value,node.right);
		} else {
			var nr = this.setLoop(k,v,node.right);
			return this.balance(node.left,node.key,node.value,nr);
		}
	}
	,removeLoop: function(k,node) {
		if(node == null) {
			throw haxe_Exception.thrown("Not_found");
		}
		var c = this.compare(k,node.key);
		if(c == 0) {
			return this.merge(node.left,node.right);
		} else if(c < 0) {
			return this.balance(this.removeLoop(k,node.left),node.key,node.value,node.right);
		} else {
			return this.balance(node.left,node.key,node.value,this.removeLoop(k,node.right));
		}
	}
	,keysLoop: function(node,acc) {
		if(node != null) {
			this.keysLoop(node.left,acc);
			acc.push(node.key);
			this.keysLoop(node.right,acc);
		}
	}
	,merge: function(t1,t2) {
		if(t1 == null) {
			return t2;
		}
		if(t2 == null) {
			return t1;
		}
		var t = this.minBinding(t2);
		return this.balance(t1,t.key,t.value,this.removeMinBinding(t2));
	}
	,minBinding: function(t) {
		if(t == null) {
			throw haxe_Exception.thrown("Not_found");
		} else if(t.left == null) {
			return t;
		} else {
			return this.minBinding(t.left);
		}
	}
	,removeMinBinding: function(t) {
		if(t.left == null) {
			return t.right;
		} else {
			return this.balance(this.removeMinBinding(t.left),t.key,t.value,t.right);
		}
	}
	,balance: function(l,k,v,r) {
		var hl = l == null ? 0 : l._height;
		var hr = r == null ? 0 : r._height;
		if(hl > hr + 2) {
			var _this = l.left;
			var _this1 = l.right;
			if((_this == null ? 0 : _this._height) >= (_this1 == null ? 0 : _this1._height)) {
				return new haxe_ds_TreeNode(l.left,l.key,l.value,new haxe_ds_TreeNode(l.right,k,v,r));
			} else {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l.left,l.key,l.value,l.right.left),l.right.key,l.right.value,new haxe_ds_TreeNode(l.right.right,k,v,r));
			}
		} else if(hr > hl + 2) {
			var _this = r.right;
			var _this1 = r.left;
			if((_this == null ? 0 : _this._height) > (_this1 == null ? 0 : _this1._height)) {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l,k,v,r.left),r.key,r.value,r.right);
			} else {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l,k,v,r.left.left),r.left.key,r.left.value,new haxe_ds_TreeNode(r.left.right,r.key,r.value,r.right));
			}
		} else {
			return new haxe_ds_TreeNode(l,k,v,r,(hl > hr ? hl : hr) + 1);
		}
	}
	,compare: function(k1,k2) {
		return Reflect.compare(k1,k2);
	}
	,toString: function() {
		if(this.root == null) {
			return "{}";
		} else {
			return "{" + this.root.toString() + "}";
		}
	}
	,clear: function() {
		this.root = null;
	}
	,__class__: haxe_ds_BalancedTree
};
var haxe_ds_TreeNode = function(l,k,v,r,h) {
	if(h == null) {
		h = -1;
	}
	this.left = l;
	this.key = k;
	this.value = v;
	this.right = r;
	if(h == -1) {
		var tmp;
		var _this = this.left;
		var _this1 = this.right;
		if((_this == null ? 0 : _this._height) > (_this1 == null ? 0 : _this1._height)) {
			var _this = this.left;
			tmp = _this == null ? 0 : _this._height;
		} else {
			var _this = this.right;
			tmp = _this == null ? 0 : _this._height;
		}
		this._height = tmp + 1;
	} else {
		this._height = h;
	}
};
$hxClasses["haxe.ds.TreeNode"] = haxe_ds_TreeNode;
haxe_ds_TreeNode.__name__ = "haxe.ds.TreeNode";
haxe_ds_TreeNode.prototype = {
	left: null
	,right: null
	,key: null
	,value: null
	,_height: null
	,toString: function() {
		return (this.left == null ? "" : this.left.toString() + ", ") + ("" + Std.string(this.key) + "=" + Std.string(this.value)) + (this.right == null ? "" : ", " + this.right.toString());
	}
	,__class__: haxe_ds_TreeNode
};
var haxe_ds_EnumValueMap = function() {
	haxe_ds_BalancedTree.call(this);
};
$hxClasses["haxe.ds.EnumValueMap"] = haxe_ds_EnumValueMap;
haxe_ds_EnumValueMap.__name__ = "haxe.ds.EnumValueMap";
haxe_ds_EnumValueMap.__interfaces__ = [haxe_IMap];
haxe_ds_EnumValueMap.__super__ = haxe_ds_BalancedTree;
haxe_ds_EnumValueMap.prototype = $extend(haxe_ds_BalancedTree.prototype,{
	compare: function(k1,k2) {
		var d = k1._hx_index - k2._hx_index;
		if(d != 0) {
			return d;
		}
		var p1 = Type.enumParameters(k1);
		var p2 = Type.enumParameters(k2);
		if(p1.length == 0 && p2.length == 0) {
			return 0;
		}
		return this.compareArgs(p1,p2);
	}
	,compareArgs: function(a1,a2) {
		var ld = a1.length - a2.length;
		if(ld != 0) {
			return ld;
		}
		var _g = 0;
		var _g1 = a1.length;
		while(_g < _g1) {
			var i = _g++;
			var d = this.compareArg(a1[i],a2[i]);
			if(d != 0) {
				return d;
			}
		}
		return 0;
	}
	,compareArg: function(v1,v2) {
		if(Reflect.isEnumValue(v1) && Reflect.isEnumValue(v2)) {
			return this.compare(v1,v2);
		} else if(((v1) instanceof Array) && ((v2) instanceof Array)) {
			return this.compareArgs(v1,v2);
		} else {
			return Reflect.compare(v1,v2);
		}
	}
	,copy: function() {
		var copied = new haxe_ds_EnumValueMap();
		copied.root = this.root;
		return copied;
	}
	,__class__: haxe_ds_EnumValueMap
});
var haxe_ds_HashMap = {};
haxe_ds_HashMap._new = function() {
	var this1 = new haxe_ds__$HashMap_HashMapData();
	return this1;
};
haxe_ds_HashMap.set = function(this1,k,v) {
	var _this = this1.keys;
	var key = k.hashCode();
	_this.h[key] = k;
	var _this = this1.values;
	var key = k.hashCode();
	_this.h[key] = v;
};
haxe_ds_HashMap.get = function(this1,k) {
	var _this = this1.values;
	var key = k.hashCode();
	return _this.h[key];
};
haxe_ds_HashMap.exists = function(this1,k) {
	var _this = this1.values;
	var key = k.hashCode();
	return _this.h.hasOwnProperty(key);
};
haxe_ds_HashMap.remove = function(this1,k) {
	this1.values.remove(k.hashCode());
	return this1.keys.remove(k.hashCode());
};
haxe_ds_HashMap.keys = function(this1) {
	return this1.keys.iterator();
};
haxe_ds_HashMap.copy = function(this1) {
	var copied = new haxe_ds__$HashMap_HashMapData();
	copied.keys = this1.keys.copy();
	copied.values = this1.values.copy();
	return copied;
};
haxe_ds_HashMap.iterator = function(this1) {
	return this1.values.iterator();
};
haxe_ds_HashMap.keyValueIterator = function(this1) {
	return new haxe_iterators_HashMapKeyValueIterator(this1);
};
haxe_ds_HashMap.clear = function(this1) {
	this1.keys.h = { };
	this1.values.h = { };
};
var haxe_ds__$HashMap_HashMapData = function() {
	this.keys = new haxe_ds_IntMap();
	this.values = new haxe_ds_IntMap();
};
$hxClasses["haxe.ds._HashMap.HashMapData"] = haxe_ds__$HashMap_HashMapData;
haxe_ds__$HashMap_HashMapData.__name__ = "haxe.ds._HashMap.HashMapData";
haxe_ds__$HashMap_HashMapData.prototype = {
	keys: null
	,values: null
	,__class__: haxe_ds__$HashMap_HashMapData
};
var haxe_ds_List = function() {
	this.length = 0;
};
$hxClasses["haxe.ds.List"] = haxe_ds_List;
haxe_ds_List.__name__ = "haxe.ds.List";
haxe_ds_List.prototype = {
	h: null
	,q: null
	,length: null
	,add: function(item) {
		var x = new haxe_ds__$List_ListNode(item,null);
		if(this.h == null) {
			this.h = x;
		} else {
			this.q.next = x;
		}
		this.q = x;
		this.length++;
	}
	,push: function(item) {
		var x = new haxe_ds__$List_ListNode(item,this.h);
		this.h = x;
		if(this.q == null) {
			this.q = x;
		}
		this.length++;
	}
	,first: function() {
		if(this.h == null) {
			return null;
		} else {
			return this.h.item;
		}
	}
	,last: function() {
		if(this.q == null) {
			return null;
		} else {
			return this.q.item;
		}
	}
	,pop: function() {
		if(this.h == null) {
			return null;
		}
		var x = this.h.item;
		this.h = this.h.next;
		if(this.h == null) {
			this.q = null;
		}
		this.length--;
		return x;
	}
	,isEmpty: function() {
		return this.h == null;
	}
	,clear: function() {
		this.h = null;
		this.q = null;
		this.length = 0;
	}
	,remove: function(v) {
		var prev = null;
		var l = this.h;
		while(l != null) {
			if(l.item == v) {
				if(prev == null) {
					this.h = l.next;
				} else {
					prev.next = l.next;
				}
				if(this.q == l) {
					this.q = prev;
				}
				this.length--;
				return true;
			}
			prev = l;
			l = l.next;
		}
		return false;
	}
	,iterator: function() {
		return new haxe_ds__$List_ListIterator(this.h);
	}
	,keyValueIterator: function() {
		return new haxe_ds__$List_ListKeyValueIterator(this.h);
	}
	,toString: function() {
		var s_b = "";
		var first = true;
		var l = this.h;
		s_b += "{";
		while(l != null) {
			if(first) {
				first = false;
			} else {
				s_b += ", ";
			}
			s_b += Std.string(Std.string(l.item));
			l = l.next;
		}
		s_b += "}";
		return s_b;
	}
	,join: function(sep) {
		var s_b = "";
		var first = true;
		var l = this.h;
		while(l != null) {
			if(first) {
				first = false;
			} else {
				s_b += sep == null ? "null" : "" + sep;
			}
			s_b += Std.string(l.item);
			l = l.next;
		}
		return s_b;
	}
	,filter: function(f) {
		var l2 = new haxe_ds_List();
		var l = this.h;
		while(l != null) {
			var v = l.item;
			l = l.next;
			if(f(v)) {
				l2.add(v);
			}
		}
		return l2;
	}
	,map: function(f) {
		var b = new haxe_ds_List();
		var l = this.h;
		while(l != null) {
			var v = l.item;
			l = l.next;
			b.add(f(v));
		}
		return b;
	}
	,__class__: haxe_ds_List
};
var haxe_ds__$List_ListNode = function(item,next) {
	this.item = item;
	this.next = next;
};
$hxClasses["haxe.ds._List.ListNode"] = haxe_ds__$List_ListNode;
haxe_ds__$List_ListNode.__name__ = "haxe.ds._List.ListNode";
haxe_ds__$List_ListNode.prototype = {
	item: null
	,next: null
	,__class__: haxe_ds__$List_ListNode
};
var haxe_ds__$List_ListIterator = function(head) {
	this.head = head;
};
$hxClasses["haxe.ds._List.ListIterator"] = haxe_ds__$List_ListIterator;
haxe_ds__$List_ListIterator.__name__ = "haxe.ds._List.ListIterator";
haxe_ds__$List_ListIterator.prototype = {
	head: null
	,hasNext: function() {
		return this.head != null;
	}
	,next: function() {
		var val = this.head.item;
		this.head = this.head.next;
		return val;
	}
	,__class__: haxe_ds__$List_ListIterator
};
var haxe_ds__$List_ListKeyValueIterator = function(head) {
	this.head = head;
	this.idx = 0;
};
$hxClasses["haxe.ds._List.ListKeyValueIterator"] = haxe_ds__$List_ListKeyValueIterator;
haxe_ds__$List_ListKeyValueIterator.__name__ = "haxe.ds._List.ListKeyValueIterator";
haxe_ds__$List_ListKeyValueIterator.prototype = {
	idx: null
	,head: null
	,hasNext: function() {
		return this.head != null;
	}
	,next: function() {
		var val = this.head.item;
		this.head = this.head.next;
		return { value : val, key : this.idx++};
	}
	,__class__: haxe_ds__$List_ListKeyValueIterator
};
var haxe_ds_ObjectMap = function() {
	this.h = { __keys__ : { }};
};
$hxClasses["haxe.ds.ObjectMap"] = haxe_ds_ObjectMap;
haxe_ds_ObjectMap.__name__ = "haxe.ds.ObjectMap";
haxe_ds_ObjectMap.__interfaces__ = [haxe_IMap];
haxe_ds_ObjectMap.count = null;
haxe_ds_ObjectMap.assignId = function(obj) {
	return (obj.__id__ = $global.$haxeUID++);
};
haxe_ds_ObjectMap.getId = function(obj) {
	return obj.__id__;
};
haxe_ds_ObjectMap.prototype = {
	h: null
	,set: function(key,value) {
		var id = key.__id__;
		if(id == null) {
			id = (key.__id__ = $global.$haxeUID++);
		}
		this.h[id] = value;
		this.h.__keys__[id] = key;
	}
	,get: function(key) {
		return this.h[key.__id__];
	}
	,exists: function(key) {
		return this.h.__keys__[key.__id__] != null;
	}
	,remove: function(key) {
		var id = key.__id__;
		if(this.h.__keys__[id] == null) {
			return false;
		}
		delete(this.h[id]);
		delete(this.h.__keys__[id]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h.__keys__ ) {
		if(this.h.hasOwnProperty(key)) {
			a.push(this.h.__keys__[key]);
		}
		}
		return new haxe_iterators_ArrayIterator(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i.__id__];
		}};
	}
	,keyValueIterator: function() {
		return new haxe_iterators_MapKeyValueIterator(this);
	}
	,copy: function() {
		var copied = new haxe_ds_ObjectMap();
		var key = this.keys();
		while(key.hasNext()) {
			var key1 = key.next();
			copied.set(key1,this.h[key1.__id__]);
		}
		return copied;
	}
	,toString: function() {
		var s_b = "";
		s_b += "{";
		var it = this.keys();
		var i = it;
		while(i.hasNext()) {
			var i1 = i.next();
			s_b += Std.string(Std.string(i1));
			s_b += " => ";
			s_b += Std.string(Std.string(this.h[i1.__id__]));
			if(it.hasNext()) {
				s_b += ", ";
			}
		}
		s_b += "}";
		return s_b;
	}
	,clear: function() {
		this.h = { __keys__ : { }};
	}
	,__class__: haxe_ds_ObjectMap
};
var haxe_ds_ReadOnlyArray = {};
haxe_ds_ReadOnlyArray.__properties__ = {get_length:"get_length"};
haxe_ds_ReadOnlyArray.get_length = function(this1) {
	return this1.length;
};
haxe_ds_ReadOnlyArray.get = function(this1,i) {
	return this1[i];
};
var haxe_ds_WeakMap = function() {
	throw haxe_Exception.thrown("Not implemented for this platform");
};
$hxClasses["haxe.ds.WeakMap"] = haxe_ds_WeakMap;
haxe_ds_WeakMap.__name__ = "haxe.ds.WeakMap";
haxe_ds_WeakMap.__interfaces__ = [haxe_IMap];
haxe_ds_WeakMap.prototype = {
	set: function(key,value) {
	}
	,get: function(key) {
		return null;
	}
	,exists: function(key) {
		return false;
	}
	,remove: function(key) {
		return false;
	}
	,keys: function() {
		return null;
	}
	,iterator: function() {
		return null;
	}
	,keyValueIterator: function() {
		return null;
	}
	,copy: function() {
		return null;
	}
	,toString: function() {
		return null;
	}
	,clear: function() {
	}
	,__class__: haxe_ds_WeakMap
};
var haxe_iterators_ArrayIterator = function(array) {
	this.current = 0;
	this.array = array;
};
$hxClasses["haxe.iterators.ArrayIterator"] = haxe_iterators_ArrayIterator;
haxe_iterators_ArrayIterator.__name__ = "haxe.iterators.ArrayIterator";
haxe_iterators_ArrayIterator.prototype = {
	array: null
	,current: null
	,hasNext: function() {
		return this.current < this.array.length;
	}
	,next: function() {
		return this.array[this.current++];
	}
	,__class__: haxe_iterators_ArrayIterator
};
var haxe_iterators_ArrayKeyValueIterator = function(array) {
	this.current = 0;
	this.array = array;
};
$hxClasses["haxe.iterators.ArrayKeyValueIterator"] = haxe_iterators_ArrayKeyValueIterator;
haxe_iterators_ArrayKeyValueIterator.__name__ = "haxe.iterators.ArrayKeyValueIterator";
haxe_iterators_ArrayKeyValueIterator.prototype = {
	current: null
	,array: null
	,hasNext: function() {
		return this.current < this.array.length;
	}
	,next: function() {
		return { value : this.array[this.current], key : this.current++};
	}
	,__class__: haxe_iterators_ArrayKeyValueIterator
};
var haxe_iterators_DynamicAccessIterator = function(access) {
	this.access = access;
	this.keys = Reflect.fields(access);
	this.index = 0;
};
$hxClasses["haxe.iterators.DynamicAccessIterator"] = haxe_iterators_DynamicAccessIterator;
haxe_iterators_DynamicAccessIterator.__name__ = "haxe.iterators.DynamicAccessIterator";
haxe_iterators_DynamicAccessIterator.prototype = {
	access: null
	,keys: null
	,index: null
	,hasNext: function() {
		return this.index < this.keys.length;
	}
	,next: function() {
		return this.access[this.keys[this.index++]];
	}
	,__class__: haxe_iterators_DynamicAccessIterator
};
var haxe_iterators_DynamicAccessKeyValueIterator = function(access) {
	this.access = access;
	this.keys = Reflect.fields(access);
	this.index = 0;
};
$hxClasses["haxe.iterators.DynamicAccessKeyValueIterator"] = haxe_iterators_DynamicAccessKeyValueIterator;
haxe_iterators_DynamicAccessKeyValueIterator.__name__ = "haxe.iterators.DynamicAccessKeyValueIterator";
haxe_iterators_DynamicAccessKeyValueIterator.prototype = {
	access: null
	,keys: null
	,index: null
	,hasNext: function() {
		return this.index < this.keys.length;
	}
	,next: function() {
		var key = this.keys[this.index++];
		return { value : this.access[key], key : key};
	}
	,__class__: haxe_iterators_DynamicAccessKeyValueIterator
};
var haxe_iterators_HashMapKeyValueIterator = function(map) {
	this.map = map;
	this.keys = map.keys.iterator();
};
$hxClasses["haxe.iterators.HashMapKeyValueIterator"] = haxe_iterators_HashMapKeyValueIterator;
haxe_iterators_HashMapKeyValueIterator.__name__ = "haxe.iterators.HashMapKeyValueIterator";
haxe_iterators_HashMapKeyValueIterator.prototype = {
	map: null
	,keys: null
	,hasNext: function() {
		return this.keys.hasNext();
	}
	,next: function() {
		var key = this.keys.next();
		var _this = this.map.values;
		var key1 = key.hashCode();
		return { value : _this.h[key1], key : key};
	}
	,__class__: haxe_iterators_HashMapKeyValueIterator
};
var haxe_iterators_MapKeyValueIterator = function(map) {
	this.map = map;
	this.keys = map.keys();
};
$hxClasses["haxe.iterators.MapKeyValueIterator"] = haxe_iterators_MapKeyValueIterator;
haxe_iterators_MapKeyValueIterator.__name__ = "haxe.iterators.MapKeyValueIterator";
haxe_iterators_MapKeyValueIterator.prototype = {
	map: null
	,keys: null
	,hasNext: function() {
		return this.keys.hasNext();
	}
	,next: function() {
		var key = this.keys.next();
		return { value : this.map.get(key), key : key};
	}
	,__class__: haxe_iterators_MapKeyValueIterator
};
var haxe_iterators_StringIterator = function(s) {
	this.offset = 0;
	this.s = s;
};
$hxClasses["haxe.iterators.StringIterator"] = haxe_iterators_StringIterator;
haxe_iterators_StringIterator.__name__ = "haxe.iterators.StringIterator";
haxe_iterators_StringIterator.prototype = {
	offset: null
	,s: null
	,hasNext: function() {
		return this.offset < this.s.length;
	}
	,next: function() {
		return this.s.charCodeAt(this.offset++);
	}
	,__class__: haxe_iterators_StringIterator
};
var haxe_iterators_StringIteratorUnicode = function(s) {
	this.offset = 0;
	this.s = s;
};
$hxClasses["haxe.iterators.StringIteratorUnicode"] = haxe_iterators_StringIteratorUnicode;
haxe_iterators_StringIteratorUnicode.__name__ = "haxe.iterators.StringIteratorUnicode";
haxe_iterators_StringIteratorUnicode.unicodeIterator = function(s) {
	return new haxe_iterators_StringIteratorUnicode(s);
};
haxe_iterators_StringIteratorUnicode.prototype = {
	offset: null
	,s: null
	,hasNext: function() {
		return this.offset < this.s.length;
	}
	,next: function() {
		var s = this.s;
		var index = this.offset++;
		var c = s.charCodeAt(index);
		if(c >= 55296 && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(index + 1) & 1023;
		}
		var c1 = c;
		if(c1 >= 65536) {
			this.offset++;
		}
		return c1;
	}
	,__class__: haxe_iterators_StringIteratorUnicode
};
var haxe_iterators_StringKeyValueIterator = function(s) {
	this.offset = 0;
	this.s = s;
};
$hxClasses["haxe.iterators.StringKeyValueIterator"] = haxe_iterators_StringKeyValueIterator;
haxe_iterators_StringKeyValueIterator.__name__ = "haxe.iterators.StringKeyValueIterator";
haxe_iterators_StringKeyValueIterator.prototype = {
	offset: null
	,s: null
	,hasNext: function() {
		return this.offset < this.s.length;
	}
	,next: function() {
		return { key : this.offset, value : this.s.charCodeAt(this.offset++)};
	}
	,__class__: haxe_iterators_StringKeyValueIterator
};
var infos_ForestRoadDemo = function(g) {
	Scene.call(this,g);
	var _g = this.game;
	var _g1 = new haxe_ds_StringMap();
	_g1.h["fire"] = { id : "fire", names : ["fire","flame"], locationNote : "There is a cozy fire burning here.", note : "The flames dance around giving off warmth and light.", actions : []};
	this.locations = [new Location("road",_g,"In the camp","You are in the temporary camp you've made to rest.",[],_g1)];
	this.startingLocation = this.locations[0];
	this.events = [new infos_DogsAttackDemo(this.game)];
};
$hxClasses["infos.ForestRoadDemo"] = infos_ForestRoadDemo;
infos_ForestRoadDemo.__name__ = "infos.ForestRoadDemo";
infos_ForestRoadDemo.__super__ = Scene;
infos_ForestRoadDemo.prototype = $extend(Scene.prototype,{
	__class__: infos_ForestRoadDemo
});
var infos_DogsAttackDemo = function(g) {
	Event.call(this,g);
	this.id = "dogsAttack";
	this.name = "Dogs attack";
};
$hxClasses["infos.DogsAttackDemo"] = infos_DogsAttackDemo;
infos_DogsAttackDemo.__name__ = "infos.DogsAttackDemo";
infos_DogsAttackDemo.__super__ = Event;
infos_DogsAttackDemo.prototype = $extend(Event.prototype,{
	turn: function() {
		if(this.state == 0) {
			this.state++;
			return _$EventResult.EVENT_CONTINUE;
		} else if(this.state <= 3) {
			var lines = ["","The distant howling seems to be getting closer.","The howling is definitely closer now.","Soon they will be here."];
			this.game.console._console.print(lines[this.state]);
			this.state++;
			return _$EventResult.EVENT_CONTINUE;
		}
		this.game.console._console.print("The pack of wild dogs trots out of the forest!");
		this.game.combat.addMonsterGroup(["wildDog","wildDog","wildDog"],100);
		this.game.combat.start();
		return _$EventResult.EVENT_STOP;
	}
	,__class__: infos_DogsAttackDemo
});
var js_Boot = function() { };
$hxClasses["js.Boot"] = js_Boot;
js_Boot.__name__ = "js.Boot";
js_Boot.isClass = function(o) {
	return o.__name__;
};
js_Boot.isInterface = function(o) {
	return o.__isInterface__;
};
js_Boot.isEnum = function(e) {
	return e.__ename__;
};
js_Boot.getClass = function(o) {
	if(o == null) {
		return null;
	} else if(((o) instanceof Array)) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var n = e.__constructs__[o._hx_index];
			var con = e[n];
			if(con.__params__) {
				s = s + "\t";
				return n + "(" + ((function($this) {
					var $r;
					var _g = [];
					{
						var _g1 = 0;
						var _g2 = con.__params__;
						while(true) {
							if(!(_g1 < _g2.length)) {
								break;
							}
							var p = _g2[_g1];
							_g1 = _g1 + 1;
							_g.push(js_Boot.__string_rec(o[p],s));
						}
					}
					$r = _g;
					return $r;
				}(this))).join(",") + ")";
			} else {
				return n;
			}
		}
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g = 0;
			var _g1 = o.length;
			while(_g < _g1) {
				var i = _g++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( _g ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str.length != 2) {
			str += ", \n";
		}
		str += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str += "\n" + s + "}";
		return str;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g = 0;
		var _g1 = intf.length;
		while(_g < _g1) {
			var i = _g++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		return ((o) instanceof Array);
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return o != null;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return ((o | 0) === o);
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(js_Boot.__downcastCheck(o,cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(((o) instanceof cl)) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ != null ? $hxEnums[o.__enum__] == cl : false;
	}
};
js_Boot.__downcastCheck = function(o,cl) {
	if(!((o) instanceof cl)) {
		if(cl.__isInterface__) {
			return js_Boot.__interfLoop(js_Boot.getClass(o),cl);
		} else {
			return false;
		}
	} else {
		return true;
	}
};
js_Boot.__implements = function(o,iface) {
	return js_Boot.__interfLoop(js_Boot.getClass(o),iface);
};
js_Boot.__cast = function(o,t) {
	if(o == null || js_Boot.__instanceof(o,t)) {
		return o;
	} else {
		throw haxe_Exception.thrown("Cannot cast " + Std.string(o) + " to " + Std.string(t));
	}
};
js_Boot.__toStr = null;
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var js_Browser = function() { };
$hxClasses["js.Browser"] = js_Browser;
js_Browser.__name__ = "js.Browser";
js_Browser.__properties__ = {get_self:"get_self"};
js_Browser.get_self = function() {
	return $global;
};
js_Browser.getLocalStorage = function() {
	try {
		var s = window.localStorage;
		s.getItem("");
		if(s.length == 0) {
			var key = "_hx_" + Math.random();
			s.setItem(key,key);
			s.removeItem(key);
		}
		return s;
	} catch( _g ) {
		return null;
	}
};
js_Browser.getSessionStorage = function() {
	try {
		var s = window.sessionStorage;
		s.getItem("");
		if(s.length == 0) {
			var key = "_hx_" + Math.random();
			s.setItem(key,key);
			s.removeItem(key);
		}
		return s;
	} catch( _g ) {
		return null;
	}
};
js_Browser.createXMLHttpRequest = function() {
	if(typeof XMLHttpRequest != "undefined") {
		return new XMLHttpRequest();
	}
	if(typeof ActiveXObject != "undefined") {
		return new ActiveXObject("Microsoft.XMLHTTP");
	}
	throw haxe_Exception.thrown("Unable to create XMLHttpRequest object.");
};
js_Browser.alert = function(v) {
	window.alert(Std.string(v));
};
var js_Lib = function() { };
$hxClasses["js.Lib"] = js_Lib;
js_Lib.__name__ = "js.Lib";
js_Lib.__properties__ = {get_undefined:"get_undefined"};
js_Lib.debug = function() {
	debugger;
};
js_Lib.alert = function(v) {
	alert(js_Boot.__string_rec(v,""));
};
js_Lib.eval = function(code) {
	return eval(code);
};
js_Lib.get_undefined = function() {
	return undefined;
};
js_Lib.rethrow = function() {
};
js_Lib.getOriginalException = function() {
	return null;
};
js_Lib.getNextHaxeUID = function() {
	return $global.$haxeUID++;
};
var js_html__$CanvasElement_CanvasUtil = function() { };
$hxClasses["js.html._CanvasElement.CanvasUtil"] = js_html__$CanvasElement_CanvasUtil;
js_html__$CanvasElement_CanvasUtil.__name__ = "js.html._CanvasElement.CanvasUtil";
js_html__$CanvasElement_CanvasUtil.getContextWebGL = function(canvas,attribs) {
	var name = "webgl";
	var ctx = canvas.getContext(name,attribs);
	if(ctx != null) {
		return ctx;
	}
	var name = "experimental-webgl";
	var ctx = canvas.getContext(name,attribs);
	if(ctx != null) {
		return ctx;
	}
	return null;
};
var js_jquery_JqEltsIterator = function(j) {
	this.i = 0;
	this.j = j;
};
$hxClasses["js.jquery.JqEltsIterator"] = js_jquery_JqEltsIterator;
js_jquery_JqEltsIterator.__name__ = "js.jquery.JqEltsIterator";
js_jquery_JqEltsIterator.prototype = {
	j: null
	,i: null
	,hasNext: function() {
		return this.i < this.j.length;
	}
	,next: function() {
		return $(this.j[this.i++]);
	}
	,__class__: js_jquery_JqEltsIterator
};
var js_jquery_JqIterator = function(j) {
	this.i = 0;
	this.j = j;
};
$hxClasses["js.jquery.JqIterator"] = js_jquery_JqIterator;
js_jquery_JqIterator.__name__ = "js.jquery.JqIterator";
js_jquery_JqIterator.prototype = {
	j: null
	,i: null
	,hasNext: function() {
		return this.i < this.j.length;
	}
	,next: function() {
		return this.j[this.i++];
	}
	,__class__: js_jquery_JqIterator
};
var js_lib__$ArrayBuffer_ArrayBufferCompat = function() { };
$hxClasses["js.lib._ArrayBuffer.ArrayBufferCompat"] = js_lib__$ArrayBuffer_ArrayBufferCompat;
js_lib__$ArrayBuffer_ArrayBufferCompat.__name__ = "js.lib._ArrayBuffer.ArrayBufferCompat";
js_lib__$ArrayBuffer_ArrayBufferCompat.sliceImpl = function(begin,end) {
	var u = new Uint8Array(this,begin,end == null ? null : end - begin);
	var resultArray = new Uint8Array(u.byteLength);
	resultArray.set(u);
	return resultArray.buffer;
};
var js_lib_KeyValue = {};
js_lib_KeyValue.__properties__ = {get_value:"get_value",get_key:"get_key"};
js_lib_KeyValue.get_key = function(this1) {
	return this1[0];
};
js_lib_KeyValue.get_value = function(this1) {
	return this1[1];
};
var js_lib_ObjectEntry = {};
js_lib_ObjectEntry.__properties__ = {get_value:"get_value",get_key:"get_key"};
js_lib_ObjectEntry.get_key = function(this1) {
	return this1[0];
};
js_lib_ObjectEntry.get_value = function(this1) {
	return this1[1];
};
function $iterator(o) { if( o instanceof Array ) return function() { return new haxe_iterators_ArrayIterator(o); }; return typeof(o.iterator) == 'function' ? $bind(o,o.iterator) : o.iterator; }
function $getIterator(o) { if( o instanceof Array ) return new haxe_iterators_ArrayIterator(o); else return o.iterator(); }
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0;
if(typeof(performance) != "undefined" ? typeof(performance.now) == "function" : false) {
	HxOverrides.now = performance.now.bind(performance);
}
$hxClasses["Math"] = Math;
if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }
String.prototype.__class__ = $hxClasses["String"] = String;
String.__name__ = "String";
$hxClasses["Array"] = Array;
Array.__name__ = "Array";
Date.prototype.__class__ = $hxClasses["Date"] = Date;
Date.__name__ = "Date";
var Int = { };
var Dynamic = { };
var Float = Number;
var Bool = Boolean;
var Class = { };
var Enum = { };
haxe_ds_ObjectMap.count = 0;
js_Boot.__toStr = ({ }).toString;
var typeofJQuery = typeof($);
if(typeofJQuery != "undefined" && $.fn != null) {
	$.fn.elements = function() {
		return new js_jquery_JqEltsIterator(this);
	};
}
var typeofJQuery = typeof($);
if(typeofJQuery != "undefined" && $.fn != null) {
	$.fn.iterator = function() {
		return new js_jquery_JqIterator(this);
	};
}
if(ArrayBuffer.prototype.slice == null) {
	ArrayBuffer.prototype.slice = js_lib__$ArrayBuffer_ArrayBufferCompat.sliceImpl;
}
Chargen.METHOD_RANDOM = 0;
Chargen.METHOD_3D6 = 1;
Chargen.METHOD_4D6 = 2;
Combat.commands = [{ id : "attack", variants : ["attack","a"], help : "Declare that the player character wants to attack with a melee weapon."},{ id : "charge", args : "<group letter>", variants : ["charge","ch"], help : "Declare that the player character wants to charge into a given combat group."},{ id : "draw", variants : ["draw","d"], args : "<item letter>", help : "Declare that the player character wants to draw another weapon from the inventory. Shows a list of weapons without arguments."},{ id : "drink", variants : ["drink","quaff","q"], args : "<item letter> [<full|half|third>]", help : "Declare that the player character wants to quaff a potion from the inventory in full or partially if possible. Shows a list of potions without arguments."},{ id : "examine", variants : ["examine","x","look at","look","l"], args : "<item>", help : "Examine an item in player inventory. For the sake of convenience this action does not take time."},{ id : "move", variants : ["move","m","close","cl"], args : "<group letter>", help : "Declare that the player character wants to close distance to a given combat group."},{ id : "parry", variants : ["parry","p"], help : "Declare that the player character wants to parry for this round."},{ id : "retreat", variants : ["retreat","r"], help : "Declare that the player character wants to retreat from the current combat group. Parrying is enabled while retreating."},{ id : "shoot", args : "<group letter>", variants : ["shoot","s"], help : "Declare that the player character wants to shoot into a given combat group."},{ id : "wait", variants : ["wait","z"], help : "Declare that the player character waits for one round."}];
Console.commonCommands = [{ id : "again", variants : ["again","g"], help : "Repeats previous command again."},{ id : "examine", variants : ["examine","x","look","l"], args : "<object>", help : "Examines the given object."},{ id : "help", variants : ["help","h","?"], args : "[<command>]", help : "Shows ingame help."},{ id : "inventory", variants : ["inventory","inv","i"], help : "Shows player inventory."},{ id : "options", variants : ["options","opts","opt","settings","set"], args : "[<name>] [<value>]", help : "Sets or prints game options."},{ id : "party", variants : ["party","stats"], help : "Prints party information."}];
Const.ignoredKeywords = ["","a","at","in","is","on","the"];
Const.ignoredCombatKeywords = ["","at","in","is","on","the"];
Const.stringsFail = (function($this) {
	var $r;
	var _g = new haxe_ds_StringMap();
	_g.h["spotHidden"] = ["You fail to notice anything special.","Nothing catches your eye.","There is nothing that attracts your attention."];
	_g.h["strength"] = ["Your strength fails you."];
	_g.h["get"] = ["You do not need to pick that up."];
	_g.h["open"] = ["You do not need to open that."];
	_g.h["unlock"] = ["You do not need to unlock that."];
	$r = _g;
	return $r;
}(this));
Const.strings = (function($this) {
	var $r;
	var _g = new haxe_ds_StringMap();
	_g.h["nothingImportant"] = ["There is nothing important here.","You do not see anything important here."];
	$r = _g;
	return $r;
}(this));
EReg.escapeRe = new RegExp("[.*+?^${}()|[\\]\\\\]","g");
Location.commandHelp = (function($this) {
	var $r;
	var _g = new haxe_ds_StringMap();
	_g.h["examine"] = "examine, x, look, l <object> - Examines the given object. If no object is given, describes the scene.";
	_g.h["look"] = "examine, x, look, l <object> - Examines the given object. If no object is given, describes the scene.";
	_g.h["wait"] = "wait, z - Waits for one round.";
	$r = _g;
	return $r;
}(this));
Stats.order = ["str","dex","con","int","wis","cha"];
Stats.names = ["strength","dexterity","constitution","intelligence","wisdom","charisma"];
haxe_SysTools.winMetaCharacters = [32,40,41,37,33,94,34,60,62,38,124,10,13,44,59];
StringTools.winMetaCharacters = haxe_SysTools.winMetaCharacters;
StringTools.MIN_SURROGATE_CODE_POINT = 65536;
_$ItemsTables.armor = (function($this) {
	var $r;
	var _g = new haxe_ds_StringMap();
	_g.h["none"] = { id : "none", name : "No armor", weight : 0, moveRate : 120, ac : 0, cost : 0};
	_g.h["leather"] = { id : "leather", name : "Leather armor", weight : 15, moveRate : 120, ac : -2, cost : 500};
	_g.h["padded"] = { id : "padded", name : "Padded gambeson", weight : 10, moveRate : 90, ac : -2, cost : 400};
	_g.h["ring"] = { id : "ring", name : "Ring mail", weight : 35, moveRate : 90, ac : -3, cost : 3000};
	_g.h["studded"] = { id : "studded", name : "Studded armor", weight : 20, moveRate : 90, ac : -3, cost : 1500};
	_g.h["scale"] = { id : "scale", name : "Scale mail", weight : 40, moveRate : 60, ac : -4, cost : 4500};
	_g.h["chain"] = { id : "chain", name : "Chain mail", weight : 30, moveRate : 90, ac : -5, cost : 7500};
	_g.h["splint"] = { id : "splint", name : "Splint armor", weight : 40, moveRate : 60, ac : -6, cost : 8000};
	_g.h["banded"] = { id : "banded", name : "Banded armor", weight : 35, moveRate : 90, ac : -6, cost : 9000};
	_g.h["plate"] = { id : "plate", name : "Plate armor", weight : 45, moveRate : 60, ac : -7, cost : 40000};
	_g.h["shieldSmall"] = { id : "shieldSmall", name : "Small shield", isShield : true, maxAttacksBlocked : 1, weight : 5, moveRate : 0, ac : -1, cost : 1000};
	_g.h["shieldMedium"] = { id : "shieldMedium", name : "Medium shield", isShield : true, maxAttacksBlocked : 2, weight : 8, moveRate : 0, ac : -1, cost : 1200};
	_g.h["shieldLarge"] = { id : "shieldLarge", name : "Large shield", isShield : true, maxAttacksBlocked : 3, weight : 10, moveRate : 0, ac : -1, cost : 1500};
	$r = _g;
	return $r;
}(this));
_$ItemsTables.weapons = (function($this) {
	var $r;
	var _g = new haxe_ds_StringMap();
	_g.h["unarmed"] = { id : "unarmed", name : "Unarmed", type : _$WeaponType.WEAPONTYPE_MELEE, canShield : true, attackMelee : "punch", attackMelee2 : "punches", damageVsMedium : [1,2,0], damageVsLarge : [1,2,0], length : 1, weight : 0, cost : 0};
	_g.h["battleAxe"] = { id : "battleAxe", name : "Battle axe", type : _$WeaponType.WEAPONTYPE_MELEE, canShield : true, attackMelee : "hack", attackMelee2 : "hacks", damageVsMedium : [1,8,0], damageVsLarge : [1,8,0], length : 4, weight : 7, cost : 500};
	_g.h["handAxe"] = { id : "handAxe", name : "Hand axe", type : _$WeaponType.WEAPONTYPE_BOTH, canShield : true, attackMelee : "hack", attackMelee2 : "hacks", attackRanged : "throw an axe at ", attackRanged2 : "throws an axe at ", damageVsMedium : [1,6,0], damageVsLarge : [1,4,0], length : 3, range : 20, weight : 5, cost : 100};
	_g.h["club"] = { id : "club", name : "Club", type : _$WeaponType.WEAPONTYPE_BOTH, canShield : true, attackMelee : "club", attackMelee2 : "clubs", attackRanged : "throw a club at ", attackRanged2 : "throws a club at ", damageVsMedium : [1,4,0], damageVsLarge : [1,3,0], length : 3, range : 20, weight : 3, cost : 2};
	_g.h["dagger"] = { id : "dagger", name : "Dagger", type : _$WeaponType.WEAPONTYPE_BOTH, canShield : true, attackMelee : "stab", attackMelee2 : "stabs", attackRanged : "throw a dagger at ", attackRanged2 : "throws a dagger at ", damageVsMedium : [1,4,0], damageVsLarge : [1,3,0], shots : 2, range : 20, length : 2, weight : 1, cost : 200};
	_g.h["dart"] = { id : "dart", name : "Dart", type : _$WeaponType.WEAPONTYPE_BOTH, canShield : true, attackMelee : "stick", attackMelee2 : "sticks", attackRanged : "throw a dart at ", attackRanged2 : "throws a dart at ", damageVsMedium : [1,3,0], damageVsLarge : [1,2,0], shots : 3, range : 25, length : 2, weight : 0.5, cost : 20};
	_g.h["heavyFlail"] = { id : "heavyFlail", name : "Heavy flail", type : _$WeaponType.WEAPONTYPE_MELEE, canShield : true, attackMelee : "smash", attackMelee2 : "smashes", damageVsMedium : [1,6,1], damageVsLarge : [2,4,0], length : 4, weight : 10, cost : 300};
	_g.h["lightFlail"] = { id : "lightFlail", name : "Light flail", type : _$WeaponType.WEAPONTYPE_MELEE, canShield : true, attackMelee : "smash", attackMelee2 : "smashes", damageVsMedium : [1,4,1], damageVsLarge : [1,4,1], length : 3, weight : 4, cost : 600};
	_g.h["halberd"] = { id : "halberd", name : "Halberd", type : _$WeaponType.WEAPONTYPE_MELEE, attackMelee : "crush", attackMelee2 : "crushes", damageVsMedium : [1,10,0], damageVsLarge : [2,6,0], length : 6, weight : 18, cost : 900};
	_g.h["heavyWarhammer"] = { id : "heavyWarhammer", name : "Heavy war hammer", type : _$WeaponType.WEAPONTYPE_MELEE, canShield : true, attackMelee : "bludgeon", attackMelee2 : "bludgeons", damageVsMedium : [1,6,0], damageVsLarge : [1,6,1], length : 4, weight : 10, cost : 700};
	_g.h["lightWarhammer"] = { id : "lightWarhammer", name : "Light war hammer", type : _$WeaponType.WEAPONTYPE_MELEE, canShield : true, attackMelee : "bludgeon", attackMelee2 : "bludgeons", damageVsMedium : [1,4,1], damageVsLarge : [1,4,0], length : 3, weight : 5, cost : 100};
	_g.h["lance"] = { id : "lance", name : "Lance", type : _$WeaponType.WEAPONTYPE_MELEE, attackMelee : "stab", attackMelee2 : "stabs", damageVsMedium : [2,4,1], damageVsLarge : [3,6,0], length : 6, weight : 15, cost : 600};
	_g.h["heavyMace"] = { id : "heavyMace", name : "Heavy mace", type : _$WeaponType.WEAPONTYPE_MELEE, canShield : true, attackMelee : "bludgeon", attackMelee2 : "bludgeons", damageVsMedium : [1,6,1], damageVsLarge : [1,6,0], length : 4, weight : 10, cost : 1000};
	_g.h["lightMace"] = { id : "lightMace", name : "Light mace", type : _$WeaponType.WEAPONTYPE_MELEE, canShield : true, attackMelee : "bludgeon", attackMelee2 : "bludgeons", damageVsMedium : [1,4,1], damageVsLarge : [1,4,1], length : 3, weight : 5, cost : 400};
	_g.h["morningStar"] = { id : "morningStar", name : "Morning star", type : _$WeaponType.WEAPONTYPE_MELEE, canShield : true, attackMelee : "crush", attackMelee2 : "crushes", damageVsMedium : [2,4,0], damageVsLarge : [1,6,1], length : 4, weight : 12, cost : 500};
	_g.h["heavyPick"] = { id : "heavyPick", name : "Heavy pick", type : _$WeaponType.WEAPONTYPE_MELEE, canShield : true, attackMelee : "hit", attackMelee2 : "hits", damageVsMedium : [1,6,1], damageVsLarge : [2,4,0], length : 4, weight : 10, cost : 800};
	_g.h["lightPick"] = { id : "lightPick", name : "Light pick", type : _$WeaponType.WEAPONTYPE_MELEE, canShield : true, attackMelee : "hit", attackMelee2 : "hits", damageVsMedium : [1,4,1], damageVsLarge : [1,4,0], length : 4, weight : 4, cost : 500};
	_g.h["polearm"] = { id : "polearm", name : "Pole arm", type : _$WeaponType.WEAPONTYPE_MELEE, attackMelee : "smash", attackMelee2 : "smashes", damageVsMedium : [1,6,1], damageVsLarge : [1,10,0], length : 6, weight : 8, cost : 600};
	_g.h["spear"] = { id : "spear", name : "Spear", type : _$WeaponType.WEAPONTYPE_BOTH, canShield : true, attackMelee : "impale", attackMelee2 : "impales", attackRanged : "throw a spear at ", attackRanged2 : "throws a spear at ", damageVsMedium : [1,6,0], damageVsLarge : [1,8,0], range : 20, length : 6, weight : 5, cost : 100};
	_g.h["staff"] = { id : "staff", name : "Staff", type : _$WeaponType.WEAPONTYPE_MELEE, attackMelee : "beat", attackMelee2 : "beats", damageVsMedium : [1,6,0], damageVsLarge : [1,6,0], length : 6, weight : 5, cost : 0};
	_g.h["bastardSword"] = { id : "bastardSword", name : "Bastard sword", type : _$WeaponType.WEAPONTYPE_MELEE, attackMelee : "slash", attackMelee2 : "slashes", damageVsMedium : [2,4,0], damageVsLarge : [2,8,0], length : 5, weight : 10, cost : 2500};
	_g.h["broadSword"] = { id : "broadSword", name : "Broad sword", type : _$WeaponType.WEAPONTYPE_MELEE, attackMelee : "slash", attackMelee2 : "slashes", damageVsMedium : [2,4,0], damageVsLarge : [1,6,1], length : 4, weight : 8, cost : 1000};
	_g.h["longSword"] = { id : "longSword", name : "Long sword", type : _$WeaponType.WEAPONTYPE_MELEE, canShield : true, attackMelee : "slash", attackMelee2 : "slashes", damageVsMedium : [1,8,0], damageVsLarge : [1,12,0], length : 4, weight : 7, cost : 1500};
	_g.h["scimitar"] = { id : "scimitar", name : "Scimitar", type : _$WeaponType.WEAPONTYPE_MELEE, canShield : true, attackMelee : "slash", attackMelee2 : "slashes", damageVsMedium : [1,8,0], damageVsLarge : [1,8,0], length : 4, weight : 5, cost : 1500};
	_g.h["shortSword"] = { id : "shortSword", name : "Short sword", type : _$WeaponType.WEAPONTYPE_MELEE, canShield : true, attackMelee : "slash", attackMelee2 : "slashes", damageVsMedium : [1,6,0], damageVsLarge : [1,8,0], length : 3, weight : 3, cost : 800};
	_g.h["twohandedSword"] = { id : "twohandedSword", name : "Two-handed sword", type : _$WeaponType.WEAPONTYPE_MELEE, attackMelee : "chop", attackMelee2 : "chops", damageVsMedium : [1,10,0], damageVsLarge : [3,6,0], length : 5, weight : 25, cost : 3000};
	_g.h["shortBow"] = { id : "shortBow", name : "Short bow", type : _$WeaponType.WEAPONTYPE_RANGED, attackRanged : "shoot an arrow at ", attackRanged2 : "shoots an arrow at ", damageVsMedium : [1,6,0], damageVsLarge : [1,6,0], shots : 2, range : 50, weight : 8, cost : 1500};
	_g.h["longBow"] = { id : "longBow", name : "Long bow", type : _$WeaponType.WEAPONTYPE_RANGED, attackRanged : "shoot an arrow at ", attackRanged2 : "shoots an arrow at ", damageVsMedium : [1,6,0], damageVsLarge : [1,6,0], shots : 2, range : 70, weight : 12, cost : 6000};
	_g.h["compShortBow"] = { id : "compShortBow", name : "Composite short bow", type : _$WeaponType.WEAPONTYPE_RANGED, attackRanged : "shoot an arrow at ", attackRanged2 : "shoots an arrow at ", damageVsMedium : [1,6,0], damageVsLarge : [1,6,0], shots : 2, range : 50, weight : 9, cost : 7500};
	_g.h["compLongBow"] = { id : "compLongBow", name : "Composite long bow", type : _$WeaponType.WEAPONTYPE_RANGED, attackRanged : "shoot an arrow at ", attackRanged2 : "shoots an arrow at ", damageVsMedium : [1,6,0], damageVsLarge : [1,6,0], shots : 2, range : 60, weight : 13, cost : 10000};
	_g.h["crossbowLight"] = { id : "crossbowLight", name : "Light crossbow", type : _$WeaponType.WEAPONTYPE_RANGED, attackRanged : "shoot a bolt at ", attackRanged2 : "shoots a bolt at ", damageVsMedium : [1,4,1], damageVsLarge : [1,4,1], range : 60, weight : 4, cost : 1200};
	_g.h["hammer"] = { id : "hammer", name : "Hammer", type : _$WeaponType.WEAPONTYPE_RANGED, canShield : true, attackRanged : "throw a hammer at ", attackRanged2 : "throws a hammer at ", damageVsMedium : [1,4,1], damageVsLarge : [1,4,0], range : 20, weight : 5, cost : 100};
	_g.h["sling"] = { id : "sling", name : "Sling", type : _$WeaponType.WEAPONTYPE_RANGED, attackRanged : "sling a stone at ", attackRanged2 : "slings a stone at ", damageVsMedium : [1,4,0], damageVsLarge : [1,4,0], range : 35, weight : 0.5, cost : 50};
	$r = _g;
	return $r;
}(this));
_$ItemsTables.potions = (function($this) {
	var $r;
	var _g = new haxe_ds_StringMap();
	_g.h["healing"] = { id : "healing", name : "Potion of healing", note : "Restores 2d4+2 hp. Can only be quaffed in full.", doses : 1, cost : 40000, canDrink : function(char) {
		if(char.hp >= char.maxHP) {
			return { result : false, msg : "That would be a waste of a good healing potion."};
		}
		return { result : true, msg : null};
	}, onDrink : function(char,dose) {
		var hp = Const.dice(2,4) + 2;
		if(char.hp + hp > char.maxHP) {
			hp = char.maxHP - char.hp;
		}
		char.hp += hp;
		return " regaining " + hp + " hp.";
	}};
	_g.h["extraHealing"] = { id : "extraHealing", name : "Potion of extra-healing", note : "Restores 3d8+3 hp. Can be quaffed in three portions, each one restoring 1d8 hp.", doses : 3, cost : 80000, canDrink : function(char) {
		if(char.hp >= char.maxHP) {
			return { result : false, msg : "That would be a waste of a good healing potion."};
		}
		return { result : true, msg : null};
	}, onDrink : function(char,dose) {
		var hp = dose == 2 ? Const.dice(1,8) : Const.dice(3,8) + 3;
		if(char.hp + hp > char.maxHP) {
			hp = char.maxHP - char.hp;
		}
		char.hp += hp;
		return " regaining " + hp + " hp.";
	}};
	$r = _g;
	return $r;
}(this));
_$MonstersTable.list = (function($this) {
	var $r;
	var _g = new haxe_ds_StringMap();
	_g.h["wildDog"] = { id : "wildDog", nameCapped : "Wild dog", name : "wild dog", size : _$MonstersTable.SIZE_SMALL, move : 150, ac : 7, hitDice : [1,8,0], attacks : 1, attackNames : ["bite"], damage : [[1,4,0]], level : 1, xp : 10, xpBonus : 1};
	$r = _g;
	return $r;
}(this));
_$MonstersTable.SIZE_SMALL = 0;
_$MonstersTable.SIZE_MEDIUM = 1;
_$MonstersTable.SIZE_LARGE = 2;
_$TablesClass.instance = new _$TablesClass();
_$TablesCleric.toHitPenaltyNonProf = -3;
_$TablesCleric.minStats = [6,3,6,6,9,6];
_$TablesCleric.levelToMod = [1,0,0,0,-2,-2,-2,-4,-4,-4,-6,-6,-6];
_$TablesCleric.savingThrows = (function($this) {
	var $r;
	var _g = new haxe_ds_IntMap();
	_g.h[1] = { rodStaffWand : 14, breathWeapons : 16, deathParalysisPoison : 10, petrifactionPolymorph : 13, spellsUnlisted : 15};
	_g.h[4] = { rodStaffWand : 13, breathWeapons : 15, deathParalysisPoison : 9, petrifactionPolymorph : 12, spellsUnlisted : 14};
	_g.h[7] = { rodStaffWand : 11, breathWeapons : 13, deathParalysisPoison : 7, petrifactionPolymorph : 10, spellsUnlisted : 12};
	$r = _g;
	return $r;
}(this));
_$TablesCleric.advancement = [{ exp : 0, hitDice : 1, spells : [0,0,0,0,0], weaponProfs : 2},{ exp : 0, hitDice : 1, spells : [1,0,0,0,0], weaponProfs : 2},{ exp : 1550, hitDice : 2, spells : [2,0,0,0,0], weaponProfs : 2},{ exp : 2900, hitDice : 3, spells : [2,1,0,0,0], weaponProfs : 3},{ exp : 6000, hitDice : 4, spells : [3,2,0,0,0], weaponProfs : 3},{ exp : 13250, hitDice : 5, spells : [3,3,1,0,0], weaponProfs : 4},{ exp : 27000, hitDice : 6, spells : [3,3,2,0,0], weaponProfs : 4},{ exp : 55000, hitDice : 7, spells : [3,3,2,1,0], weaponProfs : 5},{ exp : 110000, hitDice : 8, spells : [3,3,3,2,0], weaponProfs : 5},{ exp : 220000, hitDice : 9, spells : [4,4,3,2,1], weaponProfs : 6}];
_$TablesCleric.instance = new _$TablesCleric();
_$TablesFighter.savingThrows = (function($this) {
	var $r;
	var _g = new haxe_ds_IntMap();
	_g.h[0] = { rodStaffWand : 18, breathWeapons : 20, deathParalysisPoison : 16, petrifactionPolymorph : 17, spellsUnlisted : 19};
	_g.h[1] = { rodStaffWand : 16, breathWeapons : 17, deathParalysisPoison : 14, petrifactionPolymorph : 15, spellsUnlisted : 17};
	_g.h[3] = { rodStaffWand : 15, breathWeapons : 16, deathParalysisPoison : 13, petrifactionPolymorph : 14, spellsUnlisted : 16};
	_g.h[5] = { rodStaffWand : 13, breathWeapons : 13, deathParalysisPoison : 11, petrifactionPolymorph : 12, spellsUnlisted : 14};
	_g.h[7] = { rodStaffWand : 12, breathWeapons : 12, deathParalysisPoison : 10, petrifactionPolymorph : 11, spellsUnlisted : 13};
	_g.h[9] = { rodStaffWand : 10, breathWeapons : 9, deathParalysisPoison : 8, petrifactionPolymorph : 9, spellsUnlisted : 11};
	$r = _g;
	return $r;
}(this));
_$TablesFighter.instance = new _$TablesFighter();
_$TablesThief.levelToMod = [2,1,1,1,1,-1,-1,-1,-1,-4,-4,-4,-4];
_$TablesThief.savingThrows = (function($this) {
	var $r;
	var _g = new haxe_ds_IntMap();
	_g.h[1] = { rodStaffWand : 14, breathWeapons : 16, deathParalysisPoison : 13, petrifactionPolymorph : 12, spellsUnlisted : 15};
	_g.h[5] = { rodStaffWand : 12, breathWeapons : 15, deathParalysisPoison : 12, petrifactionPolymorph : 11, spellsUnlisted : 13};
	_g.h[9] = { rodStaffWand : 10, breathWeapons : 14, deathParalysisPoison : 11, petrifactionPolymorph : 10, spellsUnlisted : 11};
	$r = _g;
	return $r;
}(this));
_$TablesThief.instance = new _$TablesThief();
Game.main();
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this, typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
