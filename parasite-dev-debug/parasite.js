(function (console, $hx_exports, $global) { "use strict";
$hx_exports.openfl = $hx_exports.openfl || {};
$hx_exports.lime = $hx_exports.lime || {};
var $hxClasses = {},$estr = function() { return js_Boot.__string_rec(this,''); };
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var ApplicationMain = function() { };
$hxClasses["ApplicationMain"] = ApplicationMain;
ApplicationMain.__name__ = ["ApplicationMain"];
ApplicationMain.main = function() {
	ApplicationMain.config = { build : "229", company : "", file : "parasite", fps : 0, name : "parasite", orientation : "", packageName : "org.parasite", version : "1.0.0", windows : [{ allowHighDPI : false, antialiasing : 0, background : 3355443, borderless : false, depthBuffer : false, display : 0, fullscreen : false, hardware : true, height : 0, hidden : null, maximized : null, minimized : null, parameters : "{}", resizable : false, stencilBuffer : true, title : "parasite", vsync : false, width : 0, x : null, y : null}]};
};
ApplicationMain.create = function() {
	var app = new openfl_display_Application();
	app.create(ApplicationMain.config);
	var library = new DefaultAssetLibrary();
	lime_utils_Assets.registerLibrary("default",library);
	ApplicationMain.preloader = new openfl_display_Preloader(new openfl_display_DefaultPreloader());
	app.setPreloader(ApplicationMain.preloader);
	ApplicationMain.preloader.create(ApplicationMain.config);
	ApplicationMain.preloader.onComplete.add(ApplicationMain.init);
	ApplicationMain.preloader.addLibrary(library);
	ApplicationMain.preloader.load();
	var result = app.exec();
};
ApplicationMain.embed = $hx_exports.lime.embed = function(element,width,height,background,assetsPrefix) {
	var htmlElement = null;
	if(typeof(element) == "string") htmlElement = window.document.getElementById(js_Boot.__cast(element , String)); else if(element == null) htmlElement = window.document.createElement("div"); else htmlElement = element;
	var color = null;
	if(background != null && background != "") {
		background = StringTools.replace(background,"#","");
		if(background.indexOf("0x") > -1) color = Std.parseInt(background); else color = Std.parseInt("0x" + background);
	}
	if(width == null) width = 0;
	if(height == null) height = 0;
	ApplicationMain.config.windows[0].background = color;
	ApplicationMain.config.windows[0].element = htmlElement;
	ApplicationMain.config.windows[0].width = width;
	ApplicationMain.config.windows[0].height = height;
	ApplicationMain.config.assetsPrefix = assetsPrefix;
	ApplicationMain.create();
};
ApplicationMain._embed = $hx_exports.openfl.embed = function(element,width,height,background,assetsPrefix) {
	ApplicationMain.embed(element,width,height,background,assetsPrefix);
};
ApplicationMain.init = function() {
	var loaded = 0;
	var total = 0;
	var library_onLoad = function(__) {
		haxe_Log.trace("library load",{ fileName : "ApplicationMain.hx", lineNumber : 186, className : "ApplicationMain", methodName : "init"});
		loaded++;
		if(loaded == total) ApplicationMain.start();
	};
	ApplicationMain.preloader = null;
	if(total == 0) ApplicationMain.start();
};
ApplicationMain.start = function() {
	try {
		Main.main();
	} catch( e ) {
		haxe_CallStack.lastException = e;
		if (e instanceof js__$Boot_HaxeError) e = e.val;
		openfl_Lib.current.stage.__handleError(e);
	}
	openfl_Lib.current.stage.dispatchEvent(new openfl_events_Event("resize",false,false));
	if(openfl_Lib.current.stage.window.__fullscreen) openfl_Lib.current.stage.dispatchEvent(new openfl_events_FullScreenEvent("fullScreen",false,false,true,true));
};
var openfl_events_IEventDispatcher = function() { };
$hxClasses["openfl.events.IEventDispatcher"] = openfl_events_IEventDispatcher;
openfl_events_IEventDispatcher.__name__ = ["openfl","events","IEventDispatcher"];
openfl_events_IEventDispatcher.prototype = {
	addEventListener: null
	,dispatchEvent: null
	,hasEventListener: null
	,removeEventListener: null
	,willTrigger: null
	,__class__: openfl_events_IEventDispatcher
};
var openfl_events_EventDispatcher = function(target) {
	if(target != null) this.__targetDispatcher = target;
};
$hxClasses["openfl.events.EventDispatcher"] = openfl_events_EventDispatcher;
openfl_events_EventDispatcher.__name__ = ["openfl","events","EventDispatcher"];
openfl_events_EventDispatcher.__interfaces__ = [openfl_events_IEventDispatcher];
openfl_events_EventDispatcher.__sortByPriority = function(l1,l2) {
	if(l1.priority == l2.priority) return 0; else if(l1.priority > l2.priority) return -1; else return 1;
};
openfl_events_EventDispatcher.prototype = {
	__eventMap: null
	,__iterators: null
	,__targetDispatcher: null
	,addEventListener: function(type,listener,useCapture,priority,useWeakReference) {
		if(useWeakReference == null) useWeakReference = false;
		if(priority == null) priority = 0;
		if(useCapture == null) useCapture = false;
		if(listener == null) return;
		if(this.__eventMap == null) {
			this.__eventMap = new haxe_ds_StringMap();
			this.__iterators = new haxe_ds_StringMap();
		}
		if(!this.__eventMap.exists(type)) {
			var list = [];
			list.push(new openfl_events__$EventDispatcher_Listener(listener,useCapture,priority));
			var iterator = new openfl_events__$EventDispatcher_DispatchIterator(list);
			this.__eventMap.set(type,list);
			this.__iterators.set(type,[iterator]);
		} else {
			var list1 = this.__eventMap.get(type);
			var _g1 = 0;
			var _g = list1.length;
			while(_g1 < _g) {
				var i = _g1++;
				if(list1[i].match(listener,useCapture)) return;
			}
			var iterators = this.__iterators.get(type);
			var _g2 = 0;
			while(_g2 < iterators.length) {
				var iterator1 = iterators[_g2];
				++_g2;
				if(iterator1.active) iterator1.copy();
			}
			list1.push(new openfl_events__$EventDispatcher_Listener(listener,useCapture,priority));
			list1.sort(openfl_events_EventDispatcher.__sortByPriority);
		}
	}
	,dispatchEvent: function(event) {
		if(this.__targetDispatcher != null) event.target = this.__targetDispatcher; else event.target = this;
		return this.__dispatchEvent(event);
	}
	,hasEventListener: function(type) {
		if(this.__eventMap == null) return false;
		return this.__eventMap.exists(type);
	}
	,removeEventListener: function(type,listener,useCapture) {
		if(useCapture == null) useCapture = false;
		if(this.__eventMap == null || listener == null) return;
		var list = this.__eventMap.get(type);
		if(list == null) return;
		var iterators = this.__iterators.get(type);
		var _g1 = 0;
		var _g = list.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(list[i].match(listener,useCapture)) {
				var _g2 = 0;
				while(_g2 < iterators.length) {
					var iterator = iterators[_g2];
					++_g2;
					iterator.remove(list[i],i);
				}
				list.splice(i,1);
				break;
			}
		}
		if(list.length == 0) {
			this.__eventMap.remove(type);
			this.__iterators.remove(type);
		}
		if(!this.__eventMap.iterator().hasNext()) {
			this.__eventMap = null;
			this.__iterators = null;
		}
	}
	,toString: function() {
		var full = Type.getClassName(js_Boot.getClass(this));
		var $short = full.split(".").pop();
		return "[object " + $short + "]";
	}
	,willTrigger: function(type) {
		return this.hasEventListener(type);
	}
	,__dispatchEvent: function(event) {
		if(this.__eventMap == null || event == null) return true;
		var type = event.type;
		var list = this.__eventMap.get(type);
		if(list == null) return true;
		if(event.target == null) {
			if(this.__targetDispatcher != null) event.target = this.__targetDispatcher; else event.target = this;
		}
		event.currentTarget = this;
		var capture = event.eventPhase == 1;
		var index = 0;
		var iterators = this.__iterators.get(type);
		var iterator = iterators[0];
		if(iterator.active) {
			iterator = new openfl_events__$EventDispatcher_DispatchIterator(list);
			iterators.push(iterator);
		}
		iterator.reset(list);
		while( iterator.hasNext() ) {
			var listener = iterator.next();
			if(listener == null) continue;
			if(listener.useCapture == capture) {
				listener.callback(event);
				if(event.__isCanceledNow) break;
			}
		}
		if(iterator != iterators[0]) HxOverrides.remove(iterators,iterator);
		return true;
	}
	,__class__: openfl_events_EventDispatcher
};
var openfl_display_IBitmapDrawable = function() { };
$hxClasses["openfl.display.IBitmapDrawable"] = openfl_display_IBitmapDrawable;
openfl_display_IBitmapDrawable.__name__ = ["openfl","display","IBitmapDrawable"];
openfl_display_IBitmapDrawable.prototype = {
	__blendMode: null
	,__transform: null
	,__worldTransform: null
	,__worldColorTransform: null
	,__renderCairo: null
	,__renderCairoMask: null
	,__renderCanvas: null
	,__renderCanvasMask: null
	,__renderGL: null
	,__updateChildren: null
	,__updateTransforms: null
	,__updateMask: null
	,__class__: openfl_display_IBitmapDrawable
};
var openfl_display_DisplayObject = function() {
	openfl_events_EventDispatcher.call(this);
	this.__alpha = 1;
	this.__blendMode = 10;
	this.__cacheAsBitmap = false;
	this.__transform = new openfl_geom_Matrix();
	this.__visible = true;
	this.__rotation = 0;
	this.__rotationSine = 0;
	this.__rotationCosine = 1;
	this.__worldAlpha = 1;
	this.__worldTransform = new openfl_geom_Matrix();
	this.__worldColorTransform = new openfl_geom_ColorTransform();
	this.__renderTransform = new openfl_geom_Matrix();
	this.set_name("instance" + ++openfl_display_DisplayObject.__instanceCount);
};
$hxClasses["openfl.display.DisplayObject"] = openfl_display_DisplayObject;
openfl_display_DisplayObject.__name__ = ["openfl","display","DisplayObject"];
openfl_display_DisplayObject.__interfaces__ = [openfl_display_IBitmapDrawable];
openfl_display_DisplayObject.__super__ = openfl_events_EventDispatcher;
openfl_display_DisplayObject.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	opaqueBackground: null
	,parent: null
	,scale9Grid: null
	,stage: null
	,__alpha: null
	,__blendMode: null
	,__cacheAsBitmap: null
	,__cacheAsBitmapMatrix: null
	,__cairo: null
	,__children: null
	,__filters: null
	,__forceCacheAsBitmap: null
	,__graphics: null
	,__interactive: null
	,__isMask: null
	,__loaderInfo: null
	,__mask: null
	,__name: null
	,__objectTransform: null
	,__renderable: null
	,__renderDirty: null
	,__renderParent: null
	,__renderTransform: null
	,__renderTransformCache: null
	,__renderTransformChanged: null
	,__rotation: null
	,__rotationCosine: null
	,__rotationSine: null
	,__scrollRect: null
	,__transform: null
	,__transformDirty: null
	,__visible: null
	,__worldAlpha: null
	,__worldAlphaChanged: null
	,__worldClip: null
	,__worldClipChanged: null
	,__worldColorTransform: null
	,__worldTransform: null
	,__worldVisible: null
	,__worldVisibleChanged: null
	,__worldZ: null
	,__canvas: null
	,__context: null
	,__style: null
	,addEventListener: function(type,listener,useCapture,priority,useWeakReference) {
		if(useWeakReference == null) useWeakReference = false;
		if(priority == null) priority = 0;
		if(useCapture == null) useCapture = false;
		switch(type) {
		case "activate":case "deactivate":case "enterFrame":case "exitFrame":case "frameConstructed":case "render":
			if(!openfl_display_DisplayObject.__broadcastEvents.exists(type)) openfl_display_DisplayObject.__broadcastEvents.set(type,[]);
			var dispatchers = openfl_display_DisplayObject.__broadcastEvents.get(type);
			if(HxOverrides.indexOf(dispatchers,this,0) == -1) dispatchers.push(this);
			break;
		default:
		}
		openfl_events_EventDispatcher.prototype.addEventListener.call(this,type,listener,useCapture,priority,useWeakReference);
	}
	,dispatchEvent: function(event) {
		if(js_Boot.__instanceof(event,openfl_events_MouseEvent)) {
			var mouseEvent = event;
			mouseEvent.stageX = this.__getRenderTransform().__transformX(mouseEvent.localX,mouseEvent.localY);
			mouseEvent.stageY = this.__getRenderTransform().__transformY(mouseEvent.localX,mouseEvent.localY);
		} else if(js_Boot.__instanceof(event,openfl_events_TouchEvent)) {
			var touchEvent = event;
			touchEvent.stageX = this.__getRenderTransform().__transformX(touchEvent.localX,touchEvent.localY);
			touchEvent.stageY = this.__getRenderTransform().__transformY(touchEvent.localX,touchEvent.localY);
		}
		return openfl_events_EventDispatcher.prototype.dispatchEvent.call(this,event);
	}
	,getBounds: function(targetCoordinateSpace) {
		var matrix;
		if(targetCoordinateSpace != null) {
			matrix = this.__getWorldTransform().clone();
			matrix.concat(targetCoordinateSpace.__getWorldTransform().clone().invert());
		} else {
			matrix = openfl_geom_Matrix.__temp;
			matrix.identity();
		}
		var bounds = new openfl_geom_Rectangle();
		this.__getBounds(bounds,matrix);
		return bounds;
	}
	,getRect: function(targetCoordinateSpace) {
		return this.getBounds(targetCoordinateSpace);
	}
	,globalToLocal: function(pos) {
		pos = pos.clone();
		this.__getRenderTransform().__transformInversePoint(pos);
		return pos;
	}
	,hitTestObject: function(obj) {
		if(obj != null && obj.parent != null && this.parent != null) {
			var currentBounds = this.getBounds(this);
			var targetBounds = obj.getBounds(this);
			return currentBounds.intersects(targetBounds);
		}
		return false;
	}
	,hitTestPoint: function(x,y,shapeFlag) {
		if(shapeFlag == null) shapeFlag = false;
		if(this.stage != null) return this.__hitTest(x,y,shapeFlag,null,true,this); else return false;
	}
	,localToGlobal: function(point) {
		return this.__getRenderTransform().transformPoint(point);
	}
	,removeEventListener: function(type,listener,useCapture) {
		if(useCapture == null) useCapture = false;
		openfl_events_EventDispatcher.prototype.removeEventListener.call(this,type,listener,useCapture);
		switch(type) {
		case "activate":case "deactivate":case "enterFrame":case "exitFrame":case "frameConstructed":case "render":
			if(!this.hasEventListener(type)) {
				if(openfl_display_DisplayObject.__broadcastEvents.exists(type)) {
					var _this = openfl_display_DisplayObject.__broadcastEvents.get(type);
					HxOverrides.remove(_this,this);
				}
			}
			break;
		default:
		}
	}
	,__cleanup: function() {
		this.__cairo = null;
		this.__canvas = null;
		this.__context = null;
		if(this.__graphics != null) this.__graphics.__cleanup();
	}
	,__dispatch: function(event) {
		if(this.__eventMap != null && this.hasEventListener(event.type)) {
			var result = openfl_events_EventDispatcher.prototype.__dispatchEvent.call(this,event);
			if(event.__isCanceled) return true;
			return result;
		}
		return true;
	}
	,__dispatchChildren: function(event) {
		return this.__dispatchEvent(event);
	}
	,__dispatchEvent: function(event) {
		var result = openfl_events_EventDispatcher.prototype.__dispatchEvent.call(this,event);
		if(event.__isCanceled) return true;
		if(event.bubbles && this.parent != null && this.parent != this) {
			event.eventPhase = 3;
			if(event.target == null) event.target = this;
			this.parent.__dispatchEvent(event);
		}
		return result;
	}
	,__enterFrame: function(deltaTime) {
	}
	,__getBounds: function(rect,matrix) {
		if(this.__graphics != null) this.__graphics.__getBounds(rect,matrix);
	}
	,__getCursor: function() {
		return null;
	}
	,__getInteractive: function(stack) {
		return false;
	}
	,__getLocalBounds: function(rect) {
		this.__getBounds(rect,this.__transform);
	}
	,__getRenderBounds: function(rect,matrix) {
		if(this.__scrollRect == null) this.__getBounds(rect,matrix); else {
			var r = openfl_geom_Rectangle.__temp;
			r.copyFrom(this.__scrollRect);
			r.__transform(r,matrix);
			rect.__expand(matrix.tx,matrix.ty,r.width,r.height);
		}
	}
	,__getRenderTransform: function() {
		this.__getWorldTransform();
		return this.__renderTransform;
	}
	,__getWorldTransform: function() {
		if(this.__transformDirty || openfl_display_DisplayObject.__worldTransformDirty > 0) {
			var list = [];
			var current = this;
			var transformDirty = this.__transformDirty;
			if(this.parent == null) {
				if(transformDirty) this.__update(true,false);
			} else while(current != this.stage) {
				list.push(current);
				current = current.parent;
				if(current != this.stage && current.__transformDirty) transformDirty = true;
			}
			if(transformDirty) {
				var i = list.length;
				while(--i >= 0) list[i].__update(true,false);
			}
		}
		return this.__worldTransform;
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(this.__graphics != null) {
			if(!hitObject.get_visible() || this.__isMask) return false;
			if(this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) return false;
			if(this.__graphics.__hitTest(x,y,shapeFlag,this.__getRenderTransform())) {
				if(stack != null && !interactiveOnly) stack.push(hitObject);
				return true;
			}
		}
		return false;
	}
	,__hitTestMask: function(x,y) {
		if(this.__graphics != null) {
			if(this.__graphics.__hitTest(x,y,true,this.__getRenderTransform())) return true;
		}
		return false;
	}
	,__readGraphicsData: function(graphicsData,recurse) {
		if(this.__graphics != null) this.__graphics.__readGraphicsData(graphicsData);
	}
	,__renderCairo: function(renderSession) {
		openfl__$internal_renderer_cairo_CairoDisplayObject.render(this,renderSession);
	}
	,__renderCairoMask: function(renderSession) {
		if(this.__graphics != null) openfl__$internal_renderer_cairo_CairoGraphics.renderMask(this.__graphics,renderSession);
	}
	,__renderCanvas: function(renderSession) {
		openfl__$internal_renderer_canvas_CanvasDisplayObject.render(this,renderSession);
	}
	,__renderCanvasMask: function(renderSession) {
		if(this.__graphics != null) openfl__$internal_renderer_canvas_CanvasGraphics.renderMask(this.__graphics,renderSession);
	}
	,__renderDOM: function(renderSession) {
		if(this.opaqueBackground != null && this.get_width() > 0 && this.get_height() > 0) {
		}
		openfl__$internal_renderer_dom_DOMShape.render(this,renderSession);
	}
	,__renderGL: function(renderSession) {
		openfl__$internal_renderer_opengl_GLDisplayObject.render(this,renderSession);
	}
	,__setRenderDirty: function() {
		if(!this.__renderDirty) {
			this.__renderDirty = true;
			openfl_display_DisplayObject.__worldRenderDirty++;
		}
	}
	,__setStageReference: function(stage) {
		this.stage = stage;
	}
	,__setTransformDirty: function() {
		if(!this.__transformDirty) {
			this.__transformDirty = true;
			openfl_display_DisplayObject.__worldTransformDirty++;
		}
	}
	,__stopAllMovieClips: function() {
	}
	,__update: function(transformOnly,updateChildren,maskGraphics) {
		this.__renderable = this.get_visible() && this.get_scaleX() != 0 && this.get_scaleY() != 0 && !this.__isMask && (this.parent == null || !this.parent.__isMask);
		this.__updateTransforms();
		if(updateChildren && this.__transformDirty) {
			this.__transformDirty = false;
			openfl_display_DisplayObject.__worldTransformDirty--;
		}
		if(maskGraphics != null) this.__updateMask(maskGraphics);
		if(!transformOnly) {
			if(!this.__worldColorTransform.__equals(this.get_transform().get_colorTransform())) this.__worldColorTransform = this.get_transform().get_colorTransform().__clone();
			var __parent;
			if(this.parent != null) __parent = this.parent; else __parent = this.__renderParent;
			if(__parent != null) {
				this.__worldAlpha = this.get_alpha() * __parent.__worldAlpha;
				this.__worldColorTransform.__combine(__parent.__worldColorTransform);
				if(this.get_blendMode() == null || this.get_blendMode() == 10) this.__blendMode = __parent.__blendMode;
			} else this.__worldAlpha = this.get_alpha();
			if(updateChildren && this.__renderDirty) this.__renderDirty = false;
		}
	}
	,__updateChildren: function(transformOnly) {
		this.__renderable = this.get_visible() && this.get_scaleX() != 0 && this.get_scaleY() != 0 && !this.__isMask && (this.parent == null || !this.parent.__isMask);
		this.__worldAlpha = this.get_alpha();
		if(this.__transformDirty) {
			this.__transformDirty = false;
			openfl_display_DisplayObject.__worldTransformDirty--;
		}
	}
	,__updateMask: function(maskGraphics) {
		if(this.__graphics != null) {
			maskGraphics.__commands.overrideMatrix(this.__worldTransform);
			maskGraphics.__commands.append(this.__graphics.__commands);
			maskGraphics.set___dirty(true);
			maskGraphics.__visible = true;
			if(maskGraphics.__bounds == null) maskGraphics.__bounds = new openfl_geom_Rectangle();
			this.__graphics.__getBounds(maskGraphics.__bounds,openfl_geom_Matrix.__identity);
		}
	}
	,__updateTransforms: function(overrideTransform) {
		var overrided = overrideTransform != null;
		var local;
		if(overrided) local = overrideTransform; else local = this.__transform;
		if(this.__worldTransform == null) this.__worldTransform = new openfl_geom_Matrix();
		if(this.__renderTransform == null) this.__renderTransform = new openfl_geom_Matrix();
		if(!overrided && this.parent != null) {
			var parentTransform = this.parent.__worldTransform;
			this.__worldTransform.a = local.a * parentTransform.a + local.b * parentTransform.c;
			this.__worldTransform.b = local.a * parentTransform.b + local.b * parentTransform.d;
			this.__worldTransform.c = local.c * parentTransform.a + local.d * parentTransform.c;
			this.__worldTransform.d = local.c * parentTransform.b + local.d * parentTransform.d;
			this.__worldTransform.tx = local.tx * parentTransform.a + local.ty * parentTransform.c + parentTransform.tx;
			this.__worldTransform.ty = local.tx * parentTransform.b + local.ty * parentTransform.d + parentTransform.ty;
			parentTransform = this.parent.__renderTransform;
			this.__renderTransform.a = local.a * parentTransform.a + local.b * parentTransform.c;
			this.__renderTransform.b = local.a * parentTransform.b + local.b * parentTransform.d;
			this.__renderTransform.c = local.c * parentTransform.a + local.d * parentTransform.c;
			this.__renderTransform.d = local.c * parentTransform.b + local.d * parentTransform.d;
			this.__renderTransform.tx = local.tx * parentTransform.a + local.ty * parentTransform.c + parentTransform.tx;
			this.__renderTransform.ty = local.tx * parentTransform.b + local.ty * parentTransform.d + parentTransform.ty;
		} else {
			this.__worldTransform.copyFrom(local);
			this.__renderTransform.copyFrom(local);
		}
		if(this.__scrollRect != null) this.__renderTransform.__translateTransformed(-this.__scrollRect.x,-this.__scrollRect.y);
	}
	,get_alpha: function() {
		return this.__alpha;
	}
	,set_alpha: function(value) {
		if(value > 1.0) value = 1.0;
		if(value != this.__alpha) {
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				openfl_display_DisplayObject.__worldRenderDirty++;
			}
		}
		return this.__alpha = value;
	}
	,get_blendMode: function() {
		return this.__blendMode;
	}
	,set_blendMode: function(value) {
		if(value == null) value = 10;
		return this.__blendMode = value;
	}
	,get_cacheAsBitmap: function() {
		if(this.__filters == null) return this.__cacheAsBitmap; else return true;
	}
	,set_cacheAsBitmap: function(value) {
		if(!this.__renderDirty) {
			this.__renderDirty = true;
			openfl_display_DisplayObject.__worldRenderDirty++;
		}
		return this.__cacheAsBitmap = value;
	}
	,get_cacheAsBitmapMatrix: function() {
		return this.__cacheAsBitmapMatrix;
	}
	,set_cacheAsBitmapMatrix: function(value) {
		if(!this.__renderDirty) {
			this.__renderDirty = true;
			openfl_display_DisplayObject.__worldRenderDirty++;
		}
		return this.__cacheAsBitmapMatrix = value.clone();
	}
	,get_filters: function() {
		if(this.__filters == null) return []; else return this.__filters.slice();
	}
	,set_filters: function(value) {
		if(value != null && value.length > 0) this.__filters = value; else this.__filters = null;
		if(!this.__renderDirty) {
			this.__renderDirty = true;
			openfl_display_DisplayObject.__worldRenderDirty++;
		}
		return value;
	}
	,get_height: function() {
		var bounds = new openfl_geom_Rectangle();
		this.__getBounds(bounds,this.__transform);
		return bounds.height;
	}
	,set_height: function(value) {
		var bounds = new openfl_geom_Rectangle();
		var matrix = openfl_geom_Matrix.__temp;
		matrix.identity();
		this.__getBounds(bounds,matrix);
		if(value != bounds.height) this.set_scaleY(value / bounds.height); else this.set_scaleY(1);
		return value;
	}
	,get_loaderInfo: function() {
		if(this.stage != null) return openfl_Lib.current.__loaderInfo;
		return null;
	}
	,get_mask: function() {
		return this.__mask;
	}
	,set_mask: function(value) {
		if(value != this.__mask) {
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				openfl_display_DisplayObject.__worldRenderDirty++;
			}
		}
		if(this.__mask != null) {
			this.__mask.__isMask = false;
			this.__mask.__setTransformDirty();
			this.__mask.__setRenderDirty();
		}
		if(value != null) value.__isMask = true;
		return this.__mask = value;
	}
	,get_mouseX: function() {
		var mouseX;
		if(this.stage != null) mouseX = this.stage.__mouseX; else mouseX = openfl_Lib.current.stage.__mouseX;
		var mouseY;
		if(this.stage != null) mouseY = this.stage.__mouseY; else mouseY = openfl_Lib.current.stage.__mouseY;
		return this.__getRenderTransform().__transformInverseX(mouseX,mouseY);
	}
	,get_mouseY: function() {
		var mouseX;
		if(this.stage != null) mouseX = this.stage.__mouseX; else mouseX = openfl_Lib.current.stage.__mouseX;
		var mouseY;
		if(this.stage != null) mouseY = this.stage.__mouseY; else mouseY = openfl_Lib.current.stage.__mouseY;
		return this.__getRenderTransform().__transformInverseY(mouseX,mouseY);
	}
	,get_name: function() {
		return this.__name;
	}
	,set_name: function(value) {
		return this.__name = value;
	}
	,get_root: function() {
		if(this.stage != null) return openfl_Lib.current;
		return null;
	}
	,get_rotation: function() {
		return this.__rotation;
	}
	,set_rotation: function(value) {
		if(value != this.__rotation) {
			this.__rotation = value;
			var radians = this.__rotation * (Math.PI / 180);
			this.__rotationSine = Math.sin(radians);
			this.__rotationCosine = Math.cos(radians);
			var __scaleX = this.get_scaleX();
			var __scaleY = this.get_scaleY();
			this.__transform.a = this.__rotationCosine * __scaleX;
			this.__transform.b = this.__rotationSine * __scaleX;
			this.__transform.c = -this.__rotationSine * __scaleY;
			this.__transform.d = this.__rotationCosine * __scaleY;
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
		}
		return value;
	}
	,get_scaleX: function() {
		if(this.__transform.b == 0) return this.__transform.a; else return Math.sqrt(this.__transform.a * this.__transform.a + this.__transform.b * this.__transform.b);
	}
	,set_scaleX: function(value) {
		if(this.__transform.b == 0) {
			if(value != this.__transform.a) {
				if(!this.__transformDirty) {
					this.__transformDirty = true;
					openfl_display_DisplayObject.__worldTransformDirty++;
				}
			}
			this.__transform.a = value;
		} else {
			var a = this.__rotationCosine * value;
			var b = this.__rotationSine * value;
			if(this.__transform.a != a || this.__transform.b != b) {
				if(!this.__transformDirty) {
					this.__transformDirty = true;
					openfl_display_DisplayObject.__worldTransformDirty++;
				}
			}
			this.__transform.a = a;
			this.__transform.b = b;
		}
		return value;
	}
	,get_scaleY: function() {
		if(this.__transform.c == 0) return this.__transform.d; else return Math.sqrt(this.__transform.c * this.__transform.c + this.__transform.d * this.__transform.d);
	}
	,set_scaleY: function(value) {
		if(this.__transform.c == 0) {
			if(value != this.__transform.d) {
				if(!this.__transformDirty) {
					this.__transformDirty = true;
					openfl_display_DisplayObject.__worldTransformDirty++;
				}
			}
			this.__transform.d = value;
		} else {
			var c = -this.__rotationSine * value;
			var d = this.__rotationCosine * value;
			if(this.__transform.d != d || this.__transform.c != c) {
				if(!this.__transformDirty) {
					this.__transformDirty = true;
					openfl_display_DisplayObject.__worldTransformDirty++;
				}
			}
			this.__transform.c = c;
			this.__transform.d = d;
		}
		return value;
	}
	,get_scrollRect: function() {
		if(this.__scrollRect == null) return null;
		return this.__scrollRect.clone();
	}
	,set_scrollRect: function(value) {
		if(value != this.__scrollRect) {
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
		}
		return this.__scrollRect = value;
	}
	,get_transform: function() {
		if(this.__objectTransform == null) this.__objectTransform = new openfl_geom_Transform(this);
		return this.__objectTransform;
	}
	,set_transform: function(value) {
		if(value == null) throw new js__$Boot_HaxeError(new openfl_errors_TypeError("Parameter transform must be non-null."));
		if(this.__objectTransform == null) this.__objectTransform = new openfl_geom_Transform(this);
		if(!this.__transformDirty) {
			this.__transformDirty = true;
			openfl_display_DisplayObject.__worldTransformDirty++;
		}
		this.__objectTransform.set_matrix(value.get_matrix());
		this.__objectTransform.set_colorTransform(value.get_colorTransform().__clone());
		return this.__objectTransform;
	}
	,get_visible: function() {
		return this.__visible;
	}
	,set_visible: function(value) {
		if(value != this.__visible) {
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				openfl_display_DisplayObject.__worldRenderDirty++;
			}
		}
		return this.__visible = value;
	}
	,get_width: function() {
		var bounds = new openfl_geom_Rectangle();
		this.__getBounds(bounds,this.__transform);
		return bounds.width;
	}
	,set_width: function(value) {
		var bounds = new openfl_geom_Rectangle();
		var matrix = openfl_geom_Matrix.__temp;
		matrix.identity();
		this.__getBounds(bounds,matrix);
		if(value != bounds.width) this.set_scaleX(value / bounds.width); else this.set_scaleX(1);
		return value;
	}
	,get_x: function() {
		return this.__transform.tx;
	}
	,set_x: function(value) {
		if(value != this.__transform.tx) {
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
		}
		return this.__transform.tx = value;
	}
	,get_y: function() {
		return this.__transform.ty;
	}
	,set_y: function(value) {
		if(value != this.__transform.ty) {
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
		}
		return this.__transform.ty = value;
	}
	,__class__: openfl_display_DisplayObject
	,__properties__: {set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x",set_width:"set_width",get_width:"get_width",set_visible:"set_visible",get_visible:"get_visible",set_transform:"set_transform",get_transform:"get_transform",set_scrollRect:"set_scrollRect",get_scrollRect:"get_scrollRect",set_scaleY:"set_scaleY",get_scaleY:"get_scaleY",set_scaleX:"set_scaleX",get_scaleX:"get_scaleX",set_rotation:"set_rotation",get_rotation:"get_rotation",get_root:"get_root",set_name:"set_name",get_name:"get_name",get_mouseY:"get_mouseY",get_mouseX:"get_mouseX",set_mask:"set_mask",get_mask:"get_mask",get_loaderInfo:"get_loaderInfo",set_height:"set_height",get_height:"get_height",set_filters:"set_filters",get_filters:"get_filters",set_cacheAsBitmapMatrix:"set_cacheAsBitmapMatrix",get_cacheAsBitmapMatrix:"get_cacheAsBitmapMatrix",set_cacheAsBitmap:"set_cacheAsBitmap",get_cacheAsBitmap:"get_cacheAsBitmap",set_blendMode:"set_blendMode",get_blendMode:"get_blendMode",set_alpha:"set_alpha",get_alpha:"get_alpha"}
});
var openfl_display_InteractiveObject = function() {
	openfl_display_DisplayObject.call(this);
	this.doubleClickEnabled = false;
	this.mouseEnabled = true;
	this.needsSoftKeyboard = false;
	this.__tabEnabled = false;
	this.tabIndex = -1;
};
$hxClasses["openfl.display.InteractiveObject"] = openfl_display_InteractiveObject;
openfl_display_InteractiveObject.__name__ = ["openfl","display","InteractiveObject"];
openfl_display_InteractiveObject.__super__ = openfl_display_DisplayObject;
openfl_display_InteractiveObject.prototype = $extend(openfl_display_DisplayObject.prototype,{
	doubleClickEnabled: null
	,focusRect: null
	,mouseEnabled: null
	,needsSoftKeyboard: null
	,softKeyboardInputAreaOfInterest: null
	,tabIndex: null
	,__tabEnabled: null
	,requestSoftKeyboard: function() {
		openfl_Lib.notImplemented({ fileName : "InteractiveObject.hx", lineNumber : 42, className : "openfl.display.InteractiveObject", methodName : "requestSoftKeyboard"});
		return false;
	}
	,__getInteractive: function(stack) {
		if(stack != null) {
			stack.push(this);
			if(this.parent != null) this.parent.__getInteractive(stack);
		}
		return true;
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(!hitObject.get_visible() || this.__isMask || interactiveOnly && !this.mouseEnabled) return false;
		return openfl_display_DisplayObject.prototype.__hitTest.call(this,x,y,shapeFlag,stack,interactiveOnly,hitObject);
	}
	,get_tabEnabled: function() {
		return this.__tabEnabled;
	}
	,set_tabEnabled: function(value) {
		return this.__tabEnabled = value;
	}
	,__class__: openfl_display_InteractiveObject
	,__properties__: $extend(openfl_display_DisplayObject.prototype.__properties__,{set_tabEnabled:"set_tabEnabled",get_tabEnabled:"get_tabEnabled"})
});
var openfl_display_DisplayObjectContainer = function() {
	openfl_display_InteractiveObject.call(this);
	this.mouseChildren = true;
	this.__children = [];
	this.__removedChildren = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
};
$hxClasses["openfl.display.DisplayObjectContainer"] = openfl_display_DisplayObjectContainer;
openfl_display_DisplayObjectContainer.__name__ = ["openfl","display","DisplayObjectContainer"];
openfl_display_DisplayObjectContainer.__super__ = openfl_display_InteractiveObject;
openfl_display_DisplayObjectContainer.prototype = $extend(openfl_display_InteractiveObject.prototype,{
	mouseChildren: null
	,tabChildren: null
	,__removedChildren: null
	,addChild: function(child) {
		return this.addChildAt(child,this.get_numChildren());
	}
	,addChildAt: function(child,index) {
		if(index > this.__children.length || index < 0) throw new js__$Boot_HaxeError("Invalid index position " + index);
		if(child.parent == this) {
			if(this.__children[index] != child) {
				HxOverrides.remove(this.__children,child);
				this.__children.splice(index,0,child);
			}
		} else {
			if(child.parent != null) child.parent.removeChild(child);
			this.__children.splice(index,0,child);
			child.parent = this;
			var addedToStage = this.stage != null && child.stage == null;
			if(addedToStage) this.__setStageReference(this.stage);
			if(!child.__transformDirty) {
				child.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
			if(!child.__renderDirty) {
				child.__renderDirty = true;
				openfl_display_DisplayObject.__worldRenderDirty++;
			}
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				openfl_display_DisplayObject.__worldRenderDirty++;
			}
			var event = new openfl_events_Event("added",true);
			event.target = child;
			child.__dispatchEvent(event);
			if(addedToStage) child.__dispatchChildren(new openfl_events_Event("addedToStage",false,false));
		}
		return child;
	}
	,areInaccessibleObjectsUnderPoint: function(point) {
		return false;
	}
	,contains: function(child) {
		while(child != this && child != null) child = child.parent;
		return child == this;
	}
	,getChildAt: function(index) {
		if(index >= 0 && index < this.__children.length) return this.__children[index];
		return null;
	}
	,getChildByName: function(name) {
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_name() == name) return child;
		}
		return null;
	}
	,getChildIndex: function(child) {
		var _g1 = 0;
		var _g = this.__children.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.__children[i] == child) return i;
		}
		return -1;
	}
	,getObjectsUnderPoint: function(point) {
		var stack = [];
		this.__hitTest(point.x,point.y,false,stack,false,this);
		stack.reverse();
		return stack;
	}
	,removeChild: function(child) {
		if(child != null && child.parent == this) {
			if(!child.__transformDirty) {
				child.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
			if(!child.__renderDirty) {
				child.__renderDirty = true;
				openfl_display_DisplayObject.__worldRenderDirty++;
			}
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				openfl_display_DisplayObject.__worldRenderDirty++;
			}
			child.__dispatchEvent(new openfl_events_Event("removed",true));
			if(this.stage != null) {
				if(child.stage != null && this.stage.get_focus() == child) this.stage.set_focus(null);
				child.__dispatchChildren(new openfl_events_Event("removedFromStage",false,false));
				child.__setStageReference(null);
			}
			child.parent = null;
			HxOverrides.remove(this.__children,child);
			this.__removedChildren.push(child);
			if(!child.__transformDirty) {
				child.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
		}
		return child;
	}
	,removeChildAt: function(index) {
		if(index >= 0 && index < this.__children.length) return this.removeChild(this.__children[index]);
		return null;
	}
	,removeChildren: function(beginIndex,endIndex) {
		if(endIndex == null) endIndex = 2147483647;
		if(beginIndex == null) beginIndex = 0;
		if(endIndex == 2147483647) {
			endIndex = this.__children.length - 1;
			if(endIndex < 0) return;
		}
		if(beginIndex > this.__children.length - 1) return; else if(endIndex < beginIndex || beginIndex < 0 || endIndex > this.__children.length) throw new js__$Boot_HaxeError(new openfl_errors_RangeError("The supplied index is out of bounds."));
		var numRemovals = endIndex - beginIndex;
		while(numRemovals >= 0) {
			this.removeChildAt(beginIndex);
			numRemovals--;
		}
	}
	,resolve: function(fieldName) {
		if(this.__children == null) return null;
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_name() == fieldName) return child;
		}
		return null;
	}
	,setChildIndex: function(child,index) {
		if(index >= 0 && index <= this.__children.length && child.parent == this) {
			HxOverrides.remove(this.__children,child);
			this.__children.splice(index,0,child);
		}
	}
	,stopAllMovieClips: function() {
		this.__stopAllMovieClips();
	}
	,swapChildren: function(child1,child2) {
		if(child1.parent == this && child2.parent == this) {
			var index1 = HxOverrides.indexOf(this.__children,child1,0);
			var index2 = HxOverrides.indexOf(this.__children,child2,0);
			this.__children[index1] = child2;
			this.__children[index2] = child1;
		}
	}
	,swapChildrenAt: function(index1,index2) {
		var swap = this.__children[index1];
		this.__children[index1] = this.__children[index2];
		this.__children[index2] = swap;
		swap = null;
	}
	,__dispatchChildren: function(event) {
		var success = this.__dispatchEvent(event);
		if(success && this.__children != null) {
			var _g = 0;
			var _g1 = this.__children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				event.target = child;
				if(!child.__dispatchChildren(event)) return false;
			}
		}
		return success;
	}
	,__enterFrame: function(deltaTime) {
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__enterFrame(deltaTime);
		}
	}
	,__getBounds: function(rect,matrix) {
		openfl_display_InteractiveObject.prototype.__getBounds.call(this,rect,matrix);
		if(this.__children.length == 0) return;
		if(matrix != null) {
			this.__updateTransforms(matrix);
			this.__updateChildren(true);
		}
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_scaleX() == 0 || child.get_scaleY() == 0) continue;
			child.__getBounds(rect,child.__worldTransform);
		}
		if(matrix != null) {
			this.__updateTransforms();
			this.__updateChildren(true);
		}
	}
	,__getRenderBounds: function(rect,matrix) {
		if(this.__scrollRect != null) {
			openfl_display_InteractiveObject.prototype.__getRenderBounds.call(this,rect,matrix);
			return;
		} else openfl_display_InteractiveObject.prototype.__getBounds.call(this,rect,matrix);
		if(this.__children.length == 0) return;
		if(matrix != null) {
			this.__updateTransforms(matrix);
			this.__updateChildren(true);
		}
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_scaleX() == 0 || child.get_scaleY() == 0 || child.__isMask) continue;
			child.__getRenderBounds(rect,child.__worldTransform);
		}
		if(matrix != null) {
			this.__updateTransforms();
			this.__updateChildren(true);
		}
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(!hitObject.get_visible() || this.__isMask || interactiveOnly && !this.mouseEnabled && !this.mouseChildren) return false;
		if(this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) return false;
		if(this.__scrollRect != null) {
			var point = openfl_geom_Point.__temp;
			point.setTo(x,y);
			this.__getRenderTransform().__transformInversePoint(point);
			if(!this.__scrollRect.containsPoint(point)) return false;
		}
		var i = this.__children.length;
		if(interactiveOnly) {
			if(stack == null || !this.mouseChildren) {
				while(--i >= 0) if(this.__children[i].__hitTest(x,y,shapeFlag,null,true,this.__children[i])) {
					if(stack != null) stack.push(hitObject);
					return true;
				}
			} else if(stack != null) {
				var length = stack.length;
				var interactive = false;
				var hitTest = false;
				while(--i >= 0) {
					interactive = this.__children[i].__getInteractive(null);
					if(interactive || this.mouseEnabled && !hitTest) {
						if(this.__children[i].__hitTest(x,y,shapeFlag,stack,true,this.__children[i])) {
							hitTest = true;
							if(interactive) break;
						}
					}
				}
				if(hitTest) {
					stack.splice(length,0,hitObject);
					return true;
				}
			}
		} else while(--i >= 0) this.__children[i].__hitTest(x,y,shapeFlag,stack,false,this.__children[i]);
		return false;
	}
	,__hitTestMask: function(x,y) {
		var i = this.__children.length;
		while(--i >= 0) if(this.__children[i].__hitTestMask(x,y)) return true;
		return false;
	}
	,__readGraphicsData: function(graphicsData,recurse) {
		openfl_display_InteractiveObject.prototype.__readGraphicsData.call(this,graphicsData,recurse);
		if(recurse) {
			var _g = 0;
			var _g1 = this.__children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.__readGraphicsData(graphicsData,recurse);
			}
		}
	}
	,__renderCairo: function(renderSession) {
		if(!this.__renderable || this.__worldAlpha <= 0) return;
		openfl_display_InteractiveObject.prototype.__renderCairo.call(this,renderSession);
		renderSession.maskManager.pushObject(this);
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__renderCairo(renderSession);
		}
		var _g2 = 0;
		var _g11 = this.__removedChildren;
		while(_g2 < _g11.get_length()) {
			var orphan = _g11.get(_g2);
			++_g2;
			if(orphan.stage == null) orphan.__cleanup();
		}
		this.__removedChildren.set_length(0);
		renderSession.maskManager.popObject(this);
	}
	,__renderCairoMask: function(renderSession) {
		if(this.__graphics != null) openfl__$internal_renderer_cairo_CairoGraphics.renderMask(this.__graphics,renderSession);
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__renderCairoMask(renderSession);
		}
	}
	,__renderCanvas: function(renderSession) {
		if(!this.__renderable || this.__worldAlpha <= 0) return;
		openfl_display_InteractiveObject.prototype.__renderCanvas.call(this,renderSession);
		renderSession.maskManager.pushObject(this);
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__renderCanvas(renderSession);
		}
		var _g2 = 0;
		var _g11 = this.__removedChildren;
		while(_g2 < _g11.get_length()) {
			var orphan = _g11.get(_g2);
			++_g2;
			if(orphan.stage == null) orphan.__cleanup();
		}
		this.__removedChildren.set_length(0);
		renderSession.maskManager.popObject(this);
	}
	,__renderCanvasMask: function(renderSession) {
		if(this.__graphics != null) openfl__$internal_renderer_canvas_CanvasGraphics.renderMask(this.__graphics,renderSession);
		var bounds = new openfl_geom_Rectangle();
		this.__getBounds(bounds,this.__transform);
		renderSession.context.rect(0,0,bounds.width,bounds.height);
	}
	,__renderDOM: function(renderSession) {
		openfl_display_InteractiveObject.prototype.__renderDOM.call(this,renderSession);
		renderSession.maskManager.pushObject(this);
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__renderDOM(renderSession);
		}
		var _g2 = 0;
		var _g11 = this.__removedChildren;
		while(_g2 < _g11.get_length()) {
			var orphan = _g11.get(_g2);
			++_g2;
			if(orphan.stage == null) orphan.__renderDOM(renderSession);
		}
		this.__removedChildren.set_length(0);
		renderSession.maskManager.popObject(this);
	}
	,__renderGL: function(renderSession) {
		if(!this.__renderable || this.__worldAlpha <= 0) return;
		openfl_display_InteractiveObject.prototype.__renderGL.call(this,renderSession);
		renderSession.maskManager.pushObject(this);
		renderSession.filterManager.pushObject(this);
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__renderGL(renderSession);
		}
		var _g2 = 0;
		var _g11 = this.__removedChildren;
		while(_g2 < _g11.get_length()) {
			var orphan = _g11.get(_g2);
			++_g2;
			if(orphan.stage == null) orphan.__cleanup();
		}
		this.__removedChildren.set_length(0);
		renderSession.filterManager.popObject(this);
		renderSession.maskManager.popObject(this);
	}
	,__setStageReference: function(stage) {
		openfl_display_InteractiveObject.prototype.__setStageReference.call(this,stage);
		if(this.__children != null) {
			var _g = 0;
			var _g1 = this.__children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.__setStageReference(stage);
			}
		}
	}
	,__stopAllMovieClips: function() {
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__stopAllMovieClips();
		}
	}
	,__update: function(transformOnly,updateChildren,maskGraphics) {
		openfl_display_InteractiveObject.prototype.__update.call(this,transformOnly,updateChildren,maskGraphics);
		if(updateChildren) {
			var _g = 0;
			var _g1 = this.__children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.__update(transformOnly,true,maskGraphics);
			}
		}
	}
	,__updateChildren: function(transformOnly) {
		openfl_display_InteractiveObject.prototype.__updateChildren.call(this,transformOnly);
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__update(transformOnly,true);
		}
	}
	,get_numChildren: function() {
		return this.__children.length;
	}
	,__class__: openfl_display_DisplayObjectContainer
	,__properties__: $extend(openfl_display_InteractiveObject.prototype.__properties__,{get_numChildren:"get_numChildren"})
});
var openfl_display_Sprite = function() {
	openfl_display_DisplayObjectContainer.call(this);
	this.buttonMode = false;
	this.useHandCursor = true;
};
$hxClasses["openfl.display.Sprite"] = openfl_display_Sprite;
openfl_display_Sprite.__name__ = ["openfl","display","Sprite"];
openfl_display_Sprite.__super__ = openfl_display_DisplayObjectContainer;
openfl_display_Sprite.prototype = $extend(openfl_display_DisplayObjectContainer.prototype,{
	buttonMode: null
	,dropTarget: null
	,hitArea: null
	,useHandCursor: null
	,startDrag: function(lockCenter,bounds) {
		if(lockCenter == null) lockCenter = false;
		if(this.stage != null) this.stage.__startDrag(this,lockCenter,bounds);
	}
	,stopDrag: function() {
		if(this.stage != null) this.stage.__stopDrag(this);
	}
	,__getCursor: function() {
		if(this.buttonMode && this.useHandCursor) return lime_ui_MouseCursor.POINTER; else return null;
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(this.hitArea != null) {
			if(!this.hitArea.mouseEnabled) {
				this.hitArea.mouseEnabled = true;
				var hitTest = this.hitArea.__hitTest(x,y,shapeFlag,null,true,hitObject);
				this.hitArea.mouseEnabled = false;
				if(hitTest) stack[stack.length] = hitObject;
				return hitTest;
			}
		} else {
			if(!hitObject.get_visible() || this.__isMask || interactiveOnly && !this.mouseEnabled && !this.mouseChildren) return false;
			if(this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) return false;
			if(this.__scrollRect != null) {
				var point = openfl_geom_Point.__temp;
				point.setTo(x,y);
				this.__getRenderTransform().__transformInversePoint(point);
				if(!this.__scrollRect.containsPoint(point)) return false;
			}
			if(openfl_display_DisplayObjectContainer.prototype.__hitTest.call(this,x,y,shapeFlag,stack,interactiveOnly,hitObject)) return interactiveOnly; else if((!interactiveOnly || this.mouseEnabled) && this.__graphics != null && this.__graphics.__hitTest(x,y,shapeFlag,this.__getRenderTransform())) {
				if(stack != null) stack.push(hitObject);
				return true;
			}
		}
		return false;
	}
	,__hitTestMask: function(x,y) {
		if(openfl_display_DisplayObjectContainer.prototype.__hitTestMask.call(this,x,y)) return true; else if(this.__graphics != null && this.__graphics.__hitTest(x,y,true,this.__getRenderTransform())) return true;
		return false;
	}
	,get_graphics: function() {
		if(this.__graphics == null) this.__graphics = new openfl_display_Graphics(this);
		return this.__graphics;
	}
	,get_tabEnabled: function() {
		return this.__tabEnabled || this.buttonMode;
	}
	,__class__: openfl_display_Sprite
	,__properties__: $extend(openfl_display_DisplayObjectContainer.prototype.__properties__,{get_graphics:"get_graphics"})
});
var com_haxepunk_Engine = function(width,height,frameRate,fixed,renderMode) {
	if(fixed == null) fixed = false;
	if(frameRate == null) frameRate = 60;
	if(height == null) height = 0;
	if(width == null) width = 0;
	this._scrollRect = new openfl_geom_Rectangle();
	this._scenes = [];
	this._scene = new com_haxepunk_Scene();
	openfl_display_Sprite.call(this);
	com_haxepunk_HXP.bounds = new openfl_geom_Rectangle(0,0,width,height);
	com_haxepunk_HXP.assignedFrameRate = frameRate;
	com_haxepunk_HXP.fixed = fixed;
	com_haxepunk_HXP.engine = this;
	com_haxepunk_HXP.width = width;
	com_haxepunk_HXP.height = height;
	if(renderMode != null) {
		com_haxepunk_HXP.renderMode = renderMode;
		if(com_haxepunk_HXP.screen == null) com_haxepunk_HXP.screen = new com_haxepunk_Screen(); else com_haxepunk_HXP.screen.init();
		renderMode;
	} else com_haxepunk_HXP.set_renderMode(com_haxepunk_RenderMode.HARDWARE);
	if(com_haxepunk_HXP.randomSeed == 0) com_haxepunk_HXP.set_randomSeed(Std["int"](2147483647 * Math.random()));
	com_haxepunk_HXP.entity = new com_haxepunk_Entity();
	com_haxepunk_HXP.set_time(openfl_Lib.getTimer());
	this.paused = false;
	this.maxElapsed = 0.0333;
	this.maxFrameSkip = 5;
	this.tickRate = 4;
	this._frameList = [];
	this._systemTime = this._delta = this._frameListSum = 0;
	this._frameLast = 0;
	this.addEventListener("addedToStage",$bind(this,this.onStage));
	openfl_Lib.current.addChild(this);
};
$hxClasses["com.haxepunk.Engine"] = com_haxepunk_Engine;
com_haxepunk_Engine.__name__ = ["com","haxepunk","Engine"];
com_haxepunk_Engine.__super__ = openfl_display_Sprite;
com_haxepunk_Engine.prototype = $extend(openfl_display_Sprite.prototype,{
	paused: null
	,maxElapsed: null
	,maxFrameSkip: null
	,tickRate: null
	,init: function() {
	}
	,focusGained: function() {
	}
	,focusLost: function() {
	}
	,update: function() {
		this._scene.updateLists();
		if(this._scene != null && this._scenes.length > 0 && this._scenes[this._scenes.length - 1] != this._scene) {
			this._scene.end();
			this._scene.updateLists();
			if(this._scene.autoClear && this._scene.get_hasTween()) this._scene.clearTweens();
			this._scene = this._scenes[this._scenes.length - 1];
			this.addChild(this._scene.sprite);
			com_haxepunk_HXP.camera = this._scene.camera;
			this._scene.updateLists();
			this._scene.begin();
			this._scene.updateLists();
		}
		if(com_haxepunk_HXP.tweener.active && com_haxepunk_HXP.tweener.get_hasTween()) com_haxepunk_HXP.tweener.updateTweens();
		if(this._scene.active) {
			if(this._scene.get_hasTween()) this._scene.updateTweens();
			this._scene.update();
		}
		this._scene.updateLists(false);
		com_haxepunk_HXP.screen.update();
	}
	,render: function() {
		if(com_haxepunk_HXP.screen.needsResize) com_haxepunk_HXP.resize(com_haxepunk_HXP.windowWidth,com_haxepunk_HXP.windowHeight);
		var t = openfl_Lib.getTimer();
		if(this._frameLast == 0) this._frameLast = t | 0;
		if(com_haxepunk_HXP.renderMode == com_haxepunk_RenderMode.BUFFER) {
			com_haxepunk_HXP.screen.swap();
			com_haxepunk_HXP.screen.refresh();
		}
		com_haxepunk_utils_Draw.resetTarget();
		if(this._scenes.length > 0) {
			var visibleScene = this._scenes.length - 1;
			while(this._scenes[visibleScene].alpha < 1 && visibleScene > 0) --visibleScene;
			var _g = 0;
			while(_g < visibleScene) {
				var i = _g++;
				this._scenes[i]._drawn = false;
			}
			while(visibleScene < this._scenes.length) {
				var scene = this._scenes[visibleScene++];
				scene._drawn = true;
				if(scene.visible) scene.render();
			}
		}
		if(com_haxepunk_HXP.renderMode == com_haxepunk_RenderMode.BUFFER) com_haxepunk_HXP.screen.redraw();
		t = openfl_Lib.getTimer();
		this._frameListSum += this._frameList[this._frameList.length] = t - this._frameLast | 0;
		if(this._frameList.length > 10) this._frameListSum -= this._frameList.shift();
		com_haxepunk_HXP.frameRate = 1000 / (this._frameListSum / this._frameList.length);
		this._frameLast = t;
	}
	,setStageProperties: function() {
		var _g = this;
		com_haxepunk_HXP.stage.set_frameRate(com_haxepunk_HXP.assignedFrameRate);
		com_haxepunk_HXP.stage.align = 6;
		com_haxepunk_HXP.stage.scaleMode = 2;
		com_haxepunk_HXP.stage.set_displayState(2);
		this.resize();
		com_haxepunk_HXP.stage.addEventListener("resize",function(e) {
			_g.resize();
		});
		com_haxepunk_HXP.stage.addEventListener("activate",function(e1) {
			com_haxepunk_HXP.focused = true;
			_g.focusGained();
			_g._scene.focusGained();
		});
		com_haxepunk_HXP.stage.addEventListener("deactivate",function(e2) {
			com_haxepunk_HXP.focused = false;
			_g.focusLost();
			_g._scene.focusLost();
		});
	}
	,resize: function() {
		if(com_haxepunk_HXP.width == 0 || com_haxepunk_HXP.height == 0) {
			com_haxepunk_HXP.width = com_haxepunk_HXP.stage.stageWidth;
			com_haxepunk_HXP.height = com_haxepunk_HXP.stage.stageHeight;
			com_haxepunk_HXP.screen.scaleMode.setBaseSize();
		}
		com_haxepunk_HXP.resize(com_haxepunk_HXP.stage.stageWidth,com_haxepunk_HXP.stage.stageHeight);
		this._scrollRect.width = com_haxepunk_HXP.screen.width;
		this._scrollRect.height = com_haxepunk_HXP.screen.height;
		this.set_scrollRect(this._scrollRect);
	}
	,onStage: function(e) {
		this.removeEventListener("addedToStage",$bind(this,this.onStage));
		com_haxepunk_HXP.stage = this.stage;
		this.setStageProperties();
		com_haxepunk_utils_Input.enable();
		if(this._scene != null && this._scenes.length > 0 && this._scenes[this._scenes.length - 1] != this._scene) {
			this._scene.end();
			this._scene.updateLists();
			if(this._scene.autoClear && this._scene.get_hasTween()) this._scene.clearTweens();
			this._scene = this._scenes[this._scenes.length - 1];
			this.addChild(this._scene.sprite);
			com_haxepunk_HXP.camera = this._scene.camera;
			this._scene.updateLists();
			this._scene.begin();
			this._scene.updateLists();
		}
		com_haxepunk_utils_Draw.init();
		this.init();
		this._rate = 1000 / com_haxepunk_HXP.assignedFrameRate;
		if(com_haxepunk_HXP.fixed) {
			this._skip = this._rate * (this.maxFrameSkip + 1);
			this._last = this._prev = openfl_Lib.getTimer();
			this._timer = new haxe_Timer(this.tickRate);
			this._timer.run = $bind(this,this.onTimer);
		} else {
			this._last = openfl_Lib.getTimer();
			this.addEventListener("enterFrame",$bind(this,this.onEnterFrame));
		}
		if(com_haxepunk_HXP.renderMode == com_haxepunk_RenderMode.BUFFER) {
		} else {
		}
	}
	,onEnterFrame: function(e) {
		this._time = this._gameTime = openfl_Lib.getTimer();
		com_haxepunk_HXP._systemTime = this._time - this._systemTime;
		this._updateTime = this._time;
		com_haxepunk_HXP.elapsed = (this._time - this._last) / 1000;
		if(com_haxepunk_HXP.elapsed > this.maxElapsed) com_haxepunk_HXP.elapsed = this.maxElapsed;
		com_haxepunk_HXP.elapsed *= com_haxepunk_HXP.rate;
		this._last = this._time;
		if(!this.paused) this.update();
		if(com_haxepunk_HXP.consoleEnabled()) ((function($this) {
			var $r;
			if(com_haxepunk_HXP._console == null) com_haxepunk_HXP._console = new com_haxepunk_debug_Console();
			$r = com_haxepunk_HXP._console;
			return $r;
		}(this))).update();
		com_haxepunk_utils_Input.update();
		this._time = this._renderTime = openfl_Lib.getTimer();
		com_haxepunk_HXP._updateTime = this._time - this._updateTime;
		if(this.paused) this._frameLast = this._time; else this.render();
		this._time = this._systemTime = openfl_Lib.getTimer();
		com_haxepunk_HXP._renderTime = this._time - this._renderTime;
		com_haxepunk_HXP._gameTime = this._time - this._gameTime;
	}
	,onTimer: function() {
		this._time = openfl_Lib.getTimer();
		this._delta += this._time - this._last;
		this._last = this._time;
		if(this._delta < this._rate) return;
		this._gameTime = this._time | 0;
		com_haxepunk_HXP._systemTime = this._time - this._systemTime;
		if(this._delta > this._skip) this._delta = this._skip;
		while(this._delta >= this._rate) {
			com_haxepunk_HXP.elapsed = this._rate * com_haxepunk_HXP.rate * 0.001;
			this._updateTime = this._time;
			this._delta -= this._rate;
			this._prev = this._time;
			if(!this.paused) this.update();
			if(com_haxepunk_HXP.consoleEnabled()) ((function($this) {
				var $r;
				if(com_haxepunk_HXP._console == null) com_haxepunk_HXP._console = new com_haxepunk_debug_Console();
				$r = com_haxepunk_HXP._console;
				return $r;
			}(this))).update();
			com_haxepunk_utils_Input.update();
			this._time = openfl_Lib.getTimer();
			com_haxepunk_HXP._updateTime = this._time - this._updateTime;
		}
		this._renderTime = this._time;
		if(!this.paused) this.render();
		this._time = this._systemTime = openfl_Lib.getTimer();
		com_haxepunk_HXP._renderTime = this._time - this._renderTime;
		com_haxepunk_HXP._gameTime = this._time - this._gameTime;
	}
	,checkScene: function() {
		if(this._scene != null && this._scenes.length > 0 && this._scenes[this._scenes.length - 1] != this._scene) {
			this._scene.end();
			this._scene.updateLists();
			if(this._scene.autoClear && this._scene.get_hasTween()) this._scene.clearTweens();
			this._scene = this._scenes[this._scenes.length - 1];
			this.addChild(this._scene.sprite);
			com_haxepunk_HXP.camera = this._scene.camera;
			this._scene.updateLists();
			this._scene.begin();
			this._scene.updateLists();
		}
	}
	,pushScene: function(value) {
		this._scenes.push(value);
	}
	,popScene: function() {
		var scene = this._scenes.pop();
		if(this.contains(scene.sprite)) this.removeChild(scene.sprite);
		return scene;
	}
	,get_scene: function() {
		return this._scene;
	}
	,set_scene: function(value) {
		if(this._scene == value) return value;
		if(this._scenes.length > 0) this.popScene();
		this._scenes.push(value);
		return this._scene;
	}
	,_scene: null
	,_scenes: null
	,_delta: null
	,_time: null
	,_last: null
	,_timer: null
	,_rate: null
	,_skip: null
	,_prev: null
	,_updateTime: null
	,_renderTime: null
	,_gameTime: null
	,_systemTime: null
	,_frameLast: null
	,_frameListSum: null
	,_frameList: null
	,_scrollRect: null
	,__class__: com_haxepunk_Engine
	,__properties__: $extend(openfl_display_Sprite.prototype.__properties__,{set_scene:"set_scene",get_scene:"get_scene"})
});
var Main = function(width,height,frameRate,fixed,renderMode) {
	com_haxepunk_Engine.call(this,width,height,frameRate,fixed,renderMode);
};
$hxClasses["Main"] = Main;
Main.__name__ = ["Main"];
Main.main = function() {
	new Main();
};
Main.__super__ = com_haxepunk_Engine;
Main.prototype = $extend(com_haxepunk_Engine.prototype,{
	game: null
	,init: function() {
		com_haxepunk_HXP.screen.set_scale(1.0);
		this.game = new game_Game();
	}
	,__class__: Main
});
var DocumentClass = function() {
	openfl_Lib.current.addChild(this);
	Main.call(this);
	this.dispatchEvent(new openfl_events_Event("addedToStage",false,false));
};
$hxClasses["DocumentClass"] = DocumentClass;
DocumentClass.__name__ = ["DocumentClass"];
DocumentClass.__super__ = Main;
DocumentClass.prototype = $extend(Main.prototype,{
	__class__: DocumentClass
});
var AreaView = function(s) {
	this.scene = s;
	this.game = this.scene.game;
	this._tilemap = null;
	this.width = AreaView.maxSize;
	this.height = AreaView.maxSize;
	this.entity = new com_haxepunk_Entity();
	this.entity.set_layer(Const.LAYER_TILES);
	this._effects = new List();
	this._tilemap = new com_haxepunk_graphics_Tilemap(com_haxepunk_HXP.renderMode == com_haxepunk_RenderMode.HARDWARE?(function($this) {
		var $r;
		var e = com_haxepunk_ds_Either.Right(new com_haxepunk_graphics_atlas_TileAtlas((function($this) {
			var $r;
			var data = com_haxepunk_graphics_atlas_AtlasData.getAtlasDataByName("gfx/tileset.png",true);
			$r = data;
			return $r;
		}($this))));
		$r = e;
		return $r;
	}(this)):(function($this) {
		var $r;
		var e1 = com_haxepunk_ds_Either.Left(com_haxepunk_HXP.getBitmap("gfx/tileset.png"));
		$r = e1;
		return $r;
	}(this)),this.width * Const.TILE_WIDTH,this.height * Const.TILE_HEIGHT,Const.TILE_WIDTH,Const.TILE_HEIGHT);
	this.entity.addGraphic(this._tilemap);
	this.scene.add(this.entity);
};
$hxClasses["AreaView"] = AreaView;
AreaView.__name__ = ["AreaView"];
AreaView.prototype = {
	game: null
	,scene: null
	,_tilemap: null
	,_effects: null
	,width: null
	,height: null
	,entity: null
	,update: function() {
		this.width = this.game.area.width;
		this.height = this.game.area.height;
		var _g1 = 0;
		var _g = AreaView.maxSize;
		while(_g1 < _g) {
			var y = _g1++;
			var _g3 = 0;
			var _g2 = AreaView.maxSize;
			while(_g3 < _g2) {
				var x = _g3++;
				this._tilemap.setTile(x,y,Const.TILE_HIDDEN);
			}
		}
		var cells = this.game.area.getCells();
		var _g11 = 0;
		var _g4 = this.height;
		while(_g11 < _g4) {
			var y1 = _g11++;
			var _g31 = 0;
			var _g21 = this.width;
			while(_g31 < _g21) {
				var x1 = _g31++;
				this._tilemap.setTile(x1,y1,cells[x1][y1]);
			}
		}
		this.scene.updateCamera();
	}
	,show: function() {
		this.entity.visible = true;
		if(this.game.player.state != _$PlayerState.PLR_STATE_HOST) this.game.playerArea.entity.visible = true;
	}
	,hide: function() {
		this.entity.visible = false;
		this.game.playerArea.entity.visible = false;
		var _g_head = this._effects.h;
		var _g_val = null;
		while(_g_head != null) {
			var eff;
			eff = (function($this) {
				var $r;
				_g_val = _g_head[0];
				_g_head = _g_head[1];
				$r = _g_val;
				return $r;
			}(this));
			this.scene.remove(eff);
			this._effects.remove(eff);
		}
	}
	,addEffect: function(x,y,turns,frame) {
		if(x >= this.width || y >= this.height || x < 0 || y < 0) return;
		var effect = new entities_EffectEntity(this.game,x,y,turns,Const.ROW_EFFECT,frame);
		this._effects.add(effect);
		this.scene.add(effect);
	}
	,updateVisibility: function() {
		if(this.game.player.state == _$PlayerState.PLR_STATE_HOST) this.updateVisibilityHost(); else this.updateVisibilityParasite();
	}
	,updateVisibilityHost: function() {
		var rect = this.game.area.getVisibleRect();
		var cells = this.game.area.getCells();
		var _g1 = rect.y1;
		var _g = rect.y2;
		while(_g1 < _g) {
			var y = _g1++;
			var _g3 = rect.x1;
			var _g2 = rect.x2;
			while(_g3 < _g2) {
				var x = _g3++;
				if(!this.game.player.vars.losEnabled || this.game.area.isVisible(this.game.playerArea.x,this.game.playerArea.y,x,y)) this._tilemap.setTile(x,y,cells[x][y]); else this._tilemap.setTile(x,y,Const.TILE_HIDDEN);
			}
		}
	}
	,updateVisibilityParasite: function() {
		var rect = this.game.area.getVisibleRect();
		var cells = this.game.area.getCells();
		var _g1 = rect.y1;
		var _g = rect.y2;
		while(_g1 < _g) {
			var y = _g1++;
			var _g3 = rect.x1;
			var _g2 = rect.x2;
			while(_g3 < _g2) {
				var x = _g3++;
				if(Math.abs(this.game.playerArea.x - x) < 2 && Math.abs(this.game.playerArea.y - y) < 2) this._tilemap.setTile(x,y,cells[x][y]); else this._tilemap.setTile(x,y,Const.TILE_HIDDEN);
			}
		}
	}
	,turn: function() {
		var _g_head = this._effects.h;
		var _g_val = null;
		while(_g_head != null) {
			var e;
			e = (function($this) {
				var $r;
				_g_val = _g_head[0];
				_g_head = _g_head[1];
				$r = _g_val;
				return $r;
			}(this));
			e.turns--;
			if(e.turns <= 0) {
				this.scene.remove(e);
				this._effects.remove(e);
			}
		}
	}
	,__class__: AreaView
};
var Config = function(g) {
	this.game = g;
	this.extendedInfo = false;
	this.sendExceptions = false;
	this.fontSize = 16;
	this.fontSizeLarge = 24;
	this.windowWidth = 1024;
	this.windowHeight = 768;
	this.map = new haxe_ds_StringMap();
	var str = window.localStorage.getItem("config");
	var obj = { };
	if(str != null) obj = JSON.parse(str);
	var _g = 0;
	var _g1 = Reflect.fields(obj);
	while(_g < _g1.length) {
		var f = _g1[_g];
		++_g;
		this.set(f,Reflect.field(obj,f));
	}
};
$hxClasses["Config"] = Config;
Config.__name__ = ["Config"];
Config.prototype = {
	game: null
	,extendedInfo: null
	,sendExceptions: null
	,fontSize: null
	,fontSizeLarge: null
	,windowWidth: null
	,windowHeight: null
	,map: null
	,set: function(key,val,doSave) {
		if(doSave == null) doSave = false;
		var key1 = StringTools.trim(key);
		var val1 = StringTools.trim(val);
		if(key1 == "extendedInfo") this.extendedInfo = val1 == "1"; else if(key1 == "sendExceptions") this.sendExceptions = val1 == "1"; else if(key1 == "fontSize") {
			this.fontSize = Std.parseInt(val1);
			if(this.fontSize < 8) this.fontSize = 8;
			this.fontSizeLarge = this.fontSize * 1.5 | 0;
		} else if(key1 == "windowWidth") this.windowWidth = Std.parseInt(val1); else if(key1 == "windowHeight") this.windowHeight = Std.parseInt(val1); else {
			this.game.log("DEBUG " + "No such config setting.",_$TextColor.COLOR_DEBUG);
			return;
		}
		this.map.set(key1,val1);
		if(doSave) this.save();
	}
	,save: function() {
		var obj = { };
		var $it0 = this.map.keys();
		while( $it0.hasNext() ) {
			var key = $it0.next();
			Reflect.setField(obj,key,this.map.get(key));
		}
		var str = JSON.stringify(obj);
		window.localStorage.setItem("config",str);
		this.game.log("DEBUG " + "Config saved. Reload page to apply new settings.",_$TextColor.COLOR_DEBUG);
	}
	,__class__: Config
};
var _$PlayerActionType = $hxClasses["_PlayerActionType"] = { __ename__ : ["_PlayerActionType"], __constructs__ : ["ACTION_DEBUG","ACTION_AREA","ACTION_REGION","ACTION_OBJECT","ACTION_ORGAN","ACTION_EVOLUTION","ACTION_INVENTORY"] };
_$PlayerActionType.ACTION_DEBUG = ["ACTION_DEBUG",0];
_$PlayerActionType.ACTION_DEBUG.toString = $estr;
_$PlayerActionType.ACTION_DEBUG.__enum__ = _$PlayerActionType;
_$PlayerActionType.ACTION_AREA = ["ACTION_AREA",1];
_$PlayerActionType.ACTION_AREA.toString = $estr;
_$PlayerActionType.ACTION_AREA.__enum__ = _$PlayerActionType;
_$PlayerActionType.ACTION_REGION = ["ACTION_REGION",2];
_$PlayerActionType.ACTION_REGION.toString = $estr;
_$PlayerActionType.ACTION_REGION.__enum__ = _$PlayerActionType;
_$PlayerActionType.ACTION_OBJECT = ["ACTION_OBJECT",3];
_$PlayerActionType.ACTION_OBJECT.toString = $estr;
_$PlayerActionType.ACTION_OBJECT.__enum__ = _$PlayerActionType;
_$PlayerActionType.ACTION_ORGAN = ["ACTION_ORGAN",4];
_$PlayerActionType.ACTION_ORGAN.toString = $estr;
_$PlayerActionType.ACTION_ORGAN.__enum__ = _$PlayerActionType;
_$PlayerActionType.ACTION_EVOLUTION = ["ACTION_EVOLUTION",5];
_$PlayerActionType.ACTION_EVOLUTION.toString = $estr;
_$PlayerActionType.ACTION_EVOLUTION.__enum__ = _$PlayerActionType;
_$PlayerActionType.ACTION_INVENTORY = ["ACTION_INVENTORY",6];
_$PlayerActionType.ACTION_INVENTORY.toString = $estr;
_$PlayerActionType.ACTION_INVENTORY.__enum__ = _$PlayerActionType;
var _$TextColor = $hxClasses["_TextColor"] = { __ename__ : ["_TextColor"], __constructs__ : ["COLOR_DEFAULT","COLOR_DEBUG","COLOR_ALERT","COLOR_EVOLUTION","COLOR_AREA","COLOR_ORGAN","COLOR_WORLD","COLOR_HINT","COLOR_TIMELINE","COLOR_MESSAGE","COLOR_GOAL"] };
_$TextColor.COLOR_DEFAULT = ["COLOR_DEFAULT",0];
_$TextColor.COLOR_DEFAULT.toString = $estr;
_$TextColor.COLOR_DEFAULT.__enum__ = _$TextColor;
_$TextColor.COLOR_DEBUG = ["COLOR_DEBUG",1];
_$TextColor.COLOR_DEBUG.toString = $estr;
_$TextColor.COLOR_DEBUG.__enum__ = _$TextColor;
_$TextColor.COLOR_ALERT = ["COLOR_ALERT",2];
_$TextColor.COLOR_ALERT.toString = $estr;
_$TextColor.COLOR_ALERT.__enum__ = _$TextColor;
_$TextColor.COLOR_EVOLUTION = ["COLOR_EVOLUTION",3];
_$TextColor.COLOR_EVOLUTION.toString = $estr;
_$TextColor.COLOR_EVOLUTION.__enum__ = _$TextColor;
_$TextColor.COLOR_AREA = ["COLOR_AREA",4];
_$TextColor.COLOR_AREA.toString = $estr;
_$TextColor.COLOR_AREA.__enum__ = _$TextColor;
_$TextColor.COLOR_ORGAN = ["COLOR_ORGAN",5];
_$TextColor.COLOR_ORGAN.toString = $estr;
_$TextColor.COLOR_ORGAN.__enum__ = _$TextColor;
_$TextColor.COLOR_WORLD = ["COLOR_WORLD",6];
_$TextColor.COLOR_WORLD.toString = $estr;
_$TextColor.COLOR_WORLD.__enum__ = _$TextColor;
_$TextColor.COLOR_HINT = ["COLOR_HINT",7];
_$TextColor.COLOR_HINT.toString = $estr;
_$TextColor.COLOR_HINT.__enum__ = _$TextColor;
_$TextColor.COLOR_TIMELINE = ["COLOR_TIMELINE",8];
_$TextColor.COLOR_TIMELINE.toString = $estr;
_$TextColor.COLOR_TIMELINE.__enum__ = _$TextColor;
_$TextColor.COLOR_MESSAGE = ["COLOR_MESSAGE",9];
_$TextColor.COLOR_MESSAGE.toString = $estr;
_$TextColor.COLOR_MESSAGE.__enum__ = _$TextColor;
_$TextColor.COLOR_GOAL = ["COLOR_GOAL",10];
_$TextColor.COLOR_GOAL.toString = $estr;
_$TextColor.COLOR_GOAL.__enum__ = _$TextColor;
var Const = function() { };
$hxClasses["Const"] = Const;
Const.__name__ = ["Const"];
Const.getAction = function(id) {
	return Const.PLAYER_ACTIONS.get(id);
};
Const.getDistSquared = function(x1,y1,x2,y2) {
	return (x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1);
};
Const.getDist = function(x1,y1,x2,y2) {
	return Std["int"](Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1)));
};
Const.debugObject = function(o) {
	var list = [game_Inventory,game_Skills,game_Organs,game_Effects];
	var classes = ["String"];
	var fields = Reflect.fields(o);
	fields.sort(Const.sortFunc);
	var _g = 0;
	while(_g < fields.length) {
		var f = fields[_g];
		++_g;
		var ff = Reflect.field(o,f);
		var cl;
		if(ff == null) cl = null; else cl = js_Boot.getClass(ff);
		if(cl == null) continue;
		var className = Type.getClassName(cl);
		if(!Reflect.isFunction(ff) && (!Reflect.isObject(ff) || className == null || Lambda.has(classes,className))) haxe_Log.trace(f + ": " + ff,{ fileName : "Const.hx", lineNumber : 253, className : "Const", methodName : "p"}); else if(className == "List") {
			var l = ff;
			var tmp = [];
			var _g1_head = l.h;
			var _g1_val = null;
			while(_g1_head != null) {
				var x;
				_g1_val = _g1_head[0];
				_g1_head = _g1_head[1];
				x = _g1_val;
				tmp.push(x);
			}
			Const.p(f + ": " + tmp.join(", "));
		} else if(Lambda.has(list,ff == null?null:js_Boot.getClass(ff))) haxe_Log.trace(f + ": " + ff,{ fileName : "Const.hx", lineNumber : 253, className : "Const", methodName : "p"});
	}
};
Const.sortFunc = function(a,b) {
	if(a < b) return -1;
	if(a > b) return 1;
	return 0;
};
Const.todo = function(s) {
	haxe_Log.trace("TODO: " + s,{ fileName : "Const.hx", lineNumber : 216, className : "Const", methodName : "todo"});
};
Const.clamp = function(v,min,max) {
	if(v < min) v = min; else if(max != null && v > max) v = max;
	return v;
};
Const.clampFloat = function(v,min,max) {
	if(v < min) v = min; else if(max != null && v > max) v = max;
	return v;
};
Const.roll = function(min,max) {
	return min + Std.random(max - min + 1);
};
Const.p = function(s) {
	haxe_Log.trace(s,{ fileName : "Const.hx", lineNumber : 253, className : "Const", methodName : "p"});
};
var lime_utils_AssetLibrary = function() {
	this.types = new haxe_ds_StringMap();
	this.preload = new haxe_ds_StringMap();
	this.paths = new haxe_ds_StringMap();
	this.classTypes = new haxe_ds_StringMap();
	this.cachedText = new haxe_ds_StringMap();
	this.cachedImages = new haxe_ds_StringMap();
	this.cachedFonts = new haxe_ds_StringMap();
	this.cachedBytes = new haxe_ds_StringMap();
	this.cachedAudioBuffers = new haxe_ds_StringMap();
	this.onChange = new lime_app__$Event_$Void_$Void();
};
$hxClasses["lime.utils.AssetLibrary"] = lime_utils_AssetLibrary;
lime_utils_AssetLibrary.__name__ = ["lime","utils","AssetLibrary"];
lime_utils_AssetLibrary.fromManifest = function(manifest) {
	var library = null;
	if(manifest.version == 1) {
		if(manifest.libraryType == null) library = new lime_utils_AssetLibrary(); else library = Type.createInstance(Type.resolveClass(manifest.libraryType),manifest.libraryArgs);
		library.__fromManifest(manifest);
	}
	return library;
};
lime_utils_AssetLibrary.prototype = {
	onChange: null
	,cachedAudioBuffers: null
	,cachedBytes: null
	,cachedFonts: null
	,cachedImages: null
	,cachedText: null
	,classTypes: null
	,paths: null
	,preload: null
	,progressBytesLoadedCache: null
	,progressBytesLoaded: null
	,progressBytesTotal: null
	,progressLoaded: null
	,progressTotal: null
	,promise: null
	,types: null
	,exists: function(id,type) {
		var requestedType;
		if(type != null) requestedType = js_Boot.__cast(type , String); else requestedType = null;
		var assetType = this.types.get(id);
		if(assetType != null) {
			if(assetType == requestedType || (requestedType == "SOUND" || requestedType == "MUSIC") && (assetType == "MUSIC" || assetType == "SOUND")) return true;
			if(requestedType == "BINARY" || requestedType == null || assetType == "BINARY" && requestedType == "TEXT") return true;
		}
		return false;
	}
	,getAsset: function(id,type) {
		switch(type) {
		case "BINARY":
			return this.getBytes(id);
		case "FONT":
			return this.getFont(id);
		case "IMAGE":
			return this.getImage(id);
		case "MUSIC":case "SOUND":
			return this.getAudioBuffer(id);
		case "TEXT":
			return this.getText(id);
		case "TEMPLATE":
			throw new js__$Boot_HaxeError("Not sure how to get template: " + id);
			break;
		default:
			throw new js__$Boot_HaxeError("Unknown asset type: " + type);
		}
	}
	,getAudioBuffer: function(id) {
		if(this.cachedAudioBuffers.exists(id)) return this.cachedAudioBuffers.get(id); else if(this.classTypes.exists(id)) return lime_audio_AudioBuffer.fromBytes(js_Boot.__cast(Type.createInstance(this.classTypes.get(id),[]) , haxe_io_Bytes)); else return lime_audio_AudioBuffer.fromFile(this.paths.get(id));
	}
	,getBytes: function(id) {
		if(this.cachedBytes.exists(id)) return this.cachedBytes.get(id); else if(this.classTypes.exists(id)) return js_Boot.__cast(Type.createInstance(this.classTypes.get(id),[]) , haxe_io_Bytes); else return lime_utils__$Bytes_Bytes_$Impl_$.fromFile(this.paths.get(id));
	}
	,getFont: function(id) {
		if(this.cachedFonts.exists(id)) return this.cachedFonts.get(id); else if(this.classTypes.exists(id)) return js_Boot.__cast(Type.createInstance(this.classTypes.get(id),[]) , lime_text_Font); else return lime_text_Font.fromFile(this.paths.get(id));
	}
	,getImage: function(id) {
		if(this.cachedImages.exists(id)) return this.cachedImages.get(id); else if(this.classTypes.exists(id)) return js_Boot.__cast(Type.createInstance(this.classTypes.get(id),[]) , lime_graphics_Image); else return lime_graphics_Image.fromFile(this.paths.get(id));
	}
	,getPath: function(id) {
		return this.paths.get(id);
	}
	,getText: function(id) {
		if(this.cachedText.exists(id)) return this.cachedText.get(id); else {
			var bytes = this.getBytes(id);
			if(bytes == null) return null; else return bytes.getString(0,bytes.length);
		}
	}
	,isLocal: function(id,type) {
		if(this.classTypes.exists(id)) return true;
		var requestedType;
		if(type != null) requestedType = js_Boot.__cast(type , String); else requestedType = null;
		switch(requestedType) {
		case "IMAGE":
			return this.cachedImages.exists(id);
		case "MUSIC":case "SOUND":
			return this.cachedAudioBuffers.exists(id);
		default:
			return this.cachedBytes.exists(id) || this.cachedText.exists(id);
		}
	}
	,list: function(type) {
		var requestedType;
		if(type != null) requestedType = js_Boot.__cast(type , String); else requestedType = null;
		var items = [];
		var $it0 = this.types.keys();
		while( $it0.hasNext() ) {
			var id = $it0.next();
			if(requestedType == null || this.exists(id,type)) items.push(id);
		}
		return items;
	}
	,loadAsset: function(id,type) {
		switch(type) {
		case "BINARY":
			return this.loadBytes(id);
		case "FONT":
			return this.loadFont(id);
		case "IMAGE":
			return this.loadImage(id);
		case "MUSIC":case "SOUND":
			return this.loadAudioBuffer(id);
		case "TEXT":
			return this.loadText(id);
		case "TEMPLATE":
			throw new js__$Boot_HaxeError("Not sure how to load template: " + id);
			break;
		default:
			throw new js__$Boot_HaxeError("Unknown asset type: " + type);
		}
	}
	,load: function() {
		if(this.promise == null) {
			this.promise = new lime_app_Promise();
			this.progressBytesLoadedCache = new haxe_ds_StringMap();
			this.progressLoaded = 0;
			this.progressTotal = 1;
			var $it0 = this.preload.keys();
			while( $it0.hasNext() ) {
				var id = $it0.next();
				var _g = this.types.get(id);
				if(_g != null) switch(_g) {
				case "BINARY":
					this.progressTotal++;
					var future = this.loadBytes(id);
					future.onProgress((function(f,id1) {
						return function(a1,a2) {
							f(id1,a1,a2);
						};
					})($bind(this,this.load_onProgress),id));
					future.onError((function(f1,id2) {
						return function(a11) {
							f1(id2,a11);
						};
					})($bind(this,this.load_onError),id));
					future.onComplete((function(f2,id3) {
						return function(a12) {
							f2(id3,a12);
						};
					})($bind(this,this.loadBytes_onComplete),id));
					break;
				case "FONT":
					this.progressTotal++;
					var future1 = this.loadFont(id);
					future1.onProgress((function(f3,id4) {
						return function(a13,a21) {
							f3(id4,a13,a21);
						};
					})($bind(this,this.load_onProgress),id));
					future1.onError((function(f4,id5) {
						return function(a14) {
							f4(id5,a14);
						};
					})($bind(this,this.load_onError),id));
					future1.onComplete((function(f5,id6) {
						return function(a15) {
							f5(id6,a15);
						};
					})($bind(this,this.loadFont_onComplete),id));
					break;
				case "IMAGE":
					this.progressTotal++;
					var future2 = this.loadImage(id);
					future2.onProgress((function(f6,id7) {
						return function(a16,a22) {
							f6(id7,a16,a22);
						};
					})($bind(this,this.load_onProgress),id));
					future2.onError((function(f7,id8) {
						return function(a17) {
							f7(id8,a17);
						};
					})($bind(this,this.load_onError),id));
					future2.onComplete((function(f8,id9) {
						return function(a18) {
							f8(id9,a18);
						};
					})($bind(this,this.loadImage_onComplete),id));
					break;
				case "MUSIC":case "SOUND":
					this.progressTotal++;
					var future3 = this.loadAudioBuffer(id);
					future3.onProgress((function(f9,id10) {
						return function(a19,a23) {
							f9(id10,a19,a23);
						};
					})($bind(this,this.load_onProgress),id));
					future3.onError((function(f10,id11) {
						return function(a110) {
							f10(id11,a110);
						};
					})($bind(this,this.load_onError),id));
					future3.onComplete((function(f11,id12) {
						return function(a111) {
							f11(id12,a111);
						};
					})($bind(this,this.loadAudioBuffer_onComplete),id));
					break;
				case "TEXT":
					this.progressTotal++;
					var future4 = this.loadText(id);
					future4.onProgress((function(f12,id13) {
						return function(a112,a24) {
							f12(id13,a112,a24);
						};
					})($bind(this,this.load_onProgress),id));
					future4.onError((function(f13,id14) {
						return function(a113) {
							f13(id14,a113);
						};
					})($bind(this,this.load_onError),id));
					future4.onComplete((function(f14,id15) {
						return function(a114) {
							f14(id15,a114);
						};
					})($bind(this,this.loadText_onComplete),id));
					break;
				default:
				} else {
				}
			}
			this.updateProgressLoaded();
		}
		return this.promise.future;
	}
	,loadAudioBuffer: function(id) {
		if(this.cachedAudioBuffers.exists(id)) return lime_app_Future.withValue(this.cachedAudioBuffers.get(id)); else if(this.classTypes.exists(id)) return lime_app_Future.withValue(Type.createInstance(this.classTypes.get(id),[])); else return lime_audio_AudioBuffer.loadFromFile(this.paths.get(id));
	}
	,loadBytes: function(id) {
		if(this.cachedBytes.exists(id)) return lime_app_Future.withValue(this.cachedBytes.get(id)); else if(this.classTypes.exists(id)) return lime_app_Future.withValue(Type.createInstance(this.classTypes.get(id),[])); else return lime_utils__$Bytes_Bytes_$Impl_$.loadFromFile(this.paths.get(id));
	}
	,loadFont: function(id) {
		if(this.cachedFonts.exists(id)) return lime_app_Future.withValue(this.cachedFonts.get(id)); else if(this.classTypes.exists(id)) {
			var font = Type.createInstance(this.classTypes.get(id),[]);
			return lime_text_Font.loadFromName(font.name);
		} else return lime_text_Font.loadFromName(this.paths.get(id));
	}
	,loadImage: function(id) {
		if(this.cachedImages.exists(id)) return lime_app_Future.withValue(this.cachedImages.get(id)); else if(this.classTypes.exists(id)) return lime_app_Future.withValue(Type.createInstance(this.classTypes.get(id),[])); else return lime_graphics_Image.loadFromFile(this.paths.get(id));
	}
	,loadText: function(id) {
		if(this.cachedText.exists(id)) return lime_app_Future.withValue(this.cachedText.get(id)); else return this.loadBytes(id).then(function(bytes) {
			return new lime_app_Future(function() {
				if(bytes == null) return null; else return bytes.getString(0,bytes.length);
			},true);
		});
	}
	,unload: function() {
	}
	,updateProgressLoaded: function() {
		this.progressLoaded++;
		if(this.progressLoaded == this.progressTotal) this.promise.complete(this);
	}
	,__fromManifest: function(manifest) {
		if(manifest.version == 1) {
			var _g = 0;
			var _g1 = manifest.assets;
			while(_g < _g1.length) {
				var asset = _g1[_g];
				++_g;
				var key = asset.id;
				var value = asset.path;
				this.paths.set(key,value);
				var key1 = asset.id;
				var value1 = asset.type;
				this.types.set(key1,value1);
			}
		}
	}
	,loadAudioBuffer_onComplete: function(id,audioBuffer) {
		this.cachedAudioBuffers.set(id,audioBuffer);
		this.updateProgressLoaded();
	}
	,loadBytes_onComplete: function(id,bytes) {
		this.cachedBytes.set(id,bytes);
		this.updateProgressLoaded();
	}
	,loadFont_onComplete: function(id,font) {
		this.cachedFonts.set(id,font);
		this.updateProgressLoaded();
	}
	,loadImage_onComplete: function(id,image) {
		this.cachedImages.set(id,image);
		this.updateProgressLoaded();
	}
	,loadText_onComplete: function(id,text) {
		this.cachedText.set(id,text);
		this.updateProgressLoaded();
	}
	,load_onError: function(id,message) {
		this.promise.error("Error loading asset \"" + id + "\"");
	}
	,load_onProgress: function(id,bytesLoaded,bytesTotal) {
		if(this.progressBytesLoadedCache.exists(id)) {
			var previous = this.progressBytesLoadedCache.get(id);
			this.progressBytesLoaded += bytesLoaded - previous;
			this.progressBytesLoadedCache.set(id,bytesLoaded);
			this.promise.progress(this.progressBytesLoaded,this.progressBytesTotal);
		} else if(bytesTotal > 0) {
			this.progressBytesLoadedCache.set(id,bytesLoaded);
			this.progressBytesLoaded += bytesLoaded;
			this.progressBytesTotal += bytesTotal;
		}
	}
	,__class__: lime_utils_AssetLibrary
};
var DefaultAssetLibrary = function() {
	this.rootPath = "";
	lime_utils_AssetLibrary.call(this);
	openfl_text_Font.registerFont(_$_$ASSET_$_$OPENFL_$_$font_$04b_$03_$_$_$ttf);
	openfl_text_Font.registerFont(_$_$ASSET_$_$OPENFL_$_$font_$orkney_$regular_$otf);
	var id;
	id = "graphics/preloader/haxepunk.png";
	this.paths.set(id,id);
	this.types.set(id,"IMAGE");
	id = "graphics/debug/console_visible.png";
	this.paths.set(id,id);
	this.types.set(id,"IMAGE");
	id = "graphics/debug/console_play.png";
	this.paths.set(id,id);
	this.types.set(id,"IMAGE");
	id = "graphics/debug/console_hidden.png";
	this.paths.set(id,id);
	this.types.set(id,"IMAGE");
	id = "graphics/debug/console_pause.png";
	this.paths.set(id,id);
	this.types.set(id,"IMAGE");
	id = "graphics/debug/console_output.png";
	this.paths.set(id,id);
	this.types.set(id,"IMAGE");
	id = "graphics/debug/console_step.png";
	this.paths.set(id,id);
	this.types.set(id,"IMAGE");
	id = "graphics/debug/console_logo.png";
	this.paths.set(id,id);
	this.types.set(id,"IMAGE");
	id = "graphics/debug/console_debug.png";
	this.paths.set(id,id);
	this.types.set(id,"IMAGE");
	id = "font/04B_03__.ttf";
	this.classTypes.set(id,_$_$ASSET_$_$font_$04b_$03_$_$_$ttf);
	this.preload.set(id,true);
	this.types.set(id,"FONT");
	id = "font/04B_03__.ttf.png";
	this.paths.set(id,id);
	this.types.set(id,"IMAGE");
	id = "gfx/entities.png";
	this.paths.set(id,id);
	this.types.set(id,"IMAGE");
	id = "gfx/mouse.png";
	this.paths.set(id,id);
	this.types.set(id,"IMAGE");
	id = "gfx/tileset.png";
	this.paths.set(id,id);
	this.types.set(id,"IMAGE");
	id = "gfx/text_colors_reference.png";
	this.paths.set(id,id);
	this.types.set(id,"IMAGE");
	id = "font/Orkney-Regular.otf";
	this.classTypes.set(id,_$_$ASSET_$_$font_$orkney_$regular_$otf);
	this.preload.set(id,true);
	this.types.set(id,"FONT");
	var assetsPrefix = null;
	if(ApplicationMain.config != null && Object.prototype.hasOwnProperty.call(ApplicationMain.config,"assetsPrefix")) assetsPrefix = ApplicationMain.config.assetsPrefix;
	if(assetsPrefix != null) {
		var $it0 = this.paths.keys();
		while( $it0.hasNext() ) {
			var k = $it0.next();
			var value = assetsPrefix + this.paths.get(k);
			this.paths.set(k,value);
		}
	}
	var $it1 = this.paths.keys();
	while( $it1.hasNext() ) {
		var id1 = $it1.next();
		this.preload.set(id1,true);
	}
};
$hxClasses["DefaultAssetLibrary"] = DefaultAssetLibrary;
DefaultAssetLibrary.__name__ = ["DefaultAssetLibrary"];
DefaultAssetLibrary.__super__ = lime_utils_AssetLibrary;
DefaultAssetLibrary.prototype = $extend(lime_utils_AssetLibrary.prototype,{
	lastModified: null
	,timer: null
	,rootPath: null
	,__class__: DefaultAssetLibrary
});
var lime_text_Font = function(name) {
	if(name != null) this.name = name;
	if(this.__fontPath != null) this.__fromFile(this.__fontPath);
};
$hxClasses["lime.text.Font"] = lime_text_Font;
lime_text_Font.__name__ = ["lime","text","Font"];
lime_text_Font.fromBytes = function(bytes) {
	if(bytes == null) return null;
	var font = new lime_text_Font();
	font.__fromBytes(bytes);
	return font;
};
lime_text_Font.fromFile = function(path) {
	if(path == null) return null;
	var font = new lime_text_Font();
	font.__fromFile(path);
	return font;
};
lime_text_Font.loadFromBytes = function(bytes) {
	return lime_app_Future.withValue(lime_text_Font.fromBytes(bytes));
};
lime_text_Font.loadFromFile = function(path) {
	return lime_app_Future.withValue(lime_text_Font.fromFile(path));
};
lime_text_Font.loadFromName = function(path) {
	var font = new lime_text_Font();
	return font.__loadFromName(path);
};
lime_text_Font.prototype = {
	ascender: null
	,descender: null
	,height: null
	,name: null
	,numGlyphs: null
	,src: null
	,underlinePosition: null
	,underlineThickness: null
	,unitsPerEM: null
	,__fontPath: null
	,decompose: function() {
		return null;
	}
	,getGlyph: function(character) {
		return -1;
	}
	,getGlyphs: function(characters) {
		if(characters == null) characters = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^`'\"/\\&*()[]{}<>|:;_-+=?,. ";
		return null;
	}
	,getGlyphMetrics: function(glyph) {
		return null;
	}
	,renderGlyph: function(glyph,fontSize) {
		return null;
	}
	,renderGlyphs: function(glyphs,fontSize) {
		return null;
	}
	,__fromBytes: function(bytes) {
		this.__fontPath = null;
	}
	,__fromFile: function(path) {
		this.__fontPath = path;
	}
	,__loadFromName: function(name) {
		var _g = this;
		var promise = new lime_app_Promise();
		this.name = name;
		var font = name;
		if(window.document.fonts && ($_=window.document.fonts,$bind($_,$_.load))) window.document.fonts.load("1em '" + font + "'").then(function(_) {
			promise.complete(_g);
		}); else {
			var node = window.document.createElement("span");
			node.innerHTML = "giItT1WQy@!-/#";
			var style = node.style;
			style.position = "absolute";
			style.left = "-10000px";
			style.top = "-10000px";
			style.fontSize = "300px";
			style.fontFamily = "sans-serif";
			style.fontVariant = "normal";
			style.fontStyle = "normal";
			style.fontWeight = "normal";
			style.letterSpacing = "0";
			window.document.body.appendChild(node);
			var width = node.offsetWidth;
			style.fontFamily = "'" + font + "', sans-serif";
			var interval = null;
			var found = false;
			var checkFont = function() {
				if(node.offsetWidth != width) {
					if(!found) {
						found = true;
						return false;
					}
					if(interval != null) window.clearInterval(interval);
					node.parentNode.removeChild(node);
					node = null;
					promise.complete(_g);
					return true;
				}
				return false;
			};
			if(!checkFont()) interval = window.setInterval(checkFont,50);
		}
		return promise.future;
	}
	,__setSize: function(size) {
	}
	,get_ascender: function() {
		return 0;
	}
	,get_descender: function() {
		return 0;
	}
	,get_height: function() {
		return 0;
	}
	,get_numGlyphs: function() {
		return 0;
	}
	,get_underlinePosition: function() {
		return 0;
	}
	,get_underlineThickness: function() {
		return 0;
	}
	,get_unitsPerEM: function() {
		return 0;
	}
	,__class__: lime_text_Font
	,__properties__: {get_unitsPerEM:"get_unitsPerEM",get_underlineThickness:"get_underlineThickness",get_underlinePosition:"get_underlinePosition",get_numGlyphs:"get_numGlyphs",get_height:"get_height",get_descender:"get_descender",get_ascender:"get_ascender"}
};
var _$_$ASSET_$_$font_$04b_$03_$_$_$ttf = function() {
	lime_text_Font.call(this);
	this.name = "04b03";
};
$hxClasses["__ASSET__font_04b_03___ttf"] = _$_$ASSET_$_$font_$04b_$03_$_$_$ttf;
_$_$ASSET_$_$font_$04b_$03_$_$_$ttf.__name__ = ["__ASSET__font_04b_03___ttf"];
_$_$ASSET_$_$font_$04b_$03_$_$_$ttf.__super__ = lime_text_Font;
_$_$ASSET_$_$font_$04b_$03_$_$_$ttf.prototype = $extend(lime_text_Font.prototype,{
	__class__: _$_$ASSET_$_$font_$04b_$03_$_$_$ttf
});
var _$_$ASSET_$_$font_$orkney_$regular_$otf = function() {
	lime_text_Font.call(this);
	this.name = "Orkney";
};
$hxClasses["__ASSET__font_orkney_regular_otf"] = _$_$ASSET_$_$font_$orkney_$regular_$otf;
_$_$ASSET_$_$font_$orkney_$regular_$otf.__name__ = ["__ASSET__font_orkney_regular_otf"];
_$_$ASSET_$_$font_$orkney_$regular_$otf.__super__ = lime_text_Font;
_$_$ASSET_$_$font_$orkney_$regular_$otf.prototype = $extend(lime_text_Font.prototype,{
	__class__: _$_$ASSET_$_$font_$orkney_$regular_$otf
});
var openfl_text_Font = function(name) {
	lime_text_Font.call(this,name);
};
$hxClasses["openfl.text.Font"] = openfl_text_Font;
openfl_text_Font.__name__ = ["openfl","text","Font"];
openfl_text_Font.enumerateFonts = function(enumerateDeviceFonts) {
	if(enumerateDeviceFonts == null) enumerateDeviceFonts = false;
	return openfl_text_Font.__registeredFonts;
};
openfl_text_Font.fromBytes = function(bytes) {
	var font = new openfl_text_Font();
	font.__fromBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytes(bytes));
	return font;
};
openfl_text_Font.fromFile = function(path) {
	var font = new openfl_text_Font();
	font.__fromFile(path);
	return font;
};
openfl_text_Font.registerFont = function(font) {
	var instance;
	instance = js_Boot.__cast(Type.createInstance(font,[]) , openfl_text_Font);
	if(instance != null) openfl_text_Font.__registeredFonts.push(instance);
};
openfl_text_Font.__fromLimeFont = function(value) {
	var font = new openfl_text_Font();
	font.name = value.name;
	font.src = value.src;
	return font;
};
openfl_text_Font.__super__ = lime_text_Font;
openfl_text_Font.prototype = $extend(lime_text_Font.prototype,{
	fontStyle: null
	,fontType: null
	,get_fontName: function() {
		return this.name;
	}
	,set_fontName: function(value) {
		return this.name = value;
	}
	,__class__: openfl_text_Font
	,__properties__: $extend(lime_text_Font.prototype.__properties__,{set_fontName:"set_fontName",get_fontName:"get_fontName"})
});
var _$_$ASSET_$_$OPENFL_$_$font_$04b_$03_$_$_$ttf = function() {
	var font = new _$_$ASSET_$_$font_$04b_$03_$_$_$ttf();
	this.src = font.src;
	this.name = font.name;
	openfl_text_Font.call(this);
};
$hxClasses["__ASSET__OPENFL__font_04b_03___ttf"] = _$_$ASSET_$_$OPENFL_$_$font_$04b_$03_$_$_$ttf;
_$_$ASSET_$_$OPENFL_$_$font_$04b_$03_$_$_$ttf.__name__ = ["__ASSET__OPENFL__font_04b_03___ttf"];
_$_$ASSET_$_$OPENFL_$_$font_$04b_$03_$_$_$ttf.__super__ = openfl_text_Font;
_$_$ASSET_$_$OPENFL_$_$font_$04b_$03_$_$_$ttf.prototype = $extend(openfl_text_Font.prototype,{
	__class__: _$_$ASSET_$_$OPENFL_$_$font_$04b_$03_$_$_$ttf
});
var _$_$ASSET_$_$OPENFL_$_$font_$orkney_$regular_$otf = function() {
	var font = new _$_$ASSET_$_$font_$orkney_$regular_$otf();
	this.src = font.src;
	this.name = font.name;
	openfl_text_Font.call(this);
};
$hxClasses["__ASSET__OPENFL__font_orkney_regular_otf"] = _$_$ASSET_$_$OPENFL_$_$font_$orkney_$regular_$otf;
_$_$ASSET_$_$OPENFL_$_$font_$orkney_$regular_$otf.__name__ = ["__ASSET__OPENFL__font_orkney_regular_otf"];
_$_$ASSET_$_$OPENFL_$_$font_$orkney_$regular_$otf.__super__ = openfl_text_Font;
_$_$ASSET_$_$OPENFL_$_$font_$orkney_$regular_$otf.prototype = $extend(openfl_text_Font.prototype,{
	__class__: _$_$ASSET_$_$OPENFL_$_$font_$orkney_$regular_$otf
});
var EReg = function(r,opt) {
	opt = opt.split("u").join("");
	this.r = new RegExp(r,opt);
};
$hxClasses["EReg"] = EReg;
EReg.__name__ = ["EReg"];
EReg.prototype = {
	r: null
	,match: function(s) {
		if(this.r.global) this.r.lastIndex = 0;
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) return this.r.m[n]; else throw new js__$Boot_HaxeError("EReg::matched");
	}
	,matchedPos: function() {
		if(this.r.m == null) throw new js__$Boot_HaxeError("No string matched");
		return { pos : this.r.m.index, len : this.r.m[0].length};
	}
	,matchSub: function(s,pos,len) {
		if(len == null) len = -1;
		if(this.r.global) {
			this.r.lastIndex = pos;
			this.r.m = this.r.exec(len < 0?s:HxOverrides.substr(s,0,pos + len));
			var b = this.r.m != null;
			if(b) this.r.s = s;
			return b;
		} else {
			var b1 = this.match(len < 0?HxOverrides.substr(s,pos,null):HxOverrides.substr(s,pos,len));
			if(b1) {
				this.r.s = s;
				this.r.m.index += pos;
			}
			return b1;
		}
	}
	,replace: function(s,by) {
		return s.replace(this.r,by);
	}
	,__class__: EReg
};
var com_haxepunk_Tweener = function() {
	this.active = true;
	this.autoClear = false;
};
$hxClasses["com.haxepunk.Tweener"] = com_haxepunk_Tweener;
com_haxepunk_Tweener.__name__ = ["com","haxepunk","Tweener"];
com_haxepunk_Tweener.prototype = {
	active: null
	,autoClear: null
	,update: function() {
	}
	,addTween: function(t,start) {
		if(start == null) start = false;
		var ft = t;
		if(ft._parent != null) throw new js__$Boot_HaxeError("Cannot add a Tween object more than once.");
		ft._parent = this;
		ft._next = this._tween;
		var friendTween = this._tween;
		if(this._tween != null) friendTween._prev = t;
		this._tween = t;
		if(start) this._tween.start(); else this._tween.active = false;
		return t;
	}
	,removeTween: function(t) {
		var ft = t;
		if(ft._parent != this) throw new js__$Boot_HaxeError("Core object does not contain Tween.");
		if(ft._next != null) ft._next._prev = ft._prev;
		if(ft._prev != null) ft._prev._next = ft._next; else if(ft._next == null) this._tween = null; else this._tween = js_Boot.__cast(ft._next , com_haxepunk_Tween);
		ft._next = ft._prev = null;
		ft._parent = null;
		t.active = false;
		return t;
	}
	,clearTweens: function() {
		var t;
		var ft = this._tween;
		var fn;
		while(ft != null) {
			fn = ft._next;
			this.removeTween(js_Boot.__cast(ft , com_haxepunk_Tween));
			ft = fn;
		}
	}
	,updateTweens: function() {
		var t;
		var ft = this._tween;
		while(ft != null) {
			t = js_Boot.__cast(ft , com_haxepunk_Tween);
			if(t.active) {
				t.update();
				if(ft._finish) ft.finish();
			}
			ft = ft._next;
		}
	}
	,get_hasTween: function() {
		return this._tween != null;
	}
	,_tween: null
	,__class__: com_haxepunk_Tweener
	,__properties__: {get_hasTween:"get_hasTween"}
};
var com_haxepunk_Scene = function() {
	this._drawn = false;
	this.height = 0;
	this.width = 0;
	this.alpha = 1;
	this.color = null;
	com_haxepunk_Tweener.call(this);
	this.visible = true;
	this.camera = new openfl_geom_Point();
	this.sprite = new com_haxepunk_graphics_atlas_SceneSprite(this);
	this._layerList = [];
	this._add = [];
	this._remove = [];
	this._recycle = [];
	this._update = new List();
	this._layerDisplay = new haxe_ds_IntMap();
	this._layers = new haxe_ds_IntMap();
	this._types = new haxe_ds_StringMap();
	this._classCount = new haxe_ds_StringMap();
	this._recycled = new haxe_ds_StringMap();
	this._entityNames = new haxe_ds_StringMap();
};
$hxClasses["com.haxepunk.Scene"] = com_haxepunk_Scene;
com_haxepunk_Scene.__name__ = ["com","haxepunk","Scene"];
com_haxepunk_Scene.squareRects = function(x1,y1,w1,h1,x2,y2,w2,h2) {
	if(x1 < x2 + w2 && x2 < x1 + w1) {
		if(y1 < y2 + h2 && y2 < y1 + h1) return 0;
		if(y1 > y2) return (y1 - (y2 + h2)) * (y1 - (y2 + h2));
		return (y2 - (y1 + h1)) * (y2 - (y1 + h1));
	}
	if(y1 < y2 + h2 && y2 < y1 + h1) {
		if(x1 > x2) return (x1 - (x2 + w2)) * (x1 - (x2 + w2));
		return (x2 - (x1 + w1)) * (x2 - (x1 + w1));
	}
	if(x1 > x2) {
		if(y1 > y2) return com_haxepunk_HXP.distanceSquared(x2 + w2,y2 + h2,x1,y1);
		return com_haxepunk_HXP.distanceSquared(x2 + w2,y2,x1,y1 + h1);
	}
	if(y1 > y2) return com_haxepunk_HXP.distanceSquared(x2,y2 + h2,x1 + w1,y1);
	return com_haxepunk_HXP.distanceSquared(x2,y2,x1 + w1,y1 + h1);
};
com_haxepunk_Scene.squarePointRect = function(px,py,rx,ry,rw,rh) {
	if(px >= rx && px <= rx + rw) {
		if(py >= ry && py <= ry + rh) return 0;
		if(py > ry) return (py - (ry + rh)) * (py - (ry + rh));
		return (ry - py) * (ry - py);
	}
	if(py >= ry && py <= ry + rh) {
		if(px > rx) return (px - (rx + rw)) * (px - (rx + rw));
		return (rx - px) * (rx - px);
	}
	if(px > rx) {
		if(py > ry) return com_haxepunk_HXP.distanceSquared(rx + rw,ry + rh,px,py);
		return com_haxepunk_HXP.distanceSquared(rx + rw,ry,px,py);
	}
	if(py > ry) return com_haxepunk_HXP.distanceSquared(rx,ry + rh,px,py);
	return (px - rx) * (px - rx) + (py - ry) * (py - ry);
};
com_haxepunk_Scene.__super__ = com_haxepunk_Tweener;
com_haxepunk_Scene.prototype = $extend(com_haxepunk_Tweener.prototype,{
	visible: null
	,color: null
	,alpha: null
	,camera: null
	,width: null
	,height: null
	,begin: function() {
	}
	,end: function() {
	}
	,resize: function() {
		if(this.width != com_haxepunk_HXP.width || this.height != com_haxepunk_HXP.height) {
			this.width = com_haxepunk_HXP.width;
			this.height = com_haxepunk_HXP.height;
			var _g_head = this._update.h;
			var _g_val = null;
			while(_g_head != null) {
				var e;
				e = (function($this) {
					var $r;
					_g_val = _g_head[0];
					_g_head = _g_head[1];
					$r = _g_val;
					return $r;
				}(this));
				e.resized();
			}
		}
	}
	,focusGained: function() {
	}
	,focusLost: function() {
	}
	,update: function() {
		var _g_head = this._update.h;
		var _g_val = null;
		while(_g_head != null) {
			var e;
			e = (function($this) {
				var $r;
				_g_val = _g_head[0];
				_g_head = _g_head[1];
				$r = _g_val;
				return $r;
			}(this));
			if(e.active) {
				if(e.get_hasTween()) e.updateTweens();
				e.update();
			}
			if(e._graphic != null && e._graphic.active) e._graphic.update();
		}
		if(com_haxepunk_HXP.cursor != null && com_haxepunk_HXP.cursor.active) com_haxepunk_HXP.cursor.update();
	}
	,showLayer: function(layer,show) {
		if(show == null) show = true;
		this._layerDisplay.h[layer] = show;
	}
	,layerVisible: function(layer) {
		return !this._layerDisplay.h.hasOwnProperty(layer) || this._layerDisplay.h[layer];
	}
	,layerSort: function(a,b) {
		return b - a;
	}
	,render: function() {
		this.sprite.startFrame();
		if(com_haxepunk_HXP.renderMode == com_haxepunk_RenderMode.HARDWARE) com_haxepunk_graphics_atlas_AtlasData._scene = this;
		var _g = 0;
		var _g1 = this._layerList;
		while(_g < _g1.length) {
			var layer = _g1[_g];
			++_g;
			if(!(!this._layerDisplay.h.hasOwnProperty(layer) || this._layerDisplay.h[layer])) continue;
			var _g2 = this._layers.h[layer].iterator();
			while(_g2.head != null) {
				var e;
				e = (function($this) {
					var $r;
					_g2.val = _g2.head[0];
					_g2.head = _g2.head[1];
					$r = _g2.val;
					return $r;
				}(this));
				if(e.visible) e.render();
			}
		}
		if(com_haxepunk_HXP.cursor != null && com_haxepunk_HXP.cursor.visible) com_haxepunk_HXP.cursor.render();
		this.sprite.endFrame();
	}
	,mouseX: null
	,get_mouseX: function() {
		return Std["int"](com_haxepunk_HXP.screen.get_mouseX() + this.camera.x);
	}
	,mouseY: null
	,get_mouseY: function() {
		return Std["int"](com_haxepunk_HXP.screen.get_mouseY() + this.camera.y);
	}
	,sprite: null
	,add: function(e) {
		this._add[this._add.length] = e;
		return e;
	}
	,remove: function(e) {
		this._remove[this._remove.length] = e;
		return e;
	}
	,removeAll: function() {
		var _g_head = this._update.h;
		var _g_val = null;
		while(_g_head != null) {
			var e;
			e = (function($this) {
				var $r;
				_g_val = _g_head[0];
				_g_head = _g_head[1];
				$r = _g_val;
				return $r;
			}(this));
			this._remove[this._remove.length] = e;
		}
	}
	,addList: function(list) {
		var $it0 = $iterator(list)();
		while( $it0.hasNext() ) {
			var e = $it0.next();
			this.add(e);
		}
	}
	,removeList: function(list) {
		var $it0 = $iterator(list)();
		while( $it0.hasNext() ) {
			var e = $it0.next();
			this.remove(e);
		}
	}
	,addGraphic: function(graphic,layer,x,y) {
		if(y == null) y = 0;
		if(x == null) x = 0;
		if(layer == null) layer = 0;
		var e = new com_haxepunk_Entity(x,y,graphic);
		e.set_layer(layer);
		e.active = false;
		return this.add(e);
	}
	,addMask: function(mask,type,x,y) {
		if(y == null) y = 0;
		if(x == null) x = 0;
		var e = new com_haxepunk_Entity(x,y,null,mask);
		if(type != "") e.set_type(type);
		e.active = e.visible = false;
		return this.add(e);
	}
	,create: function(classType,addToScene,constructorsArgs) {
		if(addToScene == null) addToScene = true;
		var className = Type.getClassName(classType);
		var e = this._recycled.get(className);
		if(e != null) {
			this._recycled.set(className,e._recycleNext);
			e._recycleNext = null;
		} else if(constructorsArgs != null) e = Type.createInstance(classType,constructorsArgs); else e = Type.createInstance(classType,[]);
		return addToScene?this.add(e):e;
	}
	,recycle: function(e) {
		this._recycle[this._recycle.length] = e;
		return this.remove(e);
	}
	,clearRecycled: function(classType) {
		var className = Type.getClassName(classType);
		var e = this._recycled.get(className);
		var n;
		while(e != null) {
			n = e._recycleNext;
			e._recycleNext = null;
			e = n;
		}
		this._recycled.remove(className);
	}
	,clearRecycledAll: function() {
		var e;
		var $it0 = this._recycled.iterator();
		while( $it0.hasNext() ) {
			var e1 = $it0.next();
			this.clearRecycled(e1 == null?null:js_Boot.getClass(e1));
		}
	}
	,bringToFront: function(e) {
		if(e._scene != this) return false;
		var list = this._layers.h[e._layer];
		list.remove(e);
		list.push(e);
		return true;
	}
	,sendToBack: function(e) {
		if(e._scene != this) return false;
		var list = this._layers.h[e._layer];
		list.remove(e);
		list.add(e);
		return true;
	}
	,bringForward: function(e) {
		if(e._scene != this) return false;
		return true;
	}
	,sendBackward: function(e) {
		if(e._scene != this) return false;
		return true;
	}
	,isAtFront: function(e) {
		return e == this._layers.h[e._layer].first();
	}
	,isAtBack: function(e) {
		return e == this._layers.h[e._layer].last();
	}
	,collideRect: function(type,rX,rY,rWidth,rHeight) {
		if(this._types.exists(type)) {
			var _g = this._types.get(type).iterator();
			while(_g.head != null) {
				var e;
				e = (function($this) {
					var $r;
					_g.val = _g.head[0];
					_g.head = _g.head[1];
					$r = _g.val;
					return $r;
				}(this));
				if(e.collidable && e.collideRect(e.get_x(),e.get_y(),rX,rY,rWidth,rHeight)) return e;
			}
		}
		return null;
	}
	,collidePoint: function(type,pX,pY) {
		var result = null;
		if(this._types.exists(type)) {
			var _g = this._types.get(type).iterator();
			while(_g.head != null) {
				var e;
				e = (function($this) {
					var $r;
					_g.val = _g.head[0];
					_g.head = _g.head[1];
					$r = _g.val;
					return $r;
				}(this));
				if(e.collidable && e.collidePoint(e.get_x(),e.get_y(),pX,pY)) {
					if(result == null) result = e; else if(e._layer < result._layer) result = e;
				}
			}
		}
		return result;
	}
	,collideLine: function(type,fromX,fromY,toX,toY,precision,p) {
		if(precision == null) precision = 1;
		if(precision < 1) precision = 1;
		if(Math.sqrt((toX - fromX) * (toX - fromX) + (toY - fromY) * (toY - fromY)) < precision) {
			if(p != null) {
				if(fromX == toX && fromY == toY) {
					p.x = toX;
					p.y = toY;
					return this.collidePoint(type,toX,toY);
				}
				return this.collideLine(type,fromX,fromY,toX,toY,1,p);
			} else return this.collidePoint(type,fromX,toY);
		}
		var xDelta = Std["int"](Math.abs(toX - fromX));
		var yDelta = Std["int"](Math.abs(toY - fromY));
		var xSign;
		if(toX > fromX) xSign = precision; else xSign = -precision;
		var ySign;
		if(toY > fromY) ySign = precision; else ySign = -precision;
		var x = fromX;
		var y = fromY;
		var e;
		if(xDelta > yDelta) {
			ySign *= yDelta / xDelta;
			if(xSign > 0) while(x < toX) {
				if((e = this.collidePoint(type,x,y)) != null) {
					if(p == null) return e;
					if(precision < 2) {
						p.x = x - xSign;
						p.y = y - ySign;
						return e;
					}
					return this.collideLine(type,x - xSign | 0,y - ySign | 0,toX,toY,1,p);
				}
				x += xSign;
				y += ySign;
			} else while(x > toX) {
				if((e = this.collidePoint(type,x,y)) != null) {
					if(p == null) return e;
					if(precision < 2) {
						p.x = x - xSign;
						p.y = y - ySign;
						return e;
					}
					return this.collideLine(type,x - xSign | 0,y - ySign | 0,toX,toY,1,p);
				}
				x += xSign;
				y += ySign;
			}
		} else {
			xSign *= xDelta / yDelta;
			if(ySign > 0) while(y < toY) {
				if((e = this.collidePoint(type,x,y)) != null) {
					if(p == null) return e;
					if(precision < 2) {
						p.x = x - xSign;
						p.y = y - ySign;
						return e;
					}
					return this.collideLine(type,x - xSign | 0,y - ySign | 0,toX,toY,1,p);
				}
				x += xSign;
				y += ySign;
			} else while(y > toY) {
				if((e = this.collidePoint(type,x,y)) != null) {
					if(p == null) return e;
					if(precision < 2) {
						p.x = x - xSign;
						p.y = y - ySign;
						return e;
					}
					return this.collideLine(type,x - xSign | 0,y - ySign | 0,toX,toY,1,p);
				}
				x += xSign;
				y += ySign;
			}
		}
		if(precision > 1) {
			if(p == null) return this.collidePoint(type,toX,toY);
			if(this.collidePoint(type,toX,toY) != null) return this.collideLine(type,x - xSign | 0,y - ySign | 0,toX,toY,1,p);
		}
		if(p != null) {
			p.x = toX;
			p.y = toY;
		}
		return null;
	}
	,collideRectInto: function(type,rX,rY,rWidth,rHeight,into) {
		var n = into.length;
		if(this._types.exists(type)) {
			var _g = this._types.get(type).iterator();
			while(_g.head != null) {
				var e;
				e = (function($this) {
					var $r;
					_g.val = _g.head[0];
					_g.head = _g.head[1];
					$r = _g.val;
					return $r;
				}(this));
				if(e.collidable && e.collideRect(e.get_x(),e.get_y(),rX,rY,rWidth,rHeight)) into[n++] = e;
			}
		}
	}
	,collideCircleInto: function(type,circleX,circleY,radius,into) {
		if(!this._types.exists(type)) return;
		var n = into.length;
		radius *= radius;
		var _g = this._types.get(type).iterator();
		while(_g.head != null) {
			var e;
			e = (function($this) {
				var $r;
				_g.val = _g.head[0];
				_g.head = _g.head[1];
				$r = _g.val;
				return $r;
			}(this));
			if(com_haxepunk_HXP.distanceSquared(circleX,circleY,e.get_x(),e.get_y()) < radius) into[n++] = e;
		}
	}
	,collidePointInto: function(type,pX,pY,into) {
		if(!this._types.exists(type)) return;
		var n = into.length;
		var _g = this._types.get(type).iterator();
		while(_g.head != null) {
			var e;
			e = (function($this) {
				var $r;
				_g.val = _g.head[0];
				_g.head = _g.head[1];
				$r = _g.val;
				return $r;
			}(this));
			if(e.collidable && e.collidePoint(e.get_x(),e.get_y(),pX,pY)) into[n++] = e;
		}
	}
	,nearestToRect: function(type,x,y,width,height) {
		if(!this._types.exists(type)) return null;
		var nearDist = 179 * Math.pow(10,306);
		var near = null;
		var dist;
		var _g = this._types.get(type).iterator();
		while(_g.head != null) {
			var e;
			e = (function($this) {
				var $r;
				_g.val = _g.head[0];
				_g.head = _g.head[1];
				$r = _g.val;
				return $r;
			}(this));
			dist = com_haxepunk_Scene.squareRects(x,y,width,height,e.get_x() - e.originX,e.get_y() - e.originY,e.get_width(),e.get_height());
			if(dist < nearDist) {
				nearDist = dist;
				near = e;
			}
		}
		return near;
	}
	,nearestToEntity: function(type,e,useHitboxes) {
		if(useHitboxes == null) useHitboxes = false;
		if(!this._types.exists(type)) return null;
		if(useHitboxes) return this.nearestToRect(type,e.get_x() - e.originX,e.get_y() - e.originY,e.get_width(),e.get_height());
		var nearDist = 179 * Math.pow(10,306);
		var near = null;
		var dist;
		var x = e.get_x() - e.originX;
		var y = e.get_y() - e.originY;
		var _g = this._types.get(type).iterator();
		while(_g.head != null) {
			var n;
			n = (function($this) {
				var $r;
				_g.val = _g.head[0];
				_g.head = _g.head[1];
				$r = _g.val;
				return $r;
			}(this));
			dist = (x - n.get_x()) * (x - n.get_x()) + (y - n.get_y()) * (y - n.get_y());
			if(dist < nearDist) {
				nearDist = dist;
				near = n;
			}
		}
		return near;
	}
	,nearestToClass: function(type,e,classType,useHitboxes) {
		if(useHitboxes == null) useHitboxes = false;
		if(!this._types.exists(type)) return null;
		if(useHitboxes) return this.nearestToRect(type,e.get_x() - e.originX,e.get_y() - e.originY,e.get_width(),e.get_height());
		var nearDist = 179 * Math.pow(10,306);
		var near = null;
		var dist;
		var x = e.get_x() - e.originX;
		var y = e.get_y() - e.originY;
		var _g = this._types.get(type).iterator();
		while(_g.head != null) {
			var n;
			n = (function($this) {
				var $r;
				_g.val = _g.head[0];
				_g.head = _g.head[1];
				$r = _g.val;
				return $r;
			}(this));
			dist = (x - n.get_x()) * (x - n.get_x()) + (y - n.get_y()) * (y - n.get_y());
			if(dist < nearDist && js_Boot.__instanceof(e,classType)) {
				nearDist = dist;
				near = n;
			}
		}
		return near;
	}
	,nearestToPoint: function(type,x,y,useHitboxes) {
		if(useHitboxes == null) useHitboxes = false;
		if(!this._types.exists(type)) return null;
		var nearDist = 179 * Math.pow(10,306);
		var near = null;
		var dist;
		if(useHitboxes) {
			var _g = this._types.get(type).iterator();
			while(_g.head != null) {
				var n;
				n = (function($this) {
					var $r;
					_g.val = _g.head[0];
					_g.head = _g.head[1];
					$r = _g.val;
					return $r;
				}(this));
				dist = com_haxepunk_Scene.squarePointRect(x,y,n.get_x() - n.originX,n.get_y() - n.originY,n.get_width(),n.get_height());
				if(dist < nearDist) {
					nearDist = dist;
					near = n;
				}
			}
		} else {
			var _g1 = this._types.get(type).iterator();
			while(_g1.head != null) {
				var n1;
				n1 = (function($this) {
					var $r;
					_g1.val = _g1.head[0];
					_g1.head = _g1.head[1];
					$r = _g1.val;
					return $r;
				}(this));
				dist = (x - n1.get_x()) * (x - n1.get_x()) + (y - n1.get_y()) * (y - n1.get_y());
				if(dist < nearDist) {
					nearDist = dist;
					near = n1;
				}
			}
		}
		return near;
	}
	,get_count: function() {
		return this._update.length;
	}
	,typeCount: function(type) {
		if(this._types.exists(type)) return this._types.get(type).length; else return 0;
	}
	,classCount: function(c) {
		if(this._classCount.exists(c)) return this._classCount.get(c); else return 0;
	}
	,layerCount: function(layer) {
		if(this._layers.h.hasOwnProperty(layer)) return this._layers.h[layer].length; else return 0;
	}
	,first: null
	,get_first: function() {
		return this._update.first();
	}
	,layers: null
	,get_layers: function() {
		return this._layerList.length;
	}
	,entitiesForType: function(type) {
		if(this._types.exists(type)) return this._types.get(type); else return null;
	}
	,classFirst: function(c) {
		var _g_head = this._update.h;
		var _g_val = null;
		while(_g_head != null) {
			var e;
			e = (function($this) {
				var $r;
				_g_val = _g_head[0];
				_g_head = _g_head[1];
				$r = _g_val;
				return $r;
			}(this));
			if(js_Boot.__instanceof(e,c)) return e;
		}
		return null;
	}
	,layerFirst: function(layer) {
		if(this._layers.h.hasOwnProperty(layer)) return this._layers.h[layer].first(); else return null;
	}
	,layerLast: function(layer) {
		if(this._layers.h.hasOwnProperty(layer)) return this._layers.h[layer].last(); else return null;
	}
	,farthest: null
	,get_farthest: function() {
		if(this._layerList.length == 0) return null;
		return this._layers.h[this._layerList[this._layerList.length - 1]].last();
	}
	,nearest: null
	,get_nearest: function() {
		if(this._layerList.length == 0) return null;
		return this._layers.h[this._layerList[0]].first();
	}
	,layerFarthest: null
	,get_layerFarthest: function() {
		if(this._layerList.length == 0) return 0;
		return this._layerList[this._layerList.length - 1];
	}
	,layerNearest: null
	,get_layerNearest: function() {
		if(this._layerList.length == 0) return 0;
		return this._layerList[0];
	}
	,uniqueTypes: null
	,get_uniqueTypes: function() {
		var i = 0;
		var $it0 = this._types.iterator();
		while( $it0.hasNext() ) {
			var type = $it0.next();
			i++;
		}
		return i;
	}
	,getType: function(type,into) {
		if(!this._types.exists(type)) return;
		var n = into.length;
		var _g = this._types.get(type).iterator();
		while(_g.head != null) {
			var e;
			e = (function($this) {
				var $r;
				_g.val = _g.head[0];
				_g.head = _g.head[1];
				$r = _g.val;
				return $r;
			}(this));
			into[n++] = e;
		}
	}
	,getClass: function(c,into) {
		var n = into.length;
		var _g_head = this._update.h;
		var _g_val = null;
		while(_g_head != null) {
			var e;
			e = (function($this) {
				var $r;
				_g_val = _g_head[0];
				_g_head = _g_head[1];
				$r = _g_val;
				return $r;
			}(this));
			if(js_Boot.__instanceof(e,c)) into[n++] = e;
		}
	}
	,getLayer: function(layer,into) {
		var n = into.length;
		var _g = this._layers.h[layer].iterator();
		while(_g.head != null) {
			var e;
			e = (function($this) {
				var $r;
				_g.val = _g.head[0];
				_g.head = _g.head[1];
				$r = _g.val;
				return $r;
			}(this));
			into[n++] = e;
		}
	}
	,getAll: function(into) {
		var n = into.length;
		var _g_head = this._update.h;
		var _g_val = null;
		while(_g_head != null) {
			var e;
			e = (function($this) {
				var $r;
				_g_val = _g_head[0];
				_g_head = _g_head[1];
				$r = _g_val;
				return $r;
			}(this));
			into[n++] = e;
		}
	}
	,getInstance: function(name) {
		return this._entityNames.get(name);
	}
	,updateLists: function(shouldAdd) {
		if(shouldAdd == null) shouldAdd = true;
		var e;
		if(com_haxepunk_HXP.cursor != null) com_haxepunk_HXP.cursor._scene = this;
		if(this._remove.length > 0) {
			var _g = 0;
			var _g1 = this._remove;
			while(_g < _g1.length) {
				var e1 = _g1[_g];
				++_g;
				if(e1._scene == null) {
					var idx = HxOverrides.indexOf(this._add,e1,0);
					if(idx >= 0) this._add.splice(idx,1);
					continue;
				}
				if(e1._scene != this) continue;
				e1.removed();
				e1._scene = null;
				this.removeUpdate(e1);
				this.removeRender(e1);
				if(e1._type != "") this.removeType(e1);
				if(e1._name != "") this._entityNames.remove(e1._name);
				if(e1.autoClear && e1.get_hasTween()) e1.clearTweens();
			}
			this._remove.length = 0;
		}
		if(shouldAdd && this._add.length > 0) {
			var _g2 = 0;
			var _g11 = this._add;
			while(_g2 < _g11.length) {
				var e2 = _g11[_g2];
				++_g2;
				if(e2._scene != null) continue;
				e2._scene = this;
				this.addUpdate(e2);
				this.addRender(e2);
				if(e2._type != "") this.addType(e2);
				if(e2._name != "") this._entityNames.set(e2._name,e2);
				e2.added();
			}
			this._add.length = 0;
		}
		if(this._recycle.length > 0) {
			var _g3 = 0;
			var _g12 = this._recycle;
			while(_g3 < _g12.length) {
				var e3 = _g12[_g3];
				++_g3;
				if(e3._scene != null || e3._recycleNext != null) continue;
				e3._recycleNext = this._recycled.get(e3._class);
				this._recycled.set(e3._class,e3);
			}
			this._recycle.length = 0;
		}
	}
	,addUpdate: function(e) {
		this._update.add(e);
		if(this._classCount.get(e._class) != 0) this._classCount.set(e._class,0);
		var value = this._classCount.get(e._class) + 1;
		this._classCount.set(e._class,value);
	}
	,removeUpdate: function(e) {
		this._update.remove(e);
		var value = this._classCount.get(e._class) - 1;
		this._classCount.set(e._class,value);
	}
	,addRender: function(e) {
		var list;
		if(this._layers.h.hasOwnProperty(e._layer)) list = this._layers.h[e._layer]; else {
			list = new List();
			this._layers.h[e._layer] = list;
			if(this._layerList.length == 0) this._layerList[0] = e._layer; else com_haxepunk_HXP.insertSortedKey(this._layerList,e._layer,$bind(this,this.layerSort));
		}
		list.add(e);
	}
	,removeRender: function(e) {
		var list = this._layers.h[e._layer];
		list.remove(e);
		if(list.length == 0) {
			HxOverrides.remove(this._layerList,e._layer);
			this._layers.remove(e._layer);
		}
	}
	,addType: function(e) {
		var list;
		if(this._types.exists(e._type)) list = this._types.get(e._type); else {
			list = new List();
			this._types.set(e._type,list);
		}
		list.push(e);
	}
	,removeType: function(e) {
		if(!this._types.exists(e._type)) return;
		var list = this._types.get(e._type);
		list.remove(e);
		if(list.length == 0) this._types.remove(e._type);
	}
	,registerName: function(e) {
		this._entityNames.set(e._name,e);
	}
	,unregisterName: function(e) {
		this._entityNames.remove(e._name);
	}
	,_add: null
	,_remove: null
	,_recycle: null
	,_update: null
	,_layerList: null
	,_layerDisplay: null
	,_layers: null
	,_classCount: null
	,_types: null
	,_recycled: null
	,_entityNames: null
	,_drawn: null
	,__class__: com_haxepunk_Scene
	,__properties__: $extend(com_haxepunk_Tweener.prototype.__properties__,{get_uniqueTypes:"get_uniqueTypes",get_layerNearest:"get_layerNearest",get_layerFarthest:"get_layerFarthest",get_nearest:"get_nearest",get_farthest:"get_farthest",get_layers:"get_layers",get_first:"get_first",get_count:"get_count",get_mouseY:"get_mouseY",get_mouseX:"get_mouseX"})
});
var GameScene = function(g) {
	com_haxepunk_Scene.call(this);
	this.game = g;
	this.hudState = _$HUDState.HUDSTATE_DEFAULT;
	this.controlPressed = false;
	com_haxepunk_utils_Input.define("ctrl",[17]);
	com_haxepunk_utils_Input.define("up",[38,87,104]);
	com_haxepunk_utils_Input.define("down",[40,88,98]);
	com_haxepunk_utils_Input.define("left",[37,65,100]);
	com_haxepunk_utils_Input.define("right",[39,68,102]);
	com_haxepunk_utils_Input.define("upleft",[81,103]);
	com_haxepunk_utils_Input.define("upright",[69,105]);
	com_haxepunk_utils_Input.define("downleft",[90,97]);
	com_haxepunk_utils_Input.define("downright",[67,99]);
	com_haxepunk_utils_Input.define("pageup",[33]);
	com_haxepunk_utils_Input.define("pagedown",[34]);
	com_haxepunk_utils_Input.define("home",[36]);
	com_haxepunk_utils_Input.define("end",[35]);
	com_haxepunk_utils_Input.define("enter",[13]);
	com_haxepunk_utils_Input.define("action1",[49]);
	com_haxepunk_utils_Input.define("action2",[50]);
	com_haxepunk_utils_Input.define("action3",[51]);
	com_haxepunk_utils_Input.define("action4",[52]);
	com_haxepunk_utils_Input.define("action5",[53]);
	com_haxepunk_utils_Input.define("action6",[54]);
	com_haxepunk_utils_Input.define("action7",[55]);
	com_haxepunk_utils_Input.define("action8",[56]);
	com_haxepunk_utils_Input.define("action9",[57]);
	com_haxepunk_utils_Input.define("action10",[48]);
	com_haxepunk_utils_Input.define("goalsWindow",[112]);
	com_haxepunk_utils_Input.define("inventoryWindow",[113]);
	com_haxepunk_utils_Input.define("skillsWindow",[114]);
	com_haxepunk_utils_Input.define("logWindow",[115]);
	com_haxepunk_utils_Input.define("timelineWindow",[116]);
	com_haxepunk_utils_Input.define("evolutionWindow",[117]);
	com_haxepunk_utils_Input.define("organsWindow",[118]);
	com_haxepunk_utils_Input.define("debugWindow",[120]);
	com_haxepunk_utils_Input.define("exit",[121]);
	com_haxepunk_utils_Input.define("skipTurn",[101]);
	com_haxepunk_utils_Input.define("closeWindow",[27]);
	this._inputState = 0;
};
$hxClasses["GameScene"] = GameScene;
GameScene.__name__ = ["GameScene"];
GameScene.__super__ = com_haxepunk_Scene;
GameScene.prototype = $extend(com_haxepunk_Scene.prototype,{
	game: null
	,area: null
	,region: null
	,mouse: null
	,hud: null
	,hudState: null
	,windows: null
	,entityAtlas: null
	,controlPressed: null
	,_inputState: null
	,begin: function() {
		this.entityAtlas = new com_haxepunk_graphics_atlas_TileAtlas((function($this) {
			var $r;
			var data = com_haxepunk_graphics_atlas_AtlasData.getAtlasDataByName("gfx/entities.png",true);
			$r = data;
			return $r;
		}(this)));
		this.entityAtlas.prepare(Const.TILE_WIDTH,Const.TILE_HEIGHT);
		this.mouse = new entities_MouseEntity(this.game);
		this.add(this.mouse);
		this.hud = new entities_HUD(this.game);
		var _g = new haxe_ds_EnumValueMap();
		var value = new entities_GoalsWindow(this.game);
		_g.set(_$HUDState.HUDSTATE_GOALS,value);
		var value1 = new entities_InventoryWindow(this.game);
		_g.set(_$HUDState.HUDSTATE_INVENTORY,value1);
		var value2 = new entities_SkillsWindow(this.game);
		_g.set(_$HUDState.HUDSTATE_SKILLS,value2);
		var value3 = new entities_EvolutionWindow(this.game);
		_g.set(_$HUDState.HUDSTATE_EVOLUTION,value3);
		var value4 = new entities_OrgansWindow(this.game);
		_g.set(_$HUDState.HUDSTATE_ORGANS,value4);
		var value5 = new entities_TimelineWindow(this.game);
		_g.set(_$HUDState.HUDSTATE_TIMELINE,value5);
		var value6 = new entities_LogWindow(this.game);
		_g.set(_$HUDState.HUDSTATE_LOG,value6);
		var value7 = new entities_DebugWindow(this.game);
		_g.set(_$HUDState.HUDSTATE_DEBUG,value7);
		var value8 = new entities_MessageWindow(this.game);
		_g.set(_$HUDState.HUDSTATE_MESSAGE,value8);
		var value9 = new entities_FinishWindow(this.game);
		_g.set(_$HUDState.HUDSTATE_FINISH,value9);
		this.windows = _g;
		this.area = new AreaView(this);
		this.region = new RegionView(this);
		this.game.init();
	}
	,updateCamera: function() {
		var x = 0.0;
		var y = 0.0;
		var w = 0.0;
		var h = 0.0;
		if(this.game.location == _$LocationType.LOCATION_AREA) {
			x = this.game.playerArea.entity.get_x();
			y = this.game.playerArea.entity.get_y();
			w = this.game.area.width;
			h = this.game.area.height;
		} else if(this.game.location == _$LocationType.LOCATION_REGION) {
			x = this.game.playerRegion.entity.get_x();
			y = this.game.playerRegion.entity.get_y();
			w = this.game.region.width;
			h = this.game.region.height;
		}
		x -= com_haxepunk_HXP.halfWidth;
		y -= com_haxepunk_HXP.halfHeight;
		if(x + com_haxepunk_HXP.windowWidth > Const.TILE_WIDTH * w) x = Const.TILE_WIDTH * w - com_haxepunk_HXP.windowWidth;
		if(y + com_haxepunk_HXP.windowHeight > Const.TILE_HEIGHT * h) y = Const.TILE_HEIGHT * h - com_haxepunk_HXP.windowHeight;
		if(x < 0) x = 0;
		if(y < 0) y = 0;
		com_haxepunk_HXP.camera.x = x;
		com_haxepunk_HXP.camera.y = y;
	}
	,handleInput: function() {
		if(com_haxepunk_utils_Input.released(com_haxepunk_utils__$Input_InputType_$Impl_$.fromRight(186))) {
			this.hud.showConsole();
			return;
		}
		if(com_haxepunk_utils_Input.pressed(com_haxepunk_utils__$Input_InputType_$Impl_$.fromRight(13)) && this.hud._consoleBack.get_visible()) {
			this.hud.runConsoleCommand();
			return;
		}
		if(com_haxepunk_utils_Input.pressed(com_haxepunk_utils__$Input_InputType_$Impl_$.fromLeft("ctrl"))) {
			this.controlPressed = true;
			return;
		} else if(com_haxepunk_utils_Input.released(com_haxepunk_utils__$Input_InputType_$Impl_$.fromLeft("ctrl"))) {
			this.controlPressed = false;
			return;
		}
		if(!this.hud._consoleBack.get_visible()) {
			if(com_haxepunk_utils_Input.pressed(com_haxepunk_utils__$Input_InputType_$Impl_$.fromRight(32))) {
				this.hud.show(false);
				return;
			}
			if(com_haxepunk_utils_Input.released(com_haxepunk_utils__$Input_InputType_$Impl_$.fromRight(32))) {
				this.hud.show(true);
				return;
			}
		}
		if(!this.hud._consoleBack.get_visible()) {
			var ret = this.handleWindows();
			if(!ret) this.handleMovement();
			this.handleActions();
		}
		if(com_haxepunk_utils_Input.pressed(com_haxepunk_utils__$Input_InputType_$Impl_$.fromLeft("exit"))) null;
	}
	,setState: function(vstate) {
		if(this.hudState != _$HUDState.HUDSTATE_DEFAULT) this.windows.get(this.hudState).hide();
		this.hudState = vstate;
		if(this.hudState != _$HUDState.HUDSTATE_DEFAULT) this.windows.get(this.hudState).show();
	}
	,getState: function() {
		return this.hudState;
	}
	,handleWindows: function() {
		if(this.hudState == _$HUDState.HUDSTATE_FINISH && com_haxepunk_utils_Input.pressed(com_haxepunk_utils__$Input_InputType_$Impl_$.fromLeft("closeWindow"))) null;
		if(this.hudState != _$HUDState.HUDSTATE_DEFAULT) {
			var lines = 0;
			if(com_haxepunk_utils_Input.pressed(com_haxepunk_utils__$Input_InputType_$Impl_$.fromLeft("up"))) lines = -1; else if(com_haxepunk_utils_Input.pressed(com_haxepunk_utils__$Input_InputType_$Impl_$.fromLeft("down"))) lines = 1; else if(com_haxepunk_utils_Input.pressed(com_haxepunk_utils__$Input_InputType_$Impl_$.fromLeft("pageup"))) lines = -20; else if(com_haxepunk_utils_Input.pressed(com_haxepunk_utils__$Input_InputType_$Impl_$.fromLeft("pagedown"))) lines = 20;
			if(com_haxepunk_utils_Input.pressed(com_haxepunk_utils__$Input_InputType_$Impl_$.fromLeft("left")) || com_haxepunk_utils_Input.pressed(com_haxepunk_utils__$Input_InputType_$Impl_$.fromLeft("right")) || com_haxepunk_utils_Input.pressed(com_haxepunk_utils__$Input_InputType_$Impl_$.fromLeft("upleft")) || com_haxepunk_utils_Input.pressed(com_haxepunk_utils__$Input_InputType_$Impl_$.fromLeft("upright")) || com_haxepunk_utils_Input.pressed(com_haxepunk_utils__$Input_InputType_$Impl_$.fromLeft("downleft")) || com_haxepunk_utils_Input.pressed(com_haxepunk_utils__$Input_InputType_$Impl_$.fromLeft("downright"))) return true;
			if(lines != 0) {
				this.windows.get(this.hudState).scroll(lines);
				return true;
			}
			if(com_haxepunk_utils_Input.pressed(com_haxepunk_utils__$Input_InputType_$Impl_$.fromLeft("home"))) {
				this.windows.get(this.hudState).scrollToBegin();
				return true;
			}
			if(com_haxepunk_utils_Input.pressed(com_haxepunk_utils__$Input_InputType_$Impl_$.fromLeft("end"))) {
				this.windows.get(this.hudState).scrollToEnd();
				return true;
			}
			if(com_haxepunk_utils_Input.pressed(com_haxepunk_utils__$Input_InputType_$Impl_$.fromLeft("enter")) && this.windows.get(this.hudState).exitByEnter) this.setState(_$HUDState.HUDSTATE_DEFAULT);
			if(com_haxepunk_utils_Input.pressed(com_haxepunk_utils__$Input_InputType_$Impl_$.fromLeft("closeWindow"))) this.setState(_$HUDState.HUDSTATE_DEFAULT);
		}
		var goalsPressed = com_haxepunk_utils_Input.pressed(com_haxepunk_utils__$Input_InputType_$Impl_$.fromLeft("action1")) && this.controlPressed || com_haxepunk_utils_Input.pressed(com_haxepunk_utils__$Input_InputType_$Impl_$.fromLeft("goalsWindow"));
		var inventoryPressed = com_haxepunk_utils_Input.pressed(com_haxepunk_utils__$Input_InputType_$Impl_$.fromLeft("action2")) && this.controlPressed || com_haxepunk_utils_Input.pressed(com_haxepunk_utils__$Input_InputType_$Impl_$.fromLeft("inventoryWindow"));
		var skillsPressed = com_haxepunk_utils_Input.pressed(com_haxepunk_utils__$Input_InputType_$Impl_$.fromLeft("action3")) && this.controlPressed || com_haxepunk_utils_Input.pressed(com_haxepunk_utils__$Input_InputType_$Impl_$.fromLeft("skillsWindow"));
		var logPressed = com_haxepunk_utils_Input.pressed(com_haxepunk_utils__$Input_InputType_$Impl_$.fromLeft("action4")) && this.controlPressed || com_haxepunk_utils_Input.pressed(com_haxepunk_utils__$Input_InputType_$Impl_$.fromLeft("logWindow"));
		var timelinePressed = com_haxepunk_utils_Input.pressed(com_haxepunk_utils__$Input_InputType_$Impl_$.fromLeft("action5")) && this.controlPressed || com_haxepunk_utils_Input.pressed(com_haxepunk_utils__$Input_InputType_$Impl_$.fromLeft("timelineWindow"));
		var evolutionPressed = com_haxepunk_utils_Input.pressed(com_haxepunk_utils__$Input_InputType_$Impl_$.fromLeft("action6")) && this.controlPressed || com_haxepunk_utils_Input.pressed(com_haxepunk_utils__$Input_InputType_$Impl_$.fromLeft("evolutionWindow"));
		var organsPressed = com_haxepunk_utils_Input.pressed(com_haxepunk_utils__$Input_InputType_$Impl_$.fromLeft("action7")) && this.controlPressed || com_haxepunk_utils_Input.pressed(com_haxepunk_utils__$Input_InputType_$Impl_$.fromLeft("organsWindow"));
		if(goalsPressed) this.setState(_$HUDState.HUDSTATE_GOALS); else if(inventoryPressed && this.game.player.state == _$PlayerState.PLR_STATE_HOST && this.game.player.host.isHuman && this.game.player.vars.inventoryEnabled) this.setState(_$HUDState.HUDSTATE_INVENTORY); else if(skillsPressed && this.game.player.vars.skillsEnabled) this.setState(_$HUDState.HUDSTATE_SKILLS); else if(logPressed) {
			this.setState(_$HUDState.HUDSTATE_LOG);
			this.windows.get(this.hudState).scrollToEnd();
		} else if(timelinePressed && this.game.player.vars.timelineEnabled) this.setState(_$HUDState.HUDSTATE_TIMELINE); else if(evolutionPressed && this.game.player.state == _$PlayerState.PLR_STATE_HOST && this.game.player.evolutionManager.state > 0) this.setState(_$HUDState.HUDSTATE_EVOLUTION); else if(organsPressed && this.game.player.state == _$PlayerState.PLR_STATE_HOST && this.game.player.vars.organsEnabled) this.setState(_$HUDState.HUDSTATE_ORGANS); else if(com_haxepunk_utils_Input.pressed(com_haxepunk_utils__$Input_InputType_$Impl_$.fromLeft("debugWindow"))) this.setState(_$HUDState.HUDSTATE_DEBUG);
		return false;
	}
	,handleMovement: function() {
		var dx = 0;
		var dy = 0;
		if(com_haxepunk_utils_Input.pressed(com_haxepunk_utils__$Input_InputType_$Impl_$.fromLeft("up"))) dy = -1;
		if(com_haxepunk_utils_Input.pressed(com_haxepunk_utils__$Input_InputType_$Impl_$.fromLeft("down"))) dy = 1;
		if(com_haxepunk_utils_Input.pressed(com_haxepunk_utils__$Input_InputType_$Impl_$.fromLeft("left"))) dx = -1;
		if(com_haxepunk_utils_Input.pressed(com_haxepunk_utils__$Input_InputType_$Impl_$.fromLeft("right"))) dx = 1;
		if(com_haxepunk_utils_Input.pressed(com_haxepunk_utils__$Input_InputType_$Impl_$.fromLeft("upleft"))) {
			dx = -1;
			dy = -1;
		}
		if(com_haxepunk_utils_Input.pressed(com_haxepunk_utils__$Input_InputType_$Impl_$.fromLeft("upright"))) {
			dx = 1;
			dy = -1;
		}
		if(com_haxepunk_utils_Input.pressed(com_haxepunk_utils__$Input_InputType_$Impl_$.fromLeft("downleft"))) {
			dx = -1;
			dy = 1;
		}
		if(com_haxepunk_utils_Input.pressed(com_haxepunk_utils__$Input_InputType_$Impl_$.fromLeft("downright"))) {
			dx = 1;
			dy = 1;
		}
		if(dx == 0 && dy == 0) return;
		if(this.game.location == _$LocationType.LOCATION_AREA) this.game.playerArea.moveAction(dx,dy); else if(this.game.location == _$LocationType.LOCATION_REGION) this.game.playerRegion.moveAction(dx,dy);
	}
	,handleActions: function() {
		var _g = 1;
		while(_g < 11) {
			var i = _g++;
			if(com_haxepunk_utils_Input.pressed(com_haxepunk_utils__$Input_InputType_$Impl_$.fromLeft("action" + i))) {
				var n = i;
				if(this._inputState > 0) n += 10;
				if(this.hudState == _$HUDState.HUDSTATE_DEFAULT) this.hud.action(n); else this.windows.get(this.hudState).action(n);
				this._inputState = 0;
				break;
			}
		}
		if(this.hudState == _$HUDState.HUDSTATE_DEFAULT) {
			if(com_haxepunk_utils_Input.pressed(com_haxepunk_utils__$Input_InputType_$Impl_$.fromLeft("skipTurn"))) {
				this.game.turn();
				this.game.scene.hud.update();
			}
			this.mouse.handleInput();
		}
		if(com_haxepunk_utils_Input.pressed(com_haxepunk_utils__$Input_InputType_$Impl_$.fromRight(83))) this._inputState = 1;
	}
	,update: function() {
		try {
			this.handleInput();
			this.updateCamera();
			com_haxepunk_Scene.prototype.update.call(this);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			var stack = haxe_CallStack.toString(haxe_CallStack.exceptionStack());
			haxe_Log.trace("Exception: " + Std.string(e),{ fileName : "GameScene.hx", lineNumber : 498, className : "GameScene", methodName : "update"});
			haxe_Log.trace(stack,{ fileName : "GameScene.hx", lineNumber : 499, className : "GameScene", methodName : "update"});
			if(this.game.config.sendExceptions) {
			} else {
				this.game.finishText = "Something broke! An exception was thrown and save to exceptions.txt file. Unfortunately, the game cannot be continued. Sorry!\n\n" + "P.S. If you want to help the development, send the contents of the exceptions.txt file to starinfidel_at_gmail_dot_com. Thanks!";
				this.setState(_$HUDState.HUDSTATE_FINISH);
			}
		}
	}
	,exit: function() {
	}
	,__class__: GameScene
});
var HxOverrides = function() { };
$hxClasses["HxOverrides"] = HxOverrides;
HxOverrides.__name__ = ["HxOverrides"];
HxOverrides.strDate = function(s) {
	var _g = s.length;
	switch(_g) {
	case 8:
		var k = s.split(":");
		var d = new Date();
		d.setTime(0);
		d.setUTCHours(k[0]);
		d.setUTCMinutes(k[1]);
		d.setUTCSeconds(k[2]);
		return d;
	case 10:
		var k1 = s.split("-");
		return new Date(k1[0],k1[1] - 1,k1[2],0,0,0);
	case 19:
		var k2 = s.split(" ");
		var y = k2[0].split("-");
		var t = k2[1].split(":");
		return new Date(y[0],y[1] - 1,y[2],t[0],t[1],t[2]);
	default:
		throw new js__$Boot_HaxeError("Invalid date format : " + s);
	}
};
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) return undefined;
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(pos != null && pos != 0 && len != null && len < 0) return "";
	if(len == null) len = s.length;
	if(pos < 0) {
		pos = s.length + pos;
		if(pos < 0) pos = 0;
	} else if(len < 0) len = s.length + len - pos;
	return s.substr(pos,len);
};
HxOverrides.indexOf = function(a,obj,i) {
	var len = a.length;
	if(i < 0) {
		i += len;
		if(i < 0) i = 0;
	}
	while(i < len) {
		if(a[i] === obj) return i;
		i++;
	}
	return -1;
};
HxOverrides.remove = function(a,obj) {
	var i = HxOverrides.indexOf(a,obj,0);
	if(i == -1) return false;
	a.splice(i,1);
	return true;
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
var Lambda = function() { };
$hxClasses["Lambda"] = Lambda;
Lambda.__name__ = ["Lambda"];
Lambda.array = function(it) {
	var a = [];
	var $it0 = $iterator(it)();
	while( $it0.hasNext() ) {
		var i = $it0.next();
		a.push(i);
	}
	return a;
};
Lambda.has = function(it,elt) {
	var $it0 = $iterator(it)();
	while( $it0.hasNext() ) {
		var x = $it0.next();
		if(x == elt) return true;
	}
	return false;
};
var List = function() {
	this.length = 0;
};
$hxClasses["List"] = List;
List.__name__ = ["List"];
List.prototype = {
	h: null
	,q: null
	,length: null
	,add: function(item) {
		var x = [item];
		if(this.h == null) this.h = x; else this.q[1] = x;
		this.q = x;
		this.length++;
	}
	,push: function(item) {
		var x = [item,this.h];
		this.h = x;
		if(this.q == null) this.q = x;
		this.length++;
	}
	,first: function() {
		if(this.h == null) return null; else return this.h[0];
	}
	,last: function() {
		if(this.q == null) return null; else return this.q[0];
	}
	,pop: function() {
		if(this.h == null) return null;
		var x = this.h[0];
		this.h = this.h[1];
		if(this.h == null) this.q = null;
		this.length--;
		return x;
	}
	,clear: function() {
		this.h = null;
		this.q = null;
		this.length = 0;
	}
	,remove: function(v) {
		var prev = null;
		var l = this.h;
		while(l != null) {
			if(l[0] == v) {
				if(prev == null) this.h = l[1]; else prev[1] = l[1];
				if(this.q == l) this.q = prev;
				this.length--;
				return true;
			}
			prev = l;
			l = l[1];
		}
		return false;
	}
	,iterator: function() {
		return new _$List_ListIterator(this.h);
	}
	,__class__: List
};
var _$List_ListIterator = function(head) {
	this.head = head;
	this.val = null;
};
$hxClasses["_List.ListIterator"] = _$List_ListIterator;
_$List_ListIterator.__name__ = ["_List","ListIterator"];
_$List_ListIterator.prototype = {
	head: null
	,val: null
	,hasNext: function() {
		return this.head != null;
	}
	,next: function() {
		this.val = this.head[0];
		this.head = this.head[1];
		return this.val;
	}
	,__class__: _$List_ListIterator
};
Math.__name__ = ["Math"];
var Reflect = function() { };
$hxClasses["Reflect"] = Reflect;
Reflect.__name__ = ["Reflect"];
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		haxe_CallStack.lastException = e;
		if (e instanceof js__$Boot_HaxeError) e = e.val;
		return null;
	}
};
Reflect.setField = function(o,field,value) {
	o[field] = value;
};
Reflect.getProperty = function(o,field) {
	var tmp;
	if(o == null) return null; else if(o.__properties__ && (tmp = o.__properties__["get_" + field])) return o[tmp](); else return o[field];
};
Reflect.setProperty = function(o,field,value) {
	var tmp;
	if(o.__properties__ && (tmp = o.__properties__["set_" + field])) o[tmp](value); else o[field] = value;
};
Reflect.callMethod = function(o,func,args) {
	return func.apply(o,args);
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) a.push(f);
		}
	}
	return a;
};
Reflect.isFunction = function(f) {
	return typeof(f) == "function" && !(f.__name__ || f.__ename__);
};
Reflect.compare = function(a,b) {
	if(a == b) return 0; else if(a > b) return 1; else return -1;
};
Reflect.compareMethods = function(f1,f2) {
	if(f1 == f2) return true;
	if(!Reflect.isFunction(f1) || !Reflect.isFunction(f2)) return false;
	return f1.scope == f2.scope && f1.method == f2.method && f1.method != null;
};
Reflect.isObject = function(v) {
	if(v == null) return false;
	var t = typeof(v);
	return t == "string" || t == "object" && v.__enum__ == null || t == "function" && (v.__name__ || v.__ename__) != null;
};
Reflect.isEnumValue = function(v) {
	return v != null && v.__enum__ != null;
};
Reflect.deleteField = function(o,field) {
	if(!Object.prototype.hasOwnProperty.call(o,field)) return false;
	delete(o[field]);
	return true;
};
Reflect.copy = function(o) {
	var o2 = { };
	var _g = 0;
	var _g1 = Reflect.fields(o);
	while(_g < _g1.length) {
		var f = _g1[_g];
		++_g;
		Reflect.setField(o2,f,Reflect.field(o,f));
	}
	return o2;
};
Reflect.makeVarArgs = function(f) {
	return function() {
		var a = Array.prototype.slice.call(arguments);
		return f(a);
	};
};
var RegionView = function(s) {
	this.scene = s;
	this.game = this.scene.game;
	this.width = 100;
	this.height = 100;
	this._tilemap = null;
	this._tilemapAlert = null;
	this._tilemapEvent = null;
	this._tilemapNPC = null;
	this._tilemapHabitat = null;
	this.entity = new com_haxepunk_Entity();
	this.entity.set_layer(Const.LAYER_TILES);
	this.entityIcons = new com_haxepunk_Entity();
	this.entityIcons.set_layer(Const.LAYER_EFFECT - 1);
	this._tilemap = new com_haxepunk_graphics_Tilemap(com_haxepunk_HXP.renderMode == com_haxepunk_RenderMode.HARDWARE?(function($this) {
		var $r;
		var e = com_haxepunk_ds_Either.Right(new com_haxepunk_graphics_atlas_TileAtlas((function($this) {
			var $r;
			var data = com_haxepunk_graphics_atlas_AtlasData.getAtlasDataByName("gfx/tileset.png",true);
			$r = data;
			return $r;
		}($this))));
		$r = e;
		return $r;
	}(this)):(function($this) {
		var $r;
		var e1 = com_haxepunk_ds_Either.Left(com_haxepunk_HXP.getBitmap("gfx/tileset.png"));
		$r = e1;
		return $r;
	}(this)),this.width * Const.TILE_WIDTH,this.height * Const.TILE_HEIGHT,Const.TILE_WIDTH,Const.TILE_HEIGHT);
	this.entity.addGraphic(this._tilemap);
	this._tilemapAlert = new com_haxepunk_graphics_Tilemap(com_haxepunk_HXP.renderMode == com_haxepunk_RenderMode.HARDWARE?(function($this) {
		var $r;
		var e2 = com_haxepunk_ds_Either.Right(new com_haxepunk_graphics_atlas_TileAtlas((function($this) {
			var $r;
			var data1 = com_haxepunk_graphics_atlas_AtlasData.getAtlasDataByName("gfx/entities.png",true);
			$r = data1;
			return $r;
		}($this))));
		$r = e2;
		return $r;
	}(this)):(function($this) {
		var $r;
		var e3 = com_haxepunk_ds_Either.Left(com_haxepunk_HXP.getBitmap("gfx/entities.png"));
		$r = e3;
		return $r;
	}(this)),this.width * Const.TILE_WIDTH,this.height * Const.TILE_HEIGHT,Const.TILE_WIDTH,Const.TILE_HEIGHT);
	this.entityIcons.addGraphic(this._tilemapAlert);
	this._tilemapEvent = new com_haxepunk_graphics_Tilemap(com_haxepunk_HXP.renderMode == com_haxepunk_RenderMode.HARDWARE?(function($this) {
		var $r;
		var e4 = com_haxepunk_ds_Either.Right(new com_haxepunk_graphics_atlas_TileAtlas((function($this) {
			var $r;
			var data2 = com_haxepunk_graphics_atlas_AtlasData.getAtlasDataByName("gfx/entities.png",true);
			$r = data2;
			return $r;
		}($this))));
		$r = e4;
		return $r;
	}(this)):(function($this) {
		var $r;
		var e5 = com_haxepunk_ds_Either.Left(com_haxepunk_HXP.getBitmap("gfx/entities.png"));
		$r = e5;
		return $r;
	}(this)),this.width * Const.TILE_WIDTH,this.height * Const.TILE_HEIGHT,Const.TILE_WIDTH,Const.TILE_HEIGHT);
	this.entityIcons.addGraphic(this._tilemapEvent);
	this._tilemapNPC = new com_haxepunk_graphics_Tilemap(com_haxepunk_HXP.renderMode == com_haxepunk_RenderMode.HARDWARE?(function($this) {
		var $r;
		var e6 = com_haxepunk_ds_Either.Right(new com_haxepunk_graphics_atlas_TileAtlas((function($this) {
			var $r;
			var data3 = com_haxepunk_graphics_atlas_AtlasData.getAtlasDataByName("gfx/entities.png",true);
			$r = data3;
			return $r;
		}($this))));
		$r = e6;
		return $r;
	}(this)):(function($this) {
		var $r;
		var e7 = com_haxepunk_ds_Either.Left(com_haxepunk_HXP.getBitmap("gfx/entities.png"));
		$r = e7;
		return $r;
	}(this)),this.width * Const.TILE_WIDTH,this.height * Const.TILE_HEIGHT,Const.TILE_WIDTH,Const.TILE_HEIGHT);
	this.entityIcons.addGraphic(this._tilemapNPC);
	this._tilemapHabitat = new com_haxepunk_graphics_Tilemap(com_haxepunk_HXP.renderMode == com_haxepunk_RenderMode.HARDWARE?(function($this) {
		var $r;
		var e8 = com_haxepunk_ds_Either.Right(new com_haxepunk_graphics_atlas_TileAtlas((function($this) {
			var $r;
			var data4 = com_haxepunk_graphics_atlas_AtlasData.getAtlasDataByName("gfx/entities.png",true);
			$r = data4;
			return $r;
		}($this))));
		$r = e8;
		return $r;
	}(this)):(function($this) {
		var $r;
		var e9 = com_haxepunk_ds_Either.Left(com_haxepunk_HXP.getBitmap("gfx/entities.png"));
		$r = e9;
		return $r;
	}(this)),this.width * Const.TILE_WIDTH,this.height * Const.TILE_HEIGHT,Const.TILE_WIDTH,Const.TILE_HEIGHT);
	this.entityIcons.addGraphic(this._tilemapHabitat);
	this.scene.add(this.entity);
	this.scene.add(this.entityIcons);
};
$hxClasses["RegionView"] = RegionView;
RegionView.__name__ = ["RegionView"];
RegionView.prototype = {
	game: null
	,scene: null
	,_tilemap: null
	,_tilemapAlert: null
	,_tilemapEvent: null
	,_tilemapNPC: null
	,_tilemapHabitat: null
	,width: null
	,height: null
	,entity: null
	,entityIcons: null
	,update: function() {
		this.width = this.game.region.width;
		this.height = this.game.region.height;
		var cells = this.game.region._array;
		var _g1 = 0;
		var _g = this.height;
		while(_g1 < _g) {
			var y = _g1++;
			var _g3 = 0;
			var _g2 = this.width;
			while(_g3 < _g2) {
				var x = _g3++;
				this._tilemap.setTile(x,y,Const.TILE_REGION_ROW + cells[x][y].tileID);
			}
		}
		this.updateIcons();
		this.scene.updateCamera();
	}
	,show: function() {
		var row = Const.ROW_PARASITE;
		if(this.game.player.host != null) {
			row = Reflect.field(Const,"ROW_" + this.game.player.host.type.toUpperCase());
			this.game.playerRegion.entity.setMask(Const.FRAME_MASK_REGION,row);
		} else this.game.playerRegion.entity.setMask(Const.FRAME_EMPTY,row);
		this.game.playerRegion.entity.setImage(Const.FRAME_DEFAULT,row);
		this.entity.visible = true;
		this.entityIcons.visible = true;
		this.game.playerRegion.entity.visible = true;
	}
	,hide: function() {
		this.entity.visible = false;
		this.entityIcons.visible = false;
		this.game.playerRegion.entity.visible = false;
	}
	,updateAlertness: function(a) {
		var alertFrame = Const.FRAME_EMPTY;
		if(a.get_alertness() > 75) alertFrame = Const.FRAME_ALERT3; else if(a.get_alertness() > 50) alertFrame = Const.FRAME_ALERT2; else if(a.get_alertness() > 0) alertFrame = Const.FRAME_ALERT1;
		this._tilemapAlert.setTile(a.x,a.y,alertFrame);
	}
	,updateEvent: function(a) {
		if(!this.game.player.vars.timelineEnabled || a.events.length == 0) return;
		var oneLocationKnown = false;
		var allNotesKnown = true;
		var _g = 0;
		var _g1 = a.events;
		while(_g < _g1.length) {
			var e = _g1[_g];
			++_g;
			if(e.locationKnown) oneLocationKnown = true;
			if(!e.notesKnown()) allNotesKnown = false;
		}
		if(!oneLocationKnown) return;
		var frame = Const.FRAME_EVENT_UNKNOWN;
		if(allNotesKnown) frame = Const.FRAME_EVENT_KNOWN;
		this._tilemapEvent.setTile(a.x,a.y,Const.ROW_REGION_ICON * 9 + frame);
	}
	,updateNPC: function(a) {
		if(!this.game.player.vars.timelineEnabled || a.npc.length == 0) return;
		var ok = true;
		var _g_head = a.npc.h;
		var _g_val = null;
		while(_g_head != null) {
			var npc;
			npc = (function($this) {
				var $r;
				_g_val = _g_head[0];
				_g_head = _g_head[1];
				$r = _g_val;
				return $r;
			}(this));
			if(!npc.isDead && npc.areaKnown && !npc.memoryKnown) ok = false;
		}
		this._tilemapNPC.setTile(a.x,a.y,Const.ROW_REGION_ICON * 9 + (ok?Const.FRAME_EMPTY:Const.FRAME_EVENT_NPC));
	}
	,updateIconsArea: function(x,y) {
		var a = this.game.region.getXY(x,y);
		this.updateAlertness(a);
		this.updateEvent(a);
		this.updateNPC(a);
		this._tilemapHabitat.setTile(a.x,a.y,Const.ROW_REGION_ICON * 9 + (a.hasHabitat?Const.FRAME_HABITAT:Const.FRAME_EMPTY));
	}
	,updateIcons: function() {
		var _g1 = 0;
		var _g = this.height;
		while(_g1 < _g) {
			var y = _g1++;
			var _g3 = 0;
			var _g2 = this.width;
			while(_g3 < _g2) {
				var x = _g3++;
				this.updateIconsArea(x,y);
			}
		}
	}
	,updateVisibility: function() {
		var _g1 = 0;
		var _g = this.height;
		while(_g1 < _g) {
			var y = _g1++;
			var _g3 = 0;
			var _g2 = this.width;
			while(_g3 < _g2) {
				var x = _g3++;
				var a = this.game.region.getXY(x,y);
				if(Math.abs(this.game.playerRegion.x - x) < 2 && Math.abs(this.game.playerRegion.y - y) < 2 || a.isKnown) this._tilemap.setTile(x,y,Const.TILE_REGION_ROW + a.tileID); else this._tilemap.setTile(x,y,Const.TILE_HIDDEN);
			}
		}
	}
	,__class__: RegionView
};
var Std = function() { };
$hxClasses["Std"] = Std;
Std.__name__ = ["Std"];
Std["is"] = function(v,t) {
	return js_Boot.__instanceof(v,t);
};
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std["int"] = function(x) {
	return x | 0;
};
Std.parseInt = function(x) {
	var v = parseInt(x,10);
	if(v == 0 && (HxOverrides.cca(x,1) == 120 || HxOverrides.cca(x,1) == 88)) v = parseInt(x);
	if(isNaN(v)) return null;
	return v;
};
Std.parseFloat = function(x) {
	return parseFloat(x);
};
Std.random = function(x) {
	if(x <= 0) return 0; else return Math.floor(Math.random() * x);
};
var StringBuf = function() {
	this.b = "";
};
$hxClasses["StringBuf"] = StringBuf;
StringBuf.__name__ = ["StringBuf"];
StringBuf.prototype = {
	b: null
	,add: function(x) {
		this.b += Std.string(x);
	}
	,__class__: StringBuf
};
var StringTools = function() { };
$hxClasses["StringTools"] = StringTools;
StringTools.__name__ = ["StringTools"];
StringTools.urlEncode = function(s) {
	return encodeURIComponent(s);
};
StringTools.urlDecode = function(s) {
	return decodeURIComponent(s.split("+").join(" "));
};
StringTools.startsWith = function(s,start) {
	return s.length >= start.length && HxOverrides.substr(s,0,start.length) == start;
};
StringTools.endsWith = function(s,end) {
	var elen = end.length;
	var slen = s.length;
	return slen >= elen && HxOverrides.substr(s,slen - elen,elen) == end;
};
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	return c > 8 && c < 14 || c == 32;
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) r++;
	if(r > 0) return HxOverrides.substr(s,r,l - r); else return s;
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) r++;
	if(r > 0) return HxOverrides.substr(s,0,l - r); else return s;
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
StringTools.hex = function(n,digits) {
	var s = "";
	var hexChars = "0123456789ABCDEF";
	do {
		s = hexChars.charAt(n & 15) + s;
		n >>>= 4;
	} while(n > 0);
	if(digits != null) while(s.length < digits) s = "0" + s;
	return s;
};
StringTools.fastCodeAt = function(s,index) {
	return s.charCodeAt(index);
};
var ValueType = $hxClasses["ValueType"] = { __ename__ : ["ValueType"], __constructs__ : ["TNull","TInt","TFloat","TBool","TObject","TFunction","TClass","TEnum","TUnknown"] };
ValueType.TNull = ["TNull",0];
ValueType.TNull.toString = $estr;
ValueType.TNull.__enum__ = ValueType;
ValueType.TInt = ["TInt",1];
ValueType.TInt.toString = $estr;
ValueType.TInt.__enum__ = ValueType;
ValueType.TFloat = ["TFloat",2];
ValueType.TFloat.toString = $estr;
ValueType.TFloat.__enum__ = ValueType;
ValueType.TBool = ["TBool",3];
ValueType.TBool.toString = $estr;
ValueType.TBool.__enum__ = ValueType;
ValueType.TObject = ["TObject",4];
ValueType.TObject.toString = $estr;
ValueType.TObject.__enum__ = ValueType;
ValueType.TFunction = ["TFunction",5];
ValueType.TFunction.toString = $estr;
ValueType.TFunction.__enum__ = ValueType;
ValueType.TClass = function(c) { var $x = ["TClass",6,c]; $x.__enum__ = ValueType; $x.toString = $estr; return $x; };
ValueType.TEnum = function(e) { var $x = ["TEnum",7,e]; $x.__enum__ = ValueType; $x.toString = $estr; return $x; };
ValueType.TUnknown = ["TUnknown",8];
ValueType.TUnknown.toString = $estr;
ValueType.TUnknown.__enum__ = ValueType;
var Type = function() { };
$hxClasses["Type"] = Type;
Type.__name__ = ["Type"];
Type.getClass = function(o) {
	if(o == null) return null; else return js_Boot.getClass(o);
};
Type.getSuperClass = function(c) {
	return c.__super__;
};
Type.getClassName = function(c) {
	var a = c.__name__;
	if(a == null) return null;
	return a.join(".");
};
Type.getEnumName = function(e) {
	var a = e.__ename__;
	return a.join(".");
};
Type.resolveClass = function(name) {
	var cl = $hxClasses[name];
	if(cl == null || !cl.__name__) return null;
	return cl;
};
Type.resolveEnum = function(name) {
	var e = $hxClasses[name];
	if(e == null || !e.__ename__) return null;
	return e;
};
Type.createInstance = function(cl,args) {
	var _g = args.length;
	switch(_g) {
	case 0:
		return new cl();
	case 1:
		return new cl(args[0]);
	case 2:
		return new cl(args[0],args[1]);
	case 3:
		return new cl(args[0],args[1],args[2]);
	case 4:
		return new cl(args[0],args[1],args[2],args[3]);
	case 5:
		return new cl(args[0],args[1],args[2],args[3],args[4]);
	case 6:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5]);
	case 7:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6]);
	case 8:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7]);
	default:
		throw new js__$Boot_HaxeError("Too many arguments");
	}
	return null;
};
Type.createEmptyInstance = function(cl) {
	function empty() {}; empty.prototype = cl.prototype;
	return new empty();
};
Type.createEnum = function(e,constr,params) {
	var f = Reflect.field(e,constr);
	if(f == null) throw new js__$Boot_HaxeError("No such constructor " + constr);
	if(Reflect.isFunction(f)) {
		if(params == null) throw new js__$Boot_HaxeError("Constructor " + constr + " need parameters");
		return Reflect.callMethod(e,f,params);
	}
	if(params != null && params.length != 0) throw new js__$Boot_HaxeError("Constructor " + constr + " does not need parameters");
	return f;
};
Type.getInstanceFields = function(c) {
	var a = [];
	for(var i in c.prototype) a.push(i);
	HxOverrides.remove(a,"__class__");
	HxOverrides.remove(a,"__properties__");
	return a;
};
Type.getEnumConstructs = function(e) {
	var a = e.__constructs__;
	return a.slice();
};
Type["typeof"] = function(v) {
	var _g = typeof(v);
	switch(_g) {
	case "boolean":
		return ValueType.TBool;
	case "string":
		return ValueType.TClass(String);
	case "number":
		if(Math.ceil(v) == v % 2147483648.0) return ValueType.TInt;
		return ValueType.TFloat;
	case "object":
		if(v == null) return ValueType.TNull;
		var e = v.__enum__;
		if(e != null) return ValueType.TEnum(e);
		var c = js_Boot.getClass(v);
		if(c != null) return ValueType.TClass(c);
		return ValueType.TObject;
	case "function":
		if(v.__name__ || v.__ename__) return ValueType.TObject;
		return ValueType.TFunction;
	case "undefined":
		return ValueType.TNull;
	default:
		return ValueType.TUnknown;
	}
};
var _$UInt_UInt_$Impl_$ = {};
$hxClasses["_UInt.UInt_Impl_"] = _$UInt_UInt_$Impl_$;
_$UInt_UInt_$Impl_$.__name__ = ["_UInt","UInt_Impl_"];
_$UInt_UInt_$Impl_$.gt = function(a,b) {
	var aNeg = a < 0;
	var bNeg = b < 0;
	if(aNeg != bNeg) return aNeg; else return a > b;
};
_$UInt_UInt_$Impl_$.gte = function(a,b) {
	var aNeg = a < 0;
	var bNeg = b < 0;
	if(aNeg != bNeg) return aNeg; else return a >= b;
};
_$UInt_UInt_$Impl_$.toFloat = function(this1) {
	var $int = this1;
	if($int < 0) return 4294967296.0 + $int; else return $int + 0.0;
};
var Version = function() { };
$hxClasses["Version"] = Version;
Version.__name__ = ["Version"];
var _$AIEffectType = $hxClasses["_AIEffectType"] = { __ename__ : ["_AIEffectType"], __constructs__ : ["EFFECT_PARALYSIS","EFFECT_SLIME","EFFECT_PANIC","EFFECT_CANNOT_TEAR_AWAY"] };
_$AIEffectType.EFFECT_PARALYSIS = ["EFFECT_PARALYSIS",0];
_$AIEffectType.EFFECT_PARALYSIS.toString = $estr;
_$AIEffectType.EFFECT_PARALYSIS.__enum__ = _$AIEffectType;
_$AIEffectType.EFFECT_SLIME = ["EFFECT_SLIME",1];
_$AIEffectType.EFFECT_SLIME.toString = $estr;
_$AIEffectType.EFFECT_SLIME.__enum__ = _$AIEffectType;
_$AIEffectType.EFFECT_PANIC = ["EFFECT_PANIC",2];
_$AIEffectType.EFFECT_PANIC.toString = $estr;
_$AIEffectType.EFFECT_PANIC.__enum__ = _$AIEffectType;
_$AIEffectType.EFFECT_CANNOT_TEAR_AWAY = ["EFFECT_CANNOT_TEAR_AWAY",3];
_$AIEffectType.EFFECT_CANNOT_TEAR_AWAY.toString = $estr;
_$AIEffectType.EFFECT_CANNOT_TEAR_AWAY.__enum__ = _$AIEffectType;
var _$AIState = $hxClasses["_AIState"] = { __ename__ : ["_AIState"], __constructs__ : ["AI_STATE_IDLE","AI_STATE_ALERT","AI_STATE_HOST","AI_STATE_DEAD","AI_STATE_POST_DETACH"] };
_$AIState.AI_STATE_IDLE = ["AI_STATE_IDLE",0];
_$AIState.AI_STATE_IDLE.toString = $estr;
_$AIState.AI_STATE_IDLE.__enum__ = _$AIState;
_$AIState.AI_STATE_ALERT = ["AI_STATE_ALERT",1];
_$AIState.AI_STATE_ALERT.toString = $estr;
_$AIState.AI_STATE_ALERT.__enum__ = _$AIState;
_$AIState.AI_STATE_HOST = ["AI_STATE_HOST",2];
_$AIState.AI_STATE_HOST.toString = $estr;
_$AIState.AI_STATE_HOST.__enum__ = _$AIState;
_$AIState.AI_STATE_DEAD = ["AI_STATE_DEAD",3];
_$AIState.AI_STATE_DEAD.toString = $estr;
_$AIState.AI_STATE_DEAD.__enum__ = _$AIState;
_$AIState.AI_STATE_POST_DETACH = ["AI_STATE_POST_DETACH",4];
_$AIState.AI_STATE_POST_DETACH.toString = $estr;
_$AIState.AI_STATE_POST_DETACH.__enum__ = _$AIState;
var _$AITraitType = $hxClasses["_AITraitType"] = { __ename__ : ["_AITraitType"], __constructs__ : ["TRAIT_DRUG_ADDICT"] };
_$AITraitType.TRAIT_DRUG_ADDICT = ["TRAIT_DRUG_ADDICT",0];
_$AITraitType.TRAIT_DRUG_ADDICT.toString = $estr;
_$AITraitType.TRAIT_DRUG_ADDICT.__enum__ = _$AITraitType;
var _$AreaManagerEventType = $hxClasses["_AreaManagerEventType"] = { __ename__ : ["_AreaManagerEventType"], __constructs__ : ["AREAEVENT_CALL_LAW","AREAEVENT_ALERT_LAW","AREAEVENT_ARRIVE_LAW","AREAEVENT_CALL_BACKUP","AREAEVENT_ARRIVE_BACKUP","AREAEVENT_OBJECT_DECAY"] };
_$AreaManagerEventType.AREAEVENT_CALL_LAW = ["AREAEVENT_CALL_LAW",0];
_$AreaManagerEventType.AREAEVENT_CALL_LAW.toString = $estr;
_$AreaManagerEventType.AREAEVENT_CALL_LAW.__enum__ = _$AreaManagerEventType;
_$AreaManagerEventType.AREAEVENT_ALERT_LAW = ["AREAEVENT_ALERT_LAW",1];
_$AreaManagerEventType.AREAEVENT_ALERT_LAW.toString = $estr;
_$AreaManagerEventType.AREAEVENT_ALERT_LAW.__enum__ = _$AreaManagerEventType;
_$AreaManagerEventType.AREAEVENT_ARRIVE_LAW = ["AREAEVENT_ARRIVE_LAW",2];
_$AreaManagerEventType.AREAEVENT_ARRIVE_LAW.toString = $estr;
_$AreaManagerEventType.AREAEVENT_ARRIVE_LAW.__enum__ = _$AreaManagerEventType;
_$AreaManagerEventType.AREAEVENT_CALL_BACKUP = ["AREAEVENT_CALL_BACKUP",3];
_$AreaManagerEventType.AREAEVENT_CALL_BACKUP.toString = $estr;
_$AreaManagerEventType.AREAEVENT_CALL_BACKUP.__enum__ = _$AreaManagerEventType;
_$AreaManagerEventType.AREAEVENT_ARRIVE_BACKUP = ["AREAEVENT_ARRIVE_BACKUP",4];
_$AreaManagerEventType.AREAEVENT_ARRIVE_BACKUP.toString = $estr;
_$AreaManagerEventType.AREAEVENT_ARRIVE_BACKUP.__enum__ = _$AreaManagerEventType;
_$AreaManagerEventType.AREAEVENT_OBJECT_DECAY = ["AREAEVENT_OBJECT_DECAY",5];
_$AreaManagerEventType.AREAEVENT_OBJECT_DECAY.toString = $estr;
_$AreaManagerEventType.AREAEVENT_OBJECT_DECAY.__enum__ = _$AreaManagerEventType;
var _$AreaType = $hxClasses["_AreaType"] = { __ename__ : ["_AreaType"], __constructs__ : ["AREA_GROUND","AREA_CITY_LOW","AREA_CITY_MEDIUM","AREA_CITY_HIGH","AREA_MILITARY_BASE","AREA_FACILITY","AREA_HABITAT"] };
_$AreaType.AREA_GROUND = ["AREA_GROUND",0];
_$AreaType.AREA_GROUND.toString = $estr;
_$AreaType.AREA_GROUND.__enum__ = _$AreaType;
_$AreaType.AREA_CITY_LOW = ["AREA_CITY_LOW",1];
_$AreaType.AREA_CITY_LOW.toString = $estr;
_$AreaType.AREA_CITY_LOW.__enum__ = _$AreaType;
_$AreaType.AREA_CITY_MEDIUM = ["AREA_CITY_MEDIUM",2];
_$AreaType.AREA_CITY_MEDIUM.toString = $estr;
_$AreaType.AREA_CITY_MEDIUM.__enum__ = _$AreaType;
_$AreaType.AREA_CITY_HIGH = ["AREA_CITY_HIGH",3];
_$AreaType.AREA_CITY_HIGH.toString = $estr;
_$AreaType.AREA_CITY_HIGH.__enum__ = _$AreaType;
_$AreaType.AREA_MILITARY_BASE = ["AREA_MILITARY_BASE",4];
_$AreaType.AREA_MILITARY_BASE.toString = $estr;
_$AreaType.AREA_MILITARY_BASE.__enum__ = _$AreaType;
_$AreaType.AREA_FACILITY = ["AREA_FACILITY",5];
_$AreaType.AREA_FACILITY.toString = $estr;
_$AreaType.AREA_FACILITY.__enum__ = _$AreaType;
_$AreaType.AREA_HABITAT = ["AREA_HABITAT",6];
_$AreaType.AREA_HABITAT.toString = $estr;
_$AreaType.AREA_HABITAT.__enum__ = _$AreaType;
var _$Goal = $hxClasses["_Goal"] = { __ename__ : ["_Goal"], __constructs__ : ["GOAL_INVADE_HOST","GOAL_INVADE_HUMAN","GOAL_EVOLVE_PROBE","GOAL_EVOLVE_ORGAN","GOAL_GROW_ORGAN","GOAL_EVOLVE_CAMO","GOAL_GROW_CAMO","GOAL_EVOLVE_DOPAMINE","GOAL_EVOLVE_MICROHABITAT","GOAL_CREATE_HABITAT","GOAL_PUT_BIOMINERAL","GOAL_PUT_ASSIMILATION","GOAL_PROBE_BRAIN","GOAL_LEARN_ITEMS","GOAL_PROBE_BRAIN_ADVANCED","GOAL_LEARN_SKILLS","GOAL_LEARN_SOCIETY","GOAL_TRAVEL_EVENT","GOAL_LEARN_CLUE","GOAL_LEARN_NPC","GOAL_USE_COMPUTER","SCENARIO_ALIEN_FIND_SHIP","SCENARIO_ALIEN_SAVE_ALIEN","SCENARIO_ALIEN_ENTER_SHIP","SCENARIO_ALIEN_MISSION_ABDUCTION","SCENARIO_ALIEN_MISSION_ABDUCTION_GO_SPACESHIP","SCENARIO_ALIEN_MISSION_FAILURE_GO_SPACESHIP","SCENARIO_ALIEN_MISSION_INFILTRATION","SCENARIO_ALIEN_MISSION_RESEARCH"] };
_$Goal.GOAL_INVADE_HOST = ["GOAL_INVADE_HOST",0];
_$Goal.GOAL_INVADE_HOST.toString = $estr;
_$Goal.GOAL_INVADE_HOST.__enum__ = _$Goal;
_$Goal.GOAL_INVADE_HUMAN = ["GOAL_INVADE_HUMAN",1];
_$Goal.GOAL_INVADE_HUMAN.toString = $estr;
_$Goal.GOAL_INVADE_HUMAN.__enum__ = _$Goal;
_$Goal.GOAL_EVOLVE_PROBE = ["GOAL_EVOLVE_PROBE",2];
_$Goal.GOAL_EVOLVE_PROBE.toString = $estr;
_$Goal.GOAL_EVOLVE_PROBE.__enum__ = _$Goal;
_$Goal.GOAL_EVOLVE_ORGAN = ["GOAL_EVOLVE_ORGAN",3];
_$Goal.GOAL_EVOLVE_ORGAN.toString = $estr;
_$Goal.GOAL_EVOLVE_ORGAN.__enum__ = _$Goal;
_$Goal.GOAL_GROW_ORGAN = ["GOAL_GROW_ORGAN",4];
_$Goal.GOAL_GROW_ORGAN.toString = $estr;
_$Goal.GOAL_GROW_ORGAN.__enum__ = _$Goal;
_$Goal.GOAL_EVOLVE_CAMO = ["GOAL_EVOLVE_CAMO",5];
_$Goal.GOAL_EVOLVE_CAMO.toString = $estr;
_$Goal.GOAL_EVOLVE_CAMO.__enum__ = _$Goal;
_$Goal.GOAL_GROW_CAMO = ["GOAL_GROW_CAMO",6];
_$Goal.GOAL_GROW_CAMO.toString = $estr;
_$Goal.GOAL_GROW_CAMO.__enum__ = _$Goal;
_$Goal.GOAL_EVOLVE_DOPAMINE = ["GOAL_EVOLVE_DOPAMINE",7];
_$Goal.GOAL_EVOLVE_DOPAMINE.toString = $estr;
_$Goal.GOAL_EVOLVE_DOPAMINE.__enum__ = _$Goal;
_$Goal.GOAL_EVOLVE_MICROHABITAT = ["GOAL_EVOLVE_MICROHABITAT",8];
_$Goal.GOAL_EVOLVE_MICROHABITAT.toString = $estr;
_$Goal.GOAL_EVOLVE_MICROHABITAT.__enum__ = _$Goal;
_$Goal.GOAL_CREATE_HABITAT = ["GOAL_CREATE_HABITAT",9];
_$Goal.GOAL_CREATE_HABITAT.toString = $estr;
_$Goal.GOAL_CREATE_HABITAT.__enum__ = _$Goal;
_$Goal.GOAL_PUT_BIOMINERAL = ["GOAL_PUT_BIOMINERAL",10];
_$Goal.GOAL_PUT_BIOMINERAL.toString = $estr;
_$Goal.GOAL_PUT_BIOMINERAL.__enum__ = _$Goal;
_$Goal.GOAL_PUT_ASSIMILATION = ["GOAL_PUT_ASSIMILATION",11];
_$Goal.GOAL_PUT_ASSIMILATION.toString = $estr;
_$Goal.GOAL_PUT_ASSIMILATION.__enum__ = _$Goal;
_$Goal.GOAL_PROBE_BRAIN = ["GOAL_PROBE_BRAIN",12];
_$Goal.GOAL_PROBE_BRAIN.toString = $estr;
_$Goal.GOAL_PROBE_BRAIN.__enum__ = _$Goal;
_$Goal.GOAL_LEARN_ITEMS = ["GOAL_LEARN_ITEMS",13];
_$Goal.GOAL_LEARN_ITEMS.toString = $estr;
_$Goal.GOAL_LEARN_ITEMS.__enum__ = _$Goal;
_$Goal.GOAL_PROBE_BRAIN_ADVANCED = ["GOAL_PROBE_BRAIN_ADVANCED",14];
_$Goal.GOAL_PROBE_BRAIN_ADVANCED.toString = $estr;
_$Goal.GOAL_PROBE_BRAIN_ADVANCED.__enum__ = _$Goal;
_$Goal.GOAL_LEARN_SKILLS = ["GOAL_LEARN_SKILLS",15];
_$Goal.GOAL_LEARN_SKILLS.toString = $estr;
_$Goal.GOAL_LEARN_SKILLS.__enum__ = _$Goal;
_$Goal.GOAL_LEARN_SOCIETY = ["GOAL_LEARN_SOCIETY",16];
_$Goal.GOAL_LEARN_SOCIETY.toString = $estr;
_$Goal.GOAL_LEARN_SOCIETY.__enum__ = _$Goal;
_$Goal.GOAL_TRAVEL_EVENT = ["GOAL_TRAVEL_EVENT",17];
_$Goal.GOAL_TRAVEL_EVENT.toString = $estr;
_$Goal.GOAL_TRAVEL_EVENT.__enum__ = _$Goal;
_$Goal.GOAL_LEARN_CLUE = ["GOAL_LEARN_CLUE",18];
_$Goal.GOAL_LEARN_CLUE.toString = $estr;
_$Goal.GOAL_LEARN_CLUE.__enum__ = _$Goal;
_$Goal.GOAL_LEARN_NPC = ["GOAL_LEARN_NPC",19];
_$Goal.GOAL_LEARN_NPC.toString = $estr;
_$Goal.GOAL_LEARN_NPC.__enum__ = _$Goal;
_$Goal.GOAL_USE_COMPUTER = ["GOAL_USE_COMPUTER",20];
_$Goal.GOAL_USE_COMPUTER.toString = $estr;
_$Goal.GOAL_USE_COMPUTER.__enum__ = _$Goal;
_$Goal.SCENARIO_ALIEN_FIND_SHIP = ["SCENARIO_ALIEN_FIND_SHIP",21];
_$Goal.SCENARIO_ALIEN_FIND_SHIP.toString = $estr;
_$Goal.SCENARIO_ALIEN_FIND_SHIP.__enum__ = _$Goal;
_$Goal.SCENARIO_ALIEN_SAVE_ALIEN = ["SCENARIO_ALIEN_SAVE_ALIEN",22];
_$Goal.SCENARIO_ALIEN_SAVE_ALIEN.toString = $estr;
_$Goal.SCENARIO_ALIEN_SAVE_ALIEN.__enum__ = _$Goal;
_$Goal.SCENARIO_ALIEN_ENTER_SHIP = ["SCENARIO_ALIEN_ENTER_SHIP",23];
_$Goal.SCENARIO_ALIEN_ENTER_SHIP.toString = $estr;
_$Goal.SCENARIO_ALIEN_ENTER_SHIP.__enum__ = _$Goal;
_$Goal.SCENARIO_ALIEN_MISSION_ABDUCTION = ["SCENARIO_ALIEN_MISSION_ABDUCTION",24];
_$Goal.SCENARIO_ALIEN_MISSION_ABDUCTION.toString = $estr;
_$Goal.SCENARIO_ALIEN_MISSION_ABDUCTION.__enum__ = _$Goal;
_$Goal.SCENARIO_ALIEN_MISSION_ABDUCTION_GO_SPACESHIP = ["SCENARIO_ALIEN_MISSION_ABDUCTION_GO_SPACESHIP",25];
_$Goal.SCENARIO_ALIEN_MISSION_ABDUCTION_GO_SPACESHIP.toString = $estr;
_$Goal.SCENARIO_ALIEN_MISSION_ABDUCTION_GO_SPACESHIP.__enum__ = _$Goal;
_$Goal.SCENARIO_ALIEN_MISSION_FAILURE_GO_SPACESHIP = ["SCENARIO_ALIEN_MISSION_FAILURE_GO_SPACESHIP",26];
_$Goal.SCENARIO_ALIEN_MISSION_FAILURE_GO_SPACESHIP.toString = $estr;
_$Goal.SCENARIO_ALIEN_MISSION_FAILURE_GO_SPACESHIP.__enum__ = _$Goal;
_$Goal.SCENARIO_ALIEN_MISSION_INFILTRATION = ["SCENARIO_ALIEN_MISSION_INFILTRATION",27];
_$Goal.SCENARIO_ALIEN_MISSION_INFILTRATION.toString = $estr;
_$Goal.SCENARIO_ALIEN_MISSION_INFILTRATION.__enum__ = _$Goal;
_$Goal.SCENARIO_ALIEN_MISSION_RESEARCH = ["SCENARIO_ALIEN_MISSION_RESEARCH",28];
_$Goal.SCENARIO_ALIEN_MISSION_RESEARCH.toString = $estr;
_$Goal.SCENARIO_ALIEN_MISSION_RESEARCH.__enum__ = _$Goal;
var _$HUDState = $hxClasses["_HUDState"] = { __ename__ : ["_HUDState"], __constructs__ : ["HUDSTATE_DEFAULT","HUDSTATE_GOALS","HUDSTATE_EVOLUTION","HUDSTATE_INVENTORY","HUDSTATE_SKILLS","HUDSTATE_ORGANS","HUDSTATE_DEBUG","HUDSTATE_TIMELINE","HUDSTATE_LOG","HUDSTATE_CONSOLE","HUDSTATE_MESSAGE","HUDSTATE_FINISH"] };
_$HUDState.HUDSTATE_DEFAULT = ["HUDSTATE_DEFAULT",0];
_$HUDState.HUDSTATE_DEFAULT.toString = $estr;
_$HUDState.HUDSTATE_DEFAULT.__enum__ = _$HUDState;
_$HUDState.HUDSTATE_GOALS = ["HUDSTATE_GOALS",1];
_$HUDState.HUDSTATE_GOALS.toString = $estr;
_$HUDState.HUDSTATE_GOALS.__enum__ = _$HUDState;
_$HUDState.HUDSTATE_EVOLUTION = ["HUDSTATE_EVOLUTION",2];
_$HUDState.HUDSTATE_EVOLUTION.toString = $estr;
_$HUDState.HUDSTATE_EVOLUTION.__enum__ = _$HUDState;
_$HUDState.HUDSTATE_INVENTORY = ["HUDSTATE_INVENTORY",3];
_$HUDState.HUDSTATE_INVENTORY.toString = $estr;
_$HUDState.HUDSTATE_INVENTORY.__enum__ = _$HUDState;
_$HUDState.HUDSTATE_SKILLS = ["HUDSTATE_SKILLS",4];
_$HUDState.HUDSTATE_SKILLS.toString = $estr;
_$HUDState.HUDSTATE_SKILLS.__enum__ = _$HUDState;
_$HUDState.HUDSTATE_ORGANS = ["HUDSTATE_ORGANS",5];
_$HUDState.HUDSTATE_ORGANS.toString = $estr;
_$HUDState.HUDSTATE_ORGANS.__enum__ = _$HUDState;
_$HUDState.HUDSTATE_DEBUG = ["HUDSTATE_DEBUG",6];
_$HUDState.HUDSTATE_DEBUG.toString = $estr;
_$HUDState.HUDSTATE_DEBUG.__enum__ = _$HUDState;
_$HUDState.HUDSTATE_TIMELINE = ["HUDSTATE_TIMELINE",7];
_$HUDState.HUDSTATE_TIMELINE.toString = $estr;
_$HUDState.HUDSTATE_TIMELINE.__enum__ = _$HUDState;
_$HUDState.HUDSTATE_LOG = ["HUDSTATE_LOG",8];
_$HUDState.HUDSTATE_LOG.toString = $estr;
_$HUDState.HUDSTATE_LOG.__enum__ = _$HUDState;
_$HUDState.HUDSTATE_CONSOLE = ["HUDSTATE_CONSOLE",9];
_$HUDState.HUDSTATE_CONSOLE.toString = $estr;
_$HUDState.HUDSTATE_CONSOLE.__enum__ = _$HUDState;
_$HUDState.HUDSTATE_MESSAGE = ["HUDSTATE_MESSAGE",10];
_$HUDState.HUDSTATE_MESSAGE.toString = $estr;
_$HUDState.HUDSTATE_MESSAGE.__enum__ = _$HUDState;
_$HUDState.HUDSTATE_FINISH = ["HUDSTATE_FINISH",11];
_$HUDState.HUDSTATE_FINISH.toString = $estr;
_$HUDState.HUDSTATE_FINISH.__enum__ = _$HUDState;
var _$Improv = $hxClasses["_Improv"] = { __ename__ : ["_Improv"], __constructs__ : ["IMP_HOST_RELEASE","IMP_DECAY_ACCEL","IMP_CAMO_LAYER","IMP_DOPAMINE","IMP_BRAIN_PROBE","IMP_PROT_COVER","IMP_MUSCLE","IMP_WOUND_REGEN","IMP_HEALTH","IMP_ENERGY","IMP_HARDEN_GRIP","IMP_ATTACH","IMP_REINFORCE","IMP_ACID_SPIT","IMP_SLIME_SPIT","IMP_PARALYSIS_SPIT","IMP_PANIC_GAS","IMP_PARALYSIS_GAS","IMP_MICROHABITAT","IMP_BIOMINERAL","IMP_ASSIMILATION"] };
_$Improv.IMP_HOST_RELEASE = ["IMP_HOST_RELEASE",0];
_$Improv.IMP_HOST_RELEASE.toString = $estr;
_$Improv.IMP_HOST_RELEASE.__enum__ = _$Improv;
_$Improv.IMP_DECAY_ACCEL = ["IMP_DECAY_ACCEL",1];
_$Improv.IMP_DECAY_ACCEL.toString = $estr;
_$Improv.IMP_DECAY_ACCEL.__enum__ = _$Improv;
_$Improv.IMP_CAMO_LAYER = ["IMP_CAMO_LAYER",2];
_$Improv.IMP_CAMO_LAYER.toString = $estr;
_$Improv.IMP_CAMO_LAYER.__enum__ = _$Improv;
_$Improv.IMP_DOPAMINE = ["IMP_DOPAMINE",3];
_$Improv.IMP_DOPAMINE.toString = $estr;
_$Improv.IMP_DOPAMINE.__enum__ = _$Improv;
_$Improv.IMP_BRAIN_PROBE = ["IMP_BRAIN_PROBE",4];
_$Improv.IMP_BRAIN_PROBE.toString = $estr;
_$Improv.IMP_BRAIN_PROBE.__enum__ = _$Improv;
_$Improv.IMP_PROT_COVER = ["IMP_PROT_COVER",5];
_$Improv.IMP_PROT_COVER.toString = $estr;
_$Improv.IMP_PROT_COVER.__enum__ = _$Improv;
_$Improv.IMP_MUSCLE = ["IMP_MUSCLE",6];
_$Improv.IMP_MUSCLE.toString = $estr;
_$Improv.IMP_MUSCLE.__enum__ = _$Improv;
_$Improv.IMP_WOUND_REGEN = ["IMP_WOUND_REGEN",7];
_$Improv.IMP_WOUND_REGEN.toString = $estr;
_$Improv.IMP_WOUND_REGEN.__enum__ = _$Improv;
_$Improv.IMP_HEALTH = ["IMP_HEALTH",8];
_$Improv.IMP_HEALTH.toString = $estr;
_$Improv.IMP_HEALTH.__enum__ = _$Improv;
_$Improv.IMP_ENERGY = ["IMP_ENERGY",9];
_$Improv.IMP_ENERGY.toString = $estr;
_$Improv.IMP_ENERGY.__enum__ = _$Improv;
_$Improv.IMP_HARDEN_GRIP = ["IMP_HARDEN_GRIP",10];
_$Improv.IMP_HARDEN_GRIP.toString = $estr;
_$Improv.IMP_HARDEN_GRIP.__enum__ = _$Improv;
_$Improv.IMP_ATTACH = ["IMP_ATTACH",11];
_$Improv.IMP_ATTACH.toString = $estr;
_$Improv.IMP_ATTACH.__enum__ = _$Improv;
_$Improv.IMP_REINFORCE = ["IMP_REINFORCE",12];
_$Improv.IMP_REINFORCE.toString = $estr;
_$Improv.IMP_REINFORCE.__enum__ = _$Improv;
_$Improv.IMP_ACID_SPIT = ["IMP_ACID_SPIT",13];
_$Improv.IMP_ACID_SPIT.toString = $estr;
_$Improv.IMP_ACID_SPIT.__enum__ = _$Improv;
_$Improv.IMP_SLIME_SPIT = ["IMP_SLIME_SPIT",14];
_$Improv.IMP_SLIME_SPIT.toString = $estr;
_$Improv.IMP_SLIME_SPIT.__enum__ = _$Improv;
_$Improv.IMP_PARALYSIS_SPIT = ["IMP_PARALYSIS_SPIT",15];
_$Improv.IMP_PARALYSIS_SPIT.toString = $estr;
_$Improv.IMP_PARALYSIS_SPIT.__enum__ = _$Improv;
_$Improv.IMP_PANIC_GAS = ["IMP_PANIC_GAS",16];
_$Improv.IMP_PANIC_GAS.toString = $estr;
_$Improv.IMP_PANIC_GAS.__enum__ = _$Improv;
_$Improv.IMP_PARALYSIS_GAS = ["IMP_PARALYSIS_GAS",17];
_$Improv.IMP_PARALYSIS_GAS.toString = $estr;
_$Improv.IMP_PARALYSIS_GAS.__enum__ = _$Improv;
_$Improv.IMP_MICROHABITAT = ["IMP_MICROHABITAT",18];
_$Improv.IMP_MICROHABITAT.toString = $estr;
_$Improv.IMP_MICROHABITAT.__enum__ = _$Improv;
_$Improv.IMP_BIOMINERAL = ["IMP_BIOMINERAL",19];
_$Improv.IMP_BIOMINERAL.toString = $estr;
_$Improv.IMP_BIOMINERAL.__enum__ = _$Improv;
_$Improv.IMP_ASSIMILATION = ["IMP_ASSIMILATION",20];
_$Improv.IMP_ASSIMILATION.toString = $estr;
_$Improv.IMP_ASSIMILATION.__enum__ = _$Improv;
var _$LocationType = $hxClasses["_LocationType"] = { __ename__ : ["_LocationType"], __constructs__ : ["LOCATION_AREA","LOCATION_REGION"] };
_$LocationType.LOCATION_AREA = ["LOCATION_AREA",0];
_$LocationType.LOCATION_AREA.toString = $estr;
_$LocationType.LOCATION_AREA.__enum__ = _$LocationType;
_$LocationType.LOCATION_REGION = ["LOCATION_REGION",1];
_$LocationType.LOCATION_REGION.toString = $estr;
_$LocationType.LOCATION_REGION.__enum__ = _$LocationType;
var _$Path = $hxClasses["_Path"] = { __ename__ : ["_Path"], __constructs__ : ["PATH_PROTECTION","PATH_ATTACK","PATH_CONCEAL","PATH_CONTROL","PATH_SPECIAL"] };
_$Path.PATH_PROTECTION = ["PATH_PROTECTION",0];
_$Path.PATH_PROTECTION.toString = $estr;
_$Path.PATH_PROTECTION.__enum__ = _$Path;
_$Path.PATH_ATTACK = ["PATH_ATTACK",1];
_$Path.PATH_ATTACK.toString = $estr;
_$Path.PATH_ATTACK.__enum__ = _$Path;
_$Path.PATH_CONCEAL = ["PATH_CONCEAL",2];
_$Path.PATH_CONCEAL.toString = $estr;
_$Path.PATH_CONCEAL.__enum__ = _$Path;
_$Path.PATH_CONTROL = ["PATH_CONTROL",3];
_$Path.PATH_CONTROL.toString = $estr;
_$Path.PATH_CONTROL.__enum__ = _$Path;
_$Path.PATH_SPECIAL = ["PATH_SPECIAL",4];
_$Path.PATH_SPECIAL.toString = $estr;
_$Path.PATH_SPECIAL.__enum__ = _$Path;
var _$PlayerState = $hxClasses["_PlayerState"] = { __ename__ : ["_PlayerState"], __constructs__ : ["PLR_STATE_PARASITE","PLR_STATE_ATTACHED","PLR_STATE_HOST"] };
_$PlayerState.PLR_STATE_PARASITE = ["PLR_STATE_PARASITE",0];
_$PlayerState.PLR_STATE_PARASITE.toString = $estr;
_$PlayerState.PLR_STATE_PARASITE.__enum__ = _$PlayerState;
_$PlayerState.PLR_STATE_ATTACHED = ["PLR_STATE_ATTACHED",1];
_$PlayerState.PLR_STATE_ATTACHED.toString = $estr;
_$PlayerState.PLR_STATE_ATTACHED.__enum__ = _$PlayerState;
_$PlayerState.PLR_STATE_HOST = ["PLR_STATE_HOST",2];
_$PlayerState.PLR_STATE_HOST.toString = $estr;
_$PlayerState.PLR_STATE_HOST.__enum__ = _$PlayerState;
var _$Skill = $hxClasses["_Skill"] = { __ename__ : ["_Skill"], __constructs__ : ["SKILL_FISTS","SKILL_BATON","SKILL_PISTOL","SKILL_RIFLE","SKILL_SHOTGUN","SKILL_COMPUTER","KNOW_SMOKING","KNOW_SHOPPING","KNOW_SOCIETY","KNOW_DOPAMINE","KNOW_HABITAT","KNOW_MEMORY"] };
_$Skill.SKILL_FISTS = ["SKILL_FISTS",0];
_$Skill.SKILL_FISTS.toString = $estr;
_$Skill.SKILL_FISTS.__enum__ = _$Skill;
_$Skill.SKILL_BATON = ["SKILL_BATON",1];
_$Skill.SKILL_BATON.toString = $estr;
_$Skill.SKILL_BATON.__enum__ = _$Skill;
_$Skill.SKILL_PISTOL = ["SKILL_PISTOL",2];
_$Skill.SKILL_PISTOL.toString = $estr;
_$Skill.SKILL_PISTOL.__enum__ = _$Skill;
_$Skill.SKILL_RIFLE = ["SKILL_RIFLE",3];
_$Skill.SKILL_RIFLE.toString = $estr;
_$Skill.SKILL_RIFLE.__enum__ = _$Skill;
_$Skill.SKILL_SHOTGUN = ["SKILL_SHOTGUN",4];
_$Skill.SKILL_SHOTGUN.toString = $estr;
_$Skill.SKILL_SHOTGUN.__enum__ = _$Skill;
_$Skill.SKILL_COMPUTER = ["SKILL_COMPUTER",5];
_$Skill.SKILL_COMPUTER.toString = $estr;
_$Skill.SKILL_COMPUTER.__enum__ = _$Skill;
_$Skill.KNOW_SMOKING = ["KNOW_SMOKING",6];
_$Skill.KNOW_SMOKING.toString = $estr;
_$Skill.KNOW_SMOKING.__enum__ = _$Skill;
_$Skill.KNOW_SHOPPING = ["KNOW_SHOPPING",7];
_$Skill.KNOW_SHOPPING.toString = $estr;
_$Skill.KNOW_SHOPPING.__enum__ = _$Skill;
_$Skill.KNOW_SOCIETY = ["KNOW_SOCIETY",8];
_$Skill.KNOW_SOCIETY.toString = $estr;
_$Skill.KNOW_SOCIETY.__enum__ = _$Skill;
_$Skill.KNOW_DOPAMINE = ["KNOW_DOPAMINE",9];
_$Skill.KNOW_DOPAMINE.toString = $estr;
_$Skill.KNOW_DOPAMINE.__enum__ = _$Skill;
_$Skill.KNOW_HABITAT = ["KNOW_HABITAT",10];
_$Skill.KNOW_HABITAT.toString = $estr;
_$Skill.KNOW_HABITAT.__enum__ = _$Skill;
_$Skill.KNOW_MEMORY = ["KNOW_MEMORY",11];
_$Skill.KNOW_MEMORY.toString = $estr;
_$Skill.KNOW_MEMORY.__enum__ = _$Skill;
var _$WeaponType = $hxClasses["_WeaponType"] = { __ename__ : ["_WeaponType"], __constructs__ : ["WEAPON_BLUNT","WEAPON_STUN","WEAPON_KINETIC"] };
_$WeaponType.WEAPON_BLUNT = ["WEAPON_BLUNT",0];
_$WeaponType.WEAPON_BLUNT.toString = $estr;
_$WeaponType.WEAPON_BLUNT.__enum__ = _$WeaponType;
_$WeaponType.WEAPON_STUN = ["WEAPON_STUN",1];
_$WeaponType.WEAPON_STUN.toString = $estr;
_$WeaponType.WEAPON_STUN.__enum__ = _$WeaponType;
_$WeaponType.WEAPON_KINETIC = ["WEAPON_KINETIC",2];
_$WeaponType.WEAPON_KINETIC.toString = $estr;
_$WeaponType.WEAPON_KINETIC.__enum__ = _$WeaponType;
var _$_$Math = function() { };
$hxClasses["__Math"] = _$_$Math;
_$_$Math.__name__ = ["__Math"];
_$_$Math.gpPerTurn = function() {
	var gp = _$_$Math.game.player.vars.organGrowthPointsPerTurn;
	if(_$_$Math.game.location == _$LocationType.LOCATION_AREA && _$_$Math.game.area.isHabitat) gp = Math.round(gp * (100 + _$_$Math.game.area.habitat.evolutionBonus) / 100.0);
	return gp;
};
_$_$Math.growthEnergyPerTurn = function() {
	var x = _$_$Math.game.player.vars.organGrowthEnergyPerTurn;
	return x;
};
_$_$Math.epPerTurn = function() {
	var ep = 10;
	if(_$_$Math.game.location == _$LocationType.LOCATION_AREA && _$_$Math.game.area.isHabitat) ep = Math.round(ep * (100 + _$_$Math.game.area.habitat.evolutionBonus) / 100.0);
	return ep;
};
_$_$Math.evolutionEnergyPerTurn = function() {
	if(_$_$Math.game.location == _$LocationType.LOCATION_AREA && _$_$Math.game.area.isHabitat) return _$_$Math.game.player.vars.evolutionEnergyPerTurnMicrohabitat; else return _$_$Math.game.player.vars.evolutionEnergyPerTurn;
};
_$_$Math.damage = function(p) {
	var base;
	if(p.val != null) base = p.val; else base = Const.roll(p.min,p.max);
	var damage = base;
	var s = null;
	if(_$_$Math.game.config.extendedInfo) {
		s = new StringBuf();
		s.b += Std.string("Damage " + p.name + ": ");
		if(p.val != null) if(base == null) s.b += "null"; else s.b += "" + base; else s.b += Std.string(p.min + "..." + p.max + " (" + base + ")");
	}
	if(p.mods != null && p.mods.length > 0) {
		if(_$_$Math.game.config.extendedInfo) s.b += " + [{ ";
		var _g1 = 0;
		var _g = p.mods.length;
		while(_g1 < _g) {
			var i = _g1++;
			var b = p.mods[i];
			var roll = 0;
			var ok = true;
			var val;
			if(b.val != null) val = b.val; else val = Const.roll(b.min,b.max);
			if(b.chance != null) {
				roll = Std.random(100);
				if(roll > b.chance) ok = false;
			}
			if(ok) damage += val;
			if(_$_$Math.game.config.extendedInfo) {
				s.b += Std.string(b.name + " ");
				if(b.val > 0 || b.min > 0 || b.max > 0) s.b += "+";
				if(b.val != null) if(b.val == null) s.b += "null"; else s.b += "" + b.val; else s.b += Std.string(b.min + "..." + b.max + " (" + (val > 0?"+":"") + val + ")");
				if(b.chance != null) s.b += Std.string(", " + b.chance + "% (roll: " + roll + "), " + (ok?"success":"fail"));
				if(i < p.mods.length - 1) s.b += " }, { ";
			}
		}
		if(_$_$Math.game.config.extendedInfo) s.b += " }]";
	}
	if(damage < 0) damage = 0;
	if(p.chance != null) {
		var roll1 = Std.random(100);
		if(_$_$Math.game.config.extendedInfo) s.b += Std.string(", " + p.chance + "% (roll: " + roll1 + "), " + (roll1 <= p.chance?"success":"fail"));
		if(roll1 > p.chance) damage = 0;
	}
	if(_$_$Math.game.config.extendedInfo) {
		s.b += Std.string(" = " + damage + ".");
		_$_$Math.game.info(s.b);
	}
	return damage;
};
_$_$Math.skill = function(p) {
	var roll = Std.random(100);
	var chance = p.level;
	if(p.mods != null) {
		var _g = 0;
		var _g1 = p.mods;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			chance += b.val;
		}
	}
	if(chance > 99) chance = 99;
	if(chance < 1) chance = 1;
	if(_$_$Math.game.config.extendedInfo) {
		var s = new StringBuf();
		s.b += "Skill ";
		s.add(const_SkillsConst.getInfo(p.id).name);
		s.b += ": ";
		if(chance == null) s.b += "null"; else s.b += "" + chance;
		s.b += "% ";
		if(p.mods != null && p.mods.length > 0) {
			s.b += "[";
			if(p.level == null) s.b += "null"; else s.b += "" + p.level;
			s.b += "%, ";
			var _g11 = 0;
			var _g2 = p.mods.length;
			while(_g11 < _g2) {
				var i = _g11++;
				var b1 = p.mods[i];
				if(b1.name == null) s.b += "null"; else s.b += "" + b1.name;
				s.b += " ";
				if(b1.val > 0) s.b += "+";
				if(b1.val == null) s.b += "null"; else s.b += "" + b1.val;
				s.b += "%";
				if(i < p.mods.length - 1) s.b += ", ";
			}
			s.b += "] ";
		}
		s.b += "(roll: ";
		if(roll == null) s.b += "null"; else s.b += "" + roll;
		s.b += ") = ";
		if(roll <= chance) s.b += "success"; else s.b += "fail";
		s.b += ".";
		_$_$Math.game.info(s.b);
	}
	return roll <= chance;
};
_$_$Math.opposingAttr = function(attr,attr2,name) {
	var chance = 50 + 5 * (attr - attr2);
	if(chance > 99) chance = 99;
	if(chance < 1) chance = 1;
	var roll = Std.random(100);
	_$_$Math.game.info("Opposing attribute check for " + name + ": " + attr + " vs " + attr2 + ", " + chance + "% (roll: " + roll + ") = " + (roll <= chance?"success":"fail") + ".");
	return roll <= chance;
};
_$_$Math.detectHabitat = function(p) {
	var chance = p.base + p.base * p.interest / 100.0;
	var roll = Std.random(100);
	_$_$Math.game.info("Detect habitat (base + base * interest / 100): " + p.base + " + " + p.base + " * " + p.interest + " = " + chance + "% (roll: " + roll + ") = " + (roll <= chance?"success":"fail") + ".");
	return roll <= chance;
};
var aPath_Engine = function(a,w,h) {
	this.area = a;
	this.width = w;
	this.height = h;
	this.map = [];
	var _g = 0;
	while(_g < w) {
		var xi = _g++;
		this.map[xi] = [];
		var _g1 = 0;
		while(_g1 < h) {
			var yi = _g1++;
			this.map[xi][yi] = new aPath_Node(xi,yi,10,this);
		}
	}
};
$hxClasses["aPath.Engine"] = aPath_Engine;
aPath_Engine.__name__ = ["aPath","Engine"];
aPath_Engine.prototype = {
	map: null
	,startNode: null
	,endNode: null
	,area: null
	,width: null
	,height: null
	,getPath: function(x1,y1,x2,y2) {
		if(x1 == x2 && y1 == y2) return null;
		var _g1 = 0;
		var _g = this.height;
		while(_g1 < _g) {
			var y = _g1++;
			var _g3 = 0;
			var _g2 = this.width;
			while(_g3 < _g2) {
				var x = _g3++;
				this.map[x][y].clean();
			}
		}
		var openList = [];
		var closeList = [];
		this.startNode = this.map[x1][y1];
		this.endNode = this.map[x2][y2];
		var currentNode = this.startNode;
		while(true) {
			if(currentNode == null) return null;
			var adjacent = currentNode.getAdjacentNodes(this.map);
			adjacent.sort(function(node_a,node_b) {
				var num = node_a.getF() - node_b.getF();
				if(num == 0) num = node_a.getH() - node_b.getH();
				return num;
			});
			var _g4 = 0;
			while(_g4 < adjacent.length) {
				var node = adjacent[_g4];
				++_g4;
				if(!node.open) {
					node.open = true;
					node.parent = currentNode;
				}
			}
			currentNode.close = true;
			if(currentNode == this.endNode) break;
			currentNode = adjacent[0];
		}
		var path = [];
		var currentNode1 = this.endNode;
		while(true) {
			path.push(currentNode1);
			currentNode1 = currentNode1.parent;
			if(currentNode1 == this.startNode) break;
		}
		path.reverse();
		return path;
	}
	,__class__: aPath_Engine
};
var aPath_Node = function(x,y,cost,e) {
	this.x = x;
	this.y = y;
	this.cost = cost;
	this.engine = e;
};
$hxClasses["aPath.Node"] = aPath_Node;
aPath_Node.__name__ = ["aPath","Node"];
aPath_Node.prototype = {
	x: null
	,y: null
	,cost: null
	,parent: null
	,open: null
	,close: null
	,engine: null
	,clean: function() {
		this.open = false;
		this.close = false;
		this.parent = null;
	}
	,getAdjacentNodes: function(map) {
		var list = [];
		var _g = 0;
		var _g1 = aPath_Node.adjacent;
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			if(!this.engine.area.isWalkable(this.x + i[0],this.y + i[1])) continue;
			var node = map[this.x + i[0]][this.y + i[1]];
			if(this.engine.area.hasAI(this.x + i[0],this.y + i[1]) && node != this.engine.endNode) continue;
			if(node != null && !node.close) list.push(node);
		}
		return list;
	}
	,getG: function() {
		var endNode = this.engine.endNode;
		var xDistance = Math.abs(endNode.x - this.x);
		var yDistance = Math.abs(endNode.y - this.y);
		var G;
		if(xDistance > yDistance) G = 14 * yDistance + 10 * (xDistance - yDistance); else G = 14 * xDistance + 10 * (yDistance - xDistance);
		return G;
	}
	,getH: function() {
		var endNode = this.engine.endNode;
		var xDistance = Math.abs(endNode.x - this.x);
		var yDistance = Math.abs(endNode.y - this.y);
		var H;
		if(xDistance > yDistance) H = 14 * yDistance + 10 * (xDistance - yDistance); else H = 14 * xDistance + 10 * (yDistance - xDistance);
		return H;
	}
	,getF: function() {
		return this.getH() + this.getG();
	}
	,__class__: aPath_Node
};
var ai_AI = function(g,vx,vy) {
	this.game = g;
	this.type = "undefined";
	this.job = "undefined";
	this.name = { real : "undefined", realCapped : "undefined", unknown : "undefined", unknownCapped : "undefined"};
	this.sounds = new haxe_ds_StringMap();
	this.id = ai_AI._maxID++;
	this.x = vx;
	this.y = vy;
	this.roamTargetX = -1;
	this.roamTargetY = -1;
	this.state = _$AIState.AI_STATE_IDLE;
	this.stateTime = 0;
	this.reason = ai__$AIStateChangeReason.REASON_NONE;
	this.set_alertness(0);
	this.brainProbed = 0;
	this.timers = { alert : 0};
	this.direction = 0;
	this.isAggressive = false;
	this.isCommon = true;
	this.isNameKnown = false;
	this.isJobKnown = false;
	this.isAttrsKnown = false;
	this.isHuman = false;
	this.parasiteAttached = false;
	this.baseAttrs = { strength : 1, constitution : 1, intellect : 1, psyche : 1};
	this.modAttrs = { strength : 0, constitution : 0, intellect : 0, psyche : 0};
	this._strength = 0;
	this._constitution = 0;
	this._intellect = 0;
	this._psyche = 0;
	this.maxHealth = 1;
	this.set_health(1);
	this.set_energy(10);
	this.maxEnergy = 10;
	this._objectsSeen = new List();
	this._turnsInvisible = 0;
	this.inventory = new game_Inventory(this.game);
	this.skills = new game_Skills(this.game,false);
	this.organs = new game_Organs(this.game,this);
	this.effects = new game_Effects(this.game,this);
	this.traits = new List();
};
$hxClasses["ai.AI"] = ai_AI;
ai_AI.__name__ = ["ai","AI"];
ai_AI.prototype = {
	game: null
	,entity: null
	,event: null
	,npc: null
	,type: null
	,job: null
	,name: null
	,sounds: null
	,isAggressive: null
	,isNameKnown: null
	,isJobKnown: null
	,isAttrsKnown: null
	,isHuman: null
	,isCommon: null
	,id: null
	,x: null
	,y: null
	,roamTargetX: null
	,roamTargetY: null
	,direction: null
	,_objectsSeen: null
	,_turnsInvisible: null
	,state: null
	,stateTime: null
	,reason: null
	,alertness: null
	,timers: null
	,baseAttrs: null
	,modAttrs: null
	,_strength: null
	,_constitution: null
	,_intellect: null
	,_psyche: null
	,health: null
	,maxHealth: null
	,energy: null
	,maxEnergy: null
	,brainProbed: null
	,inventory: null
	,skills: null
	,organs: null
	,effects: null
	,traits: null
	,parasiteAttached: null
	,hasTrait: function(t) {
		return Lambda.has(this.traits,t);
	}
	,addTrait: function(t) {
		if(Lambda.has(this.traits,t)) return;
		this.traits.add(t);
	}
	,derivedStats: function() {
		this.recalc();
		this.set_energy(this.maxEnergy);
		this.set_health(this.maxHealth);
	}
	,recalc: function() {
		this.modAttrs.strength = 0;
		this.modAttrs.constitution = 0;
		this.modAttrs.intellect = 0;
		this.modAttrs.psyche = 0;
		var o = this.organs.get(_$Improv.IMP_MUSCLE);
		if(o != null) this.modAttrs.strength += o.params.strength;
		this._strength = this.baseAttrs.strength + this.modAttrs.strength;
		this._constitution = this.baseAttrs.constitution + this.modAttrs.constitution;
		this._intellect = this.baseAttrs.intellect + this.modAttrs.intellect;
		this._psyche = this.baseAttrs.psyche + this.modAttrs.psyche;
		var o1 = this.organs.get(_$Improv.IMP_ENERGY);
		var energyMod = 1.0;
		if(o1 != null) energyMod = o1.params.hostEnergyMod;
		this.maxEnergy = Std["int"]((5 + this.get_strength() + this.get_constitution()) * 10 * energyMod);
		this.maxHealth = this.get_strength() + this.get_constitution();
		var o2 = this.organs.get(_$Improv.IMP_HEALTH);
		if(o2 != null) this.maxHealth += o2.params.health;
	}
	,getName: function() {
		if(this.isNameKnown) return this.name.real; else return this.name.unknown;
	}
	,getNameCapped: function() {
		if(this.isNameKnown) return this.name.realCapped; else return this.name.unknownCapped;
	}
	,createEntity: function() {
		var atlasRow = Reflect.field(Const,"ROW_" + this.type.toUpperCase());
		if(atlasRow == null) {
			haxe_Log.trace("No such entity type: " + this.type,{ fileName : "AI.hx", lineNumber : 240, className : "ai.AI", methodName : "createEntity"});
			return;
		}
		this.entity = new entities_AIEntity(this,this.game,this.x,this.y,atlasRow);
		this.game.scene.add(this.entity);
		this.updateEntity();
	}
	,setPosition: function(vx,vy,force) {
		if(force == null) force = false;
		if(this.game.area.getAI(vx,vy) != null && !force) return;
		this.x = vx;
		this.y = vy;
		this.entity.setPosition(this.x,this.y);
	}
	,changeRandomDirection: function() {
		this.direction = this.game.area.getRandomDirection(this.x,this.y);
		if(this.direction == -1) haxe_Log.trace("ai at (" + this.x + "," + this.y + "): nowhere to move!",{ fileName : "AI.hx", lineNumber : 267, className : "ai.AI", methodName : "changeRandomDirection"});
	}
	,seesPosition: function(xx,yy) {
		var distSqr = Const.getDistSquared(this.x,this.y,xx,yy);
		if(distSqr > ai_AI.VIEW_DISTANCE * ai_AI.VIEW_DISTANCE) return false;
		if(!this.game.area.isVisible(this.x,this.y,xx,yy)) return false;
		return true;
	}
	,isNear: function(xx,yy) {
		return Math.abs(xx - this.x) <= 1 && Math.abs(yy - this.y) <= 1;
	}
	,setState: function(vstate,vreason,msg) {
		if(vreason == null) vreason = ai__$AIStateChangeReason.REASON_NONE;
		if(this.state == vstate) return;
		this.state = vstate;
		this.stateTime = 0;
		this.reason = vreason;
		if(this.state == _$AIState.AI_STATE_ALERT) this.timers.alert = ai_AI.ALERTED_TIMER;
		this.roamTargetX = -1;
		this.roamTargetY = -1;
		if(msg != null) this.game.log((this.isNameKnown?this.name.realCapped:this.name.unknownCapped) + " " + msg);
		this.onStateChange();
		this.updateEntity();
	}
	,updateEntity: function() {
		var alertFrame = Const.FRAME_EMPTY;
		if(this.state == _$AIState.AI_STATE_ALERT) alertFrame = Const.FRAME_ALERTED; else if(this.state == _$AIState.AI_STATE_IDLE) {
			if(this.alertness > 75) alertFrame = Const.FRAME_ALERT3; else if(this.alertness > 50) alertFrame = Const.FRAME_ALERT2; else if(this.alertness > 0) alertFrame = Const.FRAME_ALERT1;
		}
		if(this.effects.has(_$AIEffectType.EFFECT_PANIC)) alertFrame = Const.FRAME_PANIC;
		if(this.effects.has(_$AIEffectType.EFFECT_PARALYSIS)) alertFrame = Const.FRAME_PARALYSIS;
		this.entity._spriteAlert.setFrame(alertFrame,Const.ROW_ALERT);
	}
	,logicRoam: function() {
		if(this.roamTargetX >= 0 && this.roamTargetY >= 0) {
			this.logicMoveTo(this.roamTargetX,this.roamTargetY);
			return;
		}
		if(Math.random() < 0.2) {
			this.direction = this.game.area.getRandomDirection(this.x,this.y);
			if(this.direction == -1) haxe_Log.trace("ai at (" + this.x + "," + this.y + "): nowhere to move!",{ fileName : "AI.hx", lineNumber : 267, className : "ai.AI", methodName : "changeRandomDirection"});
		}
		if(this.direction == -1) return;
		var nx = this.x + Const.dirx[this.direction];
		var ny = this.y + Const.diry[this.direction];
		var ok = this.game.area.isWalkable(nx,ny) && !this.game.area.hasAI(nx,ny) && !(this.game.playerArea.x == nx && this.game.playerArea.y == ny);
		if(!ok) {
			this.direction = this.game.area.getRandomDirection(this.x,this.y);
			if(this.direction == -1) haxe_Log.trace("ai at (" + this.x + "," + this.y + "): nowhere to move!",{ fileName : "AI.hx", lineNumber : 267, className : "ai.AI", methodName : "changeRandomDirection"});
			return;
		} else this.setPosition(nx,ny);
	}
	,logicRunAwayFrom: function(xx,yy) {
		var tmp = [];
		var _g1 = 0;
		var _g = Const.dirx.length;
		while(_g1 < _g) {
			var i = _g1++;
			var nx1 = this.x + Const.dirx[i];
			var ny1 = this.y + Const.diry[i];
			var ok = this.game.area.isWalkable(nx1,ny1) && !this.game.area.hasAI(nx1,ny1) && (Math.abs(nx1 - this.game.playerArea.x) >= Math.abs(this.x - this.game.playerArea.x) && Math.abs(ny1 - this.game.playerArea.y) >= Math.abs(this.y - this.game.playerArea.y));
			if(ok) tmp.push(i);
		}
		if(tmp.length == 0) {
			if(Std.random(100) < 30) this.game.log((this.isNameKnown?this.name.realCapped:this.name.unknownCapped) + " " + "cowers in panic!");
			return;
		}
		this.direction = tmp[Std.random(tmp.length)];
		var nx = this.x + Const.dirx[this.direction];
		var ny = this.y + Const.diry[this.direction];
		this.setPosition(nx,ny);
	}
	,logicTearParasiteAway: function() {
		this.game.log((this.isNameKnown?this.name.realCapped:this.name.unknownCapped) + " " + "tries to tear you away!");
		var _g = this.game.playerArea;
		_g.set_attachHold(_g.attachHold - this.get_strength());
		if(this.game.playerArea.attachHold > 0) return;
		this.parasiteAttached = false;
		this.game.log((this.isNameKnown?this.name.realCapped:this.name.unknownCapped) + " " + "manages to tear you away.");
		this.game.playerArea.onDetach();
	}
	,logicMoveTo: function(x2,y2) {
		var path = this.game.area.getPath(this.x,this.y,x2,y2);
		if(path == null) return;
		this.setPosition(path[0].x,path[0].y);
	}
	,logicAttack: function() {
		var item = this.inventory.getFirstWeapon();
		var info = null;
		if(item == null) info = const_ItemsConst.fists; else info = item.info;
		var weapon = info.weapon;
		if(!weapon.isRanged && !(Math.abs(this.game.playerArea.x - this.x) <= 1 && Math.abs(this.game.playerArea.y - this.y) <= 1)) {
			this.logicMoveTo(this.game.playerArea.x,this.game.playerArea.y);
			return;
		}
		if(this.isHuman && this.game.player.state == _$PlayerState.PLR_STATE_ATTACHED && this.game.playerArea.attachHost.isHuman && this.type != "blackops") {
			if(Std.random(100) < 30) {
				this.game.log((this.isNameKnown?this.name.realCapped:this.name.unknownCapped) + " " + "hesitates to attack you.");
				this.emitSound({ text : "Shit!", radius : 5, alertness : 10});
				return;
			}
		}
		var roll = _$_$Math.skill({ id : weapon.skill, level : this.skills.getLevel(weapon.skill)});
		if(!roll) {
			this.game.log((this.isNameKnown?this.name.realCapped:this.name.unknownCapped) + " " + ("tries to " + weapon.verb1 + " you, but misses."));
			return;
		}
		if(weapon.type == _$WeaponType.WEAPON_STUN && this.game.player.state == _$PlayerState.PLR_STATE_HOST) {
			var mods = [];
			if(this.game.player.state == _$PlayerState.PLR_STATE_HOST) {
				var o = this.game.player.host.organs.get(_$Improv.IMP_PROT_COVER);
				if(o != null) mods.push({ name : "protective cover", val : -Std["int"](o.params.armor)});
			}
			var roll1 = _$_$Math.damage({ name : "STUN AI->player", min : weapon.minDamage, max : weapon.maxDamage, mods : mods});
			var resist = _$_$Math.opposingAttr(this.game.player.host.get_constitution(),roll1,"con/stun");
			if(resist) roll1 = roll1 / 2 | 0;
			if(this.game.config.extendedInfo) this.game.info("stun for " + roll1 + " rounds, -" + roll1 * 2 + " control.");
			var _g = this.game.player;
			_g.set_hostControl(_g.hostControl - roll1 * 2);
			this.game.log((this.isNameKnown?this.name.realCapped:this.name.unknownCapped) + " " + (weapon.verb2 + " your host for " + roll1 + " rounds. You're losing control."));
			this.game.player.host.onEffect({ type : _$AIEffectType.EFFECT_PARALYSIS, points : roll1, isTimer : true});
			this.game.playerArea.onDamage(0);
		} else {
			var mods1 = [];
			if(!weapon.isRanged && weapon.type == _$WeaponType.WEAPON_BLUNT) mods1.push({ name : "melee 0.5xSTR", min : 0, max : Std["int"](this.get_strength() / 2)});
			if(this.game.player.state == _$PlayerState.PLR_STATE_HOST) {
				var o1 = this.game.player.host.organs.get(_$Improv.IMP_PROT_COVER);
				if(o1 != null) mods1.push({ name : "protective cover", val : -Std["int"](o1.params.armor)});
			}
			var damage = _$_$Math.damage({ name : "AI->player", min : weapon.minDamage, max : weapon.maxDamage, mods : mods1});
			this.game.log((this.isNameKnown?this.name.realCapped:this.name.unknownCapped) + " " + (weapon.verb2 + " " + (this.game.player.state == _$PlayerState.PLR_STATE_HOST?"your host":"you") + " for " + damage + " damage."));
			this.game.playerArea.onDamage(damage);
		}
	}
	,stateIdle: function() {
		if(!this.game.player.vars.invisibilityEnabled && this.seesPosition(this.game.playerArea.x,this.game.playerArea.y)) {
			var distance = Const.getDist(this.x,this.y,this.game.playerArea.x,this.game.playerArea.y);
			var baseAlertness = 3;
			var alertnessBonus = 0;
			if(this.game.player.state == _$PlayerState.PLR_STATE_HOST) {
				var params = const_EvolutionConst.getParams(_$Improv.IMP_CAMO_LAYER,0);
				var o = this.organs.get(_$Improv.IMP_CAMO_LAYER);
				if(o != null) baseAlertness = o.params.alertness; else baseAlertness = params.alertness;
				var params1 = const_EvolutionConst.getParams(_$Improv.IMP_PROT_COVER,0);
				var o1 = this.organs.get(_$Improv.IMP_PROT_COVER);
				if(o1 != null) alertnessBonus += o1.params.alertness; else alertnessBonus += params1.alertness;
			}
			var _g = this;
			_g.set_alertness(_g.alertness + ((baseAlertness * (ai_AI.VIEW_DISTANCE + 1 - distance) | 0) + alertnessBonus));
		} else {
			var _g1 = this;
			_g1.set_alertness(_g1.alertness - 5);
		}
		if(this.alertness >= 100) {
			this.setState(_$AIState.AI_STATE_ALERT,this.game.player.state == _$PlayerState.PLR_STATE_PARASITE?ai__$AIStateChangeReason.REASON_PARASITE:ai__$AIStateChangeReason.REASON_HOST);
			return;
		}
		this.visionIdle();
		if(this.alertness > 0 && this.roamTargetX < 0) return;
		this.logicRoam();
	}
	,stateAlert: function() {
		if(!this.game.player.vars.invisibilityEnabled && this.seesPosition(this.game.playerArea.x,this.game.playerArea.y)) this.timers.alert = ai_AI.ALERTED_TIMER; else this.timers.alert--;
		if(this.timers.alert == 0) {
			this.setState(_$AIState.AI_STATE_IDLE);
			this.set_alertness(10);
			return;
		}
		if(this.parasiteAttached) this.logicTearParasiteAway(); else if(this.isAggressive) {
			if(!this.game.player.vars.invisibilityEnabled) {
				if(!this.seesPosition(this.game.playerArea.x,this.game.playerArea.y)) this.logicMoveTo(this.game.playerArea.x,this.game.playerArea.y); else this.logicAttack();
			}
		} else this.logicRunAwayFrom(this.game.playerArea.x,this.game.playerArea.y);
	}
	,stateHost: function() {
		this.emitRandomSound("" + Std.string(_$AIState.AI_STATE_HOST),(100 - this.game.player.hostControl) / 3 | 0);
		if(this.effects.has(_$AIEffectType.EFFECT_CANNOT_TEAR_AWAY)) return;
		if(this.game.player.hostControl < 25 && Std.random(100) < 5) {
			this.game.log((this.isNameKnown?this.name.realCapped:this.name.unknownCapped) + " " + "manages to tear you away.");
			this.setState(_$AIState.AI_STATE_POST_DETACH,null,"feels groggy and confused.");
			this.entity.setMask(Const.FRAME_EMPTY,null);
			this.game.playerArea.onDetach();
		}
	}
	,visionIdle: function() {
		var tmp = this.game.area.getObjectsInRadius(this.x,this.y,ai_AI.VIEW_DISTANCE,true);
		var _g_head = tmp.h;
		var _g_val = null;
		while(_g_head != null) {
			var obj;
			obj = (function($this) {
				var $r;
				_g_val = _g_head[0];
				_g_head = _g_head[1];
				$r = _g_val;
				return $r;
			}(this));
			if(obj.type != "body") continue;
			if(Lambda.has(this._objectsSeen,obj.id)) continue;
			var body = obj;
			if(this.isHuman && body.isHumanBody) this.setState(_$AIState.AI_STATE_ALERT,ai__$AIStateChangeReason.REASON_BODY);
			this._objectsSeen.add(obj.id);
		}
	}
	,checkDespawn: function() {
		if(this.state != _$AIState.AI_STATE_IDLE || this.state == _$AIState.AI_STATE_IDLE && this.alertness > 25) {
			this._turnsInvisible = 0;
			return;
		}
		var isVisible = this.game.area.isVisible(this.game.playerArea.x,this.game.playerArea.y,this.x,this.y);
		if(isVisible) {
			this._turnsInvisible = 0;
			return;
		}
		this._turnsInvisible++;
		if(this._turnsInvisible > ai_AI.DESPAWN_TIMER) this.game.area.removeAI(this);
	}
	,effectSlime: function() {
		var free = this.effects.decrease(_$AIEffectType.EFFECT_SLIME,this.get_strength());
		if(free) this.game.log((this.isNameKnown?this.name.realCapped:this.name.unknownCapped) + " " + "manages to get free of the slime."); else this.game.log((this.isNameKnown?this.name.realCapped:this.name.unknownCapped) + " " + "desperately tries to get free of the slime.");
		if(this.state == _$AIState.AI_STATE_IDLE) this.setState(_$AIState.AI_STATE_ALERT,ai__$AIStateChangeReason.REASON_DAMAGE);
		this.emitRandomSound("" + Std.string(ai__$AIStateChangeReason.REASON_DAMAGE),30);
	}
	,turn: function() {
		this.stateTime++;
		this.entity.turn();
		this.effects.turn(1);
		if(this.effects.has(_$AIEffectType.EFFECT_SLIME)) this.effectSlime(); else if(this.effects.has(_$AIEffectType.EFFECT_PARALYSIS)) 1; else if(this.effects.has(_$AIEffectType.EFFECT_PANIC)) this.logicRunAwayFrom(this.game.playerArea.x,this.game.playerArea.y); else if(this.state == _$AIState.AI_STATE_IDLE) this.stateIdle(); else if(this.state == _$AIState.AI_STATE_ALERT) this.stateAlert(); else if(this.state == _$AIState.AI_STATE_HOST) this.stateHost(); else if(this.state == _$AIState.AI_STATE_POST_DETACH && this.stateTime >= 2) this.setState(_$AIState.AI_STATE_ALERT,ai__$AIStateChangeReason.REASON_DETACH);
		this.updateEntity();
		this.checkDespawn();
		this.emitRandomSound("" + Std.string(this.state),20);
	}
	,emitRandomSound: function(key,chance) {
		if(chance == null) chance = 100;
		var array = this.sounds.get(key);
		if(array == null) return;
		if(Std.random(100) > chance) return;
		var idx = Std.random(array.length);
		var sound = array[idx];
		this.emitSound(sound);
	}
	,emitSound: function(sound) {
		if(this.state == _$AIState.AI_STATE_IDLE && sound.params != null && sound.params.minAlertness != null && this.alertness < sound.params.minAlertness) return;
		this.entity.setText(sound.text,2);
		if(sound.radius <= 0 || sound.alertness <= 0) return;
		var list = this.game.area.getAIinRadius(this.x,this.y,sound.radius,false);
		var _g_head = list.h;
		var _g_val = null;
		while(_g_head != null) {
			var ai1;
			ai1 = (function($this) {
				var $r;
				_g_val = _g_head[0];
				_g_head = _g_head[1];
				$r = _g_val;
				return $r;
			}(this));
			if(ai1.state == _$AIState.AI_STATE_IDLE) {
				var _g = ai1;
				_g.set_alertness(_g.alertness + sound.alertness);
			}
		}
	}
	,onDamage: function(damage) {
		this.organs.onDamage(damage);
		var _g = this;
		_g.set_health(_g.health - damage);
		if(this.health == 0) {
			this.onDeath();
			return;
		}
		if(this.state == _$AIState.AI_STATE_IDLE) this.setState(_$AIState.AI_STATE_ALERT,ai__$AIStateChangeReason.REASON_DAMAGE);
		this.emitRandomSound("" + Std.string(ai__$AIStateChangeReason.REASON_DAMAGE),30);
	}
	,onDeath: function() {
		if(this.state == _$AIState.AI_STATE_DEAD) return;
		this.game.log("DEBUG " + ("AI.onDeath[" + this.id + "]"),_$TextColor.COLOR_DEBUG);
		if(this.game.player.state != _$PlayerState.PLR_STATE_HOST || this.game.player.host != this) this.game.log((this.isNameKnown?this.name.realCapped:this.name.unknownCapped) + " " + "dies.");
		this.setState(_$AIState.AI_STATE_DEAD);
		this.game.area.removeAI(this);
		var o = new objects_BodyObject(this.game,this.x,this.y,this.type);
		var organ = this.organs.getActive(_$Improv.IMP_DECAY_ACCEL);
		if(organ != null) o.setDecay(organ.params.turns);
		o.isHumanBody = this.isHuman;
		o.organPoints = this.organs.getPoints();
		o.inventory = this.inventory;
		this.game.area.updateVisibility();
		if(this.npc != null) {
			this.npc.isDead = true;
			this.npc.statusKnown = true;
		}
	}
	,onAttach: function() {
		this.parasiteAttached = true;
		this.setState(_$AIState.AI_STATE_ALERT,ai__$AIStateChangeReason.REASON_ATTACH);
	}
	,onInvade: function() {
		this.setState(_$AIState.AI_STATE_HOST);
		this.parasiteAttached = false;
		this.entity.setMask(Const.FRAME_MASK_POSSESSED,null);
		this.effects.add({ type : _$AIEffectType.EFFECT_CANNOT_TEAR_AWAY, points : 5, isTimer : true});
		this.updateEntity();
	}
	,onDetach: function() {
		this.setState(_$AIState.AI_STATE_POST_DETACH,null,"feels groggy and confused.");
		this.entity.setMask(Const.FRAME_EMPTY,null);
	}
	,onEffect: function(effect) {
		this.effects.add(effect);
		this.updateEntity();
	}
	,onStateChange: function() {
	}
	,onAttack: function() {
	}
	,log: function(s) {
		this.game.log((this.isNameKnown?this.name.realCapped:this.name.unknownCapped) + " " + s);
	}
	,set_health: function(v) {
		return this.health = Const.clamp(v,0,this.maxHealth);
	}
	,set_energy: function(v) {
		return this.energy = Const.clamp(v,0,this.maxEnergy);
	}
	,set_alertness: function(v) {
		return this.alertness = Const.clamp(v,0,100);
	}
	,get_strength: function() {
		return this._strength;
	}
	,set_strength: function(v) {
		return this.baseAttrs.strength = v;
	}
	,get_constitution: function() {
		return this._constitution;
	}
	,set_constitution: function(v) {
		return this.baseAttrs.constitution = v;
	}
	,get_intellect: function() {
		return this._intellect;
	}
	,set_intellect: function(v) {
		return this.baseAttrs.intellect = v;
	}
	,get_psyche: function() {
		return this._psyche;
	}
	,set_psyche: function(v) {
		return this.baseAttrs.psyche = v;
	}
	,__class__: ai_AI
	,__properties__: {set_energy:"set_energy",set_health:"set_health",set_psyche:"set_psyche",get_psyche:"get_psyche",set_intellect:"set_intellect",get_intellect:"get_intellect",set_constitution:"set_constitution",get_constitution:"get_constitution",set_strength:"set_strength",get_strength:"get_strength",set_alertness:"set_alertness"}
};
var ai__$AIStateChangeReason = $hxClasses["ai._AIStateChangeReason"] = { __ename__ : ["ai","_AIStateChangeReason"], __constructs__ : ["REASON_NONE","REASON_BODY","REASON_BACKUP","REASON_ATTACH","REASON_DETACH","REASON_HOST","REASON_PARASITE","REASON_DAMAGE","REASON_WITNESS"] };
ai__$AIStateChangeReason.REASON_NONE = ["REASON_NONE",0];
ai__$AIStateChangeReason.REASON_NONE.toString = $estr;
ai__$AIStateChangeReason.REASON_NONE.__enum__ = ai__$AIStateChangeReason;
ai__$AIStateChangeReason.REASON_BODY = ["REASON_BODY",1];
ai__$AIStateChangeReason.REASON_BODY.toString = $estr;
ai__$AIStateChangeReason.REASON_BODY.__enum__ = ai__$AIStateChangeReason;
ai__$AIStateChangeReason.REASON_BACKUP = ["REASON_BACKUP",2];
ai__$AIStateChangeReason.REASON_BACKUP.toString = $estr;
ai__$AIStateChangeReason.REASON_BACKUP.__enum__ = ai__$AIStateChangeReason;
ai__$AIStateChangeReason.REASON_ATTACH = ["REASON_ATTACH",3];
ai__$AIStateChangeReason.REASON_ATTACH.toString = $estr;
ai__$AIStateChangeReason.REASON_ATTACH.__enum__ = ai__$AIStateChangeReason;
ai__$AIStateChangeReason.REASON_DETACH = ["REASON_DETACH",4];
ai__$AIStateChangeReason.REASON_DETACH.toString = $estr;
ai__$AIStateChangeReason.REASON_DETACH.__enum__ = ai__$AIStateChangeReason;
ai__$AIStateChangeReason.REASON_HOST = ["REASON_HOST",5];
ai__$AIStateChangeReason.REASON_HOST.toString = $estr;
ai__$AIStateChangeReason.REASON_HOST.__enum__ = ai__$AIStateChangeReason;
ai__$AIStateChangeReason.REASON_PARASITE = ["REASON_PARASITE",6];
ai__$AIStateChangeReason.REASON_PARASITE.toString = $estr;
ai__$AIStateChangeReason.REASON_PARASITE.__enum__ = ai__$AIStateChangeReason;
ai__$AIStateChangeReason.REASON_DAMAGE = ["REASON_DAMAGE",7];
ai__$AIStateChangeReason.REASON_DAMAGE.toString = $estr;
ai__$AIStateChangeReason.REASON_DAMAGE.__enum__ = ai__$AIStateChangeReason;
ai__$AIStateChangeReason.REASON_WITNESS = ["REASON_WITNESS",8];
ai__$AIStateChangeReason.REASON_WITNESS.toString = $estr;
ai__$AIStateChangeReason.REASON_WITNESS.__enum__ = ai__$AIStateChangeReason;
var ai_HumanAI = function(g,vx,vy) {
	ai_AI.call(this,g,vx,vy);
	this.type = "human";
	this.name.real = this.name.realCapped = const_NameConst.getHumanName();
	this.isHuman = true;
	this.set_strength(4 + Std.random(4));
	this.set_constitution(4 + Std.random(4));
	this.set_intellect(4 + Std.random(4));
	this.set_psyche(4 + Std.random(4));
	if(Std.random(100) < 20) {
		this.skills.addID(_$Skill.KNOW_SMOKING);
		this.inventory.addID("cigarettes");
	}
	if(Std.random(100) < 75) {
		this.skills.addID(_$Skill.KNOW_SHOPPING);
		this.inventory.addID(Std.random(10) < 7?"wallet":"money");
	}
	this.inventory.addID("mobilePhone");
	if(Std.random(100) < 10) this.addTrait(_$AITraitType.TRAIT_DRUG_ADDICT);
	this.derivedStats();
};
$hxClasses["ai.HumanAI"] = ai_HumanAI;
ai_HumanAI.__name__ = ["ai","HumanAI"];
ai_HumanAI.__super__ = ai_AI;
ai_HumanAI.prototype = $extend(ai_AI.prototype,{
	__class__: ai_HumanAI
});
var ai_AgentAI = function(g,vx,vy) {
	ai_HumanAI.call(this,g,vx,vy);
	this.type = "agent";
	this.name.unknown = "agent";
	this.name.unknownCapped = "Agent";
	var _g = new haxe_ds_StringMap();
	_g.set("" + Std.string(ai__$AIStateChangeReason.REASON_DAMAGE),[{ text : "Ouch!", radius : 2, alertness : 5, params : null},{ text : "*GROAN*", radius : 2, alertness : 5, params : null}]);
	_g.set("" + Std.string(_$AIState.AI_STATE_IDLE),[{ text : "Huh?", radius : 0, alertness : 0, params : { minAlertness : 25}},{ text : "Whu?", radius : 0, alertness : 0, params : { minAlertness : 25}},{ text : "What the?", radius : 0, alertness : 0, params : { minAlertness : 50}},{ text : "*GASP*", radius : 0, alertness : 0, params : { minAlertness : 75}}]);
	_g.set("" + Std.string(_$AIState.AI_STATE_ALERT),[{ text : "STOP!", radius : 7, alertness : 10, params : null}]);
	_g.set("" + Std.string(_$AIState.AI_STATE_HOST),[{ text : "*moan*", radius : 2, alertness : 5, params : null},{ text : "*MOAN*", radius : 3, alertness : 5, params : null}]);
	this.sounds = _g;
	this.isAggressive = true;
	this.inventory.addID("pistol");
	this.skills.addID(_$Skill.SKILL_PISTOL,40 + Std.random(25));
};
$hxClasses["ai.AgentAI"] = ai_AgentAI;
ai_AgentAI.__name__ = ["ai","AgentAI"];
ai_AgentAI.__super__ = ai_HumanAI;
ai_AgentAI.prototype = $extend(ai_HumanAI.prototype,{
	__class__: ai_AgentAI
});
var ai_BlackopsAI = function(g,vx,vy) {
	ai_HumanAI.call(this,g,vx,vy);
	this.type = "blackops";
	this.name.unknown = "blackops agent";
	this.name.unknownCapped = "Blackops agent";
	var _g = new haxe_ds_StringMap();
	_g.set("" + Std.string(ai__$AIStateChangeReason.REASON_DAMAGE),[{ text : "*GRUNT*", radius : 2, alertness : 5, params : null},{ text : "*GROAN*", radius : 2, alertness : 5, params : null}]);
	_g.set("" + Std.string(_$AIState.AI_STATE_IDLE),[{ text : "Huh?", radius : 0, alertness : 0, params : { minAlertness : 25}},{ text : "Whu?", radius : 0, alertness : 0, params : { minAlertness : 25}},{ text : "What the?", radius : 0, alertness : 0, params : { minAlertness : 50}},{ text : "BOGEY!", radius : 0, alertness : 0, params : { minAlertness : 75}}]);
	_g.set("" + Std.string(_$AIState.AI_STATE_ALERT),[{ text : "TANGO!", radius : 7, alertness : 10, params : null}]);
	_g.set("" + Std.string(_$AIState.AI_STATE_HOST),[{ text : "*moan*", radius : 2, alertness : 5, params : null},{ text : "*MOAN*", radius : 3, alertness : 5, params : null}]);
	this.sounds = _g;
	this.isAggressive = true;
	this.inventory.addID(Std.random(100) < 70?"assaultRifle":"combatShotgun");
	this.inventory.addID("pistol");
	this.skills.addID(_$Skill.SKILL_RIFLE,60 + Std.random(25));
	this.skills.addID(_$Skill.SKILL_SHOTGUN,60 + Std.random(25));
	this.skills.addID(_$Skill.SKILL_PISTOL,60 + Std.random(25));
};
$hxClasses["ai.BlackopsAI"] = ai_BlackopsAI;
ai_BlackopsAI.__name__ = ["ai","BlackopsAI"];
ai_BlackopsAI.__super__ = ai_HumanAI;
ai_BlackopsAI.prototype = $extend(ai_HumanAI.prototype,{
	__class__: ai_BlackopsAI
});
var ai_CivilianAI = function(g,vx,vy) {
	ai_HumanAI.call(this,g,vx,vy);
	this.type = "civilian";
	this.name.unknown = "random civilian";
	this.name.unknownCapped = "Random civilian";
	var _g = new haxe_ds_StringMap();
	_g.set("" + Std.string(ai__$AIStateChangeReason.REASON_DAMAGE),[{ text : "Ouch!", radius : 2, alertness : 5, params : null},{ text : "*GROAN*", radius : 2, alertness : 5, params : null}]);
	_g.set("" + Std.string(_$AIState.AI_STATE_IDLE),[{ text : "Huh?", radius : 0, alertness : 0, params : { minAlertness : 25}},{ text : "Whu?", radius : 0, alertness : 0, params : { minAlertness : 25}},{ text : "What the?", radius : 0, alertness : 0, params : { minAlertness : 50}},{ text : "*GASP*", radius : 0, alertness : 0, params : { minAlertness : 75}}]);
	_g.set("" + Std.string(_$AIState.AI_STATE_ALERT),[{ text : "*SCREAM*", radius : 7, alertness : 15, params : null}]);
	_g.set("" + Std.string(_$AIState.AI_STATE_HOST),[{ text : "*moan*", radius : 2, alertness : 5, params : null},{ text : "*MOAN*", radius : 3, alertness : 5, params : null}]);
	this.sounds = _g;
	if(this.game.player.vars.searchEnabled) {
		var chance = 25;
		if(this.game.area.info.id == _$AreaType.AREA_CITY_LOW) chance = 50; else if(this.game.area.info.id == _$AreaType.AREA_CITY_MEDIUM) chance = 75; else if(this.game.area.info.id == _$AreaType.AREA_CITY_HIGH) chance = 85; else if(this.game.area.info.id == _$AreaType.AREA_FACILITY) chance = 90;
		if(Std.random(100) < chance) {
			this.skills.addID(_$Skill.SKILL_COMPUTER,10 + Std.random(20));
			this.inventory.remove("mobilePhone");
			this.inventory.addID("smartphone");
		}
		var chance1 = 5;
		if(this.game.area.info.id == _$AreaType.AREA_CITY_LOW) chance1 = 10; else if(this.game.area.info.id == _$AreaType.AREA_CITY_MEDIUM) chance1 = 20; else if(this.game.area.info.id == _$AreaType.AREA_CITY_HIGH) chance1 = 25; else if(this.game.area.info.id == _$AreaType.AREA_FACILITY) chance1 = 30;
		if(Std.random(100) < chance1) {
			this.skills.addID(_$Skill.SKILL_COMPUTER,20 + Std.random(30));
			this.inventory.addID("laptop");
		}
	}
};
$hxClasses["ai.CivilianAI"] = ai_CivilianAI;
ai_CivilianAI.__name__ = ["ai","CivilianAI"];
ai_CivilianAI.__super__ = ai_HumanAI;
ai_CivilianAI.prototype = $extend(ai_HumanAI.prototype,{
	onStateChange: function() {
		if(this.state == _$AIState.AI_STATE_ALERT && !this.parasiteAttached) {
			if(!this.inventory.has("smartphone") && !this.inventory.has("mobilePhone")) return;
			if(this.game.area.isHabitat) {
				this.game.log((this.isNameKnown?this.name.realCapped:this.name.unknownCapped) + " " + "fumbles with something in its hands. \"Shit! No reception!\"");
				return;
			}
			this.game.managerArea.addAI(this,_$AreaManagerEventType.AREAEVENT_CALL_LAW,1);
		}
	}
	,__class__: ai_CivilianAI
});
var ai_DogAI = function(g,vx,vy) {
	ai_AI.call(this,g,vx,vy);
	this.type = "dog";
	this.name = { real : "the dog", realCapped : "The dog", unknown : "the dog", unknownCapped : "The dog"};
	var _g = new haxe_ds_StringMap();
	_g.set("" + Std.string(ai__$AIStateChangeReason.REASON_DAMAGE),[{ text : "*WHIMPER*", radius : 2, alertness : 5, params : null},{ text : "*WHINE*", radius : 2, alertness : 5, params : null},{ text : "*YELP*", radius : 3, alertness : 5, params : null}]);
	_g.set("" + Std.string(_$AIState.AI_STATE_IDLE),[{ text : "*GROWL*", radius : 2, alertness : 5, params : { minAlertness : 25}}]);
	_g.set("" + Std.string(_$AIState.AI_STATE_ALERT),[{ text : "*BARK*", radius : 5, alertness : 10, params : null}]);
	_g.set("" + Std.string(_$AIState.AI_STATE_HOST),[{ text : "*whimper*", radius : 2, alertness : 3, params : null},{ text : "*whine*", radius : 2, alertness : 3, params : null},{ text : "*growl*", radius : 2, alertness : 3, params : null},{ text : "*GROWL*", radius : 2, alertness : 3, params : null}]);
	this.sounds = _g;
	this.set_strength(2 + Std.random(4));
	this.set_constitution(2 + Std.random(4));
	this.set_intellect(1);
	this.set_psyche(1 + Std.random(1));
	this.derivedStats();
};
$hxClasses["ai.DogAI"] = ai_DogAI;
ai_DogAI.__name__ = ["ai","DogAI"];
ai_DogAI.__super__ = ai_AI;
ai_DogAI.prototype = $extend(ai_AI.prototype,{
	__class__: ai_DogAI
});
var ai_PoliceAI = function(g,vx,vy) {
	ai_HumanAI.call(this,g,vx,vy);
	this.type = "police";
	this.name.unknown = "police officer";
	this.name.unknownCapped = "Police officer";
	var _g = new haxe_ds_StringMap();
	_g.set("" + Std.string(ai__$AIStateChangeReason.REASON_DAMAGE),[{ text : "Ouch!", radius : 2, alertness : 5, params : null},{ text : "*GROAN*", radius : 2, alertness : 5, params : null}]);
	_g.set("" + Std.string(_$AIState.AI_STATE_IDLE),[{ text : "Huh?", radius : 0, alertness : 0, params : { minAlertness : 25}},{ text : "Whu?", radius : 0, alertness : 0, params : { minAlertness : 25}},{ text : "What the?", radius : 0, alertness : 0, params : { minAlertness : 50}},{ text : "*GASP*", radius : 0, alertness : 0, params : { minAlertness : 75}}]);
	_g.set("" + Std.string(_$AIState.AI_STATE_ALERT),[{ text : "STOP!", radius : 7, alertness : 10, params : null}]);
	_g.set("" + Std.string(_$AIState.AI_STATE_HOST),[{ text : "*moan*", radius : 2, alertness : 5, params : null},{ text : "*MOAN*", radius : 3, alertness : 5, params : null}]);
	this.sounds = _g;
	this.isAggressive = true;
	var ch = 20;
	if(this.game.area.info.isHighRisk) ch = 35;
	if(Std.random(100) < ch) {
		this.inventory.addID("stunner");
		this.skills.addID(_$Skill.SKILL_FISTS,50 + Std.random(25));
	} else {
		this.inventory.addID("baton");
		this.skills.addID(_$Skill.SKILL_BATON,50 + Std.random(25));
	}
	this.isBackup = false;
	this.isBackupCalled = false;
};
$hxClasses["ai.PoliceAI"] = ai_PoliceAI;
ai_PoliceAI.__name__ = ["ai","PoliceAI"];
ai_PoliceAI.__super__ = ai_HumanAI;
ai_PoliceAI.prototype = $extend(ai_HumanAI.prototype,{
	isBackup: null
	,isBackupCalled: null
	,onAttack: function() {
		if(!this.isBackupCalled && this.state == _$AIState.AI_STATE_ALERT && !this.parasiteAttached) {
			this.isBackupCalled = true;
			this.game.managerArea.addAI(this,_$AreaManagerEventType.AREAEVENT_CALL_BACKUP,1);
		}
	}
	,onStateChange: function() {
		if(this.state == _$AIState.AI_STATE_IDLE && this.isBackup) this.game.area.removeAI(this);
	}
	,__class__: ai_PoliceAI
});
var ai_SecurityAI = function(g,vx,vy) {
	ai_HumanAI.call(this,g,vx,vy);
	this.type = "security";
	this.name.unknown = "security guard";
	this.name.unknownCapped = "Security guard";
	var _g = new haxe_ds_StringMap();
	_g.set("" + Std.string(ai__$AIStateChangeReason.REASON_DAMAGE),[{ text : "Ouch!", radius : 2, alertness : 5, params : null},{ text : "*GROAN*", radius : 2, alertness : 5, params : null}]);
	_g.set("" + Std.string(_$AIState.AI_STATE_IDLE),[{ text : "Huh?", radius : 0, alertness : 0, params : { minAlertness : 25}},{ text : "Whu?", radius : 0, alertness : 0, params : { minAlertness : 25}},{ text : "What the?", radius : 0, alertness : 0, params : { minAlertness : 50}},{ text : "*GASP*", radius : 0, alertness : 0, params : { minAlertness : 75}}]);
	_g.set("" + Std.string(_$AIState.AI_STATE_ALERT),[{ text : "STOP!", radius : 7, alertness : 10, params : null}]);
	_g.set("" + Std.string(_$AIState.AI_STATE_HOST),[{ text : "*moan*", radius : 2, alertness : 5, params : null},{ text : "*MOAN*", radius : 3, alertness : 5, params : null}]);
	this.sounds = _g;
	this.isAggressive = true;
	if(Std.random(100) < 20) {
		this.inventory.addID("pistol");
		this.skills.addID(_$Skill.SKILL_PISTOL,25 + Std.random(25));
	}
	this.inventory.addID("baton");
	this.skills.addID(_$Skill.SKILL_BATON,50 + Std.random(25));
	this.isBackup = false;
	this.isBackupCalled = false;
};
$hxClasses["ai.SecurityAI"] = ai_SecurityAI;
ai_SecurityAI.__name__ = ["ai","SecurityAI"];
ai_SecurityAI.__super__ = ai_HumanAI;
ai_SecurityAI.prototype = $extend(ai_HumanAI.prototype,{
	isBackup: null
	,isBackupCalled: null
	,onAttack: function() {
		if(!this.isBackupCalled && this.state == _$AIState.AI_STATE_ALERT && !this.parasiteAttached) {
			this.isBackupCalled = true;
			this.game.managerArea.addAI(this,_$AreaManagerEventType.AREAEVENT_CALL_BACKUP,1);
		}
	}
	,onStateChange: function() {
		if(this.state == _$AIState.AI_STATE_IDLE && this.isBackup) this.game.area.removeAI(this);
	}
	,__class__: ai_SecurityAI
});
var ai_SoldierAI = function(g,vx,vy) {
	ai_HumanAI.call(this,g,vx,vy);
	this.type = "soldier";
	this.name.unknown = "soldier";
	this.name.unknownCapped = "Soldier";
	var _g = new haxe_ds_StringMap();
	_g.set("" + Std.string(ai__$AIStateChangeReason.REASON_DAMAGE),[{ text : "Ouch!", radius : 2, alertness : 5, params : null},{ text : "*GROAN*", radius : 2, alertness : 5, params : null}]);
	_g.set("" + Std.string(_$AIState.AI_STATE_IDLE),[{ text : "Huh?", radius : 0, alertness : 0, params : { minAlertness : 25}},{ text : "Whu?", radius : 0, alertness : 0, params : { minAlertness : 25}},{ text : "What the?", radius : 0, alertness : 0, params : { minAlertness : 50}},{ text : "*GASP*", radius : 0, alertness : 0, params : { minAlertness : 75}}]);
	_g.set("" + Std.string(_$AIState.AI_STATE_ALERT),[{ text : "STOP!", radius : 7, alertness : 10, params : null}]);
	_g.set("" + Std.string(_$AIState.AI_STATE_HOST),[{ text : "*moan*", radius : 2, alertness : 5, params : null},{ text : "*MOAN*", radius : 3, alertness : 5, params : null}]);
	this.sounds = _g;
	this.isAggressive = true;
	this.inventory.addID("assaultRifle");
	this.skills.addID(_$Skill.SKILL_RIFLE,40 + Std.random(25));
};
$hxClasses["ai.SoldierAI"] = ai_SoldierAI;
ai_SoldierAI.__name__ = ["ai","SoldierAI"];
ai_SoldierAI.__super__ = ai_HumanAI;
ai_SoldierAI.prototype = $extend(ai_HumanAI.prototype,{
	__class__: ai_SoldierAI
});
var com_haxepunk__$Entity_SolidType_$Impl_$ = {};
$hxClasses["com.haxepunk._Entity.SolidType_Impl_"] = com_haxepunk__$Entity_SolidType_$Impl_$;
com_haxepunk__$Entity_SolidType_$Impl_$.__name__ = ["com","haxepunk","_Entity","SolidType_Impl_"];
com_haxepunk__$Entity_SolidType_$Impl_$.__properties__ = {get_type:"get_type"}
com_haxepunk__$Entity_SolidType_$Impl_$._new = function(e) {
	return e;
};
com_haxepunk__$Entity_SolidType_$Impl_$.get_type = function(this1) {
	return this1;
};
com_haxepunk__$Entity_SolidType_$Impl_$.fromLeft = function(v) {
	var e = com_haxepunk_ds_Either.Left(v);
	return e;
};
com_haxepunk__$Entity_SolidType_$Impl_$.fromRight = function(v) {
	var e = com_haxepunk_ds_Either.Right(v);
	return e;
};
var com_haxepunk_Mask = function() {
	this._parent = com_haxepunk_Entity._EMPTY;
	this._class = Type.getClassName(js_Boot.getClass(this));
	this._check = new haxe_ds_StringMap();
	var key = Type.getClassName(com_haxepunk_Mask);
	this._check.set(key,$bind(this,this.collideMask));
	var key1 = Type.getClassName(com_haxepunk_masks_Masklist);
	this._check.set(key1,$bind(this,this.collideMasklist));
};
$hxClasses["com.haxepunk.Mask"] = com_haxepunk_Mask;
com_haxepunk_Mask.__name__ = ["com","haxepunk","Mask"];
com_haxepunk_Mask.prototype = {
	get_parent: function() {
		if(this._parent != com_haxepunk_Entity._EMPTY) return this._parent; else return null;
	}
	,set_parent: function(value) {
		if(value == null) this._parent = com_haxepunk_Entity._EMPTY; else this._parent = value;
		this.update();
		return value;
	}
	,list: null
	,collide: function(mask) {
		var cbFunc = this._check.get(mask._class);
		if(cbFunc != null) return cbFunc(mask);
		cbFunc = mask._check.get(this._class);
		if(cbFunc != null) return cbFunc(this);
		return false;
	}
	,collideMask: function(other) {
		return this._parent.get_x() - this._parent.originX + this._parent.get_width() > other._parent.get_x() - other._parent.originX && this._parent.get_y() - this._parent.originY + this._parent.get_height() > other._parent.get_y() - other._parent.originY && this._parent.get_x() - this._parent.originX < other._parent.get_x() - other._parent.originX + other._parent.get_width() && this._parent.get_y() - this._parent.originY < other._parent.get_y() - other._parent.originY + other._parent.get_height();
	}
	,collideMasklist: function(other) {
		return other.collide(this);
	}
	,debugDraw: function(graphics,scaleX,scaleY) {
	}
	,update: function() {
	}
	,project: function(axis,projection) {
		var cur;
		var max = -Infinity;
		var min = Infinity;
		cur = -this._parent.originX * axis.x - this._parent.originY * axis.y;
		if(cur < min) min = cur;
		if(cur > max) max = cur;
		cur = (-this._parent.originX + this._parent.get_width()) * axis.x - this._parent.originY * axis.y;
		if(cur < min) min = cur;
		if(cur > max) max = cur;
		cur = -this._parent.originX * axis.x + (-this._parent.originY + this._parent.get_height()) * axis.y;
		if(cur < min) min = cur;
		if(cur > max) max = cur;
		cur = (-this._parent.originX + this._parent.get_width()) * axis.x + (-this._parent.originY + this._parent.get_height()) * axis.y;
		if(cur < min) min = cur;
		if(cur > max) max = cur;
		projection.min = min;
		projection.max = max;
	}
	,_class: null
	,_check: null
	,_parent: null
	,__class__: com_haxepunk_Mask
	,__properties__: {set_parent:"set_parent",get_parent:"get_parent"}
};
var js_Boot = function() { };
$hxClasses["js.Boot"] = js_Boot;
js_Boot.__name__ = ["js","Boot"];
js_Boot.__unhtml = function(s) {
	return s.split("&").join("&amp;").split("<").join("&lt;").split(">").join("&gt;");
};
js_Boot.__trace = function(v,i) {
	var msg;
	if(i != null) msg = i.fileName + ":" + i.lineNumber + ": "; else msg = "";
	msg += js_Boot.__string_rec(v,"");
	if(i != null && i.customParams != null) {
		var _g = 0;
		var _g1 = i.customParams;
		while(_g < _g1.length) {
			var v1 = _g1[_g];
			++_g;
			msg += "," + js_Boot.__string_rec(v1,"");
		}
	}
	var d;
	if(typeof(document) != "undefined" && (d = document.getElementById("haxe:trace")) != null) d.innerHTML += js_Boot.__unhtml(msg) + "<br/>"; else if(typeof console != "undefined" && console.log != null) console.log(msg);
};
js_Boot.getClass = function(o) {
	if((o instanceof Array) && o.__enum__ == null) return Array; else {
		var cl = o.__class__;
		if(cl != null) return cl;
		var name = js_Boot.__nativeClassName(o);
		if(name != null) return js_Boot.__resolveNativeClass(name);
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) return "null";
	if(s.length >= 5) return "<...>";
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) t = "object";
	switch(t) {
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) return o[0];
				var str2 = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i1 = _g1++;
					if(i1 != 2) str2 += "," + js_Boot.__string_rec(o[i1],s); else str2 += js_Boot.__string_rec(o[i1],s);
				}
				return str2 + ")";
			}
			var l = o.length;
			var i;
			var str1 = "[";
			s += "\t";
			var _g2 = 0;
			while(_g2 < l) {
				var i2 = _g2++;
				str1 += (i2 > 0?",":"") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") return s2;
		}
		var k = null;
		var str = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str.length != 2) str += ", \n";
		str += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str += "\n" + s + "}";
		return str;
	case "function":
		return "<function>";
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) return false;
	if(cc == cl) return true;
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g1 = 0;
		var _g = intf.length;
		while(_g1 < _g) {
			var i = _g1++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) return true;
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) return false;
	switch(cl) {
	case Int:
		return (o|0) === o;
	case Float:
		return typeof(o) == "number";
	case Bool:
		return typeof(o) == "boolean";
	case String:
		return typeof(o) == "string";
	case Array:
		return (o instanceof Array) && o.__enum__ == null;
	case Dynamic:
		return true;
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(o instanceof cl) return true;
				if(js_Boot.__interfLoop(js_Boot.getClass(o),cl)) return true;
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(o instanceof cl) return true;
			}
		} else return false;
		if(cl == Class && o.__name__ != null) return true;
		if(cl == Enum && o.__ename__ != null) return true;
		return o.__enum__ == cl;
	}
};
js_Boot.__cast = function(o,t) {
	if(js_Boot.__instanceof(o,t)) return o; else throw new js__$Boot_HaxeError("Cannot cast " + Std.string(o) + " to " + Std.string(t));
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") return null;
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var com_haxepunk_masks_Hitbox = function(width,height,x,y) {
	if(y == null) y = 0;
	if(x == null) x = 0;
	if(height == null) height = 1;
	if(width == null) width = 1;
	this._y = 0;
	this._x = 0;
	this._height = 0;
	this._width = 0;
	com_haxepunk_Mask.call(this);
	this._width = width;
	this._height = height;
	this._x = x;
	this._y = y;
	var key = Type.getClassName(com_haxepunk_masks_Hitbox);
	this._check.set(key,$bind(this,this.collideHitbox));
};
$hxClasses["com.haxepunk.masks.Hitbox"] = com_haxepunk_masks_Hitbox;
com_haxepunk_masks_Hitbox.__name__ = ["com","haxepunk","masks","Hitbox"];
com_haxepunk_masks_Hitbox.__super__ = com_haxepunk_Mask;
com_haxepunk_masks_Hitbox.prototype = $extend(com_haxepunk_Mask.prototype,{
	collideMask: function(other) {
		var px = this._x + this._parent.get_x();
		var py = this._y + this._parent.get_y();
		var ox = other._parent.originX + other._parent.get_x();
		var oy = other._parent.originY + other._parent.get_y();
		return px + this._width > ox && py + this._height > oy && px < ox + other._parent.get_width() && py < oy + other._parent.get_height();
	}
	,collideHitbox: function(other) {
		var px = this._x + this._parent.get_x();
		var py = this._y + this._parent.get_y();
		var ox = other._x + other._parent.get_x();
		var oy = other._y + other._parent.get_y();
		return px + this._width > ox && py + this._height > oy && px < ox + other._width && py < oy + other._height;
	}
	,get_x: function() {
		return this._x;
	}
	,set_x: function(value) {
		if(this._x == value) return value;
		this._x = value;
		if(this.list != null) this.list.update(); else if((this._parent != com_haxepunk_Entity._EMPTY?this._parent:null) != null) this.update();
		return this._x;
	}
	,get_y: function() {
		return this._y;
	}
	,set_y: function(value) {
		if(this._y == value) return value;
		this._y = value;
		if(this.list != null) this.list.update(); else if((this._parent != com_haxepunk_Entity._EMPTY?this._parent:null) != null) this.update();
		return this._y;
	}
	,get_width: function() {
		return this._width;
	}
	,set_width: function(value) {
		if(this._width == value) return value;
		this._width = value;
		if(this.list != null) this.list.update(); else if((this._parent != com_haxepunk_Entity._EMPTY?this._parent:null) != null) this.update();
		return this._width;
	}
	,get_height: function() {
		return this._height;
	}
	,set_height: function(value) {
		if(this._height == value) return value;
		this._height = value;
		if(this.list != null) this.list.update(); else if((this._parent != com_haxepunk_Entity._EMPTY?this._parent:null) != null) this.update();
		return this._height;
	}
	,update: function() {
		if((this._parent != com_haxepunk_Entity._EMPTY?this._parent:null) != null) {
			this._parent.originX = -this._x;
			this._parent.originY = -this._y;
			this._parent.set_width(this._width);
			this._parent.set_height(this._height);
			if(this.list != null) this.list.update();
		}
	}
	,debugDraw: function(graphics,scaleX,scaleY) {
		if(this.list != null && (this._parent != com_haxepunk_Entity._EMPTY?this._parent:null) != null && this.list.get_count() > 1) graphics.drawRect(((this._parent != com_haxepunk_Entity._EMPTY?this._parent:null).get_x() - com_haxepunk_HXP.camera.x + this.get_x()) * scaleX,((this._parent != com_haxepunk_Entity._EMPTY?this._parent:null).get_y() - com_haxepunk_HXP.camera.y + this.get_y()) * scaleY,this.get_width() * scaleX,this.get_height() * scaleY);
	}
	,project: function(axis,projection) {
		var px = this._x;
		var py = this._y;
		var cur;
		var max = -Infinity;
		var min = Infinity;
		cur = px * axis.x + py * axis.y;
		if(cur < min) min = cur;
		if(cur > max) max = cur;
		cur = (px + this._width) * axis.x + py * axis.y;
		if(cur < min) min = cur;
		if(cur > max) max = cur;
		cur = px * axis.x + (py + this._height) * axis.y;
		if(cur < min) min = cur;
		if(cur > max) max = cur;
		cur = (px + this._width) * axis.x + (py + this._height) * axis.y;
		if(cur < min) min = cur;
		if(cur > max) max = cur;
		projection.min = min;
		projection.max = max;
	}
	,_width: null
	,_height: null
	,_x: null
	,_y: null
	,__class__: com_haxepunk_masks_Hitbox
	,__properties__: $extend(com_haxepunk_Mask.prototype.__properties__,{set_height:"set_height",get_height:"get_height",set_width:"set_width",get_width:"get_width",set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x"})
});
var com_haxepunk_masks_Masklist = function(masks) {
	com_haxepunk_masks_Hitbox.call(this);
	this._masks = [];
	this._temp = [];
	this._count = 0;
	var _g = 0;
	while(_g < masks.length) {
		var m = masks[_g];
		++_g;
		this.add(m);
	}
};
$hxClasses["com.haxepunk.masks.Masklist"] = com_haxepunk_masks_Masklist;
com_haxepunk_masks_Masklist.__name__ = ["com","haxepunk","masks","Masklist"];
com_haxepunk_masks_Masklist.__super__ = com_haxepunk_masks_Hitbox;
com_haxepunk_masks_Masklist.prototype = $extend(com_haxepunk_masks_Hitbox.prototype,{
	collide: function(mask) {
		var _g = 0;
		var _g1 = this._masks;
		while(_g < _g1.length) {
			var m = _g1[_g];
			++_g;
			if(m.collide(mask)) return true;
		}
		return false;
	}
	,collideMasklist: function(other) {
		var _g = 0;
		var _g1 = this._masks;
		while(_g < _g1.length) {
			var a = _g1[_g];
			++_g;
			var _g2 = 0;
			var _g3 = other._masks;
			while(_g2 < _g3.length) {
				var b = _g3[_g2];
				++_g2;
				if(a.collide(b)) return true;
			}
		}
		return true;
	}
	,add: function(mask) {
		this._masks[this._count++] = mask;
		mask.list = this;
		mask.set_parent(this._parent != com_haxepunk_Entity._EMPTY?this._parent:null);
		this.update();
		return mask;
	}
	,remove: function(mask) {
		if(HxOverrides.indexOf(this._masks,mask,0) < 0) return mask;
		this._temp.length = 0;
		var _g = 0;
		var _g1 = this._masks;
		while(_g < _g1.length) {
			var m = _g1[_g];
			++_g;
			if(m == mask) {
				mask.list = null;
				mask.set_parent(null);
				this._count--;
				this.update();
			} else this._temp[this._temp.length] = m;
		}
		var temp = this._masks;
		this._masks = this._temp;
		this._temp = temp;
		return mask;
	}
	,removeAt: function(index) {
		if(index == null) index = 0;
		this._temp.length = 0;
		var i = this._masks.length;
		index %= i;
		while(i-- > 0) if(i == index) {
			this._masks[index].list = null;
			this._count--;
			this.update();
		} else this._temp[this._temp.length] = this._masks[index];
		var temp = this._masks;
		this._masks = this._temp;
		this._temp = temp;
	}
	,removeAll: function() {
		var _g = 0;
		var _g1 = this._masks;
		while(_g < _g1.length) {
			var m = _g1[_g];
			++_g;
			m.list = null;
		}
		this._count = 0;
		this._masks.length = 0;
		this._temp.length = 0;
		this.update();
	}
	,getMask: function(index) {
		if(index == null) index = 0;
		return this._masks[index % this._masks.length];
	}
	,set_parent: function(parent) {
		var _g = 0;
		var _g1 = this._masks;
		while(_g < _g1.length) {
			var m = _g1[_g];
			++_g;
			m.set_parent(parent);
		}
		return com_haxepunk_masks_Hitbox.prototype.set_parent.call(this,parent);
	}
	,update: function() {
		var t;
		var l;
		var r;
		var b;
		var h;
		t = l = 2147483647;
		r = b = -2147483648;
		var h1;
		var p;
		var _g = 0;
		var _g1 = this._masks;
		while(_g < _g1.length) {
			var m = _g1[_g];
			++_g;
			if(js_Boot.__instanceof(m,com_haxepunk_masks_Polygon)) {
				p = m;
				if(p != null) {
					if(p.minX < l) l = p.minX;
					if(p.minY < t) t = p.minY;
					if(p.maxX > r) r = p.maxX;
					if(p.maxY > b) b = p.maxY;
				}
			} else if((h1 = js_Boot.__cast(m , com_haxepunk_masks_Hitbox)) != null) {
				if(h1.get_x() < l) l = h1.get_x();
				if(h1.get_y() < t) t = h1.get_y();
				if(h1.get_x() + h1.get_width() > r) r = h1.get_x() + h1.get_width();
				if(h1.get_y() + h1.get_height() > b) b = h1.get_y() + h1.get_height();
			}
		}
		this._x = l;
		this._y = t;
		this._width = r - l;
		this._height = b - t;
		com_haxepunk_masks_Hitbox.prototype.update.call(this);
	}
	,debugDraw: function(graphics,scaleX,scaleY) {
		var _g = 0;
		var _g1 = this._masks;
		while(_g < _g1.length) {
			var m = _g1[_g];
			++_g;
			m.debugDraw(graphics,scaleX,scaleY);
		}
	}
	,count: null
	,get_count: function() {
		return this._count;
	}
	,_masks: null
	,_temp: null
	,_count: null
	,__class__: com_haxepunk_masks_Masklist
	,__properties__: $extend(com_haxepunk_masks_Hitbox.prototype.__properties__,{get_count:"get_count"})
});
var openfl_geom_Point = function(x,y) {
	if(y == null) y = 0;
	if(x == null) x = 0;
	this.x = x;
	this.y = y;
};
$hxClasses["openfl.geom.Point"] = openfl_geom_Point;
openfl_geom_Point.__name__ = ["openfl","geom","Point"];
openfl_geom_Point.distance = function(pt1,pt2) {
	var dx = pt1.x - pt2.x;
	var dy = pt1.y - pt2.y;
	return Math.sqrt(dx * dx + dy * dy);
};
openfl_geom_Point.interpolate = function(pt1,pt2,f) {
	return new openfl_geom_Point(pt2.x + f * (pt1.x - pt2.x),pt2.y + f * (pt1.y - pt2.y));
};
openfl_geom_Point.polar = function(len,angle) {
	return new openfl_geom_Point(len * Math.cos(angle),len * Math.sin(angle));
};
openfl_geom_Point.prototype = {
	x: null
	,y: null
	,add: function(v) {
		return new openfl_geom_Point(v.x + this.x,v.y + this.y);
	}
	,clone: function() {
		return new openfl_geom_Point(this.x,this.y);
	}
	,copyFrom: function(sourcePoint) {
		this.x = sourcePoint.x;
		this.y = sourcePoint.y;
	}
	,equals: function(toCompare) {
		return toCompare != null && toCompare.x == this.x && toCompare.y == this.y;
	}
	,normalize: function(thickness) {
		if(this.x == 0 && this.y == 0) return; else {
			var norm = thickness / Math.sqrt(this.x * this.x + this.y * this.y);
			this.x *= norm;
			this.y *= norm;
		}
	}
	,offset: function(dx,dy) {
		this.x += dx;
		this.y += dy;
	}
	,setTo: function(xa,ya) {
		this.x = xa;
		this.y = ya;
	}
	,subtract: function(v) {
		return new openfl_geom_Point(this.x - v.x,this.y - v.y);
	}
	,toString: function() {
		return "(x=" + this.x + ", y=" + this.y + ")";
	}
	,__toLimeVector2: function() {
		if(openfl_geom_Point.__limeVector2 == null) openfl_geom_Point.__limeVector2 = new lime_math_Vector2();
		openfl_geom_Point.__limeVector2.setTo(this.x,this.y);
		return openfl_geom_Point.__limeVector2;
	}
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y);
	}
	,__class__: openfl_geom_Point
	,__properties__: {get_length:"get_length"}
};
var lime_math_Matrix3 = function(a,b,c,d,tx,ty) {
	if(ty == null) ty = 0;
	if(tx == null) tx = 0;
	if(d == null) d = 1;
	if(c == null) c = 0;
	if(b == null) b = 0;
	if(a == null) a = 1;
	this.a = a;
	this.b = b;
	this.c = c;
	this.d = d;
	this.tx = tx;
	this.ty = ty;
};
$hxClasses["lime.math.Matrix3"] = lime_math_Matrix3;
lime_math_Matrix3.__name__ = ["lime","math","Matrix3"];
lime_math_Matrix3.prototype = {
	a: null
	,b: null
	,c: null
	,d: null
	,tx: null
	,ty: null
	,clone: function() {
		return new lime_math_Matrix3(this.a,this.b,this.c,this.d,this.tx,this.ty);
	}
	,concat: function(m) {
		var a1 = this.a * m.a + this.b * m.c;
		this.b = this.a * m.b + this.b * m.d;
		this.a = a1;
		var c1 = this.c * m.a + this.d * m.c;
		this.d = this.c * m.b + this.d * m.d;
		this.c = c1;
		var tx1 = this.tx * m.a + this.ty * m.c + m.tx;
		this.ty = this.tx * m.b + this.ty * m.d + m.ty;
		this.tx = tx1;
	}
	,copyColumnFrom: function(column,vector4) {
		if(column > 2) throw new js__$Boot_HaxeError("Column " + column + " out of bounds (2)"); else if(column == 0) {
			this.a = vector4.x;
			this.c = vector4.y;
		} else if(column == 1) {
			this.b = vector4.x;
			this.d = vector4.y;
		} else {
			this.tx = vector4.x;
			this.ty = vector4.y;
		}
	}
	,copyColumnTo: function(column,vector4) {
		if(column > 2) throw new js__$Boot_HaxeError("Column " + column + " out of bounds (2)"); else if(column == 0) {
			vector4.x = this.a;
			vector4.y = this.c;
			vector4.z = 0;
		} else if(column == 1) {
			vector4.x = this.b;
			vector4.y = this.d;
			vector4.z = 0;
		} else {
			vector4.x = this.tx;
			vector4.y = this.ty;
			vector4.z = 1;
		}
	}
	,copyFrom: function(sourceMatrix3) {
		this.a = sourceMatrix3.a;
		this.b = sourceMatrix3.b;
		this.c = sourceMatrix3.c;
		this.d = sourceMatrix3.d;
		this.tx = sourceMatrix3.tx;
		this.ty = sourceMatrix3.ty;
	}
	,copyRowFrom: function(row,vector4) {
		if(row > 2) throw new js__$Boot_HaxeError("Row " + row + " out of bounds (2)"); else if(row == 0) {
			this.a = vector4.x;
			this.c = vector4.y;
		} else if(row == 1) {
			this.b = vector4.x;
			this.d = vector4.y;
		} else {
			this.tx = vector4.x;
			this.ty = vector4.y;
		}
	}
	,copyRowTo: function(row,vector4) {
		if(row > 2) throw new js__$Boot_HaxeError("Row " + row + " out of bounds (2)"); else if(row == 0) {
			vector4.x = this.a;
			vector4.y = this.b;
			vector4.z = this.tx;
		} else if(row == 1) {
			vector4.x = this.c;
			vector4.y = this.d;
			vector4.z = this.ty;
		} else {
			vector4.x = 0;
			vector4.y = 0;
			vector4.z = 1;
		}
	}
	,createBox: function(scaleX,scaleY,rotation,tx,ty) {
		if(ty == null) ty = 0;
		if(tx == null) tx = 0;
		if(rotation == null) rotation = 0;
		this.a = scaleX;
		this.d = scaleY;
		this.b = rotation;
		this.tx = tx;
		this.ty = ty;
	}
	,createGradientBox: function(width,height,rotation,tx,ty) {
		if(ty == null) ty = 0;
		if(tx == null) tx = 0;
		if(rotation == null) rotation = 0;
		this.a = width / 1638.4;
		this.d = height / 1638.4;
		if(rotation != 0) {
			var cos = Math.cos(rotation);
			var sin = Math.sin(rotation);
			this.b = sin * this.d;
			this.c = -sin * this.a;
			this.a *= cos;
			this.d *= cos;
		} else {
			this.b = 0;
			this.c = 0;
		}
		this.tx = tx + width / 2;
		this.ty = ty + height / 2;
	}
	,equals: function(Matrix3) {
		return Matrix3 != null && this.tx == Matrix3.tx && this.ty == Matrix3.ty && this.a == Matrix3.a && this.b == Matrix3.b && this.c == Matrix3.c && this.d == Matrix3.d;
	}
	,deltaTransformVector2: function(Vector2) {
		return new lime_math_Vector2(Vector2.x * this.a + Vector2.y * this.c,Vector2.x * this.b + Vector2.y * this.d);
	}
	,identity: function() {
		this.a = 1;
		this.b = 0;
		this.c = 0;
		this.d = 1;
		this.tx = 0;
		this.ty = 0;
	}
	,invert: function() {
		var norm = this.a * this.d - this.b * this.c;
		if(norm == 0) {
			this.a = this.b = this.c = this.d = 0;
			this.tx = -this.tx;
			this.ty = -this.ty;
		} else {
			norm = 1.0 / norm;
			var a1 = this.d * norm;
			this.d = this.a * norm;
			this.a = a1;
			this.b *= -norm;
			this.c *= -norm;
			var tx1 = -this.a * this.tx - this.c * this.ty;
			this.ty = -this.b * this.tx - this.d * this.ty;
			this.tx = tx1;
		}
		return this;
	}
	,mult: function(m) {
		var result = new lime_math_Matrix3(this.a,this.b,this.c,this.d,this.tx,this.ty);
		result.concat(m);
		return result;
	}
	,rotate: function(theta) {
		var cos = Math.cos(theta);
		var sin = Math.sin(theta);
		var a1 = this.a * cos - this.b * sin;
		this.b = this.a * sin + this.b * cos;
		this.a = a1;
		var c1 = this.c * cos - this.d * sin;
		this.d = this.c * sin + this.d * cos;
		this.c = c1;
		var tx1 = this.tx * cos - this.ty * sin;
		this.ty = this.tx * sin + this.ty * cos;
		this.tx = tx1;
	}
	,scale: function(sx,sy) {
		this.a *= sx;
		this.b *= sy;
		this.c *= sx;
		this.d *= sy;
		this.tx *= sx;
		this.ty *= sy;
	}
	,setRotation: function(theta,scale) {
		if(scale == null) scale = 1;
		this.a = Math.cos(theta) * scale;
		this.c = Math.sin(theta) * scale;
		this.b = -this.c;
		this.d = this.a;
	}
	,setTo: function(a,b,c,d,tx,ty) {
		this.a = a;
		this.b = b;
		this.c = c;
		this.d = d;
		this.tx = tx;
		this.ty = ty;
	}
	,to3DString: function(roundPixels) {
		if(roundPixels == null) roundPixels = false;
		if(roundPixels) return "Matrix33d(" + this.a + ", " + this.b + ", " + "0, 0, " + this.c + ", " + this.d + ", " + "0, 0, 0, 0, 1, 0, " + (this.tx | 0) + ", " + (this.ty | 0) + ", 0, 1)"; else return "Matrix33d(" + this.a + ", " + this.b + ", " + "0, 0, " + this.c + ", " + this.d + ", " + "0, 0, 0, 0, 1, 0, " + this.tx + ", " + this.ty + ", 0, 1)";
	}
	,toMozString: function() {
		return "Matrix3(" + this.a + ", " + this.b + ", " + this.c + ", " + this.d + ", " + this.tx + "px, " + this.ty + "px)";
	}
	,toString: function() {
		return "Matrix3(" + this.a + ", " + this.b + ", " + this.c + ", " + this.d + ", " + this.tx + ", " + this.ty + ")";
	}
	,transformVector2: function(pos) {
		return new lime_math_Vector2(pos.x * this.a + pos.y * this.c + this.tx,pos.x * this.b + pos.y * this.d + this.ty);
	}
	,translate: function(dx,dy) {
		this.tx += dx;
		this.ty += dy;
	}
	,__cleanValues: function() {
		this.a = Math.round(this.a * 1000) / 1000;
		this.b = Math.round(this.b * 1000) / 1000;
		this.c = Math.round(this.c * 1000) / 1000;
		this.d = Math.round(this.d * 1000) / 1000;
		this.tx = Math.round(this.tx * 10) / 10;
		this.ty = Math.round(this.ty * 10) / 10;
	}
	,__transformX: function(pos) {
		return pos.x * this.a + pos.y * this.c + this.tx;
	}
	,__transformY: function(pos) {
		return pos.x * this.b + pos.y * this.d + this.ty;
	}
	,__translateTransformed: function(pos) {
		this.tx = pos.x * this.a + pos.y * this.c + this.tx;
		this.ty = pos.x * this.b + pos.y * this.d + this.ty;
	}
	,__class__: lime_math_Matrix3
};
var openfl_geom_Matrix = function(a,b,c,d,tx,ty) {
	if(ty == null) ty = 0;
	if(tx == null) tx = 0;
	if(d == null) d = 1;
	if(c == null) c = 0;
	if(b == null) b = 0;
	if(a == null) a = 1;
	this.a = a;
	this.b = b;
	this.c = c;
	this.d = d;
	this.tx = tx;
	this.ty = ty;
};
$hxClasses["openfl.geom.Matrix"] = openfl_geom_Matrix;
openfl_geom_Matrix.__name__ = ["openfl","geom","Matrix"];
openfl_geom_Matrix.prototype = {
	a: null
	,b: null
	,c: null
	,d: null
	,tx: null
	,ty: null
	,__array: null
	,clone: function() {
		return new openfl_geom_Matrix(this.a,this.b,this.c,this.d,this.tx,this.ty);
	}
	,concat: function(m) {
		var a1 = this.a * m.a + this.b * m.c;
		this.b = this.a * m.b + this.b * m.d;
		this.a = a1;
		var c1 = this.c * m.a + this.d * m.c;
		this.d = this.c * m.b + this.d * m.d;
		this.c = c1;
		var tx1 = this.tx * m.a + this.ty * m.c + m.tx;
		this.ty = this.tx * m.b + this.ty * m.d + m.ty;
		this.tx = tx1;
	}
	,copyColumnFrom: function(column,vector3D) {
		if(column > 2) throw new js__$Boot_HaxeError("Column " + column + " out of bounds (2)"); else if(column == 0) {
			this.a = vector3D.x;
			this.c = vector3D.y;
		} else if(column == 1) {
			this.b = vector3D.x;
			this.d = vector3D.y;
		} else {
			this.tx = vector3D.x;
			this.ty = vector3D.y;
		}
	}
	,copyColumnTo: function(column,vector3D) {
		if(column > 2) throw new js__$Boot_HaxeError("Column " + column + " out of bounds (2)"); else if(column == 0) {
			vector3D.x = this.a;
			vector3D.y = this.c;
			vector3D.z = 0;
		} else if(column == 1) {
			vector3D.x = this.b;
			vector3D.y = this.d;
			vector3D.z = 0;
		} else {
			vector3D.x = this.tx;
			vector3D.y = this.ty;
			vector3D.z = 1;
		}
	}
	,copyFrom: function(sourceMatrix) {
		this.a = sourceMatrix.a;
		this.b = sourceMatrix.b;
		this.c = sourceMatrix.c;
		this.d = sourceMatrix.d;
		this.tx = sourceMatrix.tx;
		this.ty = sourceMatrix.ty;
	}
	,copyRowFrom: function(row,vector3D) {
		if(row > 2) throw new js__$Boot_HaxeError("Row " + row + " out of bounds (2)"); else if(row == 0) {
			this.a = vector3D.x;
			this.c = vector3D.y;
		} else if(row == 1) {
			this.b = vector3D.x;
			this.d = vector3D.y;
		} else {
			this.tx = vector3D.x;
			this.ty = vector3D.y;
		}
	}
	,copyRowTo: function(row,vector3D) {
		if(row > 2) throw new js__$Boot_HaxeError("Row " + row + " out of bounds (2)"); else if(row == 0) {
			vector3D.x = this.a;
			vector3D.y = this.b;
			vector3D.z = this.tx;
		} else if(row == 1) {
			vector3D.x = this.c;
			vector3D.y = this.d;
			vector3D.z = this.ty;
		} else vector3D.setTo(0,0,1);
	}
	,createBox: function(scaleX,scaleY,rotation,tx,ty) {
		if(ty == null) ty = 0;
		if(tx == null) tx = 0;
		if(rotation == null) rotation = 0;
		if(rotation != 0) {
			var cos = Math.cos(rotation);
			var sin = Math.sin(rotation);
			this.a = cos * scaleX;
			this.b = sin * scaleY;
			this.c = -sin * scaleX;
			this.d = cos * scaleY;
		} else {
			this.a = scaleX;
			this.b = 0;
			this.c = 0;
			this.d = scaleY;
		}
		this.tx = tx;
		this.ty = ty;
	}
	,createGradientBox: function(width,height,rotation,tx,ty) {
		if(ty == null) ty = 0;
		if(tx == null) tx = 0;
		if(rotation == null) rotation = 0;
		this.a = width / 1638.4;
		this.d = height / 1638.4;
		if(rotation != 0) {
			var cos = Math.cos(rotation);
			var sin = Math.sin(rotation);
			this.b = sin * this.d;
			this.c = -sin * this.a;
			this.a *= cos;
			this.d *= cos;
		} else {
			this.b = 0;
			this.c = 0;
		}
		this.tx = tx + width / 2;
		this.ty = ty + height / 2;
	}
	,deltaTransformPoint: function(point) {
		return new openfl_geom_Point(point.x * this.a + point.y * this.c,point.x * this.b + point.y * this.d);
	}
	,equals: function(matrix) {
		return matrix != null && this.tx == matrix.tx && this.ty == matrix.ty && this.a == matrix.a && this.b == matrix.b && this.c == matrix.c && this.d == matrix.d;
	}
	,identity: function() {
		this.a = 1;
		this.b = 0;
		this.c = 0;
		this.d = 1;
		this.tx = 0;
		this.ty = 0;
	}
	,invert: function() {
		var norm = this.a * this.d - this.b * this.c;
		if(norm == 0) {
			this.a = this.b = this.c = this.d = 0;
			this.tx = -this.tx;
			this.ty = -this.ty;
		} else {
			norm = 1.0 / norm;
			var a1 = this.d * norm;
			this.d = this.a * norm;
			this.a = a1;
			this.b *= -norm;
			this.c *= -norm;
			var tx1 = -this.a * this.tx - this.c * this.ty;
			this.ty = -this.b * this.tx - this.d * this.ty;
			this.tx = tx1;
		}
		return this;
	}
	,rotate: function(theta) {
		var cos = Math.cos(theta);
		var sin = Math.sin(theta);
		var a1 = this.a * cos - this.b * sin;
		this.b = this.a * sin + this.b * cos;
		this.a = a1;
		var c1 = this.c * cos - this.d * sin;
		this.d = this.c * sin + this.d * cos;
		this.c = c1;
		var tx1 = this.tx * cos - this.ty * sin;
		this.ty = this.tx * sin + this.ty * cos;
		this.tx = tx1;
	}
	,scale: function(sx,sy) {
		this.a *= sx;
		this.b *= sy;
		this.c *= sx;
		this.d *= sy;
		this.tx *= sx;
		this.ty *= sy;
	}
	,setRotation: function(theta,scale) {
		if(scale == null) scale = 1;
		this.a = Math.cos(theta) * scale;
		this.c = Math.sin(theta) * scale;
		this.b = -this.c;
		this.d = this.a;
	}
	,setTo: function(a,b,c,d,tx,ty) {
		this.a = a;
		this.b = b;
		this.c = c;
		this.d = d;
		this.tx = tx;
		this.ty = ty;
	}
	,to3DString: function(roundPixels) {
		if(roundPixels == null) roundPixels = false;
		if(roundPixels) return "matrix3d(" + this.a + ", " + this.b + ", 0, 0, " + this.c + ", " + this.d + ", 0, 0, 0, 0, 1, 0, " + (this.tx | 0) + ", " + (this.ty | 0) + ", 0, 1)"; else return "matrix3d(" + this.a + ", " + this.b + ", 0, 0, " + this.c + ", " + this.d + ", 0, 0, 0, 0, 1, 0, " + this.tx + ", " + this.ty + ", 0, 1)";
	}
	,toMozString: function() {
		return "matrix(" + this.a + ", " + this.b + ", " + this.c + ", " + this.d + ", " + this.tx + "px, " + this.ty + "px)";
	}
	,toString: function() {
		return "matrix(" + this.a + ", " + this.b + ", " + this.c + ", " + this.d + ", " + this.tx + ", " + this.ty + ")";
	}
	,transformPoint: function(pos) {
		return new openfl_geom_Point(pos.x * this.a + pos.y * this.c + this.tx,pos.x * this.b + pos.y * this.d + this.ty);
	}
	,translate: function(dx,dy) {
		this.tx += dx;
		this.ty += dy;
	}
	,toArray: function(transpose) {
		if(transpose == null) transpose = false;
		if(this.__array == null) {
			var this1;
			this1 = new Float32Array(9);
			this.__array = this1;
		}
		if(transpose) {
			this.__array[0] = this.a;
			this.__array[1] = this.b;
			this.__array[2] = 0;
			this.__array[3] = this.c;
			this.__array[4] = this.d;
			this.__array[5] = 0;
			this.__array[6] = this.tx;
			this.__array[7] = this.ty;
			this.__array[8] = 1;
		} else {
			this.__array[0] = this.a;
			this.__array[1] = this.c;
			this.__array[2] = this.tx;
			this.__array[3] = this.b;
			this.__array[4] = this.d;
			this.__array[5] = this.ty;
			this.__array[6] = 0;
			this.__array[7] = 0;
			this.__array[8] = 1;
		}
		return this.__array;
	}
	,__cleanValues: function() {
		this.a = Math.round(this.a * 1000) / 1000;
		this.b = Math.round(this.b * 1000) / 1000;
		this.c = Math.round(this.c * 1000) / 1000;
		this.d = Math.round(this.d * 1000) / 1000;
		this.tx = Math.round(this.tx * 10) / 10;
		this.ty = Math.round(this.ty * 10) / 10;
	}
	,__toMatrix3: function() {
		openfl_geom_Matrix.__matrix3.setTo(this.a,this.b,this.c,this.d,this.tx,this.ty);
		return openfl_geom_Matrix.__matrix3;
	}
	,__transformInversePoint: function(point) {
		var norm = this.a * this.d - this.b * this.c;
		if(norm == 0) {
			point.x = -this.tx;
			point.y = -this.ty;
		} else {
			var px = 1.0 / norm * (this.c * (this.ty - point.y) + this.d * (point.x - this.tx));
			point.y = 1.0 / norm * (this.a * (point.y - this.ty) + this.b * (this.tx - point.x));
			point.x = px;
		}
	}
	,__transformInverseX: function(px,py) {
		var norm = this.a * this.d - this.b * this.c;
		if(norm == 0) return -this.tx; else return 1.0 / norm * (this.c * (this.ty - py) + this.d * (px - this.tx));
	}
	,__transformInverseY: function(px,py) {
		var norm = this.a * this.d - this.b * this.c;
		if(norm == 0) return -this.ty; else return 1.0 / norm * (this.a * (py - this.ty) + this.b * (this.tx - px));
	}
	,__transformPoint: function(point) {
		var px = point.x;
		var py = point.y;
		point.x = px * this.a + py * this.c + this.tx;
		point.y = px * this.b + py * this.d + this.ty;
	}
	,__transformX: function(px,py) {
		return px * this.a + py * this.c + this.tx;
	}
	,__transformY: function(px,py) {
		return px * this.b + py * this.d + this.ty;
	}
	,__translateTransformed: function(px,py) {
		this.tx = px * this.a + py * this.c + this.tx;
		this.ty = px * this.b + py * this.d + this.ty;
	}
	,__class__: openfl_geom_Matrix
};
var openfl_geom_Rectangle = function(x,y,width,height) {
	if(height == null) height = 0;
	if(width == null) width = 0;
	if(y == null) y = 0;
	if(x == null) x = 0;
	this.x = x;
	this.y = y;
	this.width = width;
	this.height = height;
};
$hxClasses["openfl.geom.Rectangle"] = openfl_geom_Rectangle;
openfl_geom_Rectangle.__name__ = ["openfl","geom","Rectangle"];
openfl_geom_Rectangle.prototype = {
	height: null
	,width: null
	,x: null
	,y: null
	,clone: function() {
		return new openfl_geom_Rectangle(this.x,this.y,this.width,this.height);
	}
	,contains: function(x,y) {
		return x >= this.x && y >= this.y && x < this.get_right() && y < this.get_bottom();
	}
	,containsPoint: function(point) {
		return this.contains(point.x,point.y);
	}
	,containsRect: function(rect) {
		if(rect.width <= 0 || rect.height <= 0) return rect.x > this.x && rect.y > this.y && rect.get_right() < this.get_right() && rect.get_bottom() < this.get_bottom(); else return rect.x >= this.x && rect.y >= this.y && rect.get_right() <= this.get_right() && rect.get_bottom() <= this.get_bottom();
	}
	,copyFrom: function(sourceRect) {
		this.x = sourceRect.x;
		this.y = sourceRect.y;
		this.width = sourceRect.width;
		this.height = sourceRect.height;
	}
	,equals: function(toCompare) {
		return toCompare != null && this.x == toCompare.x && this.y == toCompare.y && this.width == toCompare.width && this.height == toCompare.height;
	}
	,inflate: function(dx,dy) {
		this.x -= dx;
		this.width += dx * 2;
		this.y -= dy;
		this.height += dy * 2;
	}
	,inflatePoint: function(point) {
		this.inflate(point.x,point.y);
	}
	,intersection: function(toIntersect) {
		var x0;
		if(this.x < toIntersect.x) x0 = toIntersect.x; else x0 = this.x;
		var x1;
		if(this.get_right() > toIntersect.get_right()) x1 = toIntersect.get_right(); else x1 = this.get_right();
		if(x1 <= x0) return new openfl_geom_Rectangle();
		var y0;
		if(this.y < toIntersect.y) y0 = toIntersect.y; else y0 = this.y;
		var y1;
		if(this.get_bottom() > toIntersect.get_bottom()) y1 = toIntersect.get_bottom(); else y1 = this.get_bottom();
		if(y1 <= y0) return new openfl_geom_Rectangle();
		return new openfl_geom_Rectangle(x0,y0,x1 - x0,y1 - y0);
	}
	,intersects: function(toIntersect) {
		var x0;
		if(this.x < toIntersect.x) x0 = toIntersect.x; else x0 = this.x;
		var x1;
		if(this.get_right() > toIntersect.get_right()) x1 = toIntersect.get_right(); else x1 = this.get_right();
		if(x1 <= x0) return false;
		var y0;
		if(this.y < toIntersect.y) y0 = toIntersect.y; else y0 = this.y;
		var y1;
		if(this.get_bottom() > toIntersect.get_bottom()) y1 = toIntersect.get_bottom(); else y1 = this.get_bottom();
		return y1 > y0;
	}
	,isEmpty: function() {
		return this.width <= 0 || this.height <= 0;
	}
	,offset: function(dx,dy) {
		this.x += dx;
		this.y += dy;
	}
	,offsetPoint: function(point) {
		this.x += point.x;
		this.y += point.y;
	}
	,setEmpty: function() {
		this.x = this.y = this.width = this.height = 0;
	}
	,setTo: function(xa,ya,widtha,heighta) {
		this.x = xa;
		this.y = ya;
		this.width = widtha;
		this.height = heighta;
	}
	,toString: function() {
		return "(x=" + this.x + ", y=" + this.y + ", width=" + this.width + ", height=" + this.height + ")";
	}
	,union: function(toUnion) {
		if(this.width == 0 || this.height == 0) return toUnion.clone(); else if(toUnion.width == 0 || toUnion.height == 0) return this.clone();
		var x0;
		if(this.x > toUnion.x) x0 = toUnion.x; else x0 = this.x;
		var x1;
		if(this.get_right() < toUnion.get_right()) x1 = toUnion.get_right(); else x1 = this.get_right();
		var y0;
		if(this.y > toUnion.y) y0 = toUnion.y; else y0 = this.y;
		var y1;
		if(this.get_bottom() < toUnion.get_bottom()) y1 = toUnion.get_bottom(); else y1 = this.get_bottom();
		return new openfl_geom_Rectangle(x0,y0,x1 - x0,y1 - y0);
	}
	,__contract: function(x,y,width,height) {
		if(this.width == 0 && this.height == 0) return;
		var offsetX = 0.0;
		var offsetY = 0.0;
		var offsetRight = 0.0;
		var offsetBottom = 0.0;
		if(this.x < x) offsetX = x - this.x;
		if(this.y < y) offsetY = y - this.y;
		if(this.get_right() > x + width) offsetRight = x + width - this.get_right();
		if(this.get_bottom() > y + height) offsetBottom = y + height - this.get_bottom();
		this.x += offsetX;
		this.y += offsetY;
		this.width += offsetRight - offsetX;
		this.height += offsetBottom - offsetY;
	}
	,__expand: function(x,y,width,height) {
		if(this.width == 0 && this.height == 0) {
			this.x = x;
			this.y = y;
			this.width = width;
			this.height = height;
			return;
		}
		var cacheRight = this.get_right();
		var cacheBottom = this.get_bottom();
		if(this.x > x) {
			this.x = x;
			this.width = cacheRight - x;
		}
		if(this.y > y) {
			this.y = y;
			this.height = cacheBottom - y;
		}
		if(cacheRight < x + width) this.width = x + width - this.x;
		if(cacheBottom < y + height) this.height = y + height - this.y;
	}
	,__toLimeRectangle: function() {
		if(openfl_geom_Rectangle.__limeRectangle == null) openfl_geom_Rectangle.__limeRectangle = new lime_math_Rectangle();
		openfl_geom_Rectangle.__limeRectangle.setTo(this.x,this.y,this.width,this.height);
		return openfl_geom_Rectangle.__limeRectangle;
	}
	,__transform: function(rect,m) {
		var tx0 = m.a * this.x + m.c * this.y;
		var tx1 = tx0;
		var ty0 = m.b * this.x + m.d * this.y;
		var ty1 = ty0;
		var tx = m.a * (this.x + this.width) + m.c * this.y;
		var ty = m.b * (this.x + this.width) + m.d * this.y;
		if(tx < tx0) tx0 = tx;
		if(ty < ty0) ty0 = ty;
		if(tx > tx1) tx1 = tx;
		if(ty > ty1) ty1 = ty;
		tx = m.a * (this.x + this.width) + m.c * (this.y + this.height);
		ty = m.b * (this.x + this.width) + m.d * (this.y + this.height);
		if(tx < tx0) tx0 = tx;
		if(ty < ty0) ty0 = ty;
		if(tx > tx1) tx1 = tx;
		if(ty > ty1) ty1 = ty;
		tx = m.a * this.x + m.c * (this.y + this.height);
		ty = m.b * this.x + m.d * (this.y + this.height);
		if(tx < tx0) tx0 = tx;
		if(ty < ty0) ty0 = ty;
		if(tx > tx1) tx1 = tx;
		if(ty > ty1) ty1 = ty;
		rect.setTo(tx0 + m.tx,ty0 + m.ty,tx1 - tx0,ty1 - ty0);
	}
	,get_bottom: function() {
		return this.y + this.height;
	}
	,set_bottom: function(b) {
		this.height = b - this.y;
		return b;
	}
	,get_bottomRight: function() {
		return new openfl_geom_Point(this.x + this.width,this.y + this.height);
	}
	,set_bottomRight: function(p) {
		this.width = p.x - this.x;
		this.height = p.y - this.y;
		return p.clone();
	}
	,get_left: function() {
		return this.x;
	}
	,set_left: function(l) {
		this.width -= l - this.x;
		this.x = l;
		return l;
	}
	,get_right: function() {
		return this.x + this.width;
	}
	,set_right: function(r) {
		this.width = r - this.x;
		return r;
	}
	,get_size: function() {
		return new openfl_geom_Point(this.width,this.height);
	}
	,set_size: function(p) {
		this.width = p.x;
		this.height = p.y;
		return p.clone();
	}
	,get_top: function() {
		return this.y;
	}
	,set_top: function(t) {
		this.height -= t - this.y;
		this.y = t;
		return t;
	}
	,get_topLeft: function() {
		return new openfl_geom_Point(this.x,this.y);
	}
	,set_topLeft: function(p) {
		this.x = p.x;
		this.y = p.y;
		return p.clone();
	}
	,__class__: openfl_geom_Rectangle
	,__properties__: {set_topLeft:"set_topLeft",get_topLeft:"get_topLeft",set_top:"set_top",get_top:"get_top",set_size:"set_size",get_size:"get_size",set_right:"set_right",get_right:"get_right",set_left:"set_left",get_left:"get_left",set_bottomRight:"set_bottomRight",get_bottomRight:"get_bottomRight",set_bottom:"set_bottom",get_bottom:"get_bottom"}
};
var openfl__$Vector_Vector_$Impl_$ = {};
$hxClasses["openfl._Vector.Vector_Impl_"] = openfl__$Vector_Vector_$Impl_$;
openfl__$Vector_Vector_$Impl_$.__name__ = ["openfl","_Vector","Vector_Impl_"];
openfl__$Vector_Vector_$Impl_$.__properties__ = {set_length:"set_length",get_length:"get_length",set_fixed:"set_fixed",get_fixed:"get_fixed"}
openfl__$Vector_Vector_$Impl_$.concat = function(this1,a) {
	return this1.concat(a);
};
openfl__$Vector_Vector_$Impl_$.copy = function(this1) {
	return this1.copy();
};
openfl__$Vector_Vector_$Impl_$.get = function(this1,index) {
	return this1.get(index);
};
openfl__$Vector_Vector_$Impl_$.indexOf = function(this1,x,from) {
	if(from == null) from = 0;
	return this1.indexOf(x,from);
};
openfl__$Vector_Vector_$Impl_$.insertAt = function(this1,index,element) {
	this1.insertAt(index,element);
};
openfl__$Vector_Vector_$Impl_$.iterator = function(this1) {
	return this1.iterator();
};
openfl__$Vector_Vector_$Impl_$.join = function(this1,sep) {
	return this1.join(sep);
};
openfl__$Vector_Vector_$Impl_$.lastIndexOf = function(this1,x,from) {
	if(from == null) from = 0;
	return this1.lastIndexOf(x,from);
};
openfl__$Vector_Vector_$Impl_$.pop = function(this1) {
	return this1.pop();
};
openfl__$Vector_Vector_$Impl_$.push = function(this1,x) {
	return this1.push(x);
};
openfl__$Vector_Vector_$Impl_$.reverse = function(this1) {
	this1.reverse();
};
openfl__$Vector_Vector_$Impl_$.set = function(this1,index,value) {
	return this1.set(index,value);
};
openfl__$Vector_Vector_$Impl_$.shift = function(this1) {
	return this1.shift();
};
openfl__$Vector_Vector_$Impl_$.slice = function(this1,pos,end) {
	return this1.slice(pos,end);
};
openfl__$Vector_Vector_$Impl_$.sort = function(this1,f) {
	this1.sort(f);
};
openfl__$Vector_Vector_$Impl_$.splice = function(this1,pos,len) {
	return this1.splice(pos,len);
};
openfl__$Vector_Vector_$Impl_$.toString = function(this1) {
	return this1.toString();
};
openfl__$Vector_Vector_$Impl_$.unshift = function(this1,x) {
	this1.unshift(x);
};
openfl__$Vector_Vector_$Impl_$.ofArray = function(a) {
	var vector = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
	var _g1 = 0;
	var _g = a.length;
	while(_g1 < _g) {
		var i = _g1++;
		vector.set(i,a[i]);
	}
	return vector;
};
openfl__$Vector_Vector_$Impl_$.convert = function(v) {
	return v;
};
openfl__$Vector_Vector_$Impl_$.toBoolVector = function(t,length,fixed) {
	return new openfl__$Vector_BoolVector(length,fixed);
};
openfl__$Vector_Vector_$Impl_$.toIntVector = function(t,length,fixed) {
	return new openfl__$Vector_IntVector(length,fixed);
};
openfl__$Vector_Vector_$Impl_$.toFloatVector = function(t,length,fixed) {
	return new openfl__$Vector_FloatVector(length,fixed);
};
openfl__$Vector_Vector_$Impl_$.toFunctionVector = function(t,length,fixed) {
	return new openfl__$Vector_FunctionVector(length,fixed);
};
openfl__$Vector_Vector_$Impl_$.toObjectVector = function(t,length,fixed) {
	return new openfl__$Vector_ObjectVector(length,fixed);
};
openfl__$Vector_Vector_$Impl_$.fromBoolVector = function(vector) {
	return vector;
};
openfl__$Vector_Vector_$Impl_$.fromIntVector = function(vector) {
	return vector;
};
openfl__$Vector_Vector_$Impl_$.fromFloatVector = function(vector) {
	return vector;
};
openfl__$Vector_Vector_$Impl_$.fromFunctionVector = function(vector) {
	return vector;
};
openfl__$Vector_Vector_$Impl_$.fromObjectVector = function(vector) {
	return vector;
};
openfl__$Vector_Vector_$Impl_$.get_fixed = function(this1) {
	return this1.fixed;
};
openfl__$Vector_Vector_$Impl_$.set_fixed = function(this1,value) {
	return this1.fixed = value;
};
openfl__$Vector_Vector_$Impl_$.get_length = function(this1) {
	return this1.get_length();
};
openfl__$Vector_Vector_$Impl_$.set_length = function(this1,value) {
	return this1.set_length(value);
};
var openfl_geom_ColorTransform = function(redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier,redOffset,greenOffset,blueOffset,alphaOffset) {
	if(alphaOffset == null) alphaOffset = 0;
	if(blueOffset == null) blueOffset = 0;
	if(greenOffset == null) greenOffset = 0;
	if(redOffset == null) redOffset = 0;
	if(alphaMultiplier == null) alphaMultiplier = 1;
	if(blueMultiplier == null) blueMultiplier = 1;
	if(greenMultiplier == null) greenMultiplier = 1;
	if(redMultiplier == null) redMultiplier = 1;
	this.redMultiplier = redMultiplier;
	this.greenMultiplier = greenMultiplier;
	this.blueMultiplier = blueMultiplier;
	this.alphaMultiplier = alphaMultiplier;
	this.redOffset = redOffset;
	this.greenOffset = greenOffset;
	this.blueOffset = blueOffset;
	this.alphaOffset = alphaOffset;
};
$hxClasses["openfl.geom.ColorTransform"] = openfl_geom_ColorTransform;
openfl_geom_ColorTransform.__name__ = ["openfl","geom","ColorTransform"];
openfl_geom_ColorTransform.prototype = {
	alphaMultiplier: null
	,alphaOffset: null
	,blueMultiplier: null
	,blueOffset: null
	,greenMultiplier: null
	,greenOffset: null
	,redMultiplier: null
	,redOffset: null
	,concat: function(second) {
		this.redMultiplier *= second.redMultiplier;
		this.greenMultiplier *= second.greenMultiplier;
		this.blueMultiplier *= second.blueMultiplier;
		this.alphaMultiplier *= second.alphaMultiplier;
		this.redOffset = second.redMultiplier * this.redOffset + second.redOffset;
		this.greenOffset = second.greenMultiplier * this.greenOffset + second.greenOffset;
		this.blueOffset = second.blueMultiplier * this.blueOffset + second.blueOffset;
		this.alphaOffset = second.alphaMultiplier * this.alphaOffset + second.alphaOffset;
	}
	,toString: function() {
		return "(redMultiplier=" + this.redMultiplier + ", greenMultiplier=" + this.greenMultiplier + ", blueMultiplier=" + this.blueMultiplier + ", alphaMultiplier=" + this.alphaMultiplier + ", redOffset=" + this.redOffset + ", greenOffset=" + this.greenOffset + ", blueOffset=" + this.blueOffset + ", alphaOffset=" + this.alphaOffset + ")";
	}
	,__clone: function() {
		return new openfl_geom_ColorTransform(this.redMultiplier,this.greenMultiplier,this.blueMultiplier,this.alphaMultiplier,this.redOffset,this.greenOffset,this.blueOffset,this.alphaOffset);
	}
	,__combine: function(ct) {
		this.redMultiplier *= ct.redMultiplier;
		this.greenMultiplier *= ct.greenMultiplier;
		this.blueMultiplier *= ct.blueMultiplier;
		this.alphaMultiplier *= ct.alphaMultiplier;
		this.redOffset += ct.redOffset;
		this.greenOffset += ct.greenOffset;
		this.blueOffset += ct.blueOffset;
		this.alphaOffset += ct.alphaOffset;
	}
	,__equals: function(ct,skipAlphaMultiplier) {
		if(skipAlphaMultiplier == null) skipAlphaMultiplier = false;
		return ct != null && this.redMultiplier == ct.redMultiplier && this.greenMultiplier == ct.greenMultiplier && this.blueMultiplier == ct.blueMultiplier && (skipAlphaMultiplier || this.alphaMultiplier == ct.alphaMultiplier) && this.redOffset == ct.redOffset && this.greenOffset == ct.greenOffset && this.blueOffset == ct.blueOffset && this.alphaOffset == ct.alphaOffset;
	}
	,__isDefault: function() {
		return this.redMultiplier == 1 && this.greenMultiplier == 1 && this.blueMultiplier == 1 && this.alphaMultiplier == 1 && this.redOffset == 0 && this.greenOffset == 0 && this.blueOffset == 0 && this.alphaOffset == 0;
	}
	,get_color: function() {
		return (this.redOffset | 0) << 16 | (this.greenOffset | 0) << 8 | (this.blueOffset | 0);
	}
	,set_color: function(value) {
		this.redOffset = value >> 16 & 255;
		this.greenOffset = value >> 8 & 255;
		this.blueOffset = value & 255;
		this.redMultiplier = 0;
		this.greenMultiplier = 0;
		this.blueMultiplier = 0;
		return this.get_color();
	}
	,__toLimeColorMatrix: function() {
		if(openfl_geom_ColorTransform.__limeColorMatrix == null) {
			var this1;
			this1 = new Float32Array(20);
			openfl_geom_ColorTransform.__limeColorMatrix = this1;
		}
		openfl_geom_ColorTransform.__limeColorMatrix[0] = this.redMultiplier;
		openfl_geom_ColorTransform.__limeColorMatrix[4] = this.redOffset / 255;
		openfl_geom_ColorTransform.__limeColorMatrix[6] = this.greenMultiplier;
		openfl_geom_ColorTransform.__limeColorMatrix[9] = this.greenOffset / 255;
		openfl_geom_ColorTransform.__limeColorMatrix[12] = this.blueMultiplier;
		openfl_geom_ColorTransform.__limeColorMatrix[14] = this.blueOffset / 255;
		openfl_geom_ColorTransform.__limeColorMatrix[18] = this.alphaMultiplier;
		openfl_geom_ColorTransform.__limeColorMatrix[19] = this.alphaOffset / 255;
		return openfl_geom_ColorTransform.__limeColorMatrix;
	}
	,__class__: openfl_geom_ColorTransform
	,__properties__: {set_color:"set_color",get_color:"get_color"}
};
var com_haxepunk_HXP = function() { };
$hxClasses["com.haxepunk.HXP"] = com_haxepunk_HXP;
com_haxepunk_HXP.__name__ = ["com","haxepunk","HXP"];
com_haxepunk_HXP.__properties__ = {get_RAD:"get_RAD",get_DEG:"get_DEG",set_time:"set_time",get_console:"get_console",get_random:"get_random",set_randomSeed:"set_randomSeed",set_pan:"set_pan",get_pan:"get_pan",set_volume:"set_volume",get_volume:"get_volume",set_fullscreen:"set_fullscreen",get_fullscreen:"get_fullscreen",set_scene:"set_scene",get_scene:"get_scene",set_world:"set_world",get_world:"get_world",get_choose:"get_choose",set_renderMode:"set_renderMode",set_cursor:"set_cursor",get_NUMBER_MAX_VALUE:"get_NUMBER_MAX_VALUE"}
com_haxepunk_HXP.get_NUMBER_MAX_VALUE = function() {
	return 179 * Math.pow(10,306);
};
com_haxepunk_HXP.set_cursor = function(cursor) {
	if(com_haxepunk_HXP.cursor == cursor) return cursor;
	if(cursor == null) openfl_ui_Mouse.show(); else openfl_ui_Mouse.hide();
	return com_haxepunk_HXP.cursor = cursor;
};
com_haxepunk_HXP.set_renderMode = function(value) {
	com_haxepunk_HXP.renderMode = value;
	if(com_haxepunk_HXP.screen == null) com_haxepunk_HXP.screen = new com_haxepunk_Screen(); else com_haxepunk_HXP.screen.init();
	return value;
};
com_haxepunk_HXP.get_choose = function() {
	return Reflect.makeVarArgs(com_haxepunk_HXP._choose);
};
com_haxepunk_HXP._choose = function(objs) {
	if(objs == null || objs.length == 0) throw new js__$Boot_HaxeError("Can't choose a random element on an empty array");
	if((objs[0] instanceof Array) && objs[0].__enum__ == null) {
		var c;
		c = js_Boot.__cast(objs[0] , Array);
		if(c.length != 0) return c[(function($this) {
			var $r;
			com_haxepunk_HXP._seed = com_haxepunk_HXP._seed * 16807.0 % 2147483647 | 0;
			$r = com_haxepunk_HXP._seed / 2147483647 * c.length | 0;
			return $r;
		}(this))]; else throw new js__$Boot_HaxeError("Can't choose a random element on an empty array");
	} else return objs[(function($this) {
		var $r;
		com_haxepunk_HXP._seed = com_haxepunk_HXP._seed * 16807.0 % 2147483647 | 0;
		$r = com_haxepunk_HXP._seed / 2147483647 * objs.length | 0;
		return $r;
	}(this))];
};
com_haxepunk_HXP.get_world = function() {
	return com_haxepunk_HXP.engine._scene;
};
com_haxepunk_HXP.set_world = function(value) {
	return com_haxepunk_HXP.engine.set_scene(value);
};
com_haxepunk_HXP.get_scene = function() {
	return com_haxepunk_HXP.engine._scene;
};
com_haxepunk_HXP.set_scene = function(value) {
	return com_haxepunk_HXP.engine.set_scene(value);
};
com_haxepunk_HXP.resize = function(width,height) {
	com_haxepunk_HXP.windowWidth = width;
	com_haxepunk_HXP.windowHeight = height;
	com_haxepunk_HXP.screen.resize(width,height);
	com_haxepunk_HXP.halfWidth = com_haxepunk_HXP.width / 2;
	com_haxepunk_HXP.halfHeight = com_haxepunk_HXP.height / 2;
	com_haxepunk_HXP.bounds.width = width;
	com_haxepunk_HXP.bounds.height = height;
	com_haxepunk_HXP.engine._scene.resize();
};
com_haxepunk_HXP.clear = function(array) {
	array.length = 0;
};
com_haxepunk_HXP.setCamera = function(x,y) {
	if(y == null) y = 0;
	if(x == null) x = 0;
	com_haxepunk_HXP.camera.x = x;
	com_haxepunk_HXP.camera.y = y;
};
com_haxepunk_HXP.resetCamera = function() {
	com_haxepunk_HXP.camera.x = com_haxepunk_HXP.camera.y = 0;
};
com_haxepunk_HXP.get_fullscreen = function() {
	return com_haxepunk_HXP.stage.get_displayState() == 0;
};
com_haxepunk_HXP.set_fullscreen = function(value) {
	if(value) com_haxepunk_HXP.stage.set_displayState(0); else com_haxepunk_HXP.stage.set_displayState(2);
	return value;
};
com_haxepunk_HXP.get_volume = function() {
	return com_haxepunk_HXP._volume;
};
com_haxepunk_HXP.set_volume = function(value) {
	if(value < 0) value = 0;
	if(com_haxepunk_HXP._volume == value) return value;
	com_haxepunk_HXP._volume = value;
	com_haxepunk_Sfx.onGlobalUpdated(false);
	return com_haxepunk_HXP._volume;
};
com_haxepunk_HXP.get_pan = function() {
	return com_haxepunk_HXP._pan;
};
com_haxepunk_HXP.set_pan = function(value) {
	if(value < -1) value = -1;
	if(value > 1) value = 1;
	if(com_haxepunk_HXP._pan == value) return value;
	com_haxepunk_HXP._pan = value;
	com_haxepunk_Sfx.onGlobalUpdated(true);
	return com_haxepunk_HXP._pan;
};
com_haxepunk_HXP.sign = function(value) {
	if(value < 0) return -1; else if(value > 0) return 1; else return 0;
};
com_haxepunk_HXP.approach = function(value,target,amount) {
	if(value < target - amount) return value + amount; else if(value > target + amount) return value - amount; else return target;
};
com_haxepunk_HXP.lerp = function(a,b,t) {
	if(t == null) t = 1;
	return a + (b - a) * t;
};
com_haxepunk_HXP.colorLerp = function(fromColor,toColor,t) {
	if(t == null) t = 1;
	if(t <= 0) return fromColor; else if(t >= 1) return toColor; else {
		var a = fromColor >> 24 & 255;
		var r = fromColor >> 16 & 255;
		var g = fromColor >> 8 & 255;
		var b = fromColor & 255;
		var dA = (toColor >> 24 & 255) - a;
		var dR = (toColor >> 16 & 255) - r;
		var dG = (toColor >> 8 & 255) - g;
		var dB = (toColor & 255) - b;
		a += dA * t | 0;
		r += dR * t | 0;
		g += dG * t | 0;
		b += dB * t | 0;
		return a << 24 | r << 16 | g << 8 | b;
	}
};
com_haxepunk_HXP.stepTowards = function(object,x,y,distance) {
	if(distance == null) distance = 1;
	com_haxepunk_HXP.point.x = x - object.x;
	com_haxepunk_HXP.point.y = y - object.y;
	if(com_haxepunk_HXP.point.get_length() <= distance) {
		object.x = x;
		object.y = y;
		return;
	}
	com_haxepunk_HXP.point.normalize(distance);
	object.x = object.x + com_haxepunk_HXP.point.x;
	object.y = object.y + com_haxepunk_HXP.point.y;
};
com_haxepunk_HXP.anchorTo = function(object,anchor,distance) {
	if(distance == null) distance = 0;
	com_haxepunk_HXP.point.x = object.x - anchor.x;
	com_haxepunk_HXP.point.y = object.y - anchor.y;
	if(com_haxepunk_HXP.point.get_length() > distance) com_haxepunk_HXP.point.normalize(distance);
	object.x = anchor.x + com_haxepunk_HXP.point.x;
	object.y = anchor.y + com_haxepunk_HXP.point.y;
};
com_haxepunk_HXP.angle = function(x1,y1,x2,y2) {
	var a = Math.atan2(y2 - y1,x2 - x1) * (-180 / Math.PI);
	if(a < 0) return a + 360; else return a;
};
com_haxepunk_HXP.angleXY = function(object,angle,length,x,y) {
	if(y == null) y = 0;
	if(x == null) x = 0;
	if(length == null) length = 1;
	angle *= Math.PI / -180;
	var value = Math.cos(angle) * length + x;
	object.x = value;
	var value1 = Math.sin(angle) * length + y;
	object.y = value1;
};
com_haxepunk_HXP.angleDifference = function(angle1,angle2) {
	var diff = angle2 - angle1;
	while(diff < -180) diff += 360;
	while(diff > 180) diff -= 360;
	return diff;
};
com_haxepunk_HXP.rotateAround = function(object,anchor,angle,relative) {
	if(relative == null) relative = true;
	if(angle == null) angle = 0;
	if(relative) angle += com_haxepunk_HXP.angle(anchor.x,anchor.y,object.x,object.y);
	com_haxepunk_HXP.angleXY(object,angle,com_haxepunk_HXP.distance(anchor.x,anchor.y,object.x,object.y),anchor.x,anchor.y);
};
com_haxepunk_HXP.round = function(num,precision) {
	var exp = Math.pow(10,precision);
	return Math.round(num * exp) / exp;
};
com_haxepunk_HXP.distance = function(x1,y1,x2,y2) {
	if(y2 == null) y2 = 0;
	if(x2 == null) x2 = 0;
	return Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));
};
com_haxepunk_HXP.distanceSquared = function(x1,y1,x2,y2) {
	if(y2 == null) y2 = 0;
	if(x2 == null) x2 = 0;
	return (x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1);
};
com_haxepunk_HXP.distanceRects = function(x1,y1,w1,h1,x2,y2,w2,h2) {
	if(x1 < x2 + w2 && x2 < x1 + w1) {
		if(y1 < y2 + h2 && y2 < y1 + h1) return 0;
		if(y1 > y2) return y1 - (y2 + h2);
		return y2 - (y1 + h1);
	}
	if(y1 < y2 + h2 && y2 < y1 + h1) {
		if(x1 > x2) return x1 - (x2 + w2);
		return x2 - (x1 + w1);
	}
	if(x1 > x2) {
		if(y1 > y2) return com_haxepunk_HXP.distance(x1,y1,x2 + w2,y2 + h2);
		return com_haxepunk_HXP.distance(x1,y1 + h1,x2 + w2,y2);
	}
	if(y1 > y2) return com_haxepunk_HXP.distance(x1 + w1,y1,x2,y2 + h2);
	return com_haxepunk_HXP.distance(x1 + w1,y1 + h1,x2,y2);
};
com_haxepunk_HXP.distanceRectPoint = function(px,py,rx,ry,rw,rh) {
	if(px >= rx && px <= rx + rw) {
		if(py >= ry && py <= ry + rh) return 0;
		if(py > ry) return py - (ry + rh);
		return ry - py;
	}
	if(py >= ry && py <= ry + rh) {
		if(px > rx) return px - (rx + rw);
		return rx - px;
	}
	if(px > rx) {
		if(py > ry) return com_haxepunk_HXP.distance(px,py,rx + rw,ry + rh);
		return com_haxepunk_HXP.distance(px,py,rx + rw,ry);
	}
	if(py > ry) return com_haxepunk_HXP.distance(px,py,rx,ry + rh);
	return Math.sqrt((rx - px) * (rx - px) + (ry - py) * (ry - py));
};
com_haxepunk_HXP.clamp = function(value,min,max) {
	if(max > min) {
		if(value < min) return min; else if(value > max) return max; else return value;
	} else if(value < max) return max; else if(value > min) return min; else return value;
};
com_haxepunk_HXP.clampInRect = function(object,x,y,width,height,padding) {
	if(padding == null) padding = 0;
	var value = com_haxepunk_HXP.clamp(object.x,x + padding,x + width - padding);
	object.x = value;
	var value1 = com_haxepunk_HXP.clamp(object.y,y + padding,y + height - padding);
	object.y = value1;
};
com_haxepunk_HXP.scale = function(value,min,max,min2,max2) {
	return min2 + (value - min) / (max - min) * (max2 - min2);
};
com_haxepunk_HXP.scaleClamp = function(value,min,max,min2,max2) {
	value = min2 + (value - min) / (max - min) * (max2 - min2);
	if(max2 > min2) {
		if(value < max2) value = value; else value = max2;
		if(value > min2) return value; else return min2;
	}
	if(value < min2) value = value; else value = min2;
	if(value > max2) return value; else return max2;
};
com_haxepunk_HXP.set_randomSeed = function(value) {
	com_haxepunk_HXP._seed = Std["int"](com_haxepunk_HXP.clamp(value,1.0,2147483646));
	com_haxepunk_HXP.randomSeed = com_haxepunk_HXP._seed;
	return com_haxepunk_HXP._seed;
};
com_haxepunk_HXP.randomizeSeed = function() {
	com_haxepunk_HXP.set_randomSeed(Std["int"](2147483647 * Math.random()));
};
com_haxepunk_HXP.get_random = function() {
	com_haxepunk_HXP._seed = com_haxepunk_HXP._seed * 16807.0 % 2147483647 | 0;
	return com_haxepunk_HXP._seed / 2147483647;
};
com_haxepunk_HXP.rand = function(amount) {
	com_haxepunk_HXP._seed = com_haxepunk_HXP._seed * 16807.0 % 2147483647 | 0;
	return com_haxepunk_HXP._seed / 2147483647 * amount | 0;
};
com_haxepunk_HXP.randInt = function(amount) {
	com_haxepunk_HXP._seed = com_haxepunk_HXP._seed * 16807.0 % 2147483647 | 0;
	return com_haxepunk_HXP._seed / 2147483647 * amount | 0;
};
com_haxepunk_HXP.indexOf = function(arr,v) {
	return HxOverrides.indexOf(arr,v,0);
};
com_haxepunk_HXP.next = function(current,options,loop) {
	if(loop == null) loop = true;
	if(loop) return options[(HxOverrides.indexOf(options,current,0) + 1) % options.length]; else return options[Std["int"](Math.min(HxOverrides.indexOf(options,current,0) + 1,options.length - 1))];
};
com_haxepunk_HXP.prev = function(current,options,loop) {
	if(loop == null) loop = true;
	if(loop) return options[(HxOverrides.indexOf(options,current,0) - 1 + options.length) % options.length]; else return options[Std["int"](Math.max(HxOverrides.indexOf(options,current,0) - 1,0))];
};
com_haxepunk_HXP.swap = function(current,a,b) {
	if(current == a) return b; else return a;
};
com_haxepunk_HXP.insertSortedKey = function(list,key,compare) {
	var result = 0;
	var mid = 0;
	var min = 0;
	var max = list.length - 1;
	while(max >= min) {
		mid = min + ((max - min) / 2 | 0);
		result = compare(list[mid],key);
		if(result > 0) max = mid - 1; else if(result < 0) min = mid + 1; else return;
	}
	list.splice(result > 0?mid:mid + 1,0,key);
};
com_haxepunk_HXP.getColorRGB = function(R,G,B) {
	if(B == null) B = 0;
	if(G == null) G = 0;
	if(R == null) R = 0;
	return R << 16 | G << 8 | B;
};
com_haxepunk_HXP.getColorHSV = function(h,s,v) {
	h = h * 360 | 0;
	var hi = Math.floor(h / 60) % 6;
	var f = h / 60 - Math.floor(h / 60);
	var p = v * (1 - s);
	var q = v * (1 - f * s);
	var t = v * (1 - (1 - f) * s);
	switch(hi) {
	case 0:
		return (v * 255 | 0) << 16 | (t * 255 | 0) << 8 | (p * 255 | 0);
	case 1:
		return (q * 255 | 0) << 16 | (v * 255 | 0) << 8 | (p * 255 | 0);
	case 2:
		return (p * 255 | 0) << 16 | (v * 255 | 0) << 8 | (t * 255 | 0);
	case 3:
		return (p * 255 | 0) << 16 | (q * 255 | 0) << 8 | (v * 255 | 0);
	case 4:
		return (t * 255 | 0) << 16 | (p * 255 | 0) << 8 | (v * 255 | 0);
	case 5:
		return (v * 255 | 0) << 16 | (p * 255 | 0) << 8 | (q * 255 | 0);
	default:
		return 0;
	}
	return 0;
};
com_haxepunk_HXP.getColorHue = function(color) {
	var h = color >> 16 & 255;
	var s = color >> 8 & 255;
	var v = color & 255;
	var max = Std["int"](Math.max(h,Math.max(s,v)));
	var min = Std["int"](Math.min(h,Math.min(s,v)));
	var hue = 0;
	if(max == min) hue = 0; else if(max == h) hue = (60 * (s - v) / (max - min) + 360) % 360; else if(max == s) hue = 60 * (v - h) / (max - min) + 120; else if(max == v) hue = 60 * (h - s) / (max - min) + 240;
	return hue / 360;
};
com_haxepunk_HXP.getColorSaturation = function(color) {
	var h = color >> 16 & 255;
	var s = color >> 8 & 255;
	var v = color & 255;
	var max = Std["int"](Math.max(h,Math.max(s,v)));
	if(max == 0) return 0; else {
		var min = Std["int"](Math.min(h,Math.min(s,v)));
		return (max - min) / max;
	}
};
com_haxepunk_HXP.getColorValue = function(color) {
	var h = color >> 16 & 255;
	var s = color >> 8 & 255;
	var v = color & 255;
	return Std["int"](Math.max(h,Math.max(s,v))) / 255;
};
com_haxepunk_HXP.getRed = function(color) {
	return color >> 16 & 255;
};
com_haxepunk_HXP.getGreen = function(color) {
	return color >> 8 & 255;
};
com_haxepunk_HXP.getBlue = function(color) {
	return color & 255;
};
com_haxepunk_HXP.getBitmap = function(name) {
	if(com_haxepunk_HXP._bitmap.exists(name)) return com_haxepunk_HXP._bitmap.get(name);
	var data = openfl_Assets.getBitmapData(name,false);
	if(data != null) com_haxepunk_HXP._bitmap.set(name,data);
	return data;
};
com_haxepunk_HXP.overwriteBitmapCache = function(name,data) {
	com_haxepunk_HXP._bitmap.set(name,data);
	return com_haxepunk_HXP.removeBitmap(name);
};
com_haxepunk_HXP.removeBitmap = function(name) {
	if(com_haxepunk_HXP._bitmap.exists(name)) {
		var bitmap = com_haxepunk_HXP._bitmap.get(name);
		bitmap.dispose();
		bitmap = null;
		return com_haxepunk_HXP._bitmap.remove(name);
	}
	return false;
};
com_haxepunk_HXP.createBitmap = function(width,height,transparent,color) {
	if(color == null) color = 0;
	if(transparent == null) transparent = false;
	return new openfl_display_BitmapData(width,height,transparent,color);
};
com_haxepunk_HXP.timeFlag = function() {
	var t = new Date().getTime() / 1000;
	var e = t - com_haxepunk_HXP._time;
	com_haxepunk_HXP._time = t;
	return e;
};
com_haxepunk_HXP.get_console = function() {
	if(com_haxepunk_HXP._console == null) com_haxepunk_HXP._console = new com_haxepunk_debug_Console();
	return com_haxepunk_HXP._console;
};
com_haxepunk_HXP.consoleEnabled = function() {
	return com_haxepunk_HXP._console != null;
};
com_haxepunk_HXP.tween = function(object,values,duration,options) {
	if(options != null && Object.prototype.hasOwnProperty.call(options,"delay")) {
		var delay = options.delay;
		Reflect.deleteField(options,"delay");
		com_haxepunk_HXP.alarm(delay,function(o) {
			com_haxepunk_HXP.tween(object,values,duration,options);
		});
		return null;
	}
	var type = com_haxepunk_TweenType.OneShot;
	var complete = null;
	var ease = null;
	var tweener = com_haxepunk_HXP.tweener;
	if(js_Boot.__instanceof(object,com_haxepunk_Tweener)) tweener = js_Boot.__cast(object , com_haxepunk_Tweener);
	if(options != null) {
		if(Object.prototype.hasOwnProperty.call(options,"type")) type = options.type;
		if(Object.prototype.hasOwnProperty.call(options,"complete")) complete = options.complete;
		if(Object.prototype.hasOwnProperty.call(options,"ease")) ease = options.ease;
		if(Object.prototype.hasOwnProperty.call(options,"tweener")) tweener = options.tweener;
	}
	var tween = new com_haxepunk_tweens_misc_MultiVarTween(complete,type);
	tween.tween(object,values,duration,ease);
	tweener.addTween(tween,true);
	return tween;
};
com_haxepunk_HXP.alarm = function(delay,complete,type,tweener) {
	if(type == null) type = com_haxepunk_TweenType.OneShot;
	if(tweener == null) tweener = com_haxepunk_HXP.tweener;
	var alarm = new com_haxepunk_tweens_misc_Alarm(delay,complete,type);
	tweener.addTween(alarm,true);
	return alarm;
};
com_haxepunk_HXP.frames = function(from,to,skip) {
	if(skip == null) skip = 0;
	var a = [];
	skip++;
	if(from < to) while(from <= to) {
		a.push(from);
		from += skip;
	} else while(from >= to) {
		a.push(from);
		from -= skip;
	}
	return a;
};
com_haxepunk_HXP.shuffle = function(a) {
	var i = a.length;
	var j;
	var t;
	while(--i > 0) {
		t = a[i];
		a[i] = a[(function($this) {
			var $r;
			com_haxepunk_HXP._seed = com_haxepunk_HXP._seed * 16807.0 % 2147483647 | 0;
			$r = j = com_haxepunk_HXP._seed / 2147483647 * (i + 1) | 0;
			return $r;
		}(this))];
		a[j] = t;
	}
};
com_haxepunk_HXP.resizeStage = function(width,height) {
};
com_haxepunk_HXP.set_time = function(value) {
	com_haxepunk_HXP._time = value;
	return com_haxepunk_HXP._time;
};
com_haxepunk_HXP.get_DEG = function() {
	return -180 / Math.PI;
};
com_haxepunk_HXP.get_RAD = function() {
	return Math.PI / -180;
};
var com_haxepunk_Entity = function(x,y,graphic,mask) {
	if(y == null) y = 0;
	if(x == null) x = 0;
	this._moveY = 0;
	this._moveX = 0;
	this._y = 0;
	this._x = 0;
	this._layer = 0;
	this.originY = 0;
	this.originX = 0;
	this.height = 0;
	this.width = 0;
	this.followCamera = false;
	this.y = 0;
	this.x = 0;
	this.collidable = true;
	this.visible = true;
	com_haxepunk_Tweener.call(this);
	this.set_x(x);
	this.set_y(y);
	this.originX = this.originY = 0;
	this.set_width(this.set_height(0));
	this._moveX = this._moveY = 0;
	this._type = "";
	this._name = "";
	this.HITBOX = new com_haxepunk_Mask();
	this._point = com_haxepunk_HXP.point;
	this._camera = com_haxepunk_HXP.point2;
	this.set_layer(0);
	if(graphic != null) this.set_graphic(graphic);
	if(mask != null) this.set_mask(mask);
	this.HITBOX.set_parent(this);
	this._class = Type.getClassName(js_Boot.getClass(this));
};
$hxClasses["com.haxepunk.Entity"] = com_haxepunk_Entity;
com_haxepunk_Entity.__name__ = ["com","haxepunk","Entity"];
com_haxepunk_Entity.__super__ = com_haxepunk_Tweener;
com_haxepunk_Entity.prototype = $extend(com_haxepunk_Tweener.prototype,{
	visible: null
	,collidable: null
	,x: null
	,get_x: function() {
		if(this.followCamera) return this.x + com_haxepunk_HXP.camera.x; else return this.x;
	}
	,set_x: function(v) {
		return this.x = v;
	}
	,y: null
	,get_y: function() {
		if(this.followCamera) return this.y + com_haxepunk_HXP.camera.y; else return this.y;
	}
	,set_y: function(v) {
		return this.y = v;
	}
	,followCamera: null
	,width: null
	,get_width: function() {
		return this.width;
	}
	,set_width: function(w) {
		return this.width = w;
	}
	,height: null
	,get_height: function() {
		return this.height;
	}
	,set_height: function(h) {
		return this.height = h;
	}
	,originX: null
	,originY: null
	,renderTarget: null
	,added: function() {
	}
	,removed: function() {
	}
	,resized: function() {
	}
	,update: function() {
	}
	,render: function() {
		if(this._graphic != null && this._graphic._visible) {
			if(this._graphic.relative) {
				this._point.x = this.get_x();
				this._point.y = this.get_y();
			} else this._point.x = this._point.y = 0;
			if(this._scene == null) this._camera.x = com_haxepunk_HXP.camera.x; else this._camera.x = this._scene.camera.x;
			if(this._scene == null) this._camera.y = com_haxepunk_HXP.camera.y; else this._camera.y = this._scene.camera.y;
			if(this._graphic.blit) this._graphic.render(this.renderTarget != null?this.renderTarget:com_haxepunk_HXP.buffer,this._point,this._camera); else this._graphic.renderAtlas(this._layer,this._point,this._camera);
		}
	}
	,collide: function(type,x,y) {
		if(this._scene == null) return null;
		var entities = this._scene.entitiesForType(type);
		if(!this.collidable || entities == null) return null;
		this._x = this.get_x();
		this._y = this.get_y();
		this.set_x(x);
		this.set_y(y);
		if(this._mask == null) {
			var _g_head = entities.h;
			var _g_val = null;
			while(_g_head != null) {
				var e;
				e = (function($this) {
					var $r;
					_g_val = _g_head[0];
					_g_head = _g_head[1];
					$r = _g_val;
					return $r;
				}(this));
				if(e.collidable && e != this && x - this.originX + this.get_width() > e.get_x() - e.originX && y - this.originY + this.get_height() > e.get_y() - e.originY && x - this.originX < e.get_x() - e.originX + e.get_width() && y - this.originY < e.get_y() - e.originY + e.get_height()) {
					if(e._mask == null || e._mask.collide(this.HITBOX)) {
						this.set_x(this._x);
						this.set_y(this._y);
						return e;
					}
				}
			}
		} else {
			var _g_head1 = entities.h;
			var _g_val1 = null;
			while(_g_head1 != null) {
				var e1;
				e1 = (function($this) {
					var $r;
					_g_val1 = _g_head1[0];
					_g_head1 = _g_head1[1];
					$r = _g_val1;
					return $r;
				}(this));
				if(e1.collidable && e1 != this && x - this.originX + this.get_width() > e1.get_x() - e1.originX && y - this.originY + this.get_height() > e1.get_y() - e1.originY && x - this.originX < e1.get_x() - e1.originX + e1.get_width() && y - this.originY < e1.get_y() - e1.originY + e1.get_height()) {
					if(this._mask.collide(e1._mask != null?e1._mask:e1.HITBOX)) {
						this.set_x(this._x);
						this.set_y(this._y);
						return e1;
					}
				}
			}
		}
		this.set_x(this._x);
		this.set_y(this._y);
		return null;
	}
	,collideTypes: function(types,x,y) {
		if(this._scene == null) return null;
		{
			var _g = types;
			switch(_g[1]) {
			case 0:
				var s = _g[2];
				return this.collide(s,x,y);
			case 1:
				var a = _g[2];
				var e;
				var _g1 = 0;
				while(_g1 < a.length) {
					var type = a[_g1];
					++_g1;
					e = this.collide(type,x,y);
					if(e != null) return e;
				}
				break;
			}
		}
		return null;
	}
	,collideWith: function(e,x,y) {
		this._x = this.get_x();
		this._y = this.get_y();
		this.set_x(x);
		this.set_y(y);
		if(this.collidable && e.collidable && x - this.originX + this.get_width() > e.get_x() - e.originX && y - this.originY + this.get_height() > e.get_y() - e.originY && x - this.originX < e.get_x() - e.originX + e.get_width() && y - this.originY < e.get_y() - e.originY + e.get_height()) {
			if(this._mask == null) {
				if(e._mask == null || e._mask.collide(this.HITBOX)) {
					this.set_x(this._x);
					this.set_y(this._y);
					return e;
				}
				this.set_x(this._x);
				this.set_y(this._y);
				return null;
			}
			if(this._mask.collide(e._mask != null?e._mask:e.HITBOX)) {
				this.set_x(this._x);
				this.set_y(this._y);
				return e;
			}
		}
		this.set_x(this._x);
		this.set_y(this._y);
		return null;
	}
	,collideRect: function(x,y,rX,rY,rWidth,rHeight) {
		if(x - this.originX + this.get_width() >= rX && y - this.originY + this.get_height() >= rY && x - this.originX <= rX + rWidth && y - this.originY <= rY + rHeight) {
			if(this._mask == null) return true;
			this._x = this.get_x();
			this._y = this.get_y();
			this.set_x(x);
			this.set_y(y);
			com_haxepunk_HXP.entity.set_x(rX);
			com_haxepunk_HXP.entity.set_y(rY);
			com_haxepunk_HXP.entity.set_width(rWidth | 0);
			com_haxepunk_HXP.entity.set_height(rHeight | 0);
			if(this._mask.collide(com_haxepunk_HXP.entity.HITBOX)) {
				this.set_x(this._x);
				this.set_y(this._y);
				return true;
			}
			this.set_x(this._x);
			this.set_y(this._y);
			return false;
		}
		return false;
	}
	,collidePoint: function(x,y,pX,pY) {
		if(pX >= x - this.originX && pY >= y - this.originY && pX < x - this.originX + this.get_width() && pY < y - this.originY + this.get_height()) {
			if(this._mask == null) return true;
			this._x = this.get_x();
			this._y = this.get_y();
			this.set_x(x);
			this.set_y(y);
			com_haxepunk_HXP.entity.set_x(pX);
			com_haxepunk_HXP.entity.set_y(pY);
			com_haxepunk_HXP.entity.set_width(1);
			com_haxepunk_HXP.entity.set_height(1);
			if(this._mask.collide(com_haxepunk_HXP.entity.HITBOX)) {
				this.set_x(this._x);
				this.set_y(this._y);
				return true;
			}
			this.set_x(this._x);
			this.set_y(this._y);
			return false;
		}
		return false;
	}
	,collideInto: function(type,x,y,array) {
		if(this._scene == null) return;
		var entities = this._scene.entitiesForType(type);
		if(!this.collidable || entities == null) return;
		this._x = this.get_x();
		this._y = this.get_y();
		this.set_x(x);
		this.set_y(y);
		var n = array.length;
		if(this._mask == null) {
			var _g_head = entities.h;
			var _g_val = null;
			while(_g_head != null) {
				var e;
				e = (function($this) {
					var $r;
					_g_val = _g_head[0];
					_g_head = _g_head[1];
					$r = _g_val;
					return $r;
				}(this));
				e = e;
				if(e.collidable && e != this && x - this.originX + this.get_width() > e.get_x() - e.originX && y - this.originY + this.get_height() > e.get_y() - e.originY && x - this.originX < e.get_x() - e.originX + e.get_width() && y - this.originY < e.get_y() - e.originY + e.get_height()) {
					if(e._mask == null || e._mask.collide(this.HITBOX)) array[n++] = e;
				}
			}
		} else {
			var _g_head1 = entities.h;
			var _g_val1 = null;
			while(_g_head1 != null) {
				var e1;
				e1 = (function($this) {
					var $r;
					_g_val1 = _g_head1[0];
					_g_head1 = _g_head1[1];
					$r = _g_val1;
					return $r;
				}(this));
				e1 = e1;
				if(e1.collidable && e1 != this && x - this.originX + this.get_width() > e1.get_x() - e1.originX && y - this.originY + this.get_height() > e1.get_y() - e1.originY && x - this.originX < e1.get_x() - e1.originX + e1.get_width() && y - this.originY < e1.get_y() - e1.originY + e1.get_height()) {
					if(this._mask.collide(e1._mask != null?e1._mask:e1.HITBOX)) array[n++] = e1;
				}
			}
		}
		this.set_x(this._x);
		this.set_y(this._y);
	}
	,collideTypesInto: function(types,x,y,array) {
		if(this._scene == null) return;
		var _g = 0;
		while(_g < types.length) {
			var type = types[_g];
			++_g;
			this.collideInto(type,x,y,array);
		}
	}
	,onCamera: null
	,get_onCamera: function() {
		if(this._scene == null) return false; else return this.collideRect(this.get_x(),this.get_y(),this._scene.camera.x,this._scene.camera.y,com_haxepunk_HXP.width,com_haxepunk_HXP.height);
	}
	,get_world: function() {
		return this._scene;
	}
	,get_scene: function() {
		return this._scene;
	}
	,halfWidth: null
	,get_halfWidth: function() {
		return this.get_width() / 2;
	}
	,halfHeight: null
	,get_halfHeight: function() {
		return this.get_height() / 2;
	}
	,centerX: null
	,get_centerX: function() {
		return this.get_x() - this.originX + this.get_width() / 2;
	}
	,centerY: null
	,get_centerY: function() {
		return this.get_y() - this.originY + this.get_height() / 2;
	}
	,left: null
	,get_left: function() {
		return this.get_x() - this.originX;
	}
	,right: null
	,get_right: function() {
		return this.get_x() - this.originX + this.get_width();
	}
	,top: null
	,get_top: function() {
		return this.get_y() - this.originY;
	}
	,bottom: null
	,get_bottom: function() {
		return this.get_y() - this.originY + this.get_height();
	}
	,get_layer: function() {
		return this._layer;
	}
	,set_layer: function(value) {
		if(this._layer == value) return this._layer;
		if(this._scene == null) {
			this._layer = value;
			return this._layer;
		}
		this._scene.removeRender(this);
		this._layer = value;
		this._scene.addRender(this);
		return this._layer;
	}
	,get_type: function() {
		return this._type;
	}
	,set_type: function(value) {
		if(this._type == value) return this._type;
		if(this._scene == null) {
			this._type = value;
			return this._type;
		}
		if(this._type != "") this._scene.removeType(this);
		this._type = value;
		if(value != "") this._scene.addType(this);
		return this._type;
	}
	,get_mask: function() {
		return this._mask;
	}
	,set_mask: function(value) {
		if(this._mask == value) return value;
		if(this._mask != null) this._mask.set_parent(null);
		this._mask = value;
		if(value != null) this._mask.set_parent(this);
		return this._mask;
	}
	,get_graphic: function() {
		return this._graphic;
	}
	,set_graphic: function(value) {
		if(this._graphic == value) return value;
		this._graphic = value;
		return this._graphic;
	}
	,get_name: function() {
		return this._name;
	}
	,set_name: function(value) {
		if(this._name == value) return this._name;
		if(this._scene == null) {
			this._name = value;
			return this._name;
		}
		if(this._name != "") this._scene._entityNames.remove(this._name);
		this._name = value;
		if(value != "") this._scene._entityNames.set(this._name,this);
		return this._name;
	}
	,addGraphic: function(g) {
		if(this._graphic == null) this.set_graphic(g); else if(js_Boot.__instanceof(this._graphic,com_haxepunk_graphics_Graphiclist)) (js_Boot.__cast(this._graphic , com_haxepunk_graphics_Graphiclist)).add(g); else {
			var list = new com_haxepunk_graphics_Graphiclist();
			list.add(this._graphic);
			list.add(g);
			this.set_graphic(list);
		}
		return g;
	}
	,setHitbox: function(width,height,originX,originY) {
		if(originY == null) originY = 0;
		if(originX == null) originX = 0;
		if(height == null) height = 0;
		if(width == null) width = 0;
		this.set_width(width);
		this.set_height(height);
		this.originX = originX;
		this.originY = originY;
	}
	,setHitboxTo: function(o) {
		this.set_width(Reflect.getProperty(o,"width"));
		this.set_height(Reflect.getProperty(o,"height"));
		if(Object.prototype.hasOwnProperty.call(o,"originX") && Object.prototype.hasOwnProperty.call(o,"originY")) {
			this.originX = Reflect.getProperty(o,"originX");
			this.originY = Reflect.getProperty(o,"originY");
		} else {
			this.originX = Reflect.getProperty(o,"x");
			this.originY = Reflect.getProperty(o,"y");
			this.originX = -this.originX;
			this.originY = -this.originY;
		}
	}
	,setOrigin: function(x,y) {
		if(y == null) y = 0;
		if(x == null) x = 0;
		this.originX = x;
		this.originY = y;
	}
	,centerOrigin: function() {
		this.originX = Std["int"](this.get_width() / 2);
		this.originY = Std["int"](this.get_height() / 2);
	}
	,distanceFrom: function(e,useHitboxes) {
		if(useHitboxes == null) useHitboxes = false;
		if(!useHitboxes) return Math.sqrt((this.get_x() - e.get_x()) * (this.get_x() - e.get_x()) + (this.get_y() - e.get_y()) * (this.get_y() - e.get_y())); else return com_haxepunk_HXP.distanceRects(this.get_x() - this.originX,this.get_y() - this.originY,this.get_width(),this.get_height(),e.get_x() - e.originX,e.get_y() - e.originY,e.get_width(),e.get_height());
	}
	,distanceToPoint: function(px,py,useHitbox) {
		if(useHitbox == null) useHitbox = false;
		if(!useHitbox) return Math.sqrt((this.get_x() - px) * (this.get_x() - px) + (this.get_y() - py) * (this.get_y() - py)); else return com_haxepunk_HXP.distanceRectPoint(px,py,this.get_x() - this.originX,this.get_y() - this.originY,this.get_width(),this.get_height());
	}
	,distanceToRect: function(rx,ry,rwidth,rheight) {
		return com_haxepunk_HXP.distanceRects(rx,ry,rwidth,rheight,this.get_x() - this.originX,this.get_y() - this.originY,this.get_width(),this.get_height());
	}
	,toString: function() {
		return this._class;
	}
	,moveBy: function(x,y,solidType,sweep) {
		if(sweep == null) sweep = false;
		this._moveX += x;
		this._moveY += y;
		x = Math.round(this._moveX);
		y = Math.round(this._moveY);
		this._moveX -= x;
		this._moveY -= y;
		if(solidType != null) {
			var sign;
			var e;
			if(x != 0) {
				if(this.collidable && (sweep || this.collideTypes(solidType,this.get_x() + x,this.get_y()) != null)) {
					if(x > 0) sign = 1; else sign = -1;
					while(x != 0) {
						if((e = this.collideTypes(solidType,this.get_x() + sign,this.get_y())) != null) {
							if(this.moveCollideX(e)) break; else {
								var _g = this;
								_g.set_x(_g.get_x() + sign);
							}
						} else {
							var _g1 = this;
							_g1.set_x(_g1.get_x() + sign);
						}
						x -= sign;
					}
				} else {
					var _g2 = this;
					_g2.set_x(_g2.get_x() + x);
				}
			}
			if(y != 0) {
				if(this.collidable && (sweep || this.collideTypes(solidType,this.get_x(),this.get_y() + y) != null)) {
					if(y > 0) sign = 1; else sign = -1;
					while(y != 0) {
						if((e = this.collideTypes(solidType,this.get_x(),this.get_y() + sign)) != null) {
							if(this.moveCollideY(e)) break; else {
								var _g3 = this;
								_g3.set_y(_g3.get_y() + sign);
							}
						} else {
							var _g4 = this;
							_g4.set_y(_g4.get_y() + sign);
						}
						y -= sign;
					}
				} else {
					var _g5 = this;
					_g5.set_y(_g5.get_y() + y);
				}
			}
		} else {
			var _g6 = this;
			_g6.set_x(_g6.get_x() + x);
			var _g7 = this;
			_g7.set_y(_g7.get_y() + y);
		}
	}
	,moveTo: function(x,y,solidType,sweep) {
		if(sweep == null) sweep = false;
		this.moveBy(x - this.get_x(),y - this.get_y(),solidType,sweep);
	}
	,moveTowards: function(x,y,amount,solidType,sweep) {
		if(sweep == null) sweep = false;
		this._point.x = x - this.get_x();
		this._point.y = y - this.get_y();
		if(this._point.x * this._point.x + this._point.y * this._point.y > amount * amount) this._point.normalize(amount);
		this.moveBy(this._point.x,this._point.y,solidType,sweep);
	}
	,moveAtAngle: function(angle,amount,solidType,sweep) {
		if(sweep == null) sweep = false;
		angle *= Math.PI / -180;
		this.moveBy(Math.cos(angle) * amount,Math.sin(angle) * amount,solidType,sweep);
	}
	,moveCollideX: function(e) {
		return true;
	}
	,moveCollideY: function(e) {
		return true;
	}
	,clampHorizontal: function(left,right,padding) {
		if(padding == null) padding = 0;
		if(this.get_x() - this.originX < left + padding) this.set_x(left + this.originX + padding);
		if(this.get_x() - this.originX + this.get_width() > right - padding) this.set_x(right - this.get_width() + this.originX - padding);
	}
	,clampVertical: function(top,bottom,padding) {
		if(padding == null) padding = 0;
		if(this.get_y() - this.originY < top + padding) this.set_y(top + this.originY + padding);
		if(this.get_y() - this.originY + this.get_height() > bottom - padding) this.set_y(bottom - this.get_height() + this.originY - padding);
	}
	,centerGraphicInRect: function() {
		if(this._graphic != null) {
			this._graphic.set_x(this.get_width() / 2);
			this._graphic.set_y(this.get_height() / 2);
		}
	}
	,_class: null
	,_scene: null
	,_type: null
	,_layer: null
	,_name: null
	,_recycleNext: null
	,HITBOX: null
	,_mask: null
	,_x: null
	,_y: null
	,_moveX: null
	,_moveY: null
	,_graphic: null
	,_point: null
	,_camera: null
	,__class__: com_haxepunk_Entity
	,__properties__: $extend(com_haxepunk_Tweener.prototype.__properties__,{set_name:"set_name",get_name:"get_name",set_graphic:"set_graphic",get_graphic:"get_graphic",set_mask:"set_mask",get_mask:"get_mask",set_type:"set_type",get_type:"get_type",set_layer:"set_layer",get_layer:"get_layer",get_bottom:"get_bottom",get_top:"get_top",get_right:"get_right",get_left:"get_left",get_centerY:"get_centerY",get_centerX:"get_centerX",get_halfHeight:"get_halfHeight",get_halfWidth:"get_halfWidth",get_scene:"get_scene",get_world:"get_world",get_onCamera:"get_onCamera",set_height:"set_height",get_height:"get_height",set_width:"set_width",get_width:"get_width",set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x"})
});
var com_haxepunk__$Graphic_TileType_$Impl_$ = {};
$hxClasses["com.haxepunk._Graphic.TileType_Impl_"] = com_haxepunk__$Graphic_TileType_$Impl_$;
com_haxepunk__$Graphic_TileType_$Impl_$.__name__ = ["com","haxepunk","_Graphic","TileType_Impl_"];
com_haxepunk__$Graphic_TileType_$Impl_$.__properties__ = {get_type:"get_type"}
com_haxepunk__$Graphic_TileType_$Impl_$._new = function(e) {
	return e;
};
com_haxepunk__$Graphic_TileType_$Impl_$.get_type = function(this1) {
	return this1;
};
com_haxepunk__$Graphic_TileType_$Impl_$.fromString = function(tileset) {
	if(com_haxepunk_HXP.renderMode == com_haxepunk_RenderMode.HARDWARE) {
		var e = com_haxepunk_ds_Either.Right(new com_haxepunk_graphics_atlas_TileAtlas((function($this) {
			var $r;
			var data = com_haxepunk_graphics_atlas_AtlasData.getAtlasDataByName(tileset,true);
			$r = data;
			return $r;
		}(this))));
		return e;
	} else {
		var e1 = com_haxepunk_ds_Either.Left(com_haxepunk_HXP.getBitmap(tileset));
		return e1;
	}
};
com_haxepunk__$Graphic_TileType_$Impl_$.fromTileAtlas = function(atlas) {
	var e = com_haxepunk_ds_Either.Right(atlas);
	return e;
};
com_haxepunk__$Graphic_TileType_$Impl_$.fromBitmapData = function(bd) {
	if(com_haxepunk_HXP.renderMode == com_haxepunk_RenderMode.HARDWARE) {
		var e = com_haxepunk_ds_Either.Right(new com_haxepunk_graphics_atlas_TileAtlas((function($this) {
			var $r;
			var data = new com_haxepunk_graphics_atlas_AtlasData(bd);
			$r = data;
			return $r;
		}(this))));
		return e;
	} else {
		var e1 = com_haxepunk_ds_Either.Left(bd);
		return e1;
	}
};
var com_haxepunk__$Graphic_ImageType_$Impl_$ = {};
$hxClasses["com.haxepunk._Graphic.ImageType_Impl_"] = com_haxepunk__$Graphic_ImageType_$Impl_$;
com_haxepunk__$Graphic_ImageType_$Impl_$.__name__ = ["com","haxepunk","_Graphic","ImageType_Impl_"];
com_haxepunk__$Graphic_ImageType_$Impl_$.__properties__ = {get_height:"get_height",get_width:"get_width",get_type:"get_type"}
com_haxepunk__$Graphic_ImageType_$Impl_$._new = function(e) {
	return e;
};
com_haxepunk__$Graphic_ImageType_$Impl_$.get_type = function(this1) {
	return this1;
};
com_haxepunk__$Graphic_ImageType_$Impl_$.fromString = function(s) {
	if(com_haxepunk_HXP.renderMode == com_haxepunk_RenderMode.HARDWARE) {
		var e = com_haxepunk_ds_Either.Right(com_haxepunk_graphics_atlas_Atlas.loadImageAsRegion((function($this) {
			var $r;
			var data = com_haxepunk_graphics_atlas_AtlasData.getAtlasDataByName(s,true);
			$r = data;
			return $r;
		}(this))));
		return e;
	} else {
		var e1 = com_haxepunk_ds_Either.Left(com_haxepunk_HXP.getBitmap(s));
		return e1;
	}
};
com_haxepunk__$Graphic_ImageType_$Impl_$.fromTileAtlas = function(atlas) {
	var e = com_haxepunk_ds_Either.Right(atlas.getRegion(0));
	return e;
};
com_haxepunk__$Graphic_ImageType_$Impl_$.fromAtlasRegion = function(region) {
	var e = com_haxepunk_ds_Either.Right(region);
	return e;
};
com_haxepunk__$Graphic_ImageType_$Impl_$.fromBitmapData = function(bd) {
	if(com_haxepunk_HXP.renderMode == com_haxepunk_RenderMode.HARDWARE) {
		var e = com_haxepunk_ds_Either.Right(com_haxepunk_graphics_atlas_Atlas.loadImageAsRegion((function($this) {
			var $r;
			var data = new com_haxepunk_graphics_atlas_AtlasData(bd);
			$r = data;
			return $r;
		}(this))));
		return e;
	} else {
		var e1 = com_haxepunk_ds_Either.Left(bd);
		return e1;
	}
};
com_haxepunk__$Graphic_ImageType_$Impl_$.get_width = function(this1) {
	return (function($this) {
		var $r;
		switch(this1[1]) {
		case 0:
			$r = (function($this) {
				var $r;
				var b = this1[2];
				$r = b.width;
				return $r;
			}($this));
			break;
		case 1:
			$r = (function($this) {
				var $r;
				var a = this1[2];
				$r = a._rect.width;
				return $r;
			}($this));
			break;
		}
		return $r;
	}(this)) | 0;
};
com_haxepunk__$Graphic_ImageType_$Impl_$.get_height = function(this1) {
	return (function($this) {
		var $r;
		switch(this1[1]) {
		case 0:
			$r = (function($this) {
				var $r;
				var b = this1[2];
				$r = b.height;
				return $r;
			}($this));
			break;
		case 1:
			$r = (function($this) {
				var $r;
				var a = this1[2];
				$r = a._rect.height;
				return $r;
			}($this));
			break;
		}
		return $r;
	}(this)) | 0;
};
var com_haxepunk__$Graphic_ImageOrTileType_$Impl_$ = {};
$hxClasses["com.haxepunk._Graphic.ImageOrTileType_Impl_"] = com_haxepunk__$Graphic_ImageOrTileType_$Impl_$;
com_haxepunk__$Graphic_ImageOrTileType_$Impl_$.__name__ = ["com","haxepunk","_Graphic","ImageOrTileType_Impl_"];
com_haxepunk__$Graphic_ImageOrTileType_$Impl_$.__properties__ = {get_type:"get_type"}
com_haxepunk__$Graphic_ImageOrTileType_$Impl_$._new = function(e) {
	return e;
};
com_haxepunk__$Graphic_ImageOrTileType_$Impl_$.get_type = function(this1) {
	return this1;
};
com_haxepunk__$Graphic_ImageOrTileType_$Impl_$.fromString = function(tileset) {
	var e2 = com_haxepunk_ds_Either.Right(com_haxepunk_HXP.renderMode == com_haxepunk_RenderMode.HARDWARE?(function($this) {
		var $r;
		var e = com_haxepunk_ds_Either.Right(new com_haxepunk_graphics_atlas_TileAtlas((function($this) {
			var $r;
			var data = com_haxepunk_graphics_atlas_AtlasData.getAtlasDataByName(tileset,true);
			$r = data;
			return $r;
		}($this))));
		$r = e;
		return $r;
	}(this)):(function($this) {
		var $r;
		var e1 = com_haxepunk_ds_Either.Left(com_haxepunk_HXP.getBitmap(tileset));
		$r = e1;
		return $r;
	}(this)));
	return e2;
};
com_haxepunk__$Graphic_ImageOrTileType_$Impl_$.fromBitmapData = function(bd) {
	var e2 = com_haxepunk_ds_Either.Right(com_haxepunk_HXP.renderMode == com_haxepunk_RenderMode.HARDWARE?(function($this) {
		var $r;
		var e = com_haxepunk_ds_Either.Right(new com_haxepunk_graphics_atlas_TileAtlas((function($this) {
			var $r;
			var data = new com_haxepunk_graphics_atlas_AtlasData(bd);
			$r = data;
			return $r;
		}($this))));
		$r = e;
		return $r;
	}(this)):(function($this) {
		var $r;
		var e1 = com_haxepunk_ds_Either.Left(bd);
		$r = e1;
		return $r;
	}(this)));
	return e2;
};
com_haxepunk__$Graphic_ImageOrTileType_$Impl_$.fromTileAtlas = function(atlas) {
	var e1 = com_haxepunk_ds_Either.Right((function($this) {
		var $r;
		var e = com_haxepunk_ds_Either.Right(atlas);
		$r = e;
		return $r;
	}(this)));
	return e1;
};
com_haxepunk__$Graphic_ImageOrTileType_$Impl_$.fromAtlasRegion = function(region) {
	var e1 = com_haxepunk_ds_Either.Left((function($this) {
		var $r;
		var e = com_haxepunk_ds_Either.Right(region);
		$r = e;
		return $r;
	}(this)));
	return e1;
};
var com_haxepunk_Graphic = function() {
	this.active = false;
	this._visible = true;
	this.set_x(this.y = 0);
	this.scrollX = this.scrollY = 1;
	this.relative = true;
	this._scroll = true;
	this._point = new openfl_geom_Point();
};
$hxClasses["com.haxepunk.Graphic"] = com_haxepunk_Graphic;
com_haxepunk_Graphic.__name__ = ["com","haxepunk","Graphic"];
com_haxepunk_Graphic.prototype = {
	active: null
	,get_visible: function() {
		return this._visible;
	}
	,set_visible: function(value) {
		return this._visible = value;
	}
	,x: null
	,get_x: function() {
		return this.x;
	}
	,set_x: function(value) {
		return this.x = value;
	}
	,y: null
	,get_y: function() {
		return this.y;
	}
	,set_y: function(value) {
		return this.y = value;
	}
	,scrollX: null
	,scrollY: null
	,relative: null
	,blit: null
	,update: function() {
	}
	,destroy: function() {
	}
	,render: function(target,point,camera) {
	}
	,renderAtlas: function(layer,point,camera) {
	}
	,pause: function() {
		this.active = false;
	}
	,resume: function() {
		this.active = true;
	}
	,_scroll: null
	,_point: null
	,_entity: null
	,_visible: null
	,__class__: com_haxepunk_Graphic
	,__properties__: {set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x",set_visible:"set_visible",get_visible:"get_visible"}
};
var com_haxepunk__$HXP_Position_$Impl_$ = {};
$hxClasses["com.haxepunk._HXP.Position_Impl_"] = com_haxepunk__$HXP_Position_$Impl_$;
com_haxepunk__$HXP_Position_$Impl_$.__name__ = ["com","haxepunk","_HXP","Position_Impl_"];
com_haxepunk__$HXP_Position_$Impl_$.__properties__ = {set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x"}
com_haxepunk__$HXP_Position_$Impl_$._new = function(obj) {
	return obj;
};
com_haxepunk__$HXP_Position_$Impl_$.get_x = function(this1) {
	return this1.x;
};
com_haxepunk__$HXP_Position_$Impl_$.set_x = function(this1,value) {
	return this1.x = value;
};
com_haxepunk__$HXP_Position_$Impl_$.get_y = function(this1) {
	return this1.y;
};
com_haxepunk__$HXP_Position_$Impl_$.set_y = function(this1,value) {
	return this1.y = value;
};
com_haxepunk__$HXP_Position_$Impl_$.fromObject = function(obj) {
	return com_haxepunk__$HXP_Position_$Impl_$._new(obj);
};
com_haxepunk__$HXP_Position_$Impl_$.fromEntity = function(entity) {
	return com_haxepunk__$HXP_Position_$Impl_$._new(entity);
};
var com_haxepunk_RenderMode = $hxClasses["com.haxepunk.RenderMode"] = { __ename__ : ["com","haxepunk","RenderMode"], __constructs__ : ["BUFFER","HARDWARE"] };
com_haxepunk_RenderMode.BUFFER = ["BUFFER",0];
com_haxepunk_RenderMode.BUFFER.toString = $estr;
com_haxepunk_RenderMode.BUFFER.__enum__ = com_haxepunk_RenderMode;
com_haxepunk_RenderMode.HARDWARE = ["HARDWARE",1];
com_haxepunk_RenderMode.HARDWARE.toString = $estr;
com_haxepunk_RenderMode.HARDWARE.__enum__ = com_haxepunk_RenderMode;
var com_haxepunk_Screen = function() {
	this._shakeY = 0;
	this._shakeX = 0;
	this._shakeMagnitude = 0;
	this._shakeTime = 0;
	this.offsetY = 0;
	this.offsetX = 0;
	this.height = 0;
	this.width = 0;
	this.needsResize = false;
	this.fullScaleY = 1;
	this.fullScaleX = 1;
	this.scale = 1;
	this._scaleYMult = 1;
	this.scaleY = 1;
	this._scaleXMult = 1;
	this.scaleX = 1;
	this.originY = 0;
	this.originX = 0;
	this.y = 0;
	this.x = 0;
	this.scaleMode = new com_haxepunk_screen_ScaleMode();
	this._sprite = new openfl_display_Sprite();
	this._bitmap = [];
	this.init();
};
$hxClasses["com.haxepunk.Screen"] = com_haxepunk_Screen;
com_haxepunk_Screen.__name__ = ["com","haxepunk","Screen"];
com_haxepunk_Screen.prototype = {
	scaleMode: null
	,init: function() {
		this.set_x(this.set_y(this.set_originX(this.set_originY(0))));
		this._angle = this._current = 0;
		this.set_scale(this.set_scaleX(this.set_scaleY(1)));
		this.updateTransformation();
		if(com_haxepunk_HXP.engine.contains(this._sprite)) com_haxepunk_HXP.engine.removeChild(this._sprite);
		if(com_haxepunk_HXP.renderMode == com_haxepunk_RenderMode.BUFFER) com_haxepunk_HXP.engine.addChild(this._sprite);
	}
	,disposeBitmap: function(bd) {
		if(bd != null) {
			this._sprite.removeChild(bd);
			bd.bitmapData.dispose();
		}
	}
	,resize: function(width,height) {
		var oldWidth = com_haxepunk_HXP.width;
		var oldHeight = com_haxepunk_HXP.height;
		com_haxepunk_HXP.camera.x += com_haxepunk_HXP.screen.offsetX;
		com_haxepunk_HXP.camera.y += com_haxepunk_HXP.screen.offsetY;
		this.scaleMode.resize(width,height);
		com_haxepunk_HXP.camera.x -= com_haxepunk_HXP.screen.offsetX;
		com_haxepunk_HXP.camera.y -= com_haxepunk_HXP.screen.offsetY;
		width = com_haxepunk_HXP.width = com_haxepunk_HXP.screen.width / com_haxepunk_HXP.screen.fullScaleX | 0;
		height = com_haxepunk_HXP.height = com_haxepunk_HXP.screen.height / com_haxepunk_HXP.screen.fullScaleY | 0;
		if(com_haxepunk_HXP.renderMode == com_haxepunk_RenderMode.BUFFER && (this._bitmap.length == 0 || width != oldWidth || height != oldHeight)) {
			this.disposeBitmap(this._bitmap[0]);
			this.disposeBitmap(this._bitmap[1]);
			this._bitmap[0] = new openfl_display_Bitmap(com_haxepunk_HXP.createBitmap(width,height,true),2);
			this._bitmap[1] = new openfl_display_Bitmap(com_haxepunk_HXP.createBitmap(width,height,true),2);
			this._sprite.addChild(this._bitmap[0]).set_visible(true);
			this._sprite.addChild(this._bitmap[1]).set_visible(false);
			com_haxepunk_HXP.buffer = this._bitmap[0].bitmapData;
		}
		this._current = 0;
		this.needsResize = false;
	}
	,swap: function() {
		if(com_haxepunk_HXP.renderMode == com_haxepunk_RenderMode.BUFFER) {
			this._current = 1 - this._current;
			com_haxepunk_HXP.buffer = this._bitmap[this._current].bitmapData;
		}
	}
	,addFilter: function(filter) {
		this._sprite.set_filters(filter);
	}
	,refresh: function() {
		com_haxepunk_HXP.buffer.fillRect(com_haxepunk_HXP.bounds,-16777216 | com_haxepunk_HXP.stage.get_color());
	}
	,redraw: function() {
		if(com_haxepunk_HXP.renderMode == com_haxepunk_RenderMode.BUFFER) {
			this._bitmap[this._current].set_visible(true);
			this._bitmap[1 - this._current].set_visible(false);
		}
	}
	,updateTransformation: function() {
		if(this._matrix == null) this._matrix = new openfl_geom_Matrix();
		this._matrix.b = this._matrix.c = 0;
		this._matrix.a = this.fullScaleX;
		this._matrix.d = this.fullScaleY;
		this._matrix.tx = -this.originX * this._matrix.a;
		this._matrix.ty = -this.originY * this._matrix.d;
		if(this._angle != 0) this._matrix.rotate(this._angle);
		this._matrix.tx += this.originX * this.fullScaleX + this.x;
		this._matrix.ty += this.originY * this.fullScaleY + this.y;
		this._sprite.get_transform().set_matrix(this._matrix);
	}
	,update: function() {
		if(this._shakeTime > 0) {
			var sx = Std.random(this._shakeMagnitude * 2 + 1) - this._shakeMagnitude;
			var sy = Std.random(this._shakeMagnitude * 2 + 1) - this._shakeMagnitude;
			var _g = this;
			_g.set_x(_g.x + (sx - this._shakeX));
			var _g1 = this;
			_g1.set_y(_g1.y + (sy - this._shakeY));
			this._shakeX = sx;
			this._shakeY = sy;
			this._shakeTime -= com_haxepunk_HXP.elapsed;
			if(this._shakeTime < 0) this._shakeTime = 0;
		} else if(this._shakeX != 0 || this._shakeY != 0) {
			var _g2 = this;
			_g2.set_x(_g2.x - this._shakeX);
			var _g3 = this;
			_g3.set_y(_g3.y - this._shakeY);
			this._shakeX = this._shakeY = 0;
		}
	}
	,get_color: function() {
		return com_haxepunk_HXP.stage.get_color();
	}
	,set_color: function(value) {
		return com_haxepunk_HXP.stage.set_color(value);
	}
	,x: null
	,set_x: function(value) {
		if(this.x == value) return value;
		com_haxepunk_HXP.engine.set_x(this.x = value);
		this.updateTransformation();
		return this.x;
	}
	,y: null
	,set_y: function(value) {
		if(this.y == value) return value;
		com_haxepunk_HXP.engine.set_y(this.y = value);
		this.updateTransformation();
		return this.y;
	}
	,originX: null
	,set_originX: function(value) {
		if(this.originX == value) return value;
		this.originX = value;
		this.updateTransformation();
		return this.originX;
	}
	,originY: null
	,set_originY: function(value) {
		if(this.originY == value) return value;
		this.originY = value;
		this.updateTransformation();
		return this.originY;
	}
	,scaleX: null
	,set_scaleX: function(value) {
		if(this.scaleX == value) return value;
		this._scaleXMult *= value / this.scaleX;
		this.scaleX = value;
		this.fullScaleX = this.scaleX * this.scale;
		this.updateTransformation();
		this.needsResize = true;
		return this.scaleX;
	}
	,_scaleXMult: null
	,scaleY: null
	,set_scaleY: function(value) {
		if(this.scaleY == value) return value;
		this._scaleYMult *= value / this.scaleY;
		this.scaleY = value;
		this.fullScaleY = this.scaleY * this.scale;
		this.updateTransformation();
		this.needsResize = true;
		return this.scaleY;
	}
	,_scaleYMult: null
	,scale: null
	,set_scale: function(value) {
		if(this.scale == value) return value;
		this.scale = value;
		this.fullScaleX = this.scaleX * this.scale;
		this.fullScaleY = this.scaleY * this.scale;
		this.updateTransformation();
		this.needsResize = true;
		return this.scale;
	}
	,fullScaleX: null
	,fullScaleY: null
	,needsResize: null
	,get_angle: function() {
		return this._angle * (-180 / Math.PI);
	}
	,set_angle: function(value) {
		if(this._angle == value * (Math.PI / -180)) return value;
		this._angle = value * (Math.PI / -180);
		this.updateTransformation();
		return this._angle;
	}
	,get_smoothing: function() {
		if(com_haxepunk_HXP.renderMode == com_haxepunk_RenderMode.BUFFER) return this._bitmap[0].smoothing; else return com_haxepunk_graphics_atlas_Atlas.smooth;
	}
	,set_smoothing: function(value) {
		if(com_haxepunk_HXP.renderMode == com_haxepunk_RenderMode.BUFFER) this._bitmap[0].smoothing = this._bitmap[1].smoothing = value; else com_haxepunk_graphics_atlas_Atlas.smooth = value;
		return value;
	}
	,width: null
	,height: null
	,mouseX: null
	,get_mouseX: function() {
		return Std["int"](this._sprite.get_mouseX());
	}
	,mouseY: null
	,get_mouseY: function() {
		return Std["int"](this._sprite.get_mouseY());
	}
	,offsetX: null
	,offsetY: null
	,capture: function() {
		if(com_haxepunk_HXP.renderMode == com_haxepunk_RenderMode.BUFFER) return new com_haxepunk_graphics_Image((function($this) {
			var $r;
			var bd = $this._bitmap[$this._current].bitmapData.clone();
			$r = com_haxepunk_HXP.renderMode == com_haxepunk_RenderMode.HARDWARE?(function($this) {
				var $r;
				var e = com_haxepunk_ds_Either.Right(com_haxepunk_graphics_atlas_Atlas.loadImageAsRegion((function($this) {
					var $r;
					var data = new com_haxepunk_graphics_atlas_AtlasData(bd);
					$r = data;
					return $r;
				}($this))));
				$r = e;
				return $r;
			}($this)):(function($this) {
				var $r;
				var e1 = com_haxepunk_ds_Either.Left(bd);
				$r = e1;
				return $r;
			}($this));
			return $r;
		}(this))); else throw new js__$Boot_HaxeError("Screen.capture only supported with buffer rendering");
	}
	,shake: function(magnitude,duration) {
		if(duration == null) duration = 0.5;
		if(magnitude == null) magnitude = 4;
		if(this._shakeTime < duration) this._shakeTime = duration;
		this._shakeMagnitude = magnitude;
	}
	,shakeStop: function() {
		this._shakeTime = 0;
	}
	,_sprite: null
	,_bitmap: null
	,_current: null
	,_matrix: null
	,_angle: null
	,_shakeTime: null
	,_shakeMagnitude: null
	,_shakeX: null
	,_shakeY: null
	,__class__: com_haxepunk_Screen
	,__properties__: {get_mouseY:"get_mouseY",get_mouseX:"get_mouseX",set_smoothing:"set_smoothing",get_smoothing:"get_smoothing",set_angle:"set_angle",get_angle:"get_angle",set_scale:"set_scale",set_scaleY:"set_scaleY",set_scaleX:"set_scaleX",set_originY:"set_originY",set_originX:"set_originX",set_y:"set_y",set_x:"set_x",set_color:"set_color",get_color:"get_color"}
};
var com_haxepunk_Sfx = function(source,complete) {
	this._position = 0;
	this._pan = 0;
	this._volume = 1;
	this._transform = new openfl_media_SoundTransform();
	this._volume = 1;
	this._pan = 0;
	this._position = 0;
	this._type = "";
	if(source == null) throw new js__$Boot_HaxeError("Invalid source Sound.");
	if(typeof(source) == "string") {
		this._sound = openfl_Assets.getSound(source);
		var key = source;
		com_haxepunk_Sfx._sounds.set(key,this._sound);
	} else {
		var className = Type.getClassName(Type.getClass(source));
		if(StringTools.endsWith(className,"media.Sound")) {
			var __sound = source;
			this._sound = com_haxepunk_Sfx._sounds.get(__sound.url);
			if(this._sound == null) {
				this._sound = source;
				var value = source;
				com_haxepunk_Sfx._sounds.set(__sound.url,value);
			}
		} else {
			this._sound = com_haxepunk_Sfx._sounds.get(className);
			if(this._sound == null) {
				this._sound = source;
				var value1 = source;
				com_haxepunk_Sfx._sounds.set(className,value1);
			}
		}
	}
	this.complete = complete;
};
$hxClasses["com.haxepunk.Sfx"] = com_haxepunk_Sfx;
com_haxepunk_Sfx.__name__ = ["com","haxepunk","Sfx"];
com_haxepunk_Sfx.getPan = function(type) {
	var result = 0;
	if(com_haxepunk_Sfx._typeTransforms.exists(type)) {
		var transform = com_haxepunk_Sfx._typeTransforms.get(type);
		if(transform != null) result = transform.pan;
	}
	return result + com_haxepunk_HXP._pan;
};
com_haxepunk_Sfx.getVolume = function(type) {
	var result = 1;
	if(com_haxepunk_Sfx._typeTransforms.exists(type)) {
		var transform = com_haxepunk_Sfx._typeTransforms.get(type);
		if(transform != null) result = transform.volume;
	}
	return result * com_haxepunk_HXP._volume;
};
com_haxepunk_Sfx.setPan = function(type,pan) {
	var transform = com_haxepunk_Sfx._typeTransforms.get(type);
	if(transform == null) {
		transform = new openfl_media_SoundTransform();
		com_haxepunk_Sfx._typeTransforms.set(type,transform);
	}
	transform.pan = com_haxepunk_HXP.clamp(pan,-1,1);
	if(com_haxepunk_Sfx._typePlaying.exists(type)) {
		var _g = 0;
		var _g1 = com_haxepunk_Sfx._typePlaying.get(type);
		while(_g < _g1.length) {
			var sfx = _g1[_g];
			++_g;
			sfx.set_pan(sfx.get_pan());
		}
	}
};
com_haxepunk_Sfx.setVolume = function(type,volume) {
	var transform = com_haxepunk_Sfx._typeTransforms.get(type);
	if(transform == null) {
		transform = new openfl_media_SoundTransform();
		com_haxepunk_Sfx._typeTransforms.set(type,transform);
	}
	if(volume < 0) transform.volume = 0; else transform.volume = volume;
	if(com_haxepunk_Sfx._typePlaying.exists(type)) {
		var _g = 0;
		var _g1 = com_haxepunk_Sfx._typePlaying.get(type);
		while(_g < _g1.length) {
			var sfx = _g1[_g];
			++_g;
			sfx.set_volume(sfx.get_volume());
		}
	}
};
com_haxepunk_Sfx.onGlobalUpdated = function(updatePan) {
	var $it0 = com_haxepunk_Sfx._typePlaying.keys();
	while( $it0.hasNext() ) {
		var type = $it0.next();
		var _g = 0;
		var _g1 = com_haxepunk_Sfx._typePlaying.get(type);
		while(_g < _g1.length) {
			var sfx = _g1[_g];
			++_g;
			if(updatePan) sfx.set_pan(sfx.get_pan()); else sfx.set_volume(sfx.get_volume());
		}
	}
};
com_haxepunk_Sfx.prototype = {
	complete: null
	,play: function(volume,pan,loop) {
		if(loop == null) loop = false;
		if(pan == null) pan = 0;
		if(volume == null) volume = 1;
		if(this._sound == null) return;
		if(this._channel != null) this.stop();
		this._pan = com_haxepunk_HXP.clamp(pan,-1,1);
		if(volume < 0) this._volume = 0; else this._volume = volume;
		this._filteredPan = com_haxepunk_HXP.clamp(this._pan + com_haxepunk_Sfx.getPan(this._type),-1,1);
		this._filteredVol = Math.max(0,this._volume * com_haxepunk_Sfx.getVolume(this._type));
		this._transform.pan = this._filteredPan;
		this._transform.volume = this._filteredVol;
		this._channel = this._sound.play(0,loop?-1:0,this._transform);
		if(this._channel != null) {
			this.addPlaying();
			this._channel.addEventListener("soundComplete",$bind(this,this.onComplete));
		}
		this._looping = loop;
		this._position = 0;
	}
	,loop: function(vol,pan) {
		if(pan == null) pan = 0;
		if(vol == null) vol = 1;
		this.play(vol,pan,true);
	}
	,stop: function() {
		if(!(this._channel != null)) return false;
		this.removePlaying();
		this._position = this._channel.get_position();
		this._channel.removeEventListener("soundComplete",$bind(this,this.onComplete));
		this._channel.stop();
		this._channel = null;
		return true;
	}
	,resume: function() {
		this._channel = this._sound.play(this._position,this._looping?-1:0,this._transform);
		if(this._channel != null) {
			this.addPlaying();
			this._channel.addEventListener("soundComplete",$bind(this,this.onComplete));
		}
		this._position = 0;
	}
	,onComplete: function(e) {
		if(this._looping) this.loop(this._volume,this._pan); else this.stop();
		this._position = 0;
		if(this.complete != null) this.complete();
	}
	,addPlaying: function() {
		var list;
		if(!com_haxepunk_Sfx._typePlaying.exists(this._type)) {
			list = [];
			com_haxepunk_Sfx._typePlaying.set(this._type,list);
		} else list = com_haxepunk_Sfx._typePlaying.get(this._type);
		list.push(this);
	}
	,removePlaying: function() {
		if(com_haxepunk_Sfx._typePlaying.exists(this._type)) {
			var _this = com_haxepunk_Sfx._typePlaying.get(this._type);
			HxOverrides.remove(_this,this);
		}
	}
	,get_volume: function() {
		return this._volume;
	}
	,set_volume: function(value) {
		if(value < 0) value = 0;
		if(this._channel == null) return value;
		this._volume = value;
		var filteredVol = value * com_haxepunk_Sfx.getVolume(this._type);
		if(filteredVol < 0) filteredVol = 0;
		if(this._filteredVol == filteredVol) return value;
		this._filteredVol = this._transform.volume = filteredVol;
		this._channel.set_soundTransform(this._transform);
		return this._volume;
	}
	,get_pan: function() {
		return this._pan;
	}
	,set_pan: function(value) {
		value = com_haxepunk_HXP.clamp(value,-1,1);
		if(this._channel == null) return value;
		var filteredPan = com_haxepunk_HXP.clamp(value + com_haxepunk_Sfx.getPan(this._type),-1,1);
		if(this._filteredPan == filteredPan) return value;
		this._pan = value;
		this._filteredPan = this._transform.pan = filteredPan;
		this._channel.set_soundTransform(this._transform);
		return this._pan;
	}
	,get_type: function() {
		return this._type;
	}
	,set_type: function(value) {
		if(this._type == value) return value;
		if(this._channel != null) {
			this.removePlaying();
			this._type = value;
			this.addPlaying();
			this.set_pan(this.get_pan());
			this.set_volume(this.get_volume());
		} else this._type = value;
		return value;
	}
	,playing: null
	,get_playing: function() {
		return this._channel != null;
	}
	,position: null
	,get_position: function() {
		return (this._channel != null?this._channel.get_position():this._position) / 1000;
	}
	,length: null
	,get_length: function() {
		return this._sound.get_length() / 1000;
	}
	,_type: null
	,_volume: null
	,_pan: null
	,_filteredVol: null
	,_filteredPan: null
	,_sound: null
	,_channel: null
	,_transform: null
	,_position: null
	,_looping: null
	,__class__: com_haxepunk_Sfx
	,__properties__: {get_length:"get_length",get_position:"get_position",get_playing:"get_playing",set_type:"set_type",get_type:"get_type",set_pan:"set_pan",get_pan:"get_pan",set_volume:"set_volume",get_volume:"get_volume"}
};
var com_haxepunk_TweenType = $hxClasses["com.haxepunk.TweenType"] = { __ename__ : ["com","haxepunk","TweenType"], __constructs__ : ["Persist","Looping","OneShot"] };
com_haxepunk_TweenType.Persist = ["Persist",0];
com_haxepunk_TweenType.Persist.toString = $estr;
com_haxepunk_TweenType.Persist.__enum__ = com_haxepunk_TweenType;
com_haxepunk_TweenType.Looping = ["Looping",1];
com_haxepunk_TweenType.Looping.toString = $estr;
com_haxepunk_TweenType.Looping.__enum__ = com_haxepunk_TweenType;
com_haxepunk_TweenType.OneShot = ["OneShot",2];
com_haxepunk_TweenType.OneShot.toString = $estr;
com_haxepunk_TweenType.OneShot.__enum__ = com_haxepunk_TweenType;
var com_haxepunk_Tween = function(duration,type,complete,ease) {
	this._target = duration;
	if(type == null) type = com_haxepunk_TweenType.Persist;
	this._type = type;
	this._ease = ease;
	this._t = 0;
	this._callback = complete;
	openfl_events_EventDispatcher.call(this);
	if(this._callback != null) this.addEventListener(com_haxepunk_tweens_TweenEvent.FINISH,this._callback);
};
$hxClasses["com.haxepunk.Tween"] = com_haxepunk_Tween;
com_haxepunk_Tween.__name__ = ["com","haxepunk","Tween"];
com_haxepunk_Tween.__super__ = openfl_events_EventDispatcher;
com_haxepunk_Tween.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	active: null
	,update: function() {
		if(com_haxepunk_HXP.fixed) this._time += 1; else this._time += com_haxepunk_HXP.elapsed;
		this._t = this._time / this._target;
		if(this._ease != null && this._t > 0 && this._t < 1) this._t = this._ease(this._t);
		if(this._time >= this._target) {
			this._t = 1;
			this._finish = true;
		}
		this.dispatchEvent(new com_haxepunk_tweens_TweenEvent(com_haxepunk_tweens_TweenEvent.UPDATE));
	}
	,start: function() {
		this._time = 0;
		if(this._target == 0) {
			this.active = false;
			this.dispatchEvent(new com_haxepunk_tweens_TweenEvent(com_haxepunk_tweens_TweenEvent.FINISH));
		} else {
			this.active = true;
			this.dispatchEvent(new com_haxepunk_tweens_TweenEvent(com_haxepunk_tweens_TweenEvent.START));
		}
	}
	,finish: function() {
		var _g = this._type;
		switch(_g[1]) {
		case 0:
			this._time = this._target;
			this.active = false;
			break;
		case 1:
			this._time %= this._target;
			this._t = this._time / this._target;
			if(this._ease != null && this._t > 0 && this._t < 1) this._t = this._ease(this._t);
			this.start();
			break;
		case 2:
			this._time = this._target;
			this.active = false;
			this._parent.removeTween(this);
			break;
		}
		this._finish = false;
		this.dispatchEvent(new com_haxepunk_tweens_TweenEvent(com_haxepunk_tweens_TweenEvent.FINISH));
		if(this._type == com_haxepunk_TweenType.OneShot && this._callback != null) this.removeEventListener(com_haxepunk_tweens_TweenEvent.FINISH,this._callback);
	}
	,cancel: function() {
		this.active = false;
		if(this._parent != null) this._parent.removeTween(this);
	}
	,get_percent: function() {
		return this._time / this._target;
	}
	,set_percent: function(value) {
		return this._time = this._target * value;
	}
	,scale: null
	,get_scale: function() {
		return this._t;
	}
	,_type: null
	,_ease: null
	,_t: null
	,_time: null
	,_target: null
	,_callback: null
	,_finish: null
	,_parent: null
	,_prev: null
	,_next: null
	,__class__: com_haxepunk_Tween
	,__properties__: {get_scale:"get_scale",set_percent:"set_percent",get_percent:"get_percent"}
});
var com_haxepunk_debug_TraceCapture = $hxClasses["com.haxepunk.debug.TraceCapture"] = { __ename__ : ["com","haxepunk","debug","TraceCapture"], __constructs__ : ["No","Yes"] };
com_haxepunk_debug_TraceCapture.No = ["No",0];
com_haxepunk_debug_TraceCapture.No.toString = $estr;
com_haxepunk_debug_TraceCapture.No.__enum__ = com_haxepunk_debug_TraceCapture;
com_haxepunk_debug_TraceCapture.Yes = ["Yes",1];
com_haxepunk_debug_TraceCapture.Yes.toString = $estr;
com_haxepunk_debug_TraceCapture.Yes.__enum__ = com_haxepunk_debug_TraceCapture;
var com_haxepunk_debug_Console = function() {
	this.debugDraw = true;
	this.init();
	com_haxepunk_utils_Input.define("_ARROWS",[39,37,40,38]);
};
$hxClasses["com.haxepunk.debug.Console"] = com_haxepunk_debug_Console;
com_haxepunk_debug_Console.__name__ = ["com","haxepunk","debug","Console"];
com_haxepunk_debug_Console.prototype = {
	toggleKey: null
	,init: function() {
		this._sprite = new openfl_display_Sprite();
		var font = openfl_Assets.getFont("font/04B_03__.ttf");
		if(font == null) font = openfl_Assets.getFont(com_haxepunk_HXP.defaultFont);
		this._format = new openfl_text_TextFormat(font.name,8,16777215);
		this._back = new openfl_display_Bitmap();
		this._fpsRead = new openfl_display_Sprite();
		this._fpsReadText = new openfl_text_TextField();
		this._fpsInfo = new openfl_display_Sprite();
		this._fpsInfoText0 = new openfl_text_TextField();
		this._fpsInfoText1 = new openfl_text_TextField();
		this._memReadText = new openfl_text_TextField();
		this._layerList = new com_haxepunk_debug_LayerList();
		this._logRead = new openfl_display_Sprite();
		this._logReadText0 = new openfl_text_TextField();
		this._logReadText1 = new openfl_text_TextField();
		this._logScroll = 0;
		this._logLines = 33;
		this._entRead = new openfl_display_Sprite();
		this._entReadText = new openfl_text_TextField();
		this._debRead = new openfl_display_Sprite();
		this._debReadText0 = new openfl_text_TextField();
		this._debReadText1 = new openfl_text_TextField();
		this._butRead = new openfl_display_Sprite();
		this._entScreen = new openfl_display_Sprite();
		this._entSelect = new openfl_display_Sprite();
		this._entRect = new openfl_geom_Rectangle();
		this.LOG = [];
		this.LAYER_LIST = new haxe_ds_IntMap();
		this.ENTITY_LIST = [];
		this.SCREEN_LIST = [];
		this.SELECT_LIST = [];
		this.WATCH_LIST = ["x","y"];
	}
	,traceLog: function(v,infos) {
		var log = infos.className + "(" + infos.lineNumber + "): " + Std.string(v);
		this.LOG.push(log);
		if(this._enabled && this._sprite.get_visible()) this.updateLog();
	}
	,log: function(data) {
		var s = "";
		var _g1 = 0;
		var _g = data.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(i > 0) s += " ";
			if(data[i] != null) s += Std.string(data[i]); else s += "null";
		}
		if(s.indexOf("\n") >= 0) {
			var a = s.split("\n");
			var _g2 = 0;
			while(_g2 < a.length) {
				var s1 = a[_g2];
				++_g2;
				this.LOG.push(s1);
			}
		} else this.LOG.push(s);
		if(this._enabled && this._sprite.get_visible()) this.updateLog();
	}
	,watch: function(properties) {
		var i;
		if(properties.length > 1) {
			var _g = 0;
			while(_g < properties.length) {
				var i1 = properties[_g];
				++_g;
				this.WATCH_LIST.push(i1);
			}
		} else this.WATCH_LIST.push(properties[0]);
	}
	,show: function() {
		if(!this._visible) {
			com_haxepunk_HXP.stage.addChild(this._sprite);
			this._visible = true;
		}
	}
	,hide: function() {
		if(this._visible) {
			com_haxepunk_HXP.stage.removeChild(this._sprite);
			this._visible = false;
		}
	}
	,enable: function(trace_capture,toggleKey) {
		if(toggleKey == null) toggleKey = 192;
		this.toggleKey = toggleKey;
		if(this._enabled) return;
		try {
			this._bmpLogo = new openfl_display_Bitmap(openfl_Assets.getBitmapData("graphics/debug/console_logo.png"));
			this._butDebug = new openfl_display_Bitmap(openfl_Assets.getBitmapData("graphics/debug/console_debug.png"));
			this._butOutput = new openfl_display_Bitmap(openfl_Assets.getBitmapData("graphics/debug/console_output.png"));
			this._butPlay = new openfl_display_Bitmap(openfl_Assets.getBitmapData("graphics/debug/console_play.png"));
			this._butPause = new openfl_display_Bitmap(openfl_Assets.getBitmapData("graphics/debug/console_pause.png"));
			this._butStep = new openfl_display_Bitmap(openfl_Assets.getBitmapData("graphics/debug/console_step.png"));
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			return;
		}
		this._enabled = true;
		this._visible = true;
		com_haxepunk_HXP.stage.addChild(this._sprite);
		var big = this.get_width() >= 420;
		this._sprite.addChild(this._back);
		this._sprite.addChild(this._entScreen);
		this._entScreen.addChild(this._entSelect);
		this._sprite.addChild(this._entRead);
		this._entRead.addChild(this._entReadText);
		this._entReadText.set_defaultTextFormat(this.format(16,16777215,"right"));
		this._entReadText.set_width(100);
		this._entReadText.set_height(20);
		this._entRead.set_x(this.get_width() - this._entReadText.get_width());
		this._entRead.get_graphics().clear();
		this._entRead.get_graphics().beginFill(0,.5);
		this._entRead.get_graphics().drawRoundRect(0,-20,this._entReadText.get_width() + 20,40,40,40);
		this._sprite.addChild(this._fpsRead);
		this._fpsRead.addChild(this._fpsReadText);
		this._fpsReadText.set_defaultTextFormat(this.format(16));
		this._fpsReadText.set_width(70);
		this._fpsReadText.set_height(20);
		this._fpsReadText.set_x(2);
		this._fpsReadText.set_y(1);
		this._fpsRead.get_graphics().clear();
		this._fpsRead.get_graphics().beginFill(0,.75);
		this._fpsRead.get_graphics().drawRoundRect(-20,-20,big?340:180,40,40,40);
		this._sprite.addChild(this._layerList);
		if(big) this._sprite.addChild(this._fpsInfo);
		this._fpsInfo.addChild(this._fpsInfoText0);
		this._fpsInfo.addChild(this._fpsInfoText1);
		this._fpsInfoText0.set_defaultTextFormat(this.format(8,11184810));
		this._fpsInfoText1.set_defaultTextFormat(this.format(8,11184810));
		this._fpsInfoText0.set_width(this._fpsInfoText1.set_width(60));
		this._fpsInfoText0.set_height(this._fpsInfoText1.set_height(20));
		this._fpsInfo.set_x(75);
		this._fpsInfoText1.set_x(60);
		this._fpsInfo.set_width(this._fpsInfoText0.get_width() + this._fpsInfoText1.get_width());
		this._sprite.addChild(this._logRead);
		this._logRead.addChild(this._logReadText0);
		this._logRead.addChild(this._logReadText1);
		this._logReadText0.set_defaultTextFormat(this.format(16,16777215));
		this._logReadText1.set_defaultTextFormat(this.format(big?16:8,16777215));
		this._logReadText0.set_selectable(false);
		this._logReadText0.set_width(80);
		this._logReadText0.set_height(20);
		this._logReadText1.set_width(this.get_width());
		this._logReadText0.set_x(2);
		this._logReadText0.set_y(3);
		this._logReadText0.set_text("OUTPUT:");
		this._logHeight = this.get_height() - 60;
		this._logBar = new openfl_geom_Rectangle(8,24,16,this._logHeight - 8);
		this._logBarGlobal = this._logBar.clone();
		this._logBarGlobal.y += 40;
		if(big) this._logLines = this._logHeight / 16.5 | 0; else this._logLines = this._logHeight / 8.5 | 0;
		this._sprite.addChild(this._debRead);
		this._debRead.addChild(this._debReadText0);
		this._debRead.addChild(this._debReadText1);
		this._debReadText0.set_defaultTextFormat(this.format(16,16777215));
		this._debReadText1.set_defaultTextFormat(this.format(8,16777215));
		this._debReadText0.set_selectable(false);
		this._debReadText0.set_width(80);
		this._debReadText0.set_height(20);
		this._debReadText1.set_width(160);
		this._debReadText1.set_height(Std["int"](this.get_height() / 4));
		this._debReadText0.set_x(2);
		this._debReadText0.set_y(3);
		this._debReadText1.set_x(2);
		this._debReadText1.set_y(24);
		this._debReadText0.set_text("DEBUG:");
		this._debRead.set_y(this.get_height() - (this._debReadText1.get_y() + this._debReadText1.get_height()));
		this._sprite.addChild(this._butRead);
		this._butRead.addChild(this._butDebug);
		this._butRead.addChild(this._butOutput);
		this._butRead.addChild(this._butPlay).set_x(20);
		this._butRead.addChild(this._butPause).set_x(20);
		this._butRead.addChild(this._butStep).set_x(40);
		this.updateButtons();
		this._butRead.get_graphics().clear();
		this._butRead.get_graphics().beginFill(0,.75);
		this._butRead.get_graphics().drawRoundRect(-20,-20,100,40,40,40);
		this.set_debug(true);
		com_haxepunk_HXP.stage.addEventListener("resize",$bind(this,this.onResize));
		this.onResize(null);
		this.set_paused(false);
		if(trace_capture == com_haxepunk_debug_TraceCapture.Yes) haxe_Log.trace = $bind(this,this.traceLog);
		this.LOG.push("-- HaxePunk v" + "2.6.0" + " --");
		if(this._enabled && this._sprite.get_visible()) this.updateLog();
	}
	,onResize: function(e) {
		if(this._back.bitmapData != null) this._back.bitmapData.dispose();
		this._back.set_bitmapData(com_haxepunk_HXP.createBitmap(this.get_width(),this.get_height(),true,-1));
		com_haxepunk_HXP.matrix.identity();
		com_haxepunk_HXP.matrix.tx = Math.max((this._back.bitmapData.width - this._bmpLogo.get_width()) / 2,0);
		com_haxepunk_HXP.matrix.ty = Math.max((this._back.bitmapData.height - this._bmpLogo.get_height()) / 2,0);
		com_haxepunk_HXP.matrix.scale(Math.min(this.get_width() / this._back.bitmapData.width,1),Math.min(this.get_height() / this._back.bitmapData.height,1));
		this._back.bitmapData.draw(this._bmpLogo,com_haxepunk_HXP.matrix,null,9);
		this._back.bitmapData.draw(this._back.bitmapData,null,null,6);
		this._back.bitmapData.colorTransform(this._back.bitmapData.rect,new openfl_geom_ColorTransform(1,1,1,0.5));
		this.updateLog();
	}
	,get_visible: function() {
		return this._sprite.get_visible();
	}
	,set_visible: function(value) {
		this._sprite.set_visible(value);
		if(this._enabled && value) this.updateLog();
		return this._sprite.get_visible();
	}
	,debugDraw: null
	,set_debugDraw: function(value) {
		this.debugDraw = value;
		this.updateEntityLists(false);
		this.renderEntities();
		return value;
	}
	,update: function() {
		if(!this._enabled || !this._visible) return;
		if(this._paused) com_haxepunk_HXP.engine.render();
		this._entRead.set_x(this.get_width() - this._entReadText.get_width());
		this._layerList.set_x(this.get_width() - this._layerList.get_width() - 20);
		this._layerList.set_y((this.get_height() - this._layerList.get_height()) / 2);
		this._layerList.set_visible(com_haxepunk_HXP.engine.paused && this._debug);
		if(this._butRead.get_visible()) this.updateButtons();
		if(this._paused) {
			if(this._debug) {
				this.updateEntityLists(com_haxepunk_HXP.engine._scene._update.length != this.ENTITY_LIST.length);
				if(com_haxepunk_HXP.engine.paused) {
					if(com_haxepunk_utils_Input.mousePressed) {
						if(com_haxepunk_utils_Input.get_mouseFlashY() > 20 && (com_haxepunk_utils_Input.get_mouseFlashX() > this._debReadText1.get_width() || com_haxepunk_utils_Input.get_mouseFlashY() < this._debRead.get_y())) {
							if(com_haxepunk_utils_Input.check(com_haxepunk_utils__$Input_InputType_$Impl_$.fromRight(16))) {
								if(this.SELECT_LIST.length != 0) this.startDragging(); else this.startPanning();
							} else this.startSelection();
						}
					} else {
						if(this._selecting) this.updateSelection();
						if(this._dragging) this.updateDragging();
						if(this._panning) this.updatePanning();
					}
					if(com_haxepunk_utils_Input.pressed(com_haxepunk_utils__$Input_InputType_$Impl_$.fromRight(65))) this.selectAll();
					if(com_haxepunk_utils_Input.check(com_haxepunk_utils__$Input_InputType_$Impl_$.fromRight(16))) {
						if(this.SELECT_LIST.length != 0) {
							if(com_haxepunk_utils_Input.pressed(com_haxepunk_utils__$Input_InputType_$Impl_$.fromLeft("_ARROWS"))) this.updateKeyMoving();
						} else if(com_haxepunk_utils_Input.check(com_haxepunk_utils__$Input_InputType_$Impl_$.fromLeft("_ARROWS"))) this.updateKeyPanning();
					}
				} else {
					this.renderEntities();
					this.updateFPSRead();
					this.updateEntityCount();
				}
				this.updateDebugRead();
			} else if(this._scrolling) this.updateScrolling(); else if(com_haxepunk_utils_Input.mousePressed) this.startScrolling();
		} else {
			this.updateFPSRead();
			this.updateEntityCount();
		}
		if(com_haxepunk_utils_Input.pressed(com_haxepunk_utils__$Input_InputType_$Impl_$.fromRight(this.toggleKey))) this.set_paused(!this._paused);
	}
	,get_paused: function() {
		return this._paused;
	}
	,set_paused: function(value) {
		if(!this._enabled) return false;
		this._paused = value;
		com_haxepunk_HXP.engine.paused = value;
		this._back.set_visible(value);
		this._entScreen.set_visible(value);
		this._butRead.set_visible(value);
		if(value) {
			if(this._debug) this.set_debug(true); else this.updateLog();
			com_haxepunk_utils_Input.showCursor();
		} else {
			this._debRead.set_visible(false);
			this._logRead.set_visible(true);
			this.updateLog();
			this.ENTITY_LIST.length = 0;
			this.SCREEN_LIST.length = 0;
			this.SELECT_LIST.length = 0;
			var cursor = com_haxepunk_HXP.cursor;
			if(com_haxepunk_HXP.cursor == null) null; else {
				openfl_ui_Mouse.show();
				com_haxepunk_HXP.cursor = null;
			}
			if(com_haxepunk_HXP.cursor == cursor) cursor; else {
				if(cursor == null) openfl_ui_Mouse.show(); else openfl_ui_Mouse.hide();
				com_haxepunk_HXP.cursor = cursor;
			}
		}
		return this._paused;
	}
	,get_debug: function() {
		return this._debug;
	}
	,set_debug: function(value) {
		if(!this._enabled) return false;
		this._debug = value;
		this._debRead.set_visible(value);
		this._logRead.set_visible(!value);
		if(value) this.updateEntityLists(); else this.updateLog();
		this.renderEntities();
		return this._debug;
	}
	,stepFrame: function() {
		com_haxepunk_HXP.engine.update();
		this.updateEntityCount();
		this.updateEntityLists();
		this.renderEntities();
	}
	,startDragging: function() {
		this._dragging = true;
		this._entRect.x = com_haxepunk_utils_Input.get_mouseX();
		this._entRect.y = com_haxepunk_utils_Input.get_mouseY();
	}
	,updateDragging: function() {
		this.moveSelected(Std["int"](com_haxepunk_utils_Input.get_mouseX() - this._entRect.x),Std["int"](com_haxepunk_utils_Input.get_mouseY() - this._entRect.y));
		this._entRect.x = com_haxepunk_utils_Input.get_mouseX();
		this._entRect.y = com_haxepunk_utils_Input.get_mouseY();
		if(com_haxepunk_utils_Input.mouseReleased) this._dragging = false;
	}
	,moveSelected: function(xDelta,yDelta) {
		var _g = 0;
		var _g1 = this.SELECT_LIST;
		while(_g < _g1.length) {
			var e = _g1[_g];
			++_g;
			var _g2 = e;
			_g2.set_x(_g2.get_x() + xDelta);
			var _g21 = e;
			_g21.set_y(_g21.get_y() + yDelta);
		}
		com_haxepunk_HXP.engine.render();
		this.renderEntities();
		this.updateEntityLists(true);
	}
	,startPanning: function() {
		this._panning = true;
		this._entRect.x = com_haxepunk_utils_Input.get_mouseX();
		this._entRect.y = com_haxepunk_utils_Input.get_mouseY();
	}
	,updatePanning: function() {
		if(com_haxepunk_utils_Input.mouseReleased) this._panning = false;
		this.panCamera(Std["int"](this._entRect.x - com_haxepunk_utils_Input.get_mouseX()),Std["int"](this._entRect.y - com_haxepunk_utils_Input.get_mouseY()));
		this._entRect.x = com_haxepunk_utils_Input.get_mouseX();
		this._entRect.y = com_haxepunk_utils_Input.get_mouseY();
	}
	,panCamera: function(xDelta,yDelta) {
		com_haxepunk_HXP.camera.x += xDelta;
		com_haxepunk_HXP.camera.y += yDelta;
		com_haxepunk_HXP.engine.render();
		this.updateEntityLists(true);
		this.renderEntities();
	}
	,setCamera: function(x,y) {
		com_haxepunk_HXP.camera.x = x;
		com_haxepunk_HXP.camera.y = y;
		com_haxepunk_HXP.engine.render();
		this.updateEntityLists(true);
		this.renderEntities();
	}
	,startSelection: function() {
		this._selecting = true;
		this._entRect.x = com_haxepunk_utils_Input.get_mouseFlashX();
		this._entRect.y = com_haxepunk_utils_Input.get_mouseFlashY();
		this._entRect.width = 0;
		this._entRect.height = 0;
	}
	,updateSelection: function() {
		this._entRect.width = com_haxepunk_utils_Input.get_mouseFlashX() - this._entRect.x;
		this._entRect.height = com_haxepunk_utils_Input.get_mouseFlashY() - this._entRect.y;
		if(com_haxepunk_utils_Input.mouseReleased) {
			this.selectEntities(this._entRect);
			this.renderEntities();
			this._selecting = false;
			this._entSelect.get_graphics().clear();
		} else {
			this._entSelect.get_graphics().clear();
			this._entSelect.get_graphics().lineStyle(1,16777215);
			this._entSelect.get_graphics().drawRect(this._entRect.x,this._entRect.y,this._entRect.width,this._entRect.height);
		}
	}
	,selectEntities: function(rect) {
		if(rect.width < 0) rect.x -= rect.width = -rect.width; else if(rect.width == 0) rect.width = 1;
		if(rect.height < 0) rect.y -= rect.height = -rect.height; else if(rect.height == 0) rect.height = 1;
		com_haxepunk_HXP.rect.width = com_haxepunk_HXP.rect.height = 6;
		var sx = com_haxepunk_HXP.screen.fullScaleX;
		var sy = com_haxepunk_HXP.screen.fullScaleY;
		var e;
		if(!com_haxepunk_utils_Input.check(com_haxepunk_utils__$Input_InputType_$Impl_$.fromRight(17))) this.SELECT_LIST.length = 0;
		var _g = 0;
		var _g1 = this.SCREEN_LIST;
		while(_g < _g1.length) {
			var e1 = _g1[_g];
			++_g;
			com_haxepunk_HXP.rect.x = (e1.get_x() - com_haxepunk_HXP.camera.x) * sx - 3;
			com_haxepunk_HXP.rect.y = (e1.get_y() - com_haxepunk_HXP.camera.y) * sy - 3;
			if(rect.intersects(com_haxepunk_HXP.rect)) {
				if(HxOverrides.indexOf(this.SELECT_LIST,e1,0) < 0) this.SELECT_LIST.push(e1); else HxOverrides.remove(this.SELECT_LIST,e1);
			}
		}
	}
	,selectAll: function() {
		var numSelected = this.SELECT_LIST.length;
		this.SELECT_LIST.length = 0;
		if(numSelected != this.SCREEN_LIST.length) {
			var _g = 0;
			var _g1 = this.SCREEN_LIST;
			while(_g < _g1.length) {
				var e = _g1[_g];
				++_g;
				this.SELECT_LIST.push(e);
			}
		}
		this.renderEntities();
	}
	,startScrolling: function() {
		if(this.LOG.length > this._logLines) this._scrolling = this._logBarGlobal.contains(com_haxepunk_utils_Input.get_mouseFlashX(),com_haxepunk_utils_Input.get_mouseFlashY());
	}
	,updateScrolling: function() {
		this._scrolling = com_haxepunk_utils_Input.mouseDown;
		this._logScroll = com_haxepunk_HXP.scaleClamp(com_haxepunk_utils_Input.get_mouseFlashY(),this._logBarGlobal.y,this._logBarGlobal.get_bottom(),0,1);
		this.updateLog();
	}
	,updateKeyMoving: function() {
		com_haxepunk_HXP.point.x = (com_haxepunk_utils_Input.pressed(com_haxepunk_utils__$Input_InputType_$Impl_$.fromRight(39))?1:0) - (com_haxepunk_utils_Input.pressed(com_haxepunk_utils__$Input_InputType_$Impl_$.fromRight(37))?1:0);
		com_haxepunk_HXP.point.y = (com_haxepunk_utils_Input.pressed(com_haxepunk_utils__$Input_InputType_$Impl_$.fromRight(40))?1:0) - (com_haxepunk_utils_Input.pressed(com_haxepunk_utils__$Input_InputType_$Impl_$.fromRight(38))?1:0);
		if(com_haxepunk_HXP.point.x != 0 || com_haxepunk_HXP.point.y != 0) this.moveSelected(com_haxepunk_HXP.point.x | 0,com_haxepunk_HXP.point.y | 0);
	}
	,updateKeyPanning: function() {
		com_haxepunk_HXP.point.x = (com_haxepunk_utils_Input.check(com_haxepunk_utils__$Input_InputType_$Impl_$.fromRight(39))?1:0) - (com_haxepunk_utils_Input.check(com_haxepunk_utils__$Input_InputType_$Impl_$.fromRight(37))?1:0);
		com_haxepunk_HXP.point.y = (com_haxepunk_utils_Input.check(com_haxepunk_utils__$Input_InputType_$Impl_$.fromRight(40))?1:0) - (com_haxepunk_utils_Input.check(com_haxepunk_utils__$Input_InputType_$Impl_$.fromRight(38))?1:0);
		if(com_haxepunk_HXP.point.x != 0 || com_haxepunk_HXP.point.y != 0) this.panCamera(com_haxepunk_HXP.point.x | 0,com_haxepunk_HXP.point.y | 0);
	}
	,updateEntityLists: function(fetchList) {
		if(fetchList == null) fetchList = true;
		if(fetchList) {
			this.ENTITY_LIST.length = 0;
			com_haxepunk_HXP.engine._scene.getAll(this.ENTITY_LIST);
			var $it0 = this.LAYER_LIST.keys();
			while( $it0.hasNext() ) {
				var key = $it0.next();
				this.LAYER_LIST.h[key] = 0;
			}
		}
		this.SCREEN_LIST.length = 0;
		var _g = 0;
		var _g1 = this.ENTITY_LIST;
		while(_g < _g1.length) {
			var e = _g1[_g];
			++_g;
			var layer = e._layer;
			if((e._scene == null?false:e.collideRect(e.get_x(),e.get_y(),e._scene.camera.x,e._scene.camera.y,com_haxepunk_HXP.width,com_haxepunk_HXP.height)) && com_haxepunk_HXP.engine._scene.layerVisible(layer)) this.SCREEN_LIST.push(e);
			if(fetchList) this.LAYER_LIST.set(layer,this.LAYER_LIST.h.hasOwnProperty(layer)?this.LAYER_LIST.h[layer] + 1:1);
		}
		if(fetchList) this._layerList.set(this.LAYER_LIST);
	}
	,renderEntities: function() {
		var e;
		this._entScreen.set_visible(this._debug);
		this._entScreen.set_x(com_haxepunk_HXP.screen.x);
		this._entScreen.set_y(com_haxepunk_HXP.screen.y);
		if(this._debug) {
			var g = this._entScreen.get_graphics();
			var sx = com_haxepunk_HXP.screen.fullScaleX;
			var sy = com_haxepunk_HXP.screen.fullScaleY;
			var colorHitbox = 16777215;
			var colorPosition = 16777215;
			g.clear();
			var _g = 0;
			var _g1 = this.SCREEN_LIST;
			while(_g < _g1.length) {
				var e1 = _g1[_g];
				++_g;
				var graphicScrollX;
				if(e1._graphic != null) graphicScrollX = e1._graphic.scrollX; else graphicScrollX = 1;
				var graphicScrollY;
				if(e1._graphic != null) graphicScrollY = e1._graphic.scrollY; else graphicScrollY = 1;
				if(HxOverrides.indexOf(this.SELECT_LIST,e1,0) < 0) {
					colorHitbox = 16711680;
					colorPosition = 65280;
				} else {
					colorHitbox = 16777215;
					colorPosition = 16777215;
				}
				if(e1.get_width() != 0 && e1.get_height() != 0) {
					g.lineStyle(1,colorHitbox);
					g.drawRect((e1.get_x() - e1.originX - com_haxepunk_HXP.camera.x * graphicScrollX) * sx,(e1.get_y() - e1.originY - com_haxepunk_HXP.camera.y * graphicScrollY) * sy,e1.get_width() * sx,e1.get_height() * sy);
					if(this.debugDraw && e1._mask != null) {
						g.lineStyle(1,255);
						e1._mask.debugDraw(g,sx,sy);
					}
				}
				g.lineStyle(1,colorPosition);
				g.drawCircle((e1.get_x() - com_haxepunk_HXP.camera.x * graphicScrollX) * sx,(e1.get_y() - com_haxepunk_HXP.camera.y * graphicScrollY) * sy,3);
			}
		}
	}
	,updateLog: function() {
		this._logHeight = this.get_height() - 60;
		this._logBar.height = this._logHeight - 8;
		if(this._paused) {
			this._logRead.set_y(40);
			this._logRead.get_graphics().clear();
			this._logRead.get_graphics().beginFill(0,.75);
			this._logRead.get_graphics().drawRect(0,0,this._logReadText0.get_width() - 20,20);
			this._logRead.get_graphics().moveTo(this._logReadText0.get_width(),20);
			this._logRead.get_graphics().lineTo(this._logReadText0.get_width() - 20,20);
			this._logRead.get_graphics().lineTo(this._logReadText0.get_width() - 20,0);
			this._logRead.get_graphics().curveTo(this._logReadText0.get_width(),0,this._logReadText0.get_width(),20);
			this._logRead.get_graphics().drawRect(0,20,this.get_width(),this._logHeight);
			this._logRead.get_graphics().beginFill(2105376,1);
			this._logRead.get_graphics().drawRoundRect(this._logBar.x,this._logBar.y,this._logBar.width,this._logBar.height,16,16);
			if(this.LOG.length > this._logLines) {
				this._logRead.get_graphics().beginFill(16777215,1);
				var y = this._logBar.y + 2 + (this._logBar.height - 16) * this._logScroll | 0;
				this._logRead.get_graphics().drawRoundRect(this._logBar.x + 2,y,12,12,12,12);
			}
			if(this.LOG.length != 0) {
				var i;
				if(this.LOG.length > this._logLines) i = Std["int"](Math.round((this.LOG.length - this._logLines) * this._logScroll)); else i = 0;
				var n = Std["int"](i + Math.min(this._logLines,this.LOG.length));
				var s = "";
				while(i < n) s += this.LOG[i++] + "\n";
				this._logReadText1.set_text(s);
			} else this._logReadText1.set_text("");
			this._logReadText1.set_height(this._logHeight);
			this._logReadText1.set_x(32);
			this._logReadText1.set_y(24);
			this._fpsReadText.set_selectable(true);
			this._fpsInfoText0.set_selectable(true);
			this._fpsInfoText1.set_selectable(true);
			this._memReadText.set_selectable(true);
			this._entReadText.set_selectable(true);
			this._debReadText1.set_selectable(true);
		} else {
			this._logRead.set_y(this.get_height() - 40);
			this._logReadText1.set_height(20);
			this._logRead.get_graphics().clear();
			this._logRead.get_graphics().beginFill(0,.75);
			this._logRead.get_graphics().drawRect(0,0,this._logReadText0.get_width() - 20,20);
			this._logRead.get_graphics().moveTo(this._logReadText0.get_width(),20);
			this._logRead.get_graphics().lineTo(this._logReadText0.get_width() - 20,20);
			this._logRead.get_graphics().lineTo(this._logReadText0.get_width() - 20,0);
			this._logRead.get_graphics().curveTo(this._logReadText0.get_width(),0,this._logReadText0.get_width(),20);
			this._logRead.get_graphics().drawRect(0,20,this.get_width(),20);
			this._logReadText1.set_text(this.LOG.length != 0?this.LOG[this.LOG.length - 1]:"");
			this._logReadText1.set_x(2);
			this._logReadText1.set_y(21);
			this._logReadText1.set_selectable(false);
			this._fpsReadText.set_selectable(false);
			this._fpsInfoText0.set_selectable(false);
			this._fpsInfoText1.set_selectable(false);
			this._memReadText.set_selectable(false);
			this._entReadText.set_selectable(false);
			this._debReadText0.set_selectable(false);
			this._debReadText1.set_selectable(false);
		}
	}
	,updateFPSRead: function() {
		this._fpsReadText.set_text("FPS: " + (com_haxepunk_HXP.frameRate | 0));
		this._fpsInfoText0.set_text("Update: " + Std.string(com_haxepunk_HXP._updateTime) + "ms\n" + "Render: " + Std.string(com_haxepunk_HXP._renderTime) + "ms");
		this._fpsInfoText1.set_text("System: " + Std.string(com_haxepunk_HXP._systemTime) + "ms\n" + "Game: " + Std.string(com_haxepunk_HXP._gameTime) + "ms");
	}
	,updateDebugRead: function() {
		var str;
		var big = this.get_width() >= 420;
		var s = "Mouse: " + Std.string(Std["int"](com_haxepunk_HXP.screen.get_mouseX() + com_haxepunk_HXP.engine._scene.camera.x)) + ", " + Std.string(Std["int"](com_haxepunk_HXP.screen.get_mouseY() + com_haxepunk_HXP.engine._scene.camera.y)) + "\nCamera: " + Std.string(com_haxepunk_HXP.camera.x) + ", " + Std.string(com_haxepunk_HXP.camera.y);
		if(this.SELECT_LIST.length != 0) {
			if(this.SELECT_LIST.length > 1) s += "\n\nSelected: " + Std.string(this.SELECT_LIST.length); else {
				var e = this.SELECT_LIST[0];
				s += "\n\n- " + Type.getClassName(e == null?null:js_Boot.getClass(e)) + " -\n";
				var _g = 0;
				var _g1 = this.WATCH_LIST;
				while(_g < _g1.length) {
					var str1 = _g1[_g];
					++_g;
					var field = Reflect.field(e,str1);
					if(field != null) s += "\n" + str1 + ": " + Std.string(field);
				}
			}
		}
		this._debReadText1.set_text(s);
		this._debReadText1.setTextFormat(this.format(big?16:8));
		this._debReadText1.set_width(Math.max(this._debReadText1.get_textWidth() + 4,this._debReadText0.get_width()));
		this._debReadText1.set_height(this._debReadText1.get_y() + this._debReadText1.get_textHeight() + 4);
		this._debRead.set_y(Std["int"](this.get_height() - this._debReadText1.get_height()));
		this._debRead.get_graphics().clear();
		this._debRead.get_graphics().beginFill(0,.75);
		this._debRead.get_graphics().drawRect(0,0,this._debReadText0.get_width() - 20,20);
		this._debRead.get_graphics().moveTo(this._debReadText0.get_width(),20);
		this._debRead.get_graphics().lineTo(this._debReadText0.get_width() - 20,20);
		this._debRead.get_graphics().lineTo(this._debReadText0.get_width() - 20,0);
		this._debRead.get_graphics().curveTo(this._debReadText0.get_width(),0,this._debReadText0.get_width(),20);
		this._debRead.get_graphics().drawRoundRect(-20,20,this._debReadText1.get_width() + 40,this.get_height() - this._debRead.get_y(),40,40);
	}
	,updateEntityCount: function() {
		this._entReadText.set_text(Std.string(com_haxepunk_HXP.engine._scene._update.length) + " Entities");
	}
	,updateButtons: function() {
		this._butRead.set_x(this.get_width() >= 420?this._fpsInfo.get_x() + this._fpsInfoText0.get_width() + this._fpsInfoText1.get_width() + Std["int"]((this._entRead.get_x() - (this._fpsInfo.get_x() + this._fpsInfoText0.get_width() + this._fpsInfoText1.get_width())) / 2) - 30:180);
		this._butDebug.set_visible(this._paused && !this._debug);
		this._butOutput.set_visible(this._paused && this._debug);
		this._butPlay.set_visible(com_haxepunk_HXP.engine.paused);
		this._butPause.set_visible(!com_haxepunk_HXP.engine.paused);
		this._butStep.set_visible(this._paused);
		if(this._butDebug.bitmapData.rect.contains(this._butDebug.get_mouseX(),this._butDebug.get_mouseY())) {
			this._butDebug.set_alpha(this._butOutput.set_alpha(1));
			if(com_haxepunk_utils_Input.mousePressed) this.set_debug(!this._debug);
		} else this._butDebug.set_alpha(this._butOutput.set_alpha(0.5));
		if(this._butPlay.bitmapData.rect.contains(this._butPlay.get_mouseX(),this._butPlay.get_mouseY())) {
			this._butPlay.set_alpha(this._butPause.set_alpha(1));
			if(com_haxepunk_utils_Input.mousePressed) {
				com_haxepunk_HXP.engine.paused = !com_haxepunk_HXP.engine.paused;
				this.renderEntities();
			}
		} else this._butPlay.set_alpha(this._butPause.set_alpha(0.5));
		if(this._butStep.bitmapData.rect.contains(this._butStep.get_mouseX(),this._butStep.get_mouseY())) {
			this._butStep.set_alpha(1);
			if(com_haxepunk_utils_Input.mousePressed) this.stepFrame();
		} else this._butStep.set_alpha(.5);
	}
	,format: function(size,color,align) {
		if(align == null) align = "left";
		if(color == null) color = 16777215;
		if(size == null) size = 16;
		this._format.size = size;
		this._format.color = color;
		switch(align) {
		case "left":
			this._format.align = 3;
			break;
		case "right":
			this._format.align = 4;
			break;
		case "center":
			this._format.align = 0;
			break;
		case "justify":
			this._format.align = 2;
			break;
		}
		return this._format;
	}
	,get_width: function() {
		return com_haxepunk_HXP.windowWidth;
	}
	,get_height: function() {
		return com_haxepunk_HXP.windowHeight;
	}
	,_enabled: null
	,_visible: null
	,_paused: null
	,_debug: null
	,_scrolling: null
	,_selecting: null
	,_dragging: null
	,_panning: null
	,_sprite: null
	,_format: null
	,_back: null
	,_fpsRead: null
	,_fpsReadText: null
	,_fpsInfo: null
	,_fpsInfoText0: null
	,_fpsInfoText1: null
	,_memReadText: null
	,_layerList: null
	,_logRead: null
	,_logReadText0: null
	,_logReadText1: null
	,_logHeight: null
	,_logBar: null
	,_logBarGlobal: null
	,_logScroll: null
	,_entRead: null
	,_entReadText: null
	,_debRead: null
	,_debReadText0: null
	,_debReadText1: null
	,_butRead: null
	,_butDebug: null
	,_butOutput: null
	,_butPlay: null
	,_butPause: null
	,_butStep: null
	,_bmpLogo: null
	,_entScreen: null
	,_entSelect: null
	,_entRect: null
	,_logLines: null
	,LOG: null
	,LAYER_LIST: null
	,ENTITY_LIST: null
	,SCREEN_LIST: null
	,SELECT_LIST: null
	,WATCH_LIST: null
	,__class__: com_haxepunk_debug_Console
	,__properties__: {get_height:"get_height",get_width:"get_width",set_debug:"set_debug",get_debug:"get_debug",set_paused:"set_paused",get_paused:"get_paused",set_debugDraw:"set_debugDraw",set_visible:"set_visible",get_visible:"get_visible"}
};
var com_haxepunk_debug_VisibleLabel = function(textFormat) {
	this.display = true;
	openfl_display_Sprite.call(this);
	this.active = new openfl_display_Bitmap(openfl_Assets.getBitmapData("graphics/debug/console_visible.png"));
	this.inactive = new openfl_display_Bitmap(openfl_Assets.getBitmapData("graphics/debug/console_hidden.png"));
	this.label = new openfl_text_TextField();
	this.label.set_defaultTextFormat(textFormat);
	this.label.set_selectable(false);
	this.label.set_width(150);
	this.label.set_height(14);
	this.label.set_x(24);
	this.label.set_y(2);
	this.set_x(6);
	this.addChild(this.active);
	this.addChild(this.label);
	this.addEventListener("click",$bind(this,this.onClick),true);
};
$hxClasses["com.haxepunk.debug.VisibleLabel"] = com_haxepunk_debug_VisibleLabel;
com_haxepunk_debug_VisibleLabel.__name__ = ["com","haxepunk","debug","VisibleLabel"];
com_haxepunk_debug_VisibleLabel.__super__ = openfl_display_Sprite;
com_haxepunk_debug_VisibleLabel.prototype = $extend(openfl_display_Sprite.prototype,{
	display: null
	,set_display: function(value) {
		if(value != this.display) {
			this.display = value;
			if(value) {
				this.removeChild(this.inactive);
				this.addChild(this.active);
			} else {
				this.removeChild(this.active);
				this.addChild(this.inactive);
			}
		}
		return value;
	}
	,onClick: function(e) {
		this.set_display(!this.display);
	}
	,active: null
	,inactive: null
	,label: null
	,__class__: com_haxepunk_debug_VisibleLabel
	,__properties__: $extend(openfl_display_Sprite.prototype.__properties__,{set_display:"set_display"})
});
var com_haxepunk_debug_MaskLabel = function(textFormat) {
	com_haxepunk_debug_VisibleLabel.call(this,textFormat);
	this.label.set_text("Masks");
};
$hxClasses["com.haxepunk.debug.MaskLabel"] = com_haxepunk_debug_MaskLabel;
com_haxepunk_debug_MaskLabel.__name__ = ["com","haxepunk","debug","MaskLabel"];
com_haxepunk_debug_MaskLabel.__super__ = com_haxepunk_debug_VisibleLabel;
com_haxepunk_debug_MaskLabel.prototype = $extend(com_haxepunk_debug_VisibleLabel.prototype,{
	onClick: function(e) {
		com_haxepunk_debug_VisibleLabel.prototype.onClick.call(this,e);
		((function($this) {
			var $r;
			if(com_haxepunk_HXP._console == null) com_haxepunk_HXP._console = new com_haxepunk_debug_Console();
			$r = com_haxepunk_HXP._console;
			return $r;
		}(this))).set_debugDraw(this.display);
		((function($this) {
			var $r;
			if(com_haxepunk_HXP._console == null) com_haxepunk_HXP._console = new com_haxepunk_debug_Console();
			$r = com_haxepunk_HXP._console;
			return $r;
		}(this))).update();
	}
	,__class__: com_haxepunk_debug_MaskLabel
});
var com_haxepunk_debug_LayerLabel = function(layer,textFormat) {
	com_haxepunk_debug_VisibleLabel.call(this,textFormat);
	this.layer = layer;
	this.set_count(0);
};
$hxClasses["com.haxepunk.debug.LayerLabel"] = com_haxepunk_debug_LayerLabel;
com_haxepunk_debug_LayerLabel.__name__ = ["com","haxepunk","debug","LayerLabel"];
com_haxepunk_debug_LayerLabel.__super__ = com_haxepunk_debug_VisibleLabel;
com_haxepunk_debug_LayerLabel.prototype = $extend(com_haxepunk_debug_VisibleLabel.prototype,{
	layer: null
	,set_count: function(value) {
		this.label.set_text("Layer " + this.layer + " [" + value + "]");
		return value;
	}
	,onClick: function(e) {
		com_haxepunk_debug_VisibleLabel.prototype.onClick.call(this,e);
		com_haxepunk_HXP.engine._scene._layerDisplay.h[this.layer] = this.display;
		com_haxepunk_HXP.engine.render();
		((function($this) {
			var $r;
			if(com_haxepunk_HXP._console == null) com_haxepunk_HXP._console = new com_haxepunk_debug_Console();
			$r = com_haxepunk_HXP._console;
			return $r;
		}(this))).set_debugDraw(((function($this) {
			var $r;
			if(com_haxepunk_HXP._console == null) com_haxepunk_HXP._console = new com_haxepunk_debug_Console();
			$r = com_haxepunk_HXP._console;
			return $r;
		}(this))).debugDraw);
	}
	,__class__: com_haxepunk_debug_LayerLabel
	,__properties__: $extend(com_haxepunk_debug_VisibleLabel.prototype.__properties__,{set_count:"set_count"})
});
var com_haxepunk_debug_LayerList = function(width,height) {
	if(height == null) height = 400;
	if(width == null) width = 250;
	openfl_display_Sprite.call(this);
	var mask = new openfl_display_Sprite();
	mask.get_graphics().beginFill(0);
	mask.get_graphics().drawRect(0,0,width,height);
	mask.get_graphics().endFill();
	this.addChild(mask);
	this.set_mask(mask);
	this.get_graphics().beginFill(0,.15);
	this.get_graphics().drawRect(0,0,width,height);
	this.get_graphics().endFill();
	var font = openfl_Assets.getFont("font/04B_03__.ttf");
	if(font == null) font = openfl_Assets.getFont(com_haxepunk_HXP.defaultFont);
	this._textFormat = new openfl_text_TextFormat(font.name,16,16777215);
	this._labels = new haxe_ds_IntMap();
};
$hxClasses["com.haxepunk.debug.LayerList"] = com_haxepunk_debug_LayerList;
com_haxepunk_debug_LayerList.__name__ = ["com","haxepunk","debug","LayerList"];
com_haxepunk_debug_LayerList.__super__ = openfl_display_Sprite;
com_haxepunk_debug_LayerList.prototype = $extend(openfl_display_Sprite.prototype,{
	layerSort: function(a,b) {
		return a - b;
	}
	,set: function(list) {
		var $it0 = this._labels.keys();
		while( $it0.hasNext() ) {
			var key = $it0.next();
			this.removeChild(this._labels.h[key]);
			this._labels.remove(key);
		}
		var keys = [];
		var $it1 = list.keys();
		while( $it1.hasNext() ) {
			var key1 = $it1.next();
			if(list.h[key1] > 0) keys.push(key1);
		}
		keys.sort($bind(this,this.layerSort));
		var i = 0;
		var scene = com_haxepunk_HXP.engine._scene;
		var _g = 0;
		while(_g < keys.length) {
			var layer = keys[_g];
			++_g;
			var label;
			if(this._labels.h.hasOwnProperty(layer)) label = this._labels.h[layer]; else {
				label = new com_haxepunk_debug_LayerLabel(layer,this._textFormat);
				this._labels.h[layer] = label;
			}
			label.set_count(list.h[layer]);
			label.set_display(!scene._layerDisplay.h.hasOwnProperty(layer) || scene._layerDisplay.h[layer]);
			label.set_y(i++ * 20 + 5);
			this.addChild(label);
		}
		if(this._maskLabel == null) {
			this._maskLabel = new com_haxepunk_debug_MaskLabel(this._textFormat);
			this.addChild(this._maskLabel);
		}
		this._maskLabel.set_y(i++ * 20 + 5);
	}
	,_labels: null
	,_maskLabel: null
	,_textFormat: null
	,__class__: com_haxepunk_debug_LayerList
});
var com_haxepunk_ds_Either = $hxClasses["com.haxepunk.ds.Either"] = { __ename__ : ["com","haxepunk","ds","Either"], __constructs__ : ["Left","Right"] };
com_haxepunk_ds_Either.Left = function(v) { var $x = ["Left",0,v]; $x.__enum__ = com_haxepunk_ds_Either; $x.toString = $estr; return $x; };
com_haxepunk_ds_Either.Right = function(v) { var $x = ["Right",1,v]; $x.__enum__ = com_haxepunk_ds_Either; $x.toString = $estr; return $x; };
var com_haxepunk_graphics_Animation = function(name,frames,frameRate,loop,parent) {
	if(loop == null) loop = true;
	if(frameRate == null) frameRate = 0;
	this.name = name;
	this.frames = frames;
	if(frameRate == 0) this.frameRate = com_haxepunk_HXP.assignedFrameRate; else this.frameRate = frameRate;
	this.loop = loop;
	this.frameCount = frames.length;
	this.set_parent(parent);
};
$hxClasses["com.haxepunk.graphics.Animation"] = com_haxepunk_graphics_Animation;
com_haxepunk_graphics_Animation.__name__ = ["com","haxepunk","graphics","Animation"];
com_haxepunk_graphics_Animation.prototype = {
	play: function(reset,reverse) {
		if(reverse == null) reverse = false;
		if(reset == null) reset = false;
		if(this.name == null) this._parent.playAnimation(this,reset,reverse); else this._parent.play(this.name,reset,reverse);
	}
	,parent: null
	,set_parent: function(value) {
		return this._parent = value;
	}
	,name: null
	,frames: null
	,frameRate: null
	,frameCount: null
	,loop: null
	,_parent: null
	,__class__: com_haxepunk_graphics_Animation
	,__properties__: {set_parent:"set_parent"}
};
var com_haxepunk_graphics_Canvas = function(width,height) {
	this._maxHeight = 4000;
	this._maxWidth = 4000;
	this._redrawBuffers = false;
	com_haxepunk_Graphic.call(this);
	this._color = 16777215;
	this._red = this._green = this._blue = 1;
	this._alpha = 1;
	this._graphics = com_haxepunk_HXP.sprite.get_graphics();
	this._matrix = new openfl_geom_Matrix();
	this._rect = new openfl_geom_Rectangle();
	this._colorTransform = new openfl_geom_ColorTransform();
	this._buffers = [];
	this._midBuffers = [];
	this.angle = 0;
	this.scale = this.scaleX = this.scaleY = 1;
	this._width = width;
	this._height = height;
	if(com_haxepunk_HXP.renderMode == com_haxepunk_RenderMode.BUFFER) {
		this._refWidth = Math.ceil(width / this._maxWidth);
		this._refHeight = Math.ceil(height / this._maxHeight);
		this._ref = com_haxepunk_HXP.createBitmap(this._refWidth,this._refHeight);
		var x = 0;
		var y = 0;
		var w;
		var h;
		var i = 0;
		var ww = this._width % this._maxWidth;
		var hh = this._height % this._maxHeight;
		if(ww == 0) ww = this._maxWidth;
		if(hh == 0) hh = this._maxHeight;
		while(y < this._refHeight) {
			if(y < this._refHeight - 1) h = this._maxHeight; else h = hh;
			while(x < this._refWidth) {
				if(x < this._refWidth - 1) w = this._maxWidth; else w = ww;
				this._ref.setPixel(x,y,i);
				this._buffers[i] = com_haxepunk_HXP.createBitmap(w,h,true);
				i++;
				x++;
			}
			x = 0;
			y++;
		}
	}
};
$hxClasses["com.haxepunk.graphics.Canvas"] = com_haxepunk_graphics_Canvas;
com_haxepunk_graphics_Canvas.__name__ = ["com","haxepunk","graphics","Canvas"];
com_haxepunk_graphics_Canvas.__super__ = com_haxepunk_Graphic;
com_haxepunk_graphics_Canvas.prototype = $extend(com_haxepunk_Graphic.prototype,{
	blend: null
	,angle: null
	,scale: null
	,scaleX: null
	,scaleY: null
	,render: function(target,point,camera) {
		var sx = this.scale * this.scaleX;
		var sy = this.scale * this.scaleY;
		this._point.x = point.x + this.x - camera.x * this.scrollX;
		this._point.y = point.y + this.y - camera.y * this.scrollY;
		this._rect.x = this._rect.y = 0;
		this._rect.width = this._maxWidth * sx;
		this._rect.height = this._maxHeight * sy;
		var xx = 0;
		var yy = 0;
		var buffer;
		var px = this._point.x;
		target.lock();
		while(yy < this._refHeight) {
			while(xx < this._refWidth) {
				buffer = this._buffers[this._ref.getPixel(xx,yy)];
				if(this.angle == 0 && this.blend == null) {
					if(sx == 1 && sy == 1 && this._tint == null) {
						this._rect.width = buffer.width;
						this._rect.height = buffer.height;
						target.copyPixels(buffer,this._rect,this._point,null,null,true);
					} else {
						var i = Std["int"](this._ref.getPixel(xx,yy));
						var w = buffer.width * sx | 0;
						var h = buffer.height * sy | 0;
						var wrongSize = i >= this._midBuffers.length || this._midBuffers[i].width != w || this._midBuffers[i].height != h;
						if(this._redrawBuffers || wrongSize) {
							if(wrongSize) {
								if(i < this._midBuffers.length) this._midBuffers[i].dispose();
								this._midBuffers[i] = com_haxepunk_HXP.createBitmap(w,h,true);
							} else this._midBuffers[i].fillRect(this._midBuffers[i].rect,0);
							this._matrix.b = this._matrix.c = 0;
							this._matrix.a = sx;
							this._matrix.d = sy;
							this._matrix.tx = this._matrix.ty = 0;
							if(this.angle != 0) this._matrix.rotate(this.angle * (Math.PI / -180));
							this._midBuffers[i].draw(buffer,this._matrix,this._tint,this.blend);
						}
						target.copyPixels(this._midBuffers[i],this._rect,this._point,null,null,true);
					}
				} else {
					this._matrix.b = this._matrix.c = 0;
					this._matrix.a = sx;
					this._matrix.d = sy;
					this._matrix.tx = this._matrix.ty = 0;
					if(this.angle != 0) this._matrix.rotate(this.angle * (Math.PI / -180));
					this._matrix.tx += this._point.x;
					this._matrix.ty += this._point.y;
					target.draw(buffer,this._matrix,this._tint,this.blend);
				}
				this._point.x += this._maxWidth * sx;
				xx++;
			}
			this._point.x = px;
			this._point.y += this._maxHeight * sy;
			xx = 0;
			yy++;
		}
		target.unlock();
		this._redrawBuffers = false;
	}
	,draw: function(x,y,source,rect) {
		var xx = 0;
		var yy = 0;
		var i = 0;
		var _g = 0;
		var _g1 = this._buffers;
		while(_g < _g1.length) {
			var buffer = _g1[_g];
			++_g;
			this._point.x = x - xx;
			this._point.y = y - yy;
			buffer.copyPixels(source,rect != null?rect:source.rect,this._point,null,null,true);
			xx += this._maxWidth;
			if(xx >= this._width) {
				xx = 0;
				yy += this._maxHeight;
			}
		}
		this._redrawBuffers = true;
	}
	,fill: function(rect,color,alpha) {
		if(alpha == null) alpha = 1;
		if(color == null) color = 0;
		var xx = 0;
		var yy = 0;
		var buffer;
		this._rect.width = rect.width;
		this._rect.height = rect.height;
		if(alpha >= 1) color |= -16777216; else if(alpha <= 0) color = 0; else color = (alpha * 255 | 0) << 24 | 16777215 & color;
		var _g = 0;
		var _g1 = this._buffers;
		while(_g < _g1.length) {
			var buffer1 = _g1[_g];
			++_g;
			this._rect.x = rect.x - xx;
			this._rect.y = rect.y - yy;
			buffer1.fillRect(this._rect,color);
			xx += this._maxWidth;
			if(xx >= this._width) {
				xx = 0;
				yy += this._maxHeight;
			}
		}
	}
	,drawRect: function(rect,color,alpha) {
		if(alpha == null) alpha = 1;
		if(color == null) color = 0;
		var xx = 0;
		var yy = 0;
		var buffer;
		if(alpha >= 1) {
			this._rect.width = rect.width;
			this._rect.height = rect.height;
			var _g = 0;
			var _g1 = this._buffers;
			while(_g < _g1.length) {
				var buffer1 = _g1[_g];
				++_g;
				this._rect.x = rect.x - xx;
				this._rect.y = rect.y - yy;
				buffer1.fillRect(this._rect,-16777216 | color);
				xx += this._maxWidth;
				if(xx >= this._width) {
					xx = 0;
					yy += this._maxHeight;
				}
			}
			return;
		}
		var _g2 = 0;
		var _g11 = this._buffers;
		while(_g2 < _g11.length) {
			var buffer2 = _g11[_g2];
			++_g2;
			this._graphics.clear();
			this._graphics.beginFill(color,alpha);
			this._graphics.drawRect(rect.x - xx,rect.y - yy,rect.width,rect.height);
			buffer2.draw(com_haxepunk_HXP.sprite);
			xx += this._maxWidth;
			if(xx >= this._width) {
				xx = 0;
				yy += this._maxHeight;
			}
		}
		this._graphics.endFill();
	}
	,fillTexture: function(rect,texture) {
		var xx = 0;
		var yy = 0;
		var _g = 0;
		var _g1 = this._buffers;
		while(_g < _g1.length) {
			var buffer = _g1[_g];
			++_g;
			this._graphics.clear();
			this._graphics.beginBitmapFill(texture);
			this._graphics.drawRect(rect.x - xx,rect.y - yy,rect.width,rect.height);
			buffer.draw(com_haxepunk_HXP.sprite);
			xx += this._maxWidth;
			if(xx >= this._width) {
				xx = 0;
				yy += this._maxHeight;
			}
		}
		this._graphics.endFill();
	}
	,drawGraphic: function(x,y,source) {
		var xx = 0;
		var yy = 0;
		var _g = 0;
		var _g1 = this._buffers;
		while(_g < _g1.length) {
			var buffer = _g1[_g];
			++_g;
			this._point.x = x - xx;
			this._point.y = y - yy;
			source.render(buffer,this._point,com_haxepunk_HXP.zero);
			xx += this._maxWidth;
			if(xx >= this._width) {
				xx = 0;
				yy += this._maxHeight;
			}
		}
	}
	,get_color: function() {
		return this._color;
	}
	,set_color: function(value) {
		value %= 16777215;
		if(this._color == value) return this._color;
		this._color = value;
		this._red = com_haxepunk_HXP.getRed(this.get_color()) / 255;
		this._green = com_haxepunk_HXP.getGreen(this.get_color()) / 255;
		this._blue = com_haxepunk_HXP.getBlue(this.get_color()) / 255;
		if(this._alpha == 1 && this._color == 16777215) {
			this._tint = null;
			return this._color;
		}
		this._tint = this._colorTransform;
		this._tint.redMultiplier = this._red;
		this._tint.greenMultiplier = this._green;
		this._tint.blueMultiplier = this._blue;
		this._tint.alphaMultiplier = this._alpha;
		this._redrawBuffers = true;
		return this._color;
	}
	,get_alpha: function() {
		return this._alpha;
	}
	,set_alpha: function(value) {
		if(value < 0) value = 0;
		if(value > 1) value = 1;
		if(this._alpha == value) return this._alpha;
		this._alpha = value;
		if(this._alpha == 1 && this._color == 16777215) {
			this._tint = null;
			return this._alpha;
		}
		this._tint = this._colorTransform;
		this._tint.redMultiplier = this._red;
		this._tint.greenMultiplier = this._green;
		this._tint.blueMultiplier = this._blue;
		this._tint.alphaMultiplier = this._alpha;
		this._redrawBuffers = true;
		return this._alpha;
	}
	,shift: function(x,y) {
		if(y == null) y = 0;
		if(x == null) x = 0;
		this.drawGraphic(x,y,this);
	}
	,width: null
	,get_width: function() {
		return this._width;
	}
	,height: null
	,get_height: function() {
		return this._height;
	}
	,_buffers: null
	,_midBuffers: null
	,_redrawBuffers: null
	,_width: null
	,_height: null
	,_maxWidth: null
	,_maxHeight: null
	,_color: null
	,_alpha: null
	,_tint: null
	,_colorTransform: null
	,_matrix: null
	,_red: null
	,_green: null
	,_blue: null
	,_ref: null
	,_refWidth: null
	,_refHeight: null
	,_rect: null
	,_graphics: null
	,__class__: com_haxepunk_graphics_Canvas
	,__properties__: $extend(com_haxepunk_Graphic.prototype.__properties__,{get_height:"get_height",get_width:"get_width",set_alpha:"set_alpha",get_alpha:"get_alpha",set_color:"set_color",get_color:"get_color"})
});
var com_haxepunk_graphics_Graphiclist = function(graphic) {
	this._graphics = [];
	this._temp = [];
	this._camera = new openfl_geom_Point();
	this._count = 0;
	com_haxepunk_Graphic.call(this);
	if(graphic != null) {
		var _g = 0;
		while(_g < graphic.length) {
			var g = graphic[_g];
			++_g;
			this.add(g);
		}
	}
};
$hxClasses["com.haxepunk.graphics.Graphiclist"] = com_haxepunk_graphics_Graphiclist;
com_haxepunk_graphics_Graphiclist.__name__ = ["com","haxepunk","graphics","Graphiclist"];
com_haxepunk_graphics_Graphiclist.__super__ = com_haxepunk_Graphic;
com_haxepunk_graphics_Graphiclist.prototype = $extend(com_haxepunk_Graphic.prototype,{
	update: function() {
		var _g = 0;
		var _g1 = this._graphics;
		while(_g < _g1.length) {
			var g = _g1[_g];
			++_g;
			if(g.active) g.update();
		}
	}
	,get: function(i) {
		if(i >= this._graphics.length || i < 0) throw new js__$Boot_HaxeError("Index out of bounds."); else return this._graphics[i];
	}
	,renderList: function(renderFunc,point,camera) {
		point.x += this.x;
		point.y += this.y;
		camera.x *= this.scrollX;
		camera.y *= this.scrollY;
		var _g = 0;
		var _g1 = this._graphics;
		while(_g < _g1.length) {
			var g = _g1[_g];
			++_g;
			if(g._visible) {
				if(g.relative) {
					this._point.x = point.x;
					this._point.y = point.y;
				} else this._point.x = this._point.y = 0;
				this._camera.x = camera.x;
				this._camera.y = camera.y;
				renderFunc(g);
			}
		}
	}
	,render: function(target,point,camera) {
		var _g = this;
		this.renderList(function(g) {
			g.render(target,_g._point,_g._camera);
		},point,camera);
	}
	,renderAtlas: function(layer,point,camera) {
		var _g = this;
		this.renderList(function(g) {
			g.renderAtlas(layer,_g._point,_g._camera);
		},point,camera);
	}
	,destroy: function() {
		var _g = 0;
		var _g1 = this._graphics;
		while(_g < _g1.length) {
			var g = _g1[_g];
			++_g;
			g.destroy();
		}
	}
	,add: function(graphic) {
		if(graphic == null) return graphic;
		if(this._count == 0) this.blit = graphic.blit; else if(this.blit != graphic.blit) throw new js__$Boot_HaxeError("Can't add graphic objects with different render methods.");
		this._graphics[this._count++] = graphic;
		if(!this.active) this.active = graphic.active;
		return graphic;
	}
	,remove: function(graphic) {
		if(HxOverrides.indexOf(this._graphics,graphic,0) < 0) return graphic;
		this._temp.length = 0;
		var _g = 0;
		var _g1 = this._graphics;
		while(_g < _g1.length) {
			var g = _g1[_g];
			++_g;
			if(g == graphic) this._count--; else this._temp[this._temp.length] = g;
		}
		var temp = this._graphics;
		this._graphics = this._temp;
		this._temp = temp;
		this.updateCheck();
		return graphic;
	}
	,removeAt: function(index) {
		if(index == null) index = 0;
		if(this._graphics.length == 0) return;
		index %= this._graphics.length;
		this.remove(this._graphics[index % this._graphics.length]);
		this.updateCheck();
	}
	,removeAll: function() {
		this._graphics.length = 0;
		this._temp.length = 0;
		this._count = 0;
		this.active = false;
	}
	,children: null
	,get_children: function() {
		return this._graphics;
	}
	,count: null
	,get_count: function() {
		return this._count;
	}
	,updateCheck: function() {
		this.active = false;
		var _g = 0;
		var _g1 = this._graphics;
		while(_g < _g1.length) {
			var g = _g1[_g];
			++_g;
			if(g.active) {
				this.active = true;
				return;
			}
		}
	}
	,_graphics: null
	,_temp: null
	,_count: null
	,_camera: null
	,__class__: com_haxepunk_graphics_Graphiclist
	,__properties__: $extend(com_haxepunk_Graphic.prototype.__properties__,{get_count:"get_count",get_children:"get_children"})
});
var com_haxepunk_graphics_Image = function(source,clipRect) {
	this._tintMode = 0.0;
	this._tintFactor = 1.0;
	com_haxepunk_Graphic.call(this);
	this.angle = 0;
	this.set_scale(this.scaleX = this.scaleY = 1);
	this.originX = this.originY = 0;
	this._alpha = 1;
	this._flipped = false;
	this._color = 16777215;
	this._red = this._green = this._blue = 1;
	this._matrix = com_haxepunk_HXP.matrix;
	if(source != null) {
		var _g = source;
		switch(_g[1]) {
		case 0:
			var bitmap = _g[2];
			this.blit = true;
			this._source = bitmap;
			this._sourceRect = bitmap.rect;
			break;
		case 1:
			var region = _g[2];
			this.blit = false;
			this._region = region;
			this._sourceRect = new openfl_geom_Rectangle(0,0,this._region._rect.width,this._region._rect.height);
			break;
		}
	}
	if(clipRect != null) {
		if(clipRect.width == 0) clipRect.width = this._sourceRect.width;
		if(clipRect.height == 0) clipRect.height = this._sourceRect.height;
		if(!this.blit) this._region = this._region.clip(clipRect);
		this._sourceRect = clipRect;
	}
	if(this.blit) {
		this._bitmap = new openfl_display_Bitmap();
		this._colorTransform = new openfl_geom_ColorTransform();
		this.createBuffer();
		this.updateBuffer();
	}
	this.smooth = com_haxepunk_HXP.stage.quality != 2;
};
$hxClasses["com.haxepunk.graphics.Image"] = com_haxepunk_graphics_Image;
com_haxepunk_graphics_Image.__name__ = ["com","haxepunk","graphics","Image"];
com_haxepunk_graphics_Image.createRect = function(width,height,color,alpha) {
	if(alpha == null) alpha = 1;
	if(color == null) color = 16777215;
	if(width == 0 || height == 0) throw new js__$Boot_HaxeError("Illegal rect, sizes cannot be 0.");
	var source = com_haxepunk_HXP.createBitmap(width,height,true,-1);
	var image;
	if(com_haxepunk_HXP.renderMode == com_haxepunk_RenderMode.HARDWARE) image = new com_haxepunk_graphics_Image((function($this) {
		var $r;
		var region = com_haxepunk_graphics_atlas_Atlas.loadImageAsRegion((function($this) {
			var $r;
			var data = new com_haxepunk_graphics_atlas_AtlasData(source);
			$r = data;
			return $r;
		}($this)));
		$r = (function($this) {
			var $r;
			var e = com_haxepunk_ds_Either.Right(region);
			$r = e;
			return $r;
		}($this));
		return $r;
	}(this))); else image = new com_haxepunk_graphics_Image(com_haxepunk_HXP.renderMode == com_haxepunk_RenderMode.HARDWARE?(function($this) {
		var $r;
		var e1 = com_haxepunk_ds_Either.Right(com_haxepunk_graphics_atlas_Atlas.loadImageAsRegion((function($this) {
			var $r;
			var data1 = new com_haxepunk_graphics_atlas_AtlasData(source);
			$r = data1;
			return $r;
		}($this))));
		$r = e1;
		return $r;
	}(this)):(function($this) {
		var $r;
		var e2 = com_haxepunk_ds_Either.Left(source);
		$r = e2;
		return $r;
	}(this)));
	image.set_color(color);
	image.set_alpha(alpha);
	return image;
};
com_haxepunk_graphics_Image.createCircle = function(radius,color,alpha) {
	if(alpha == null) alpha = 1;
	if(color == null) color = 16777215;
	if(radius == 0) throw new js__$Boot_HaxeError("Illegal circle, radius cannot be 0.");
	com_haxepunk_HXP.sprite.get_graphics().clear();
	com_haxepunk_HXP.sprite.get_graphics().beginFill(16777215);
	com_haxepunk_HXP.sprite.get_graphics().drawCircle(radius,radius,radius);
	var data = com_haxepunk_HXP.createBitmap(radius * 2,radius * 2,true,0);
	data.draw(com_haxepunk_HXP.sprite);
	var image;
	if(com_haxepunk_HXP.renderMode == com_haxepunk_RenderMode.HARDWARE) image = new com_haxepunk_graphics_Image((function($this) {
		var $r;
		var region = com_haxepunk_graphics_atlas_Atlas.loadImageAsRegion((function($this) {
			var $r;
			var data1 = new com_haxepunk_graphics_atlas_AtlasData(data);
			$r = data1;
			return $r;
		}($this)));
		$r = (function($this) {
			var $r;
			var e = com_haxepunk_ds_Either.Right(region);
			$r = e;
			return $r;
		}($this));
		return $r;
	}(this))); else image = new com_haxepunk_graphics_Image(com_haxepunk_HXP.renderMode == com_haxepunk_RenderMode.HARDWARE?(function($this) {
		var $r;
		var e1 = com_haxepunk_ds_Either.Right(com_haxepunk_graphics_atlas_Atlas.loadImageAsRegion((function($this) {
			var $r;
			var data2 = new com_haxepunk_graphics_atlas_AtlasData(data);
			$r = data2;
			return $r;
		}($this))));
		$r = e1;
		return $r;
	}(this)):(function($this) {
		var $r;
		var e2 = com_haxepunk_ds_Either.Left(data);
		$r = e2;
		return $r;
	}(this)));
	image.set_color(color);
	image.set_alpha(alpha);
	return image;
};
com_haxepunk_graphics_Image.createPolygon = function(polygon,color,alpha,fill,thick) {
	if(thick == null) thick = 1;
	if(fill == null) fill = true;
	if(alpha == null) alpha = 1;
	if(color == null) color = 16777215;
	var graphics = com_haxepunk_HXP.sprite.get_graphics();
	var points = polygon._points;
	var minX;
	var maxX;
	var minY;
	var maxY;
	var p;
	var originalAngle = polygon._angle;
	polygon.set_angle(0);
	minX = minY = 179 * Math.pow(10,306);
	maxX = maxY = -(179 * Math.pow(10,306));
	var _g = 0;
	while(_g < points.length) {
		var p1 = points[_g];
		++_g;
		if(p1.x < minX) minX = p1.x;
		if(p1.x > maxX) maxX = p1.x;
		if(p1.y < minY) minY = p1.y;
		if(p1.y > maxY) maxY = p1.y;
	}
	var w = Math.ceil(maxX - minX);
	var h = Math.ceil(maxY - minY);
	if(color > 16777215) color = 16777215 & color;
	graphics.clear();
	if(fill) graphics.beginFill(16777215); else graphics.lineStyle(thick,16777215,1,false,2,null,1);
	graphics.moveTo(points[points.length - 1].x,points[points.length - 1].y);
	var _g1 = 0;
	while(_g1 < points.length) {
		var p2 = points[_g1];
		++_g1;
		graphics.lineTo(p2.x,p2.y);
	}
	graphics.endFill();
	com_haxepunk_HXP.matrix.identity();
	com_haxepunk_HXP.matrix.translate(-minX,-minY);
	var data = com_haxepunk_HXP.createBitmap(w,h,true,0);
	data.draw(com_haxepunk_HXP.sprite,com_haxepunk_HXP.matrix);
	var image;
	if(com_haxepunk_HXP.renderMode == com_haxepunk_RenderMode.HARDWARE) image = new com_haxepunk_graphics_Image((function($this) {
		var $r;
		var region = com_haxepunk_graphics_atlas_Atlas.loadImageAsRegion((function($this) {
			var $r;
			var data1 = new com_haxepunk_graphics_atlas_AtlasData(data);
			$r = data1;
			return $r;
		}($this)));
		$r = (function($this) {
			var $r;
			var e = com_haxepunk_ds_Either.Right(region);
			$r = e;
			return $r;
		}($this));
		return $r;
	}(this))); else image = new com_haxepunk_graphics_Image(com_haxepunk_HXP.renderMode == com_haxepunk_RenderMode.HARDWARE?(function($this) {
		var $r;
		var e1 = com_haxepunk_ds_Either.Right(com_haxepunk_graphics_atlas_Atlas.loadImageAsRegion((function($this) {
			var $r;
			var data2 = new com_haxepunk_graphics_atlas_AtlasData(data);
			$r = data2;
			return $r;
		}($this))));
		$r = e1;
		return $r;
	}(this)):(function($this) {
		var $r;
		var e2 = com_haxepunk_ds_Either.Left(data);
		$r = e2;
		return $r;
	}(this)));
	image.set_x(polygon.get_x() + polygon.origin.x);
	image.set_y(polygon.get_y() + polygon.origin.y);
	image.originX = image.x - polygon.minX;
	image.originY = image.y - polygon.minY;
	image.angle = originalAngle;
	polygon.set_angle(originalAngle);
	image.set_color(color);
	image.set_alpha(alpha);
	return image;
};
com_haxepunk_graphics_Image.__super__ = com_haxepunk_Graphic;
com_haxepunk_graphics_Image.prototype = $extend(com_haxepunk_Graphic.prototype,{
	angle: null
	,get_scale: function() {
		return this._scale;
	}
	,set_scale: function(value) {
		return this._scale = value;
	}
	,scaleX: null
	,scaleY: null
	,originX: null
	,originY: null
	,blend: null
	,init: function() {
		this.angle = 0;
		this.set_scale(this.scaleX = this.scaleY = 1);
		this.originX = this.originY = 0;
		this._alpha = 1;
		this._flipped = false;
		this._color = 16777215;
		this._red = this._green = this._blue = 1;
		this._matrix = com_haxepunk_HXP.matrix;
	}
	,createBuffer: function() {
		this._buffer = com_haxepunk_HXP.createBitmap(this._sourceRect.width | 0,this._sourceRect.height | 0,true);
		this._bufferRect = this._buffer.rect;
		this._bitmap.set_bitmapData(this._buffer);
	}
	,render: function(target,point,camera) {
		var sx = this._scale * this.scaleX;
		var sy = this._scale * this.scaleY;
		this._point.x = point.x + this.x - this.originX - camera.x * this.scrollX;
		this._point.y = point.y + this.y - this.originY - camera.y * this.scrollY;
		if(this._buffer != null) {
			if(this.angle == 0 && sx == 1 && sy == 1 && this.blend == null) target.copyPixels(this._buffer,this._bufferRect,this._point,null,null,true); else {
				this._matrix.b = this._matrix.c = 0;
				this._matrix.a = sx;
				this._matrix.d = sy;
				this._matrix.tx = -this.originX * sx;
				this._matrix.ty = -this.originY * sy;
				if(this.angle != 0) this._matrix.rotate(this.angle * (Math.PI / -180));
				this._matrix.tx += this.originX + this._point.x;
				this._matrix.ty += this.originY + this._point.y;
				target.draw(this._bitmap,this._matrix,null,this.blend,null,this._bitmap.smoothing);
			}
		}
	}
	,renderAtlas: function(layer,point,camera) {
		var sx = this._scale * this.scaleX;
		var sy = this._scale * this.scaleY;
		var fsx = com_haxepunk_HXP.screen.fullScaleX;
		var fsy = com_haxepunk_HXP.screen.fullScaleY;
		this._point.x = point.x + this.x - this.originX - camera.x * this.scrollX;
		this._point.y = point.y + this.y - this.originY - camera.y * this.scrollY;
		if(this.angle == 0) {
			if(!(sx == 1 && sy == 1)) {
				this._point.x = point.x + this.x - this.originX * sx - camera.x * this.scrollX;
				this._point.y = point.y + this.y - this.originY * sy - camera.y * this.scrollY;
			}
			if(this._flipped) this._point.x += this._sourceRect.width * sx;
			this._point.x = this._point.x * fsx;
			this._point.y = this._point.y * fsy;
			this._region.draw(this._point.x,this._point.y,layer,sx * fsx * (this._flipped?-1:1),sy * fsy,this.angle,this._red,this._green,this._blue,this._alpha,this.smooth);
		} else {
			if(this._flipped) sx *= -1;
			var angle = this.angle * (Math.PI / -180);
			var cos = Math.cos(angle);
			var sin = Math.sin(angle);
			var a = sx * cos * fsx;
			var b = sx * sin * fsy;
			var c = -sy * sin * fsx;
			var d = sy * cos * fsy;
			var tx = (-this.originX * sx * cos + this.originY * sy * sin + this.originX + this._point.x) * fsx;
			var ty = (-this.originX * sx * sin - this.originY * sy * cos + this.originY + this._point.y) * fsy;
			this._region.drawMatrix(tx,ty,a,b,c,d,layer,this._red,this._green,this._blue,this._alpha,this.smooth);
		}
	}
	,updateBuffer: function(clearBefore) {
		if(clearBefore == null) clearBefore = false;
		if(this._source == null) return;
		if(clearBefore) this._buffer.fillRect(this._bufferRect,0);
		this._buffer.copyPixels(this._source,this._sourceRect,com_haxepunk_HXP.zero);
		if(this._tint != null) this._buffer.colorTransform(this._bufferRect,this._tint);
	}
	,updateColorTransform: function() {
		if(this._alpha == 1) {
			if(this._tintFactor == 0 || this._tintMode == 0.0 && this._color == 16777215) {
				this._tint = null;
				this.updateBuffer();
				return;
			}
		}
		this._tint = this._colorTransform;
		this._tint.redMultiplier = this._tintMode * (1.0 - this._tintFactor) + (1 - this._tintMode) * (this._tintFactor * ((this._color >> 16 & 255) / 255 - 1) + 1);
		this._tint.greenMultiplier = this._tintMode * (1.0 - this._tintFactor) + (1 - this._tintMode) * (this._tintFactor * ((this._color >> 8 & 255) / 255 - 1) + 1);
		this._tint.blueMultiplier = this._tintMode * (1.0 - this._tintFactor) + (1 - this._tintMode) * (this._tintFactor * ((this._color & 255) / 255 - 1) + 1);
		this._tint.redOffset = (this._color >> 16 & 255) * this._tintFactor * this._tintMode;
		this._tint.greenOffset = (this._color >> 8 & 255) * this._tintFactor * this._tintMode;
		this._tint.blueOffset = (this._color & 255) * this._tintFactor * this._tintMode;
		this._tint.alphaMultiplier = this._alpha;
		this.updateBuffer();
	}
	,clear: function() {
		if(this._buffer == null) return;
		this._buffer.fillRect(this._bufferRect,0);
	}
	,get_alpha: function() {
		return this._alpha;
	}
	,set_alpha: function(value) {
		if(value < 0) value = 0; else if(value > 1) value = 1; else value = value;
		if(this._alpha == value) return value;
		this._alpha = value;
		if(this.blit) this.updateColorTransform();
		return this._alpha;
	}
	,get_color: function() {
		return this._color;
	}
	,set_color: function(value) {
		value &= 16777215;
		if(this._color == value) return value;
		this._color = value;
		this._red = (this._color >> 16 & 255) / 255;
		this._green = (this._color >> 8 & 255) / 255;
		this._blue = (this._color & 255) / 255;
		if(this.blit) this.updateColorTransform();
		return this._color;
	}
	,get_tinting: function() {
		return this._tintFactor;
	}
	,set_tinting: function(value) {
		if(this._tintFactor == value || !this.blit) return value;
		this._tintFactor = value;
		this.updateColorTransform();
		return this._tintFactor;
	}
	,get_tintMode: function() {
		return this._tintMode;
	}
	,set_tintMode: function(value) {
		if(this._tintMode == value || !this.blit) return value;
		this._tintMode = value;
		this.updateColorTransform();
		return this._tintMode;
	}
	,get_flipped: function() {
		return this._flipped;
	}
	,set_flipped: function(value) {
		if(this._flipped == value) return value;
		this._flipped = value;
		if(this.blit) {
			var temp = this._source;
			if(!value || this._flip != null) this._source = this._flip; else if(com_haxepunk_graphics_Image._flips.h.__keys__[temp.__id__] != null) this._source = com_haxepunk_graphics_Image._flips.h[temp.__id__]; else {
				this._source = com_haxepunk_HXP.createBitmap(this._source.width,this._source.height,true);
				com_haxepunk_graphics_Image._flips.set(temp,this._source);
				com_haxepunk_HXP.matrix.identity();
				com_haxepunk_HXP.matrix.a = -1;
				com_haxepunk_HXP.matrix.tx = this._source.width;
				this._source.draw(temp,com_haxepunk_HXP.matrix);
			}
			this._flip = temp;
			this.updateBuffer();
		}
		return this._flipped;
	}
	,centerOrigin: function() {
		this.originX = Std["int"](this.get_width() / 2);
		this.originY = Std["int"](this.get_height() / 2);
	}
	,centerOO: function() {
		var _g = this;
		_g.x = _g.x + this.originX;
		var _g1 = this;
		_g1.y = _g1.y + this.originY;
		this.centerOrigin();
		var _g2 = this;
		_g2.x = _g2.x - this.originX;
		var _g3 = this;
		_g3.y = _g3.y - this.originY;
	}
	,smooth: null
	,get_width: function() {
		return (this.blit?this._bufferRect.width:!this._region.rotated?this._region._rect.width:this._region._rect.height) | 0;
	}
	,get_height: function() {
		return (this.blit?this._bufferRect.height:!this._region.rotated?this._region._rect.height:this._region._rect.width) | 0;
	}
	,get_scaledWidth: function() {
		return this.get_width() * this.scaleX * this._scale;
	}
	,set_scaledWidth: function(w) {
		return this.scaleX = w / this._scale / this.get_width();
	}
	,get_scaledHeight: function() {
		return this.get_height() * this.scaleY * this._scale;
	}
	,set_scaledHeight: function(h) {
		return this.scaleY = h / this._scale / this.get_height();
	}
	,clipRect: null
	,get_clipRect: function() {
		return this._sourceRect;
	}
	,_source: null
	,_sourceRect: null
	,_buffer: null
	,_bufferRect: null
	,_bitmap: null
	,_region: null
	,_alpha: null
	,_color: null
	,_tintFactor: null
	,_tintMode: null
	,_tint: null
	,_colorTransform: null
	,_matrix: null
	,_red: null
	,_green: null
	,_blue: null
	,_flipped: null
	,_flip: null
	,_scale: null
	,__class__: com_haxepunk_graphics_Image
	,__properties__: $extend(com_haxepunk_Graphic.prototype.__properties__,{get_clipRect:"get_clipRect",set_scaledHeight:"set_scaledHeight",get_scaledHeight:"get_scaledHeight",set_scaledWidth:"set_scaledWidth",get_scaledWidth:"get_scaledWidth",get_height:"get_height",get_width:"get_width",set_flipped:"set_flipped",get_flipped:"get_flipped",set_tintMode:"set_tintMode",get_tintMode:"get_tintMode",set_tinting:"set_tinting",get_tinting:"get_tinting",set_color:"set_color",get_color:"get_color",set_alpha:"set_alpha",get_alpha:"get_alpha",set_scale:"set_scale",get_scale:"get_scale"})
});
var com_haxepunk_graphics_Spritemap = function(source,frameWidth,frameHeight,cbFunc) {
	if(frameHeight == null) frameHeight = 0;
	if(frameWidth == null) frameWidth = 0;
	this.complete = true;
	this.rate = 1;
	this._anims = new haxe_ds_StringMap();
	this._timer = this._frame = 0;
	this._rect = new openfl_geom_Rectangle(0,0,frameWidth,frameHeight);
	{
		var _g = source;
		switch(_g[1]) {
		case 0:
			var bd = _g[2];
			com_haxepunk_graphics_Image.call(this,com_haxepunk_HXP.renderMode == com_haxepunk_RenderMode.HARDWARE?(function($this) {
				var $r;
				var e = com_haxepunk_ds_Either.Right(com_haxepunk_graphics_atlas_Atlas.loadImageAsRegion((function($this) {
					var $r;
					var data = new com_haxepunk_graphics_atlas_AtlasData(bd);
					$r = data;
					return $r;
				}($this))));
				$r = e;
				return $r;
			}(this)):(function($this) {
				var $r;
				var e1 = com_haxepunk_ds_Either.Left(bd);
				$r = e1;
				return $r;
			}(this)),this._rect);
			break;
		case 1:
			var atlas = _g[2];
			this._atlas = atlas;
			if(frameWidth > this._atlas.get_width() || frameHeight > this._atlas.get_height()) throw new js__$Boot_HaxeError("Frame width and height can't be bigger than the source image dimension.");
			this._atlas.prepare(frameWidth == 0?Std["int"](this._atlas.get_width()):frameWidth,frameHeight == 0?Std["int"](this._atlas.get_height()):frameHeight);
			com_haxepunk_graphics_Image.call(this,(function($this) {
				var $r;
				var region = atlas.getRegion($this._frame);
				$r = (function($this) {
					var $r;
					var e2 = com_haxepunk_ds_Either.Right(region);
					$r = e2;
					return $r;
				}($this));
				return $r;
			}(this)),this._rect);
			break;
		}
	}
	if(this.blit) {
		this._width = this._source.width;
		this._height = this._source.height;
	} else {
		this._width = Std["int"](this._atlas.get_width());
		this._height = Std["int"](this._atlas.get_height());
	}
	if(frameWidth == 0) this._rect.width = this._width;
	if(frameHeight == 0) this._rect.height = this._height;
	if(this._width % this._rect.width != 0 || this._height % this._rect.height != 0) throw new js__$Boot_HaxeError("Source image width and height should be multiples of the frame width and height.");
	this._columns = Math.ceil(this._width / this._rect.width);
	this._rows = Math.ceil(this._height / this._rect.height);
	this._frameCount = this._columns * this._rows;
	this.callbackFunc = cbFunc;
	this.updateBuffer();
	this.active = true;
};
$hxClasses["com.haxepunk.graphics.Spritemap"] = com_haxepunk_graphics_Spritemap;
com_haxepunk_graphics_Spritemap.__name__ = ["com","haxepunk","graphics","Spritemap"];
com_haxepunk_graphics_Spritemap.__super__ = com_haxepunk_graphics_Image;
com_haxepunk_graphics_Spritemap.prototype = $extend(com_haxepunk_graphics_Image.prototype,{
	complete: null
	,callbackFunc: null
	,rate: null
	,updateBuffer: function(clearBefore) {
		if(clearBefore == null) clearBefore = false;
		if(this.blit) {
			if(this._width > 0 && this._height > 0) {
				this._rect.x = this._rect.width * (this._frame % this._columns);
				this._rect.y = this._rect.height * (this._frame / this._columns | 0);
				if(this._flipped) this._rect.x = this._width - this._rect.width - this._rect.x;
			}
			com_haxepunk_graphics_Image.prototype.updateBuffer.call(this,clearBefore);
		} else this._region = this._atlas.getRegion(this._frame);
	}
	,update: function() {
		if(this._anim != null && !this.complete) {
			this._timer += (com_haxepunk_HXP.fixed?this._anim.frameRate / com_haxepunk_HXP.assignedFrameRate:this._anim.frameRate * com_haxepunk_HXP.elapsed) * this.rate;
			if(this._timer >= 1) {
				while(this._timer >= 1) {
					this._timer--;
					if(this.reverse) this._index += -1; else this._index += 1;
					if(this.reverse && this._index == -1 || !this.reverse && this._index == this._anim.frameCount) {
						if(this._anim.loop) {
							if(this.reverse) this._index = this._anim.frameCount - 1; else this._index = 0;
							if(this.callbackFunc != null) this.callbackFunc();
						} else {
							if(this.reverse) this._index = 0; else this._index = this._anim.frameCount - 1;
							this.complete = true;
							if(this.callbackFunc != null) this.callbackFunc();
							break;
						}
					}
				}
				if(this._anim != null) this._frame = this._anim.frames[this._index] | 0;
				this.updateBuffer();
			}
		}
	}
	,add: function(name,frames,frameRate,loop) {
		if(loop == null) loop = true;
		if(frameRate == null) frameRate = 0;
		if(this._anims.get(name) != null) throw new js__$Boot_HaxeError("Cannot have multiple animations with the same name");
		var _g1 = 0;
		var _g = frames.length;
		while(_g1 < _g) {
			var i = _g1++;
			frames[i] %= this._frameCount;
			if(frames[i] < 0) frames[i] += this._frameCount;
		}
		var anim = new com_haxepunk_graphics_Animation(name,frames,frameRate,loop);
		this._anims.set(name,anim);
		anim.set_parent(this);
		return anim;
	}
	,play: function(name,reset,reverse) {
		if(reverse == null) reverse = false;
		if(reset == null) reset = false;
		if(name == null) name = "";
		if(!reset && this._anim != null && this._anim.name == name) return this._anim;
		if(!this._anims.exists(name)) {
			this.stop(reset);
			return null;
		}
		this._anim = this._anims.get(name);
		this.reverse = reverse;
		this.restart();
		return this._anim;
	}
	,playFrames: function(frames,frameRate,loop,reset,reverse) {
		if(reverse == null) reverse = false;
		if(reset == null) reset = false;
		if(loop == null) loop = true;
		if(frameRate == null) frameRate = 0;
		if(frames == null || frames.length == 0) {
			this.stop(reset);
			return null;
		}
		if(!reset && this._anim != null && this._anim.frames == frames) return this._anim;
		return this.playAnimation(new com_haxepunk_graphics_Animation(null,frames,frameRate,loop),reset,reverse);
	}
	,playAnimation: function(anim,reset,reverse) {
		if(reverse == null) reverse = false;
		if(reset == null) reset = false;
		if(anim == null) throw new js__$Boot_HaxeError("No animation supplied");
		if(!reset && this._anim == anim) return anim;
		this._anim = anim;
		this.reverse = reverse;
		this.restart();
		return anim;
	}
	,restart: function() {
		this._timer = this.reverse?this._index = this._anim.frames.length - 1:this._index = 0;
		this._frame = this._anim.frames[this._index];
		this.complete = false;
		this.updateBuffer();
	}
	,stop: function(reset) {
		if(reset == null) reset = false;
		if(reset) this._frame = this.reverse?this._index = this._anim.frames.length - 1:this._index = 0;
		this._anim = null;
		this.complete = true;
		this.updateBuffer();
	}
	,getFrame: function(column,row) {
		if(row == null) row = 0;
		if(column == null) column = 0;
		return row % this._rows * this._columns + column % this._columns;
	}
	,setFrame: function(column,row) {
		if(row == null) row = 0;
		if(column == null) column = 0;
		this._anim = null;
		var frame = row % this._rows * this._columns + column % this._columns;
		if(this._frame == frame) return;
		this._frame = frame;
		this.updateBuffer();
	}
	,randFrame: function() {
		this.set_frame((function($this) {
			var $r;
			com_haxepunk_HXP._seed = com_haxepunk_HXP._seed * 16807.0 % 2147483647 | 0;
			$r = com_haxepunk_HXP._seed / 2147483647 * $this._frameCount | 0;
			return $r;
		}(this)));
	}
	,setAnimFrame: function(name,index) {
		var frames = this._anims.get(name).frames;
		index = index % frames.length;
		if(index < 0) index += frames.length;
		this.set_frame(frames[index]);
	}
	,get_frame: function() {
		return this._frame;
	}
	,set_frame: function(value) {
		this._anim = null;
		value %= this._frameCount;
		if(value < 0) value = this._frameCount + value;
		if(this._frame == value) return this._frame;
		this._frame = value;
		this.updateBuffer();
		return this._frame;
	}
	,get_index: function() {
		if(this._anim != null) return this._index; else return 0;
	}
	,set_index: function(value) {
		if(this._anim == null) return 0;
		value %= this._anim.frameCount;
		if(this._index == value) return this._index;
		this._index = value;
		this._frame = this._anim.frames[this._index];
		this.updateBuffer();
		return this._index;
	}
	,reverse: null
	,frameCount: null
	,get_frameCount: function() {
		return this._frameCount;
	}
	,columns: null
	,get_columns: function() {
		return this._columns;
	}
	,rows: null
	,get_rows: function() {
		return this._rows;
	}
	,currentAnim: null
	,get_currentAnim: function() {
		if(this._anim != null) return this._anim.name; else return "";
	}
	,_rect: null
	,_width: null
	,_height: null
	,_columns: null
	,_rows: null
	,_frameCount: null
	,_anims: null
	,_anim: null
	,_index: null
	,_frame: null
	,_timer: null
	,_atlas: null
	,__class__: com_haxepunk_graphics_Spritemap
	,__properties__: $extend(com_haxepunk_graphics_Image.prototype.__properties__,{get_currentAnim:"get_currentAnim",get_rows:"get_rows",get_columns:"get_columns",get_frameCount:"get_frameCount",set_index:"set_index",get_index:"get_index",set_frame:"set_frame",get_frame:"get_frame"})
});
var com_haxepunk_graphics__$Text_StyleType_$Impl_$ = {};
$hxClasses["com.haxepunk.graphics._Text.StyleType_Impl_"] = com_haxepunk_graphics__$Text_StyleType_$Impl_$;
com_haxepunk_graphics__$Text_StyleType_$Impl_$.__name__ = ["com","haxepunk","graphics","_Text","StyleType_Impl_"];
com_haxepunk_graphics__$Text_StyleType_$Impl_$._new = function(format) {
	return format;
};
com_haxepunk_graphics__$Text_StyleType_$Impl_$.toTextformat = function(this1) {
	return this1;
};
com_haxepunk_graphics__$Text_StyleType_$Impl_$.fromTextFormat = function(format) {
	return com_haxepunk_graphics__$Text_StyleType_$Impl_$._new(format);
};
com_haxepunk_graphics__$Text_StyleType_$Impl_$.fromTextOptions = function(object) {
	var format = new openfl_text_TextFormat();
	var fields = Type.getInstanceFields(openfl_text_TextFormat);
	var _g = 0;
	var _g1 = Reflect.fields(object);
	while(_g < _g1.length) {
		var key = _g1[_g];
		++_g;
		if(HxOverrides.indexOf(fields,key,0) > -1) Reflect.setField(format,key,Reflect.field(object,key)); else throw new js__$Boot_HaxeError("\"" + key + "\" is not a TextFormat property");
	}
	return com_haxepunk_graphics__$Text_StyleType_$Impl_$._new(format);
};
com_haxepunk_graphics__$Text_StyleType_$Impl_$.fromDynamic = function(object) {
	var format = new openfl_text_TextFormat();
	var fields = Type.getInstanceFields(openfl_text_TextFormat);
	var _g = 0;
	var _g1 = Reflect.fields(object);
	while(_g < _g1.length) {
		var key = _g1[_g];
		++_g;
		if(HxOverrides.indexOf(fields,key,0) > -1) Reflect.setField(format,key,Reflect.field(object,key)); else throw new js__$Boot_HaxeError("\"" + key + "\" is not a TextFormat property");
	}
	return com_haxepunk_graphics__$Text_StyleType_$Impl_$._new(format);
};
var com_haxepunk_graphics_Text = function(text,x,y,width,height,options) {
	if(height == null) height = 0;
	if(width == null) width = 0;
	if(y == null) y = 0;
	if(x == null) x = 0;
	if(text == null) text = "";
	this.resizable = true;
	if(options == null) options = { };
	if(!Object.prototype.hasOwnProperty.call(options,"font")) options.font = com_haxepunk_HXP.defaultFont;
	if(!Object.prototype.hasOwnProperty.call(options,"size")) options.size = 16;
	if(!Object.prototype.hasOwnProperty.call(options,"align")) options.align = 3;
	if(!Object.prototype.hasOwnProperty.call(options,"color")) options.color = 16777215;
	if(!Object.prototype.hasOwnProperty.call(options,"resizable")) options.resizable = true;
	if(!Object.prototype.hasOwnProperty.call(options,"wordWrap")) options.wordWrap = false;
	if(!Object.prototype.hasOwnProperty.call(options,"leading")) options.leading = 0;
	var fontObj = openfl_Assets.getFont(options.font);
	this._format = new openfl_text_TextFormat(fontObj.name,options.size,16777215);
	this._format.align = options.align;
	this._format.leading = options.leading;
	this._field = new openfl_text_TextField();
	this._field.set_wordWrap(options.wordWrap);
	this._field.set_defaultTextFormat(this._format);
	if(options.filters != null) this._field.set_filters(options.filters);
	this._field.set_text(this._text = text);
	this._field.set_selectable(false);
	this.resizable = options.resizable;
	this._styles = new haxe_ds_StringMap();
	if(width == 0) this._width = Std["int"](this._field.get_textWidth() + 4); else this._width = width;
	if(height == 0) this._height = Std["int"](this._field.get_textHeight() + 4); else this._height = height;
	var source = com_haxepunk_HXP.createBitmap(this._width,this._height,true);
	if(com_haxepunk_HXP.renderMode == com_haxepunk_RenderMode.HARDWARE) {
		this._source = source;
		this._sourceRect = source.rect;
		this._region = com_haxepunk_graphics_atlas_Atlas.loadImageAsRegion((function($this) {
			var $r;
			var data = new com_haxepunk_graphics_atlas_AtlasData($this._source);
			$r = data;
			return $r;
		}(this)));
		this.blit = true;
		com_haxepunk_graphics_Image.call(this);
	} else com_haxepunk_graphics_Image.call(this,com_haxepunk_HXP.renderMode == com_haxepunk_RenderMode.HARDWARE?(function($this) {
		var $r;
		var e = com_haxepunk_ds_Either.Right(com_haxepunk_graphics_atlas_Atlas.loadImageAsRegion((function($this) {
			var $r;
			var data1 = new com_haxepunk_graphics_atlas_AtlasData(source);
			$r = data1;
			return $r;
		}($this))));
		$r = e;
		return $r;
	}(this)):(function($this) {
		var $r;
		var e1 = com_haxepunk_ds_Either.Left(source);
		$r = e1;
		return $r;
	}(this)));
	this.blit = com_haxepunk_HXP.renderMode == com_haxepunk_RenderMode.BUFFER;
	this.updateTextBuffer();
	this.set_size(options.size);
	this.set_color(options.color);
	this.x = x;
	this.y = y;
};
$hxClasses["com.haxepunk.graphics.Text"] = com_haxepunk_graphics_Text;
com_haxepunk_graphics_Text.__name__ = ["com","haxepunk","graphics","Text"];
com_haxepunk_graphics_Text.__super__ = com_haxepunk_graphics_Image;
com_haxepunk_graphics_Text.prototype = $extend(com_haxepunk_graphics_Image.prototype,{
	resizable: null
	,textWidth: null
	,textHeight: null
	,addStyle: function(tagName,params) {
		this._styles.set(tagName,com_haxepunk_graphics__$Text_StyleType_$Impl_$.toTextformat(params));
		if(this._richText != null) this.updateTextBuffer();
	}
	,updateColorTransform: function() {
		if(this._richText != null) {
			if(this._alpha == 1) this._tint = null; else {
				this._tint = this._colorTransform;
				this._tint.redMultiplier = 1;
				this._tint.greenMultiplier = 1;
				this._tint.blueMultiplier = 1;
				this._tint.redOffset = 0;
				this._tint.greenOffset = 0;
				this._tint.blueOffset = 0;
				this._tint.alphaMultiplier = this._alpha;
			}
			if(this._format.color != this._color) this.updateTextBuffer(); else this.updateBuffer();
		} else com_haxepunk_graphics_Image.prototype.updateColorTransform.call(this);
	}
	,matchStyles: function() {
		this._text = this._richText;
		this._field.set_text(com_haxepunk_graphics_Text.tag_re.replace(this._text,"$2"));
		this._field.setTextFormat(this._format);
		while(com_haxepunk_graphics_Text.tag_re.match(this._text)) {
			var tagName = com_haxepunk_graphics_Text.tag_re.matched(1);
			var text = com_haxepunk_graphics_Text.tag_re.matched(2);
			var p = com_haxepunk_graphics_Text.tag_re.matchedPos();
			this._text = HxOverrides.substr(this._text,0,p.pos) + text + HxOverrides.substr(this._text,p.pos + p.len,null);
			if(this._styles.exists(tagName)) this._field.setTextFormat(this._styles.get(tagName),p.pos,p.pos + text.length);
		}
	}
	,updateTextBuffer: function() {
		if(this._richText == null) {
			this._format.color = 16777215;
			this._field.setTextFormat(this._format);
		} else {
			this._format.color = this._color;
			this.matchStyles();
		}
		this._field.set_width(this._width);
		this._field.set_width(this.textWidth = Math.ceil(this._field.get_textWidth() + 4));
		this._field.set_height(this.textHeight = Math.ceil(this._field.get_textHeight() + 4));
		if(this.resizable && (this.textWidth > this._width || this.textHeight > this._height)) {
			if(this._width < this.textWidth) this._width = this.textWidth;
			if(this._height < this.textHeight) this._height = this.textHeight;
		}
		if(this._width > this._source.width || this._height > this._source.height) {
			this._source = com_haxepunk_HXP.createBitmap(Std["int"](Math.max(this._width,this._source.width)),Std["int"](Math.max(this._height,this._source.height)),true);
			this._sourceRect = this._source.rect;
			this.createBuffer();
			if(!this.blit) {
				if(this._region != null) this._region.destroy();
				this._region = com_haxepunk_graphics_atlas_Atlas.loadImageAsRegion((function($this) {
					var $r;
					var data = new com_haxepunk_graphics_atlas_AtlasData($this._source);
					$r = data;
					return $r;
				}(this)));
			}
		} else this._source.fillRect(this._sourceRect,0);
		this._field.set_width(this._width);
		this._field.set_height(this._height);
		this._source.draw(this._field);
		com_haxepunk_graphics_Image.prototype.updateBuffer.call(this);
	}
	,destroy: function() {
		if(this._region != null) this._region.destroy();
	}
	,get_text: function() {
		return this._text;
	}
	,set_text: function(value) {
		if(this._text == value && this._richText == null) return value;
		this._field.set_text(this._text = value);
		if(this._richText == null) this.updateTextBuffer(); else this.updateColorTransform();
		return value;
	}
	,get_richText: function() {
		if(this._richText == null) return this._text; else return this._richText;
	}
	,set_richText: function(value) {
		if(this._richText == value) return value;
		var fromPlain = this._richText == null;
		this._richText = value;
		if(this._richText == "") this._field.set_text(this._text = "");
		if(fromPlain && this._richText != null) {
			this._format.color = 16777215;
			this._red = this._green = this._blue = 1;
			this.updateColorTransform();
		} else this.updateTextBuffer();
		return value;
	}
	,getTextProperty: function(name) {
		var value = Reflect.getProperty(this,name);
		if(value == null) value = Reflect.getProperty(this._field,name);
		if(value == null) value = Reflect.getProperty(this._format,name);
		return value;
	}
	,setTextProperty: function(name,value) {
		var propertyFound = false;
		try {
			Reflect.setProperty(this,name,value);
			return true;
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			try {
				Reflect.setProperty(this._field,name,value);
				propertyFound = true;
			} catch( e1 ) {
				haxe_CallStack.lastException = e1;
				if (e1 instanceof js__$Boot_HaxeError) e1 = e1.val;
				try {
					Reflect.setProperty(this._format,name,value);
					propertyFound = true;
				} catch( e2 ) {
					haxe_CallStack.lastException = e2;
					if (e2 instanceof js__$Boot_HaxeError) e2 = e2.val;
				}
			}
		}
		if(!propertyFound) return false;
		this.updateTextBuffer();
		return true;
	}
	,font: null
	,set_font: function(value) {
		if(this.font == value) return value;
		value = openfl_Assets.getFont(value).get_fontName();
		this._format.font = this.font = value;
		this.updateTextBuffer();
		return value;
	}
	,size: null
	,set_size: function(value) {
		if(this.size == value) return value;
		this._format.size = this.size = value;
		this.updateTextBuffer();
		return value;
	}
	,align: null
	,set_align: function(value) {
		if(this.align == value) return value;
		this._format.align = value;
		this.updateTextBuffer();
		return value;
	}
	,leading: null
	,set_leading: function(value) {
		if(this.leading == value) return value;
		this._format.leading = this.leading = value;
		this.updateTextBuffer();
		return value;
	}
	,wordWrap: null
	,set_wordWrap: function(value) {
		if(this.wordWrap == value) return value;
		this._field.set_wordWrap(this.wordWrap = value);
		this.updateTextBuffer();
		return value;
	}
	,get_width: function() {
		return this._width | 0;
	}
	,get_height: function() {
		return this._height | 0;
	}
	,_width: null
	,_height: null
	,_text: null
	,_richText: null
	,_field: null
	,_format: null
	,_styles: null
	,__class__: com_haxepunk_graphics_Text
	,__properties__: $extend(com_haxepunk_graphics_Image.prototype.__properties__,{set_wordWrap:"set_wordWrap",set_leading:"set_leading",set_align:"set_align",set_size:"set_size",set_font:"set_font",set_richText:"set_richText",get_richText:"get_richText",set_text:"set_text",get_text:"get_text"})
});
var com_haxepunk_graphics_Tilemap = function(tileset,width,height,tileWidth,tileHeight,tileSpacingWidth,tileSpacingHeight,opaqueTiles) {
	if(opaqueTiles == null) opaqueTiles = true;
	if(tileSpacingHeight == null) tileSpacingHeight = 0;
	if(tileSpacingWidth == null) tileSpacingWidth = 0;
	this._rect = com_haxepunk_HXP.rect;
	this._width = width - width % tileWidth;
	this._height = height - height % tileHeight;
	this._columns = this._width / tileWidth | 0;
	this._rows = this._height / tileHeight | 0;
	this._opaqueTiles = opaqueTiles;
	this.tileSpacingWidth = tileSpacingWidth;
	this.tileSpacingHeight = tileSpacingHeight;
	if(this._columns == 0 || this._rows == 0) throw new js__$Boot_HaxeError("Cannot create a bitmapdata of width/height = 0");
	this._maxWidth -= this._maxWidth % tileWidth;
	this._maxHeight -= this._maxHeight % tileHeight;
	com_haxepunk_graphics_Canvas.call(this,this._width,this._height);
	this._tile = new openfl_geom_Rectangle(0,0,tileWidth,tileHeight);
	this._map = [];
	var _g1 = 0;
	var _g = this._rows;
	while(_g1 < _g) {
		var y = _g1++;
		this._map[y] = [];
		var _g3 = 0;
		var _g2 = this._columns;
		while(_g3 < _g2) {
			var x = _g3++;
			this._map[y][x] = -1;
		}
	}
	{
		var _g4 = tileset;
		switch(_g4[1]) {
		case 0:
			var bd = _g4[2];
			this.blit = true;
			this._set = bd;
			break;
		case 1:
			var atlas = _g4[2];
			this.blit = false;
			this._atlas = atlas;
			atlas.prepare(tileWidth,tileHeight,tileSpacingWidth,tileSpacingHeight);
			break;
		}
	}
	if(this._set == null && this._atlas == null) throw new js__$Boot_HaxeError("Invalid tileset graphic provided.");
	if(this.blit) {
		this._setColumns = this._set.width / tileWidth | 0;
		this._setRows = this._set.height / tileHeight | 0;
	} else {
		this._setColumns = Std["int"](this._atlas.get_width() / tileWidth);
		this._setRows = Std["int"](this._atlas.get_height() / tileHeight);
	}
	this._setCount = this._setColumns * this._setRows;
	this.smooth = com_haxepunk_HXP.stage.quality != 2;
};
$hxClasses["com.haxepunk.graphics.Tilemap"] = com_haxepunk_graphics_Tilemap;
com_haxepunk_graphics_Tilemap.__name__ = ["com","haxepunk","graphics","Tilemap"];
com_haxepunk_graphics_Tilemap.__super__ = com_haxepunk_graphics_Canvas;
com_haxepunk_graphics_Tilemap.prototype = $extend(com_haxepunk_graphics_Canvas.prototype,{
	usePositions: null
	,setTile: function(column,row,index) {
		if(index == null) index = 0;
		if(this.usePositions) {
			column = column / this._tile.width | 0;
			row = row / this._tile.height | 0;
		}
		index %= this._setCount;
		column %= this._columns;
		row %= this._rows;
		this._map[row][column] = index;
		if(this.blit) {
			if(!this._opaqueTiles || index < 0) {
				this._tile.x = column * this._tile.width;
				this._tile.y = row * this._tile.height;
				this.fill(this._tile,0,0);
			}
			if(index >= 0) {
				this._tile.x = index % this._setColumns * (this._tile.width + this.tileSpacingWidth);
				this._tile.y = (index / this._setColumns | 0) * (this._tile.height + this.tileSpacingHeight);
				this.draw(column * this._tile.width,row * this._tile.height,this._set,this._tile);
			}
		}
	}
	,clearTile: function(column,row) {
		this.setTile(column,row,-1);
	}
	,getTile: function(column,row) {
		if(this.usePositions) {
			column = column / this._tile.width | 0;
			row = row / this._tile.height | 0;
		}
		return this._map[row % this._rows][column % this._columns];
	}
	,setRect: function(column,row,width,height,index) {
		if(index == null) index = 0;
		if(height == null) height = 1;
		if(width == null) width = 1;
		if(this.usePositions) {
			column = column / this._tile.width | 0;
			row = row / this._tile.height | 0;
			width = width / this._tile.width | 0;
			height = height / this._tile.height | 0;
		}
		column %= this._columns;
		row %= this._rows;
		var c = column;
		var r = column + width;
		var b = row + height;
		var u = this.usePositions;
		this.usePositions = false;
		while(row < b) {
			while(column < r) {
				this.setTile(column,row,index);
				column++;
			}
			column = c;
			row++;
		}
		this.usePositions = u;
	}
	,clearRect: function(column,row,width,height) {
		if(height == null) height = 1;
		if(width == null) width = 1;
		if(this.usePositions) {
			column = column / this._tile.width | 0;
			row = row / this._tile.height | 0;
			width = width / this._tile.width | 0;
			height = height / this._tile.height | 0;
		}
		column %= this._columns;
		row %= this._rows;
		var c = column;
		var r = column + width;
		var b = row + height;
		var u = this.usePositions;
		this.usePositions = false;
		while(row < b) {
			while(column < r) {
				this.clearTile(column,row);
				column++;
			}
			column = c;
			row++;
		}
		this.usePositions = u;
	}
	,loadFrom2DArray: function(array) {
		var _g1 = 0;
		var _g = array.length;
		while(_g1 < _g) {
			var y = _g1++;
			var _g3 = 0;
			var _g2 = array[y].length;
			while(_g3 < _g2) {
				var x = _g3++;
				this.setTile(x,y,array[y][x]);
			}
		}
	}
	,loadFromString: function(str,columnSep,rowSep) {
		if(rowSep == null) rowSep = "\n";
		if(columnSep == null) columnSep = ",";
		var row = str.split(rowSep);
		var rows = row.length;
		var col;
		var cols;
		var x;
		var y;
		var _g = 0;
		while(_g < rows) {
			var y1 = _g++;
			if(row[y1] == "") continue;
			col = row[y1].split(columnSep);
			cols = col.length;
			var _g1 = 0;
			while(_g1 < cols) {
				var x1 = _g1++;
				if(col[x1] != "") this.setTile(x1,y1,Std.parseInt(col[x1]));
			}
		}
	}
	,saveToString: function(columnSep,rowSep) {
		if(rowSep == null) rowSep = "\n";
		if(columnSep == null) columnSep = ",";
		var s = "";
		var x;
		var y;
		var _g1 = 0;
		var _g = this._rows;
		while(_g1 < _g) {
			var y1 = _g1++;
			var _g3 = 0;
			var _g2 = this._columns;
			while(_g3 < _g2) {
				var x1 = _g3++;
				s += Std.string(this.getTile(x1,y1));
				if(x1 != this._columns - 1) s += columnSep;
			}
			if(y1 != this._rows - 1) s += rowSep;
		}
		return s;
	}
	,getIndex: function(tilesColumn,tilesRow) {
		return tilesRow % this._setRows * this._setColumns + tilesColumn % this._setColumns;
	}
	,getX: function(index) {
		return index % this._setColumns;
	}
	,getY: function(index) {
		return index / this._setColumns | 0;
	}
	,shiftTiles: function(columns,rows,wrap) {
		if(wrap == null) wrap = false;
		if(this.usePositions) {
			columns = columns / this._tile.width | 0;
			rows = rows / this._tile.height | 0;
		}
		if(columns != 0) {
			var _g1 = 0;
			var _g = this._rows;
			while(_g1 < _g) {
				var y = _g1++;
				var row = this._map[y];
				if(columns > 0) {
					var _g2 = 0;
					while(_g2 < columns) {
						var x = _g2++;
						var tile = row.pop();
						if(wrap) row.unshift(tile);
					}
				} else {
					var _g3 = 0;
					var _g21 = Std["int"](Math.abs(columns));
					while(_g3 < _g21) {
						var x1 = _g3++;
						var tile1 = row.shift();
						if(wrap) row.push(tile1);
					}
				}
			}
			this._columns = this._map[this.y | 0].length;
		}
		if(rows != 0) {
			if(rows > 0) {
				var _g4 = 0;
				while(_g4 < rows) {
					var y1 = _g4++;
					var row1 = this._map.pop();
					if(wrap) this._map.unshift(row1);
				}
			} else {
				var _g11 = 0;
				var _g5 = Std["int"](Math.abs(rows));
				while(_g11 < _g5) {
					var y2 = _g11++;
					var row2 = this._map.shift();
					if(wrap) this._map.push(row2);
				}
			}
			this._rows = this._map.length;
		}
	}
	,updateRect: function(rect,clear) {
		var x = rect.x | 0;
		var y = rect.y | 0;
		var w = x + rect.width | 0;
		var h = y + rect.height | 0;
		var u = this.usePositions;
		this.usePositions = false;
		if(clear) while(y < h) {
			while(x < w) this.clearTile(x++,y);
			x = rect.x | 0;
			y++;
		} else while(y < h) {
			while(x < w) this.updateTile(x++,y);
			x = rect.x | 0;
			y++;
		}
		this.usePositions = u;
	}
	,renderAtlas: function(layer,point,camera) {
		this._point.x = point.x + this.x - camera.x * this.scrollX;
		this._point.y = point.y + this.y - camera.y * this.scrollY;
		var scalex = com_haxepunk_HXP.screen.fullScaleX;
		var scaley = com_haxepunk_HXP.screen.fullScaleY;
		var tw = this._tile.width | 0 | 0;
		var th = this._tile.height | 0 | 0;
		var scx = this.scale * this.scaleX;
		var scy = this.scale * this.scaleY;
		var startx = Math.floor(-this._point.x / (tw * scx));
		var starty = Math.floor(-this._point.y / (th * scy));
		var destx = startx + 1 + Math.ceil(com_haxepunk_HXP.width / (tw * scx));
		var desty = starty + 1 + Math.ceil(com_haxepunk_HXP.height / (th * scy));
		if(startx > this._columns || starty > this._rows || destx < 0 || desty < 0) return;
		if(startx < 0) startx = 0;
		if(destx > this._columns) destx = this._columns;
		if(starty < 0) starty = 0;
		if(desty > this._rows) desty = this._rows;
		var wx;
		var sx = startx * tw * scx * scalex;
		var wy = starty * th * scy * scaley;
		var stepx = tw * scx * scalex;
		var stepy = th * scy * scaley;
		var tile = 0;
		this._point.x = this._point.x * scalex | 0;
		this._point.y = this._point.y * scaley | 0;
		var _g = starty;
		while(_g < desty) {
			var y = _g++;
			wx = sx;
			scy = (Math.floor(wy + stepy) - Math.floor(wy)) / (this._tile.height | 0);
			var _g1 = startx;
			while(_g1 < destx) {
				var x = _g1++;
				tile = this._map[y % this._rows][x % this._columns];
				if(tile >= 0) {
					scx = (Math.floor(wx + stepx) - Math.floor(wx)) / (this._tile.width | 0);
					this._tile.x = tile % this._setColumns * (this._tile.width + this.tileSpacingWidth);
					this._tile.y = (tile / this._setColumns | 0) * (this._tile.height + this.tileSpacingHeight);
					this._atlas.prepareTile(this._tile,Math.floor(this._point.x + wx),Math.floor(this._point.y + wy),layer,scx,scy,0,this._red,this._green,this._blue,this.get_alpha(),this.smooth);
				}
				wx += stepx;
			}
			wy += stepy;
		}
	}
	,createGrid: function(solidTiles,grid) {
		if(grid == null) grid = new com_haxepunk_masks_Grid(this.get_width(),this.get_height(),this._tile.width | 0,this._tile.height | 0);
		var _g1 = 0;
		var _g = this._rows;
		while(_g1 < _g) {
			var y = _g1++;
			var _g3 = 0;
			var _g2 = this._columns;
			while(_g3 < _g2) {
				var x = _g3++;
				if((function($this) {
					var $r;
					var x1 = $this.getTile(x,y);
					$r = HxOverrides.indexOf(solidTiles,x1,0);
					return $r;
				}(this)) != -1) grid.setTile(x,y,true);
			}
		}
		return grid;
	}
	,updateTileRect: function(index) {
		this._tile.x = index % this._setColumns * (this._tile.width + this.tileSpacingWidth);
		this._tile.y = (index / this._setColumns | 0) * (this._tile.height + this.tileSpacingHeight);
	}
	,updateTile: function(column,row) {
		this.setTile(column,row,this._map[row % this._rows][column % this._columns]);
	}
	,get_tileWidth: function() {
		return this._tile.width | 0;
	}
	,get_tileHeight: function() {
		return this._tile.height | 0;
	}
	,tileSpacingWidth: null
	,tileSpacingHeight: null
	,get_tileCount: function() {
		return this._setCount;
	}
	,columns: null
	,get_columns: function() {
		return this._columns;
	}
	,rows: null
	,get_rows: function() {
		return this._rows;
	}
	,opaqueTiles: null
	,get_opaqueTiles: function() {
		return this._opaqueTiles;
	}
	,smooth: null
	,_map: null
	,_columns: null
	,_rows: null
	,_opaqueTiles: null
	,_set: null
	,_atlas: null
	,_setColumns: null
	,_setRows: null
	,_setCount: null
	,_tile: null
	,__class__: com_haxepunk_graphics_Tilemap
	,__properties__: $extend(com_haxepunk_graphics_Canvas.prototype.__properties__,{get_opaqueTiles:"get_opaqueTiles",get_rows:"get_rows",get_columns:"get_columns",get_tileCount:"get_tileCount",get_tileHeight:"get_tileHeight",get_tileWidth:"get_tileWidth"})
});
var com_haxepunk_graphics_atlas_Atlas = function(source) {
	this._data = source;
};
$hxClasses["com.haxepunk.graphics.atlas.Atlas"] = com_haxepunk_graphics_atlas_Atlas;
com_haxepunk_graphics_atlas_Atlas.__name__ = ["com","haxepunk","graphics","atlas","Atlas"];
com_haxepunk_graphics_atlas_Atlas.loadImageAsRegion = function(source) {
	var data = source;
	return data.createRegion(new openfl_geom_Rectangle(0,0,data.width,data.height),null);
};
com_haxepunk_graphics_atlas_Atlas.prototype = {
	get_width: function() {
		return this._data.width;
	}
	,get_height: function() {
		return this._data.height;
	}
	,destroy: function() {
		this._data.destroy();
	}
	,prepareTile: function(rect,x,y,layer,scaleX,scaleY,angle,red,green,blue,alpha,smooth) {
		this._data.prepareTile(rect,x,y,layer,scaleX,scaleY,angle,red,green,blue,alpha,smooth);
	}
	,_data: null
	,__class__: com_haxepunk_graphics_atlas_Atlas
	,__properties__: {get_height:"get_height",get_width:"get_width"}
};
var com_haxepunk_graphics_atlas__$AtlasData_AtlasDataType_$Impl_$ = {};
$hxClasses["com.haxepunk.graphics.atlas._AtlasData.AtlasDataType_Impl_"] = com_haxepunk_graphics_atlas__$AtlasData_AtlasDataType_$Impl_$;
com_haxepunk_graphics_atlas__$AtlasData_AtlasDataType_$Impl_$.__name__ = ["com","haxepunk","graphics","atlas","_AtlasData","AtlasDataType_Impl_"];
com_haxepunk_graphics_atlas__$AtlasData_AtlasDataType_$Impl_$._new = function(data) {
	return data;
};
com_haxepunk_graphics_atlas__$AtlasData_AtlasDataType_$Impl_$.toAtlasData = function(this1) {
	return this1;
};
com_haxepunk_graphics_atlas__$AtlasData_AtlasDataType_$Impl_$.fromString = function(s) {
	var data = com_haxepunk_graphics_atlas_AtlasData.getAtlasDataByName(s,true);
	return data;
};
com_haxepunk_graphics_atlas__$AtlasData_AtlasDataType_$Impl_$.fromBitmapData = function(bd) {
	var data = new com_haxepunk_graphics_atlas_AtlasData(bd);
	return data;
};
com_haxepunk_graphics_atlas__$AtlasData_AtlasDataType_$Impl_$.fromAtlasData = function(data) {
	return data;
};
var com_haxepunk_graphics_atlas_AtlasData = function(bd,name,flags) {
	this.blend = 10;
	this.bitmapData = bd;
	this._name = name;
	if(this._name != null) {
		if(com_haxepunk_graphics_atlas_AtlasData._dataPool.exists(this._name)) throw new js__$Boot_HaxeError("Cannot cache duplicate AtlasData with the name \"" + this._name + "\""); else com_haxepunk_graphics_atlas_AtlasData._dataPool.set(this._name,this);
	}
	this.width = bd.width;
	this.height = bd.height;
};
$hxClasses["com.haxepunk.graphics.atlas.AtlasData"] = com_haxepunk_graphics_atlas_AtlasData;
com_haxepunk_graphics_atlas_AtlasData.__name__ = ["com","haxepunk","graphics","atlas","AtlasData"];
com_haxepunk_graphics_atlas_AtlasData.getAtlasDataByName = function(name,create) {
	if(create == null) create = false;
	var data = null;
	if(com_haxepunk_graphics_atlas_AtlasData._dataPool.exists(name)) data = com_haxepunk_graphics_atlas_AtlasData._dataPool.get(name); else if(create) {
		var bitmap = com_haxepunk_HXP.getBitmap(name);
		if(bitmap != null) data = new com_haxepunk_graphics_atlas_AtlasData(bitmap,name);
	}
	return data;
};
com_haxepunk_graphics_atlas_AtlasData.startScene = function(scene) {
	com_haxepunk_graphics_atlas_AtlasData._scene = scene;
};
com_haxepunk_graphics_atlas_AtlasData.destroyAll = function() {
	var $it0 = com_haxepunk_graphics_atlas_AtlasData._dataPool.iterator();
	while( $it0.hasNext() ) {
		var atlas = $it0.next();
		atlas.destroy();
	}
};
com_haxepunk_graphics_atlas_AtlasData.prototype = {
	width: null
	,height: null
	,bitmapData: null
	,toString: function() {
		if(this._name == null) return "AtlasData"; else return this._name;
	}
	,reload: function(bd) {
		if(this._name != null) {
			this.bitmapData = bd;
			return com_haxepunk_HXP.overwriteBitmapCache(this._name,bd);
		}
		return false;
	}
	,destroy: function() {
		if(this._name != null) {
			com_haxepunk_HXP.removeBitmap(this._name);
			com_haxepunk_graphics_atlas_AtlasData._dataPool.remove(this._name);
		}
	}
	,createRegion: function(rect,center) {
		return new com_haxepunk_graphics_atlas_AtlasRegion(this,rect.clone());
	}
	,prepareTileMatrix: function(rect,layer,tx,ty,a,b,c,d,red,green,blue,alpha,smooth) {
		if(smooth == null) smooth = com_haxepunk_graphics_atlas_Atlas.smooth;
		var command = com_haxepunk_graphics_atlas_AtlasData._scene.sprite.getDrawCommand(this.bitmapData,smooth,this.blend);
		command.addRect(rect.x,rect.y,rect.width,rect.height,a,b,c,d,tx,ty,red,green,blue,alpha);
	}
	,prepareTile: function(rect,tx,ty,layer,scaleX,scaleY,angle,red,green,blue,alpha,smooth) {
		if(smooth == null) smooth = com_haxepunk_graphics_atlas_Atlas.smooth;
		var a;
		var b;
		var c;
		var d;
		if(angle == 0) {
			a = scaleX;
			b = 0;
			c = 0;
			d = scaleY;
		} else {
			var cos = Math.cos(-angle * (Math.PI / -180));
			var sin = Math.sin(-angle * (Math.PI / -180));
			a = cos * scaleX;
			b = -sin * scaleY;
			c = sin * scaleX;
			d = cos * scaleY;
		}
		var command = com_haxepunk_graphics_atlas_AtlasData._scene.sprite.getDrawCommand(this.bitmapData,smooth,this.blend);
		command.addRect(rect.x,rect.y,rect.width,rect.height,a,b,c,d,tx,ty,red,green,blue,alpha);
	}
	,prepareTriangle: function(tx1,ty1,uvx1,uvy1,tx2,ty2,uvx2,uvy2,tx3,ty3,uvx3,uvy3,red,green,blue,alpha,smooth) {
		var command = com_haxepunk_graphics_atlas_AtlasData._scene.sprite.getDrawCommand(this.bitmapData,smooth,this.blend);
		command.addTriangle(tx1,ty1,uvx1,uvy1,tx2,ty2,uvx2,uvy2,tx3,ty3,uvx3,uvy3,red,alpha,green,blue);
	}
	,blend: null
	,_name: null
	,__class__: com_haxepunk_graphics_atlas_AtlasData
};
var com_haxepunk_graphics_atlas_AtlasRegion = function(parent,rect) {
	this._parent = parent;
	this._rect = rect;
	this.rotated = false;
};
$hxClasses["com.haxepunk.graphics.atlas.AtlasRegion"] = com_haxepunk_graphics_atlas_AtlasRegion;
com_haxepunk_graphics_atlas_AtlasRegion.__name__ = ["com","haxepunk","graphics","atlas","AtlasRegion"];
com_haxepunk_graphics_atlas_AtlasRegion.prototype = {
	rotated: null
	,clip: function(clipRect,center) {
		var clipRectCopy = new openfl_geom_Rectangle(clipRect.x,clipRect.y,clipRect.width,clipRect.height);
		if(clipRectCopy.x + clipRectCopy.width > this._rect.width) clipRectCopy.width = this._rect.width - clipRectCopy.x;
		if(clipRectCopy.y + clipRectCopy.height > this._rect.height) clipRectCopy.height = this._rect.height - clipRectCopy.y;
		if(clipRectCopy.width < 0) clipRectCopy.width = 0;
		if(clipRectCopy.height < 0) clipRectCopy.height = 0;
		clipRectCopy.x += this._rect.x;
		clipRectCopy.y += this._rect.y;
		return new com_haxepunk_graphics_atlas_AtlasRegion(this._parent,clipRectCopy.clone());
	}
	,draw: function(x,y,layer,scaleX,scaleY,angle,red,green,blue,alpha,smooth) {
		if(alpha == null) alpha = 1;
		if(blue == null) blue = 1;
		if(green == null) green = 1;
		if(red == null) red = 1;
		if(angle == null) angle = 0;
		if(scaleY == null) scaleY = 1;
		if(scaleX == null) scaleX = 1;
		if(smooth == null) smooth = com_haxepunk_graphics_atlas_Atlas.smooth;
		if(this.rotated) angle = angle + 90;
		this._parent.prepareTile(this._rect,x,y,layer,scaleX,scaleY,angle,red,green,blue,alpha,smooth);
	}
	,drawMatrix: function(tx,ty,a,b,c,d,layer,red,green,blue,alpha,smooth) {
		if(alpha == null) alpha = 1;
		if(blue == null) blue = 1;
		if(green == null) green = 1;
		if(red == null) red = 1;
		if(smooth == null) smooth = com_haxepunk_graphics_atlas_Atlas.smooth;
		if(this.rotated) {
			var matrix = new openfl_geom_Matrix(a,b,c,d,tx,ty);
			matrix.rotate(90 * (Math.PI / -180));
			this._parent.prepareTileMatrix(this._rect,layer,matrix.tx,matrix.ty,matrix.a,matrix.b,matrix.c,matrix.d,red,green,blue,alpha,smooth);
		} else this._parent.prepareTileMatrix(this._rect,layer,tx,ty,a,b,c,d,red,green,blue,alpha,smooth);
	}
	,destroy: function() {
		if(this._parent != null) {
			this._parent.destroy();
			this._parent = null;
		}
	}
	,toString: function() {
		return "[AtlasRegion " + Std.string(this._rect) + "]";
	}
	,get_x: function() {
		return this._rect.x;
	}
	,get_y: function() {
		return this._rect.y;
	}
	,get_width: function() {
		return this._rect.width;
	}
	,get_height: function() {
		return this._rect.height;
	}
	,_rect: null
	,_parent: null
	,__class__: com_haxepunk_graphics_atlas_AtlasRegion
	,__properties__: {get_height:"get_height",get_width:"get_width",get_y:"get_y",get_x:"get_x"}
};
var com_haxepunk_graphics_atlas__$BlendMode_BlendMode_$Impl_$ = {};
$hxClasses["com.haxepunk.graphics.atlas._BlendMode.BlendMode_Impl_"] = com_haxepunk_graphics_atlas__$BlendMode_BlendMode_$Impl_$;
com_haxepunk_graphics_atlas__$BlendMode_BlendMode_$Impl_$.__name__ = ["com","haxepunk","graphics","atlas","_BlendMode","BlendMode_Impl_"];
com_haxepunk_graphics_atlas__$BlendMode_BlendMode_$Impl_$.__properties__ = {get_tilesheetBlendFlag:"get_tilesheetBlendFlag"}
com_haxepunk_graphics_atlas__$BlendMode_BlendMode_$Impl_$.get_tilesheetBlendFlag = function(this1) {
	switch(this1) {
	case 0:
		return 65536;
	default:
		return 0;
	}
};
var com_haxepunk_graphics_atlas__$DrawCommand_RenderData = function() {
	this.alpha = 0;
	this.green = 0;
	this.blue = 0;
	this.red = 0;
	this.ty3 = 0;
	this.tx3 = 0;
	this.ry3 = 0;
	this.rx3 = 0;
	this.ty2 = 0;
	this.tx2 = 0;
	this.ry2 = 0;
	this.rx2 = 0;
	this.ty1 = 0;
	this.tx1 = 0;
	this.ry1 = 0;
	this.rx1 = 0;
};
$hxClasses["com.haxepunk.graphics.atlas._DrawCommand.RenderData"] = com_haxepunk_graphics_atlas__$DrawCommand_RenderData;
com_haxepunk_graphics_atlas__$DrawCommand_RenderData.__name__ = ["com","haxepunk","graphics","atlas","_DrawCommand","RenderData"];
com_haxepunk_graphics_atlas__$DrawCommand_RenderData.prototype = {
	rx1: null
	,ry1: null
	,tx1: null
	,ty1: null
	,rx2: null
	,ry2: null
	,tx2: null
	,ty2: null
	,rx3: null
	,ry3: null
	,tx3: null
	,ty3: null
	,red: null
	,blue: null
	,green: null
	,alpha: null
	,_next: null
	,__class__: com_haxepunk_graphics_atlas__$DrawCommand_RenderData
};
var com_haxepunk_graphics_atlas_DrawCommand = function() {
	this.dataCount = 0;
	this.blend = 10;
	this.smooth = false;
};
$hxClasses["com.haxepunk.graphics.atlas.DrawCommand"] = com_haxepunk_graphics_atlas_DrawCommand;
com_haxepunk_graphics_atlas_DrawCommand.__name__ = ["com","haxepunk","graphics","atlas","DrawCommand"];
com_haxepunk_graphics_atlas_DrawCommand.create = function(texture,smooth,blend) {
	var command;
	if(com_haxepunk_graphics_atlas_DrawCommand._pool != null) {
		command = com_haxepunk_graphics_atlas_DrawCommand._pool;
		com_haxepunk_graphics_atlas_DrawCommand._pool = com_haxepunk_graphics_atlas_DrawCommand._pool._next;
		command._next = null;
	} else command = new com_haxepunk_graphics_atlas_DrawCommand();
	command.texture = texture;
	command.smooth = smooth;
	command.blend = blend;
	return command;
};
com_haxepunk_graphics_atlas_DrawCommand.matrixTransformX = function(m,px,py) {
	return px * m.a + py * m.c + m.tx;
};
com_haxepunk_graphics_atlas_DrawCommand.matrixTransformY = function(m,px,py) {
	return px * m.b + py * m.d + m.ty;
};
com_haxepunk_graphics_atlas_DrawCommand.prototype = {
	texture: null
	,smooth: null
	,blend: null
	,addTriangle: function(tx1,ty1,uvx1,uvy1,tx2,ty2,uvx2,uvy2,tx3,ty3,uvx3,uvy3,red,green,blue,alpha) {
		var data = this.getData();
		data.tx1 = tx1;
		data.ty1 = ty1;
		data.rx1 = uvx1;
		data.ry1 = uvy1;
		data.tx2 = tx2;
		data.ty2 = ty2;
		data.rx2 = uvx2;
		data.ry2 = uvy2;
		data.tx3 = tx3;
		data.ty3 = ty3;
		data.rx3 = uvx3;
		data.ry3 = uvy3;
		data.red = red;
		data.green = green;
		data.blue = blue;
		data.alpha = alpha;
		if(this.data == null) this.data = data; else this._lastData._next = data;
		this._lastData = data;
		++this.dataCount;
	}
	,addRect: function(rx,ry,rw,rh,a,b,c,d,tx,ty,red,green,blue,alpha) {
		var uvx1;
		var uvy1;
		var uvx2;
		var uvy2;
		if(this.texture == null) {
			uvx1 = uvy1 = 0;
			uvx2 = rw;
			uvy2 = rh;
		} else {
			uvx1 = rx / this.texture.width;
			uvy1 = ry / this.texture.height;
			uvx2 = (rx + rw) / this.texture.width;
			uvy2 = (ry + rh) / this.texture.height;
		}
		var matrix = com_haxepunk_HXP.matrix;
		matrix.setTo(a,b,c,d,tx,ty);
		this.addTriangle(0 * matrix.a + 0 * matrix.c + matrix.tx,0 * matrix.b + 0 * matrix.d + matrix.ty,uvx1,uvy1,rw * matrix.a + 0 * matrix.c + matrix.tx,rw * matrix.b + 0 * matrix.d + matrix.ty,uvx2,uvy1,0 * matrix.a + rh * matrix.c + matrix.tx,0 * matrix.b + rh * matrix.d + matrix.ty,uvx1,uvy2,red,green,blue,alpha);
		this.addTriangle(0 * matrix.a + rh * matrix.c + matrix.tx,0 * matrix.b + rh * matrix.d + matrix.ty,uvx1,uvy2,rw * matrix.a + 0 * matrix.c + matrix.tx,rw * matrix.b + 0 * matrix.d + matrix.ty,uvx2,uvy1,rw * matrix.a + rh * matrix.c + matrix.tx,rw * matrix.b + rh * matrix.d + matrix.ty,uvx2,uvy2,red,green,blue,alpha);
	}
	,recycle: function() {
		this.dataCount = 0;
		if(this.data != null) {
			this._lastData._next = com_haxepunk_graphics_atlas_DrawCommand._dataPool;
			com_haxepunk_graphics_atlas_DrawCommand._dataPool = this.data;
		}
		this.data = this._lastData = null;
		var command = this;
		while(command._next != null) {
			command = command._next;
			command.dataCount = 0;
			if(command.data != null) {
				command._lastData._next = com_haxepunk_graphics_atlas_DrawCommand._dataPool;
				com_haxepunk_graphics_atlas_DrawCommand._dataPool = command.data;
			}
			command.data = command._lastData = null;
		}
		command._next = com_haxepunk_graphics_atlas_DrawCommand._pool;
		com_haxepunk_graphics_atlas_DrawCommand._pool = this;
	}
	,getData: function() {
		var data;
		if(com_haxepunk_graphics_atlas_DrawCommand._dataPool != null) {
			data = com_haxepunk_graphics_atlas_DrawCommand._dataPool;
			com_haxepunk_graphics_atlas_DrawCommand._dataPool = com_haxepunk_graphics_atlas_DrawCommand._dataPool._next;
			data._next = null;
		} else data = new com_haxepunk_graphics_atlas__$DrawCommand_RenderData();
		return data;
	}
	,addData: function(data) {
		if(this.data == null) this.data = data; else this._lastData._next = data;
		this._lastData = data;
		++this.dataCount;
	}
	,recycleData: function() {
		this.dataCount = 0;
		if(this.data != null) {
			this._lastData._next = com_haxepunk_graphics_atlas_DrawCommand._dataPool;
			com_haxepunk_graphics_atlas_DrawCommand._dataPool = this.data;
		}
		this.data = this._lastData = null;
	}
	,data: null
	,dataCount: null
	,_lastData: null
	,_next: null
	,__class__: com_haxepunk_graphics_atlas_DrawCommand
};
var com_haxepunk_graphics_atlas__$HardwareRenderer_Shader = function(vertexSource,fragmentSource) {
	this.bufferChunkSize = 0;
	var vertexShader = lime_graphics_opengl_GL.context.createShader(35633);
	lime_graphics_opengl_GL.context.shaderSource(vertexShader,vertexSource);
	lime_graphics_opengl_GL.context.compileShader(vertexShader);
	if(lime_graphics_opengl_GL.context.getShaderParameter(vertexShader,35713) == 0) throw new js__$Boot_HaxeError("Error compiling vertex shader: " + lime_graphics_opengl_GL.context.getShaderInfoLog(vertexShader));
	var fragmentShader = lime_graphics_opengl_GL.context.createShader(35632);
	lime_graphics_opengl_GL.context.shaderSource(fragmentShader,fragmentSource);
	lime_graphics_opengl_GL.context.compileShader(fragmentShader);
	if(lime_graphics_opengl_GL.context.getShaderParameter(fragmentShader,35713) == 0) throw new js__$Boot_HaxeError("Error compiling fragment shader: " + lime_graphics_opengl_GL.context.getShaderInfoLog(fragmentShader));
	this.glProgram = lime_graphics_opengl_GL.context.createProgram();
	lime_graphics_opengl_GL.context.attachShader(this.glProgram,fragmentShader);
	lime_graphics_opengl_GL.context.attachShader(this.glProgram,vertexShader);
	lime_graphics_opengl_GL.context.linkProgram(this.glProgram);
	if(lime_graphics_opengl_GL.context.getProgramParameter(this.glProgram,35714) == 0) throw new js__$Boot_HaxeError("Unable to initialize the shader program.");
};
$hxClasses["com.haxepunk.graphics.atlas._HardwareRenderer.Shader"] = com_haxepunk_graphics_atlas__$HardwareRenderer_Shader;
com_haxepunk_graphics_atlas__$HardwareRenderer_Shader.__name__ = ["com","haxepunk","graphics","atlas","_HardwareRenderer","Shader"];
com_haxepunk_graphics_atlas__$HardwareRenderer_Shader.prototype = {
	glProgram: null
	,bufferChunkSize: null
	,bind: function() {
		lime_graphics_opengl_GL.useProgram(this.glProgram);
	}
	,unbind: function() {
		lime_graphics_opengl_GL.__currentProgram = null;
		lime_graphics_opengl_GL.context.useProgram(null);
	}
	,attributeIndex: function(name) {
		return lime_graphics_opengl_GL.context.getAttribLocation(this.glProgram,name);
	}
	,uniformIndex: function(name) {
		return lime_graphics_opengl_GL.context.getUniformLocation(this.glProgram,name);
	}
	,__class__: com_haxepunk_graphics_atlas__$HardwareRenderer_Shader
};
var com_haxepunk_graphics_atlas__$HardwareRenderer_TextureShader = function() {
	com_haxepunk_graphics_atlas__$HardwareRenderer_Shader.call(this,"// HaxePunk HardwareRenderer texture vertex shader\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\nattribute vec4 aPosition;\nattribute vec4 aColor;\nattribute vec2 aTexCoord;\nvarying vec2 vTexCoord;\nvarying vec4 vColor;\nuniform mat4 uMatrix;\n\nvoid main(void) {\n\tvColor = aColor;\n\tvTexCoord = aTexCoord;\n\tgl_Position = uMatrix * aPosition;\n}","// HaxePunk HardwareRenderer texture fragment shader\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\nvarying vec4 vColor;\nvarying vec2 vTexCoord;\nuniform sampler2D uImage0;\n\nvoid main(void) {\n\tvec4 color = texture2D(uImage0, vTexCoord);\n\tif (color.a == 0.0) {\n\t\tgl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\n\t} else {\n\t\tgl_FragColor = vec4(color.rgb / color.a, color.a) * vColor;\n\t}\n}");
	this.bufferChunkSize = 8;
};
$hxClasses["com.haxepunk.graphics.atlas._HardwareRenderer.TextureShader"] = com_haxepunk_graphics_atlas__$HardwareRenderer_TextureShader;
com_haxepunk_graphics_atlas__$HardwareRenderer_TextureShader.__name__ = ["com","haxepunk","graphics","atlas","_HardwareRenderer","TextureShader"];
com_haxepunk_graphics_atlas__$HardwareRenderer_TextureShader.__super__ = com_haxepunk_graphics_atlas__$HardwareRenderer_Shader;
com_haxepunk_graphics_atlas__$HardwareRenderer_TextureShader.prototype = $extend(com_haxepunk_graphics_atlas__$HardwareRenderer_Shader.prototype,{
	bind: function() {
		com_haxepunk_graphics_atlas__$HardwareRenderer_Shader.prototype.bind.call(this);
		lime_graphics_opengl_GL.enableVertexAttribArray(lime_graphics_opengl_GL.context.getAttribLocation(this.glProgram,"aPosition"));
		lime_graphics_opengl_GL.enableVertexAttribArray(lime_graphics_opengl_GL.context.getAttribLocation(this.glProgram,"aTexCoord"));
		lime_graphics_opengl_GL.enableVertexAttribArray(lime_graphics_opengl_GL.context.getAttribLocation(this.glProgram,"aColor"));
	}
	,unbind: function() {
		com_haxepunk_graphics_atlas__$HardwareRenderer_Shader.prototype.unbind.call(this);
		lime_graphics_opengl_GL.disableVertexAttribArray(lime_graphics_opengl_GL.context.getAttribLocation(this.glProgram,"aPosition"));
		lime_graphics_opengl_GL.disableVertexAttribArray(lime_graphics_opengl_GL.context.getAttribLocation(this.glProgram,"aTexCoord"));
		lime_graphics_opengl_GL.disableVertexAttribArray(lime_graphics_opengl_GL.context.getAttribLocation(this.glProgram,"aColor"));
	}
	,__class__: com_haxepunk_graphics_atlas__$HardwareRenderer_TextureShader
});
var com_haxepunk_graphics_atlas__$HardwareRenderer_ColorShader = function() {
	com_haxepunk_graphics_atlas__$HardwareRenderer_Shader.call(this,"// HaxePunk HardwareRenderer color vertex shader\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\nattribute vec4 aPosition;\nattribute vec4 aColor;\nvarying vec4 vColor;\nuniform mat4 uMatrix;\n\nvoid main(void) {\n\tvColor = aColor;\n\tgl_Position = uMatrix * aPosition;\n}","// HaxePunk HardwareRenderer color fragment shader\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\nvarying vec4 vColor;\n\nvoid main(void) {\n\tgl_FragColor = clamp(vColor, 0.0, 1.0);\n\t//gl_FragColor = vec4(1.0, 1.0, 1.0, 1.0);\n}");
	this.bufferChunkSize = 6;
};
$hxClasses["com.haxepunk.graphics.atlas._HardwareRenderer.ColorShader"] = com_haxepunk_graphics_atlas__$HardwareRenderer_ColorShader;
com_haxepunk_graphics_atlas__$HardwareRenderer_ColorShader.__name__ = ["com","haxepunk","graphics","atlas","_HardwareRenderer","ColorShader"];
com_haxepunk_graphics_atlas__$HardwareRenderer_ColorShader.__super__ = com_haxepunk_graphics_atlas__$HardwareRenderer_Shader;
com_haxepunk_graphics_atlas__$HardwareRenderer_ColorShader.prototype = $extend(com_haxepunk_graphics_atlas__$HardwareRenderer_Shader.prototype,{
	bind: function() {
		com_haxepunk_graphics_atlas__$HardwareRenderer_Shader.prototype.bind.call(this);
		lime_graphics_opengl_GL.enableVertexAttribArray(lime_graphics_opengl_GL.context.getAttribLocation(this.glProgram,"aPosition"));
		lime_graphics_opengl_GL.enableVertexAttribArray(lime_graphics_opengl_GL.context.getAttribLocation(this.glProgram,"aColor"));
	}
	,unbind: function() {
		com_haxepunk_graphics_atlas__$HardwareRenderer_Shader.prototype.unbind.call(this);
		lime_graphics_opengl_GL.disableVertexAttribArray(lime_graphics_opengl_GL.context.getAttribLocation(this.glProgram,"aPosition"));
		lime_graphics_opengl_GL.disableVertexAttribArray(lime_graphics_opengl_GL.context.getAttribLocation(this.glProgram,"aColor"));
	}
	,__class__: com_haxepunk_graphics_atlas__$HardwareRenderer_ColorShader
});
var com_haxepunk_graphics_atlas_HardwareRenderer = function() { };
$hxClasses["com.haxepunk.graphics.atlas.HardwareRenderer"] = com_haxepunk_graphics_atlas_HardwareRenderer;
com_haxepunk_graphics_atlas_HardwareRenderer.__name__ = ["com","haxepunk","graphics","atlas","HardwareRenderer"];
com_haxepunk_graphics_atlas_HardwareRenderer.resize = function(length,minChunks,chunkSize) {
	return Std["int"](Math.max(length * 2 / chunkSize | 0,minChunks) * chunkSize);
};
com_haxepunk_graphics_atlas_HardwareRenderer.render = function(drawCommand,scene,rect) {
	if(com_haxepunk_graphics_atlas_HardwareRenderer.colorShader == null) com_haxepunk_graphics_atlas_HardwareRenderer.colorShader = new com_haxepunk_graphics_atlas__$HardwareRenderer_ColorShader();
	if(com_haxepunk_graphics_atlas_HardwareRenderer.textureShader == null) com_haxepunk_graphics_atlas_HardwareRenderer.textureShader = new com_haxepunk_graphics_atlas__$HardwareRenderer_TextureShader();
	if(drawCommand != null && drawCommand.dataCount > 0) {
		var shader;
		if(drawCommand.texture == null) shader = com_haxepunk_graphics_atlas_HardwareRenderer.colorShader; else shader = com_haxepunk_graphics_atlas_HardwareRenderer.textureShader;
		shader.bind();
		var bufferChunkSize = shader.bufferChunkSize;
		var blend = drawCommand.blend;
		var smooth = drawCommand.smooth;
		var tx;
		var ty;
		var rx;
		var ry;
		var rw;
		var rh;
		var a;
		var b;
		var c;
		var d;
		var uvx = 0;
		var uvy = 0;
		var uvx2 = 0;
		var uvy2 = 0;
		var red;
		var green;
		var blue;
		var alpha;
		if(com_haxepunk_graphics_atlas_HardwareRenderer.glBuffer == null) com_haxepunk_graphics_atlas_HardwareRenderer.glBuffer = lime_graphics_opengl_GL.context.createBuffer();
		var bufferLength;
		if(com_haxepunk_graphics_atlas_HardwareRenderer.buffer == null) bufferLength = 0; else bufferLength = com_haxepunk_graphics_atlas_HardwareRenderer.buffer.length;
		var items = drawCommand.dataCount;
		if(bufferLength < items * bufferChunkSize * 3) {
			var elements = com_haxepunk_graphics_atlas_HardwareRenderer.resize(bufferLength,items,bufferChunkSize * 3);
			var this1;
			if(elements != null) this1 = new Float32Array(elements); else this1 = null;
			com_haxepunk_graphics_atlas_HardwareRenderer.buffer = this1;
			lime_graphics_opengl_GL.context.bindBuffer(34962,com_haxepunk_graphics_atlas_HardwareRenderer.glBuffer);
			lime_graphics_opengl_GL.context.bufferData(34962,com_haxepunk_graphics_atlas_HardwareRenderer.buffer,35048);
		}
		var bufferPos = 0;
		var texture = drawCommand.texture;
		var data = drawCommand.data;
		var x0;
		var y0;
		var dataCount = 0;
		while(data != null) {
			var idx = bufferPos++;
			com_haxepunk_graphics_atlas_HardwareRenderer.buffer[idx] = data.tx1;
			var idx1 = bufferPos++;
			com_haxepunk_graphics_atlas_HardwareRenderer.buffer[idx1] = data.ty1;
			var idx2 = bufferPos++;
			com_haxepunk_graphics_atlas_HardwareRenderer.buffer[idx2] = data.red;
			var idx3 = bufferPos++;
			com_haxepunk_graphics_atlas_HardwareRenderer.buffer[idx3] = data.green;
			var idx4 = bufferPos++;
			com_haxepunk_graphics_atlas_HardwareRenderer.buffer[idx4] = data.blue;
			var idx5 = bufferPos++;
			com_haxepunk_graphics_atlas_HardwareRenderer.buffer[idx5] = data.alpha;
			if(texture != null) {
				var idx6 = bufferPos++;
				com_haxepunk_graphics_atlas_HardwareRenderer.buffer[idx6] = data.rx1;
				var idx7 = bufferPos++;
				com_haxepunk_graphics_atlas_HardwareRenderer.buffer[idx7] = data.ry1;
			}
			var idx8 = bufferPos++;
			com_haxepunk_graphics_atlas_HardwareRenderer.buffer[idx8] = data.tx2;
			var idx9 = bufferPos++;
			com_haxepunk_graphics_atlas_HardwareRenderer.buffer[idx9] = data.ty2;
			var idx10 = bufferPos++;
			com_haxepunk_graphics_atlas_HardwareRenderer.buffer[idx10] = data.red;
			var idx11 = bufferPos++;
			com_haxepunk_graphics_atlas_HardwareRenderer.buffer[idx11] = data.green;
			var idx12 = bufferPos++;
			com_haxepunk_graphics_atlas_HardwareRenderer.buffer[idx12] = data.blue;
			var idx13 = bufferPos++;
			com_haxepunk_graphics_atlas_HardwareRenderer.buffer[idx13] = data.alpha;
			if(texture != null) {
				var idx14 = bufferPos++;
				com_haxepunk_graphics_atlas_HardwareRenderer.buffer[idx14] = data.rx2;
				var idx15 = bufferPos++;
				com_haxepunk_graphics_atlas_HardwareRenderer.buffer[idx15] = data.ry2;
			}
			var idx16 = bufferPos++;
			com_haxepunk_graphics_atlas_HardwareRenderer.buffer[idx16] = data.tx3;
			var idx17 = bufferPos++;
			com_haxepunk_graphics_atlas_HardwareRenderer.buffer[idx17] = data.ty3;
			var idx18 = bufferPos++;
			com_haxepunk_graphics_atlas_HardwareRenderer.buffer[idx18] = data.red;
			var idx19 = bufferPos++;
			com_haxepunk_graphics_atlas_HardwareRenderer.buffer[idx19] = data.green;
			var idx20 = bufferPos++;
			com_haxepunk_graphics_atlas_HardwareRenderer.buffer[idx20] = data.blue;
			var idx21 = bufferPos++;
			com_haxepunk_graphics_atlas_HardwareRenderer.buffer[idx21] = data.alpha;
			if(texture != null) {
				var idx22 = bufferPos++;
				com_haxepunk_graphics_atlas_HardwareRenderer.buffer[idx22] = data.rx3;
				var idx23 = bufferPos++;
				com_haxepunk_graphics_atlas_HardwareRenderer.buffer[idx23] = data.ry3;
			}
			data = data._next;
			dataCount++;
		}
		var x01 = com_haxepunk_HXP.screen.x + rect.x;
		var y01 = com_haxepunk_HXP.screen.y + rect.y;
		var transformation = com_haxepunk_graphics_atlas_HardwareRenderer.ortho(-x01,-x01 + com_haxepunk_HXP.stage.stageWidth,-y01 + com_haxepunk_HXP.stage.stageHeight,-y01,1000,-1000);
		lime_graphics_opengl_GL.uniformMatrix4fv(lime_graphics_opengl_GL.context.getUniformLocation(shader.glProgram,"uMatrix"),false,transformation);
		if(texture != null) {
			var renderer = com_haxepunk_HXP.stage.__renderer;
			var renderSession = renderer.renderSession;
			lime_graphics_opengl_GL.bindTexture(3553,texture.getTexture(renderSession.gl));
			if(smooth) {
				lime_graphics_opengl_GL.context.texParameteri(3553,10241,9729);
				lime_graphics_opengl_GL.context.texParameteri(3553,10240,9729);
			} else {
				lime_graphics_opengl_GL.context.texParameteri(3553,10241,9728);
				lime_graphics_opengl_GL.context.texParameteri(3553,10240,9728);
			}
		}
		lime_graphics_opengl_GL.context.bindBuffer(34962,com_haxepunk_graphics_atlas_HardwareRenderer.glBuffer);
		lime_graphics_opengl_GL.context.bufferSubData(34962,0,com_haxepunk_graphics_atlas_HardwareRenderer.buffer);
		var _g = drawCommand.blend;
		switch(_g) {
		case 0:
			lime_graphics_opengl_GL.context.blendEquation(32774);
			lime_graphics_opengl_GL.context.blendFunc(1,1);
			break;
		case 9:
			lime_graphics_opengl_GL.context.blendEquation(32774);
			lime_graphics_opengl_GL.context.blendFunc(774,771);
			break;
		case 12:
			lime_graphics_opengl_GL.context.blendEquation(32774);
			lime_graphics_opengl_GL.context.blendFunc(1,769);
			break;
		case 14:
			lime_graphics_opengl_GL.context.blendEquation(32779);
			lime_graphics_opengl_GL.context.blendFunc(1,1);
			break;
		default:
			lime_graphics_opengl_GL.context.blendEquation(32774);
			lime_graphics_opengl_GL.context.blendFunc(770,771);
		}
		var stride = bufferChunkSize * 4;
		lime_graphics_opengl_GL.vertexAttribPointer(lime_graphics_opengl_GL.context.getAttribLocation(shader.glProgram,"aPosition"),2,5126,false,stride,0);
		lime_graphics_opengl_GL.vertexAttribPointer(lime_graphics_opengl_GL.context.getAttribLocation(shader.glProgram,"aColor"),4,5126,false,stride,8);
		if(texture != null) lime_graphics_opengl_GL.vertexAttribPointer(lime_graphics_opengl_GL.context.getAttribLocation(shader.glProgram,"aTexCoord"),2,5126,false,stride,24);
		lime_graphics_opengl_GL.context.scissor(x01 | 0,com_haxepunk_HXP.stage.stageHeight - y01 - rect.height | 0,rect.width | 0,rect.height | 0);
		lime_graphics_opengl_GL.context.enable(3089);
		lime_graphics_opengl_GL.context.drawArrays(4,0,items * 3);
		lime_graphics_opengl_GL.context.disable(3089);
		lime_graphics_opengl_GL.context.bindBuffer(34962,null);
		shader.unbind();
	}
	com_haxepunk_graphics_atlas_HardwareRenderer.checkForGLErrors();
};
com_haxepunk_graphics_atlas_HardwareRenderer.checkForGLErrors = function() {
	var error = lime_graphics_opengl_GL.context.getError();
	if(error != 0) haxe_Log.trace("GL Error: " + error,{ fileName : "HardwareRenderer.hx", lineNumber : 381, className : "com.haxepunk.graphics.atlas.HardwareRenderer", methodName : "checkForGLErrors"});
};
com_haxepunk_graphics_atlas_HardwareRenderer.ortho = function(x0,x1,y0,y1,zNear,zFar) {
	var sx = 1.0 / (x1 - x0);
	var sy = 1.0 / (y1 - y0);
	var sz = 1.0 / (zFar - zNear);
	var _data = com_haxepunk_graphics_atlas_HardwareRenderer._f32;
	_data[0] = 2.0 * sx;
	_data[1] = 0;
	_data[2] = 0;
	_data[3] = 0;
	_data[4] = 0;
	_data[5] = 2.0 * sy;
	_data[6] = 0;
	_data[7] = 0;
	_data[8] = 0;
	_data[9] = 0;
	_data[10] = -2. * sz;
	_data[11] = 0;
	_data[12] = -(x0 + x1) * sx;
	_data[13] = -(y0 + y1) * sy;
	_data[14] = -(zNear + zFar) * sz;
	_data[15] = 1;
	return com_haxepunk_graphics_atlas_HardwareRenderer._f32;
};
com_haxepunk_graphics_atlas_HardwareRenderer.startFrame = function(scene) {
};
com_haxepunk_graphics_atlas_HardwareRenderer.endFrame = function(scene) {
};
var com_haxepunk_graphics_atlas_NullRenderer = function() { };
$hxClasses["com.haxepunk.graphics.atlas.NullRenderer"] = com_haxepunk_graphics_atlas_NullRenderer;
com_haxepunk_graphics_atlas_NullRenderer.__name__ = ["com","haxepunk","graphics","atlas","NullRenderer"];
com_haxepunk_graphics_atlas_NullRenderer.render = function(drawCommand,scene,rect) {
	throw new js__$Boot_HaxeError("hardware rendering not supported on this platform");
};
com_haxepunk_graphics_atlas_NullRenderer.startFrame = function(scene) {
};
com_haxepunk_graphics_atlas_NullRenderer.endFrame = function(scene) {
};
var com_haxepunk_graphics_atlas_SceneSprite = function(scene) {
	openfl_display_Sprite.call(this);
	this.scene = scene;
	var oglView = new openfl_display_OpenGLView();
	this.addChild(oglView);
	oglView.set_render($bind(this,this.renderScene));
};
$hxClasses["com.haxepunk.graphics.atlas.SceneSprite"] = com_haxepunk_graphics_atlas_SceneSprite;
com_haxepunk_graphics_atlas_SceneSprite.__name__ = ["com","haxepunk","graphics","atlas","SceneSprite"];
com_haxepunk_graphics_atlas_SceneSprite.__super__ = openfl_display_Sprite;
com_haxepunk_graphics_atlas_SceneSprite.prototype = $extend(openfl_display_Sprite.prototype,{
	startFrame: function() {
		if(this.draw != null) this.draw.recycle();
		this.draw = this.last = null;
		com_haxepunk_graphics_atlas_HardwareRenderer.startFrame(this.scene);
		if(this.scene.alpha > 0) {
			var command = this.getDrawCommand(null,false,10);
			var sceneColor;
			if(this.scene.color == null) sceneColor = com_haxepunk_HXP.stage.get_color(); else sceneColor = this.scene.color;
			var red = (sceneColor >> 16 & 255) / 255;
			var green = (sceneColor >> 8 & 255) / 255;
			var blue = (sceneColor & 255) / 255;
			var w = com_haxepunk_HXP.width * com_haxepunk_HXP.screen.fullScaleX;
			var h = com_haxepunk_HXP.height * com_haxepunk_HXP.screen.fullScaleY;
			command.addTriangle(0,0,0,0,w,0,0,0,0,h,0,0,red,green,blue,this.scene.alpha);
			command.addTriangle(0,h,0,0,w,0,0,0,w,h,0,0,red,green,blue,this.scene.alpha);
		}
	}
	,endFrame: function() {
		com_haxepunk_graphics_atlas_HardwareRenderer.endFrame(this.scene);
	}
	,getDrawCommand: function(texture,smooth,blend) {
		if(this.last != null && this.last.texture == texture && this.last.smooth == smooth && this.last.blend == blend) return this.last;
		var command = com_haxepunk_graphics_atlas_DrawCommand.create(texture,smooth,blend);
		if(this.last == null) this.draw = this.last = command; else {
			this.last._next = command;
			this.last = command;
		}
		return command;
	}
	,renderScene: function(rect) {
		if(this.scene._drawn && this.scene.visible) {
			var currentDraw = this.draw;
			while(currentDraw != null) {
				com_haxepunk_graphics_atlas_HardwareRenderer.render(currentDraw,this.scene,rect);
				currentDraw = currentDraw._next;
			}
		}
	}
	,scene: null
	,draw: null
	,last: null
	,__class__: com_haxepunk_graphics_atlas_SceneSprite
});
var com_haxepunk_graphics_atlas_TileAtlas = function(source) {
	com_haxepunk_graphics_atlas_Atlas.call(this,source);
	this._regions = [];
};
$hxClasses["com.haxepunk.graphics.atlas.TileAtlas"] = com_haxepunk_graphics_atlas_TileAtlas;
com_haxepunk_graphics_atlas_TileAtlas.__name__ = ["com","haxepunk","graphics","atlas","TileAtlas"];
com_haxepunk_graphics_atlas_TileAtlas.__super__ = com_haxepunk_graphics_atlas_Atlas;
com_haxepunk_graphics_atlas_TileAtlas.prototype = $extend(com_haxepunk_graphics_atlas_Atlas.prototype,{
	getRegion: function(index) {
		if(index >= this._regions.length) throw new js__$Boot_HaxeError("Atlas doesn't have a region number \"" + index + "\"");
		return this._regions[index];
	}
	,prepare: function(tileWidth,tileHeight,tileMarginWidth,tileMarginHeight) {
		if(tileMarginHeight == null) tileMarginHeight = 0;
		if(tileMarginWidth == null) tileMarginWidth = 0;
		if(this._regions.length > 0) return;
		var cols = Math.floor(this._data.width / tileWidth);
		var rows = Math.floor(this._data.height / tileHeight);
		com_haxepunk_HXP.rect.width = tileWidth;
		com_haxepunk_HXP.rect.height = tileHeight;
		com_haxepunk_HXP.point.x = com_haxepunk_HXP.point.y = 0;
		var _g = 0;
		while(_g < rows) {
			var y = _g++;
			com_haxepunk_HXP.rect.y = y * (tileHeight + tileMarginHeight);
			var _g1 = 0;
			while(_g1 < cols) {
				var x = _g1++;
				com_haxepunk_HXP.rect.x = x * (tileWidth + tileMarginWidth);
				this._regions.push(new com_haxepunk_graphics_atlas_AtlasRegion(this._data,com_haxepunk_HXP.rect.clone()));
			}
		}
	}
	,_regions: null
	,__class__: com_haxepunk_graphics_atlas_TileAtlas
});
var com_haxepunk_masks_Circle = function(radius,x,y) {
	if(y == null) y = 0;
	if(x == null) x = 0;
	if(radius == null) radius = 1;
	com_haxepunk_masks_Hitbox.call(this);
	this.set_radius(radius);
	this._x = x + radius;
	this._y = y + radius;
	var key = Type.getClassName(com_haxepunk_Mask);
	this._check.set(key,$bind(this,this.collideMask));
	var key1 = Type.getClassName(com_haxepunk_masks_Circle);
	this._check.set(key1,$bind(this,this.collideCircle));
	var key2 = Type.getClassName(com_haxepunk_masks_Hitbox);
	this._check.set(key2,$bind(this,this.collideHitbox));
	var key3 = Type.getClassName(com_haxepunk_masks_Grid);
	this._check.set(key3,$bind(this,this.collideGrid));
	var key4 = Type.getClassName(com_haxepunk_masks_SlopedGrid);
	this._check.set(key4,$bind(this,this.collideSlopedGrid));
};
$hxClasses["com.haxepunk.masks.Circle"] = com_haxepunk_masks_Circle;
com_haxepunk_masks_Circle.__name__ = ["com","haxepunk","masks","Circle"];
com_haxepunk_masks_Circle.__super__ = com_haxepunk_masks_Hitbox;
com_haxepunk_masks_Circle.prototype = $extend(com_haxepunk_masks_Hitbox.prototype,{
	collideMask: function(other) {
		var distanceX = Math.abs(this._parent.get_x() + this._x - other._parent.get_x() - other._parent.get_width() * 0.5);
		var distanceY = Math.abs(this._parent.get_y() + this._y - other._parent.get_y() - other._parent.get_height() * 0.5);
		if(distanceX > other._parent.get_width() * 0.5 + this._radius || distanceY > other._parent.get_height() * 0.5 + this._radius) return false;
		if(distanceX <= other._parent.get_width() * 0.5 || distanceY <= other._parent.get_height() * 0.5) return true;
		var distanceToCorner = (distanceX - other._parent.get_width() * 0.5) * (distanceX - other._parent.get_width() * 0.5) + (distanceY - other._parent.get_height() * 0.5) * (distanceY - other._parent.get_height() * 0.5);
		return distanceToCorner <= this._squaredRadius;
	}
	,collideCircle: function(other) {
		var dx = this._parent.get_x() + this._x - (other._parent.get_x() + other._x);
		var dy = this._parent.get_y() + this._y - (other._parent.get_y() + other._y);
		return dx * dx + dy * dy < Math.pow(this._radius + other._radius,2);
	}
	,collideGridTile: function(mx,my,hTileWidth,hTileHeight,thisX,thisY) {
		var collide = false;
		var dx = Math.abs(thisX - mx);
		if(dx <= hTileWidth + this._radius) {
			var dy = Math.abs(thisY - my);
			if(dy <= hTileHeight + this._radius) {
				if(dx <= hTileWidth || dy <= hTileHeight) collide = true; else {
					var xCornerDist = dx - hTileWidth;
					var yCornerDist = dy - hTileHeight;
					if(xCornerDist * xCornerDist + yCornerDist * yCornerDist <= this._squaredRadius) collide = true;
				}
			}
		}
		return collide;
	}
	,collideGrid: function(other) {
		var thisX = this._x + this._parent.get_x();
		var thisY = this._y + this._parent.get_y();
		var otherX = other.get_x() + other._parent.get_x();
		var otherY = other.get_y() + other._parent.get_y();
		var entityDistX = thisX - otherX;
		var entityDistY = thisY - otherY;
		var minx = Math.floor((entityDistX - this._radius) / (other._tile.width | 0));
		var miny = Math.floor((entityDistY - this._radius) / (other._tile.height | 0));
		var maxx = Math.ceil((entityDistX + this._radius) / (other._tile.width | 0));
		var maxy = Math.ceil((entityDistY + this._radius) / (other._tile.height | 0));
		if(minx < 0) minx = 0;
		if(miny < 0) miny = 0;
		if(maxx > other.columns) maxx = other.columns;
		if(maxy > other.rows) maxy = other.rows;
		var hTileWidth = (other._tile.width | 0) * 0.5;
		var hTileHeight = (other._tile.height | 0) * 0.5;
		var dx;
		var dy = otherY + miny * (other._tile.height | 0);
		var _g = miny;
		while(_g < maxy) {
			var yy = _g++;
			dx = otherX + minx * (other._tile.width | 0);
			var _g1 = minx;
			while(_g1 < maxx) {
				var xx = _g1++;
				if(other.getTile(xx,yy)) {
					if(this.collideGridTile(dx + hTileWidth,dy + hTileHeight,hTileWidth,hTileHeight,thisX,thisY)) return true;
				}
				dx += other._tile.width | 0;
			}
			dy += other._tile.height | 0;
		}
		return false;
	}
	,collideSlopedGrid: function(other) {
		var thisX = this._x + this._parent.get_x();
		var thisY = this._y + this._parent.get_y();
		var otherX = other.get_x() + other._parent.get_x();
		var otherY = other.get_y() + other._parent.get_y();
		var entityDistX = thisX - otherX;
		var entityDistY = thisY - otherY;
		var minx = Math.floor((entityDistX - this._radius) / (other._tile.width | 0));
		var miny = Math.floor((entityDistY - this._radius) / (other._tile.height | 0));
		var maxx = Math.ceil((entityDistX + this._radius) / (other._tile.width | 0));
		var maxy = Math.ceil((entityDistY + this._radius) / (other._tile.height | 0));
		if(minx < 0) minx = 0;
		if(miny < 0) miny = 0;
		if(maxx > other.columns) maxx = other.columns;
		if(maxy > other.rows) maxy = other.rows;
		var hTileWidth = (other._tile.width | 0) * 0.5;
		var hTileHeight = (other._tile.height | 0) * 0.5;
		var dx;
		var dy = otherY + miny * (other._tile.height | 0);
		var _g = miny;
		while(_g < maxy) {
			var yy = _g++;
			dx = otherX + minx * (other._tile.width | 0);
			var _g1 = minx;
			while(_g1 < maxx) {
				var xx = _g1++;
				var tile = other.getTile(xx,yy);
				if(tile.type == com_haxepunk_masks_TileType.Solid) {
					if(this.collideGridTile(dx + hTileWidth,dy + hTileHeight,hTileWidth,hTileHeight,thisX,thisY)) return true;
				} else if(tile.type == com_haxepunk_masks_TileType.AboveSlope || tile.type == com_haxepunk_masks_TileType.BelowSlope) {
					if(other.collidePointInSlope(dx,dy,thisX,thisY,tile)) return true;
					var x1 = dx;
					var y1 = dy + tile.yOffset;
					var yoff = tile.slope * (other._tile.width | 0);
					var x2 = x1 + yoff / tile.slope;
					var y2 = y1 + yoff;
					var dx1 = x2 - x1;
					var dy1 = y2 - y1;
					var fx = x1 - thisX;
					var fy = y1 - thisY;
					var a = dx1 * dx1 + dy1 * dy1;
					var b = (fx * dx1 + fy * dy1) * 2;
					var c = fx * fx + fy * fy - this._radius * this._radius;
					var discriminant = b * b - 4 * a * c;
					if(discriminant >= 0) {
						discriminant = Math.sqrt(discriminant);
						var t1 = (-b - discriminant) / (2 * a);
						var t2 = (-b + discriminant) / (2 * a);
						if(t1 >= 0 && t1 <= 1 || t2 >= 0 && t2 <= 1 || t1 < 0 && t2 > 1) return true;
					}
				}
				dx += other._tile.width | 0;
			}
			dy += other._tile.height | 0;
		}
		return false;
	}
	,collideHitbox: function(other) {
		var _otherHalfWidth = other._width * 0.5;
		var _otherHalfHeight = other._height * 0.5;
		var px = this._x + this._parent.get_x();
		var py = this._y + this._parent.get_y();
		var ox = other._x;
		var oy = other._y;
		if((other._parent != com_haxepunk_Entity._EMPTY?other._parent:null) != null) {
			ox += (other._parent != com_haxepunk_Entity._EMPTY?other._parent:null).get_x();
			oy += (other._parent != com_haxepunk_Entity._EMPTY?other._parent:null).get_y();
		}
		var distanceX = Math.abs(px - ox - _otherHalfWidth);
		var distanceY = Math.abs(py - oy - _otherHalfHeight);
		if(distanceX > _otherHalfWidth + this._radius || distanceY > _otherHalfHeight + this._radius) return false;
		if(distanceX <= _otherHalfWidth || distanceY <= _otherHalfHeight) return true;
		var distanceToCorner = (distanceX - _otherHalfWidth) * (distanceX - _otherHalfWidth) + (distanceY - _otherHalfHeight) * (distanceY - _otherHalfHeight);
		return distanceToCorner <= this._squaredRadius;
	}
	,project: function(axis,projection) {
		projection.min = -this._radius;
		projection.max = this._radius;
	}
	,debugDraw: function(graphics,scaleX,scaleY) {
		graphics.drawCircle((this._parent.get_x() + this._x - com_haxepunk_HXP.camera.x) * scaleX,(this._parent.get_y() + this._y - com_haxepunk_HXP.camera.y) * scaleY,this._radius * scaleX);
	}
	,get_x: function() {
		return this._x - this._radius;
	}
	,get_y: function() {
		return this._y - this._radius;
	}
	,get_radius: function() {
		return this._radius;
	}
	,set_radius: function(value) {
		if(this._radius == value) return value;
		this._radius = value;
		this._squaredRadius = value * value;
		this.set_height(this.set_width(this._radius + this._radius));
		if(this.list != null) this.list.update(); else if((this._parent != com_haxepunk_Entity._EMPTY?this._parent:null) != null) this.update();
		return this._radius;
	}
	,update: function() {
		if((this._parent != com_haxepunk_Entity._EMPTY?this._parent:null) != null) {
			this._parent.originX = -this._x + this._radius;
			this._parent.originY = -this._y + this._radius;
			this._parent.set_height(this._parent.set_width(this._radius + this._radius));
			if(this.list != null) this.list.update();
		}
	}
	,_radius: null
	,_squaredRadius: null
	,__class__: com_haxepunk_masks_Circle
	,__properties__: $extend(com_haxepunk_masks_Hitbox.prototype.__properties__,{set_radius:"set_radius",get_radius:"get_radius"})
});
var com_haxepunk_masks_Grid = function(width,height,tileWidth,tileHeight,x,y) {
	if(y == null) y = 0;
	if(x == null) x = 0;
	com_haxepunk_masks_Hitbox.call(this);
	if(width == 0 || height == 0 || tileWidth == 0 || tileHeight == 0) throw new js__$Boot_HaxeError("Illegal Grid, sizes cannot be 0.");
	this._rect = com_haxepunk_HXP.rect;
	this._point = com_haxepunk_HXP.point;
	this._point2 = com_haxepunk_HXP.point2;
	this.columns = width / tileWidth | 0;
	this.rows = height / tileHeight | 0;
	this._tile = new openfl_geom_Rectangle(0,0,tileWidth,tileHeight);
	this._x = x;
	this._y = y;
	this._width = width;
	this._height = height;
	this.usePositions = false;
	var key = Type.getClassName(com_haxepunk_Mask);
	this._check.set(key,$bind(this,this.collideMask));
	var key1 = Type.getClassName(com_haxepunk_masks_Hitbox);
	this._check.set(key1,$bind(this,this.collideHitbox));
	var key2 = Type.getClassName(com_haxepunk_masks_Pixelmask);
	this._check.set(key2,$bind(this,this.collidePixelmask));
	var key3 = Type.getClassName(com_haxepunk_masks_Grid);
	this._check.set(key3,$bind(this,this.collideGrid));
	this.data = [];
	var _g1 = 0;
	var _g = this.rows;
	while(_g1 < _g) {
		var x1 = _g1++;
		this.data.push([]);
	}
};
$hxClasses["com.haxepunk.masks.Grid"] = com_haxepunk_masks_Grid;
com_haxepunk_masks_Grid.__name__ = ["com","haxepunk","masks","Grid"];
com_haxepunk_masks_Grid.__super__ = com_haxepunk_masks_Hitbox;
com_haxepunk_masks_Grid.prototype = $extend(com_haxepunk_masks_Hitbox.prototype,{
	usePositions: null
	,setTile: function(column,row,solid) {
		if(solid == null) solid = true;
		if(row == null) row = 0;
		if(column == null) column = 0;
		if(this.usePositions) {
			column = column / this._tile.width | 0;
			row = row / this._tile.height | 0;
		}
		this.setTileXY(column,row,solid);
	}
	,setTileXY: function(x,y,solid) {
		if(solid == null) solid = true;
		if(y == null) y = 0;
		if(x == null) x = 0;
		if(!(!(x < 0 || x > this.columns - 1 || y < 0 || y > this.rows - 1))) return;
		this.data[y][x] = solid;
	}
	,clearTile: function(column,row) {
		if(row == null) row = 0;
		if(column == null) column = 0;
		this.setTile(column,row,false);
	}
	,checkTile: function(column,row) {
		return !(column < 0 || column > this.columns - 1 || row < 0 || row > this.rows - 1);
	}
	,getTile: function(column,row) {
		if(row == null) row = 0;
		if(column == null) column = 0;
		if(this.usePositions) {
			column = column / this._tile.width | 0;
			row = row / this._tile.height | 0;
		}
		return this.getTileXY(column,row);
	}
	,getTileXY: function(x,y) {
		if(y == null) y = 0;
		if(x == null) x = 0;
		if(!(!(x < 0 || x > this.columns - 1 || y < 0 || y > this.rows - 1))) return false;
		return this.data[y][x];
	}
	,setRect: function(column,row,width,height,solid) {
		if(solid == null) solid = true;
		if(height == null) height = 1;
		if(width == null) width = 1;
		if(row == null) row = 0;
		if(column == null) column = 0;
		if(this.usePositions) {
			column = column / this._tile.width | 0;
			row = row / this._tile.height | 0;
			width = width / this._tile.width | 0;
			height = height / this._tile.height | 0;
		}
		var _g1 = row;
		var _g = row + height;
		while(_g1 < _g) {
			var yy = _g1++;
			var _g3 = column;
			var _g2 = column + width;
			while(_g3 < _g2) {
				var xx = _g3++;
				this.setTileXY(xx,yy,solid);
			}
		}
	}
	,clearRect: function(column,row,width,height) {
		if(height == null) height = 1;
		if(width == null) width = 1;
		if(row == null) row = 0;
		if(column == null) column = 0;
		this.setRect(column,row,width,height,false);
	}
	,loadFromString: function(str,columnSep,rowSep) {
		if(rowSep == null) rowSep = "\n";
		if(columnSep == null) columnSep = ",";
		var row = str.split(rowSep);
		var rows = row.length;
		var col;
		var cols;
		var x;
		var y;
		var _g = 0;
		while(_g < rows) {
			var y1 = _g++;
			if(row[y1] == "") continue;
			col = row[y1].split(columnSep);
			cols = col.length;
			var _g1 = 0;
			while(_g1 < cols) {
				var x1 = _g1++;
				if(col[x1] == "") continue;
				this.setTile(x1,y1,Std.parseInt(col[x1]) > 0);
			}
		}
	}
	,loadFrom2DArray: function(array) {
		var _g1 = 0;
		var _g = array.length;
		while(_g1 < _g) {
			var y = _g1++;
			var _g3 = 0;
			var _g2 = array[0].length;
			while(_g3 < _g2) {
				var x = _g3++;
				this.setTile(x,y,array[y][x] > 0);
			}
		}
	}
	,saveToString: function(columnSep,rowSep,solid,empty) {
		if(empty == null) empty = "false";
		if(solid == null) solid = "true";
		if(rowSep == null) rowSep = "\n";
		if(columnSep == null) columnSep = ",";
		var s = "";
		var x;
		var y;
		var _g1 = 0;
		var _g = this.rows;
		while(_g1 < _g) {
			var y1 = _g1++;
			var _g3 = 0;
			var _g2 = this.columns;
			while(_g3 < _g2) {
				var x1 = _g3++;
				s += Std.string(this.getTileXY(x1,y1)?solid:empty);
				if(x1 != this.columns - 1) s += columnSep;
			}
			if(y1 != this.rows - 1) s += rowSep;
		}
		return s;
	}
	,clone: function() {
		var cloneGrid = new com_haxepunk_masks_Grid(this._width,this._height,this._tile.width | 0,this._tile.height | 0,this._x,this._y);
		var _g1 = 0;
		var _g = this.rows;
		while(_g1 < _g) {
			var y = _g1++;
			var _g3 = 0;
			var _g2 = this.columns;
			while(_g3 < _g2) {
				var x = _g3++;
				cloneGrid.setTile(x,y,this.getTile(x,y));
			}
		}
		return cloneGrid;
	}
	,get_tileWidth: function() {
		return this._tile.width | 0;
	}
	,get_tileHeight: function() {
		return this._tile.height | 0;
	}
	,columns: null
	,rows: null
	,data: null
	,collideMask: function(other) {
		var rectX;
		var rectY;
		var pointX;
		var pointY;
		this._rect.x = other._parent.get_x() - other._parent.originX - this._parent.get_x() + this._parent.originX;
		this._rect.y = other._parent.get_y() - other._parent.originY - this._parent.get_y() + this._parent.originY;
		pointX = Std["int"]((this._rect.x + other._parent.get_width() - 1) / this._tile.width) + 1;
		pointY = Std["int"]((this._rect.y + other._parent.get_height() - 1) / this._tile.height) + 1;
		rectX = this._rect.x / this._tile.width | 0;
		rectY = this._rect.y / this._tile.height | 0;
		var _g = rectY;
		while(_g < pointY) {
			var dy = _g++;
			var _g1 = rectX;
			while(_g1 < pointX) {
				var dx = _g1++;
				if(this.getTile(dx,dy)) return true;
			}
		}
		return false;
	}
	,collideHitbox: function(other) {
		var rectX;
		var rectY;
		var pointX;
		var pointY;
		this._rect.x = other._parent.get_x() - other._x - this._parent.get_x() + this._x;
		this._rect.y = other._parent.get_y() - other._y - this._parent.get_y() + this._y;
		pointX = ((this._rect.x + other._width - 1) / this._tile.width | 0) + 1;
		pointY = ((this._rect.y + other._height - 1) / this._tile.height | 0) + 1;
		rectX = this._rect.x / this._tile.width | 0;
		rectY = this._rect.y / this._tile.height | 0;
		var _g = rectY;
		while(_g < pointY) {
			var dy = _g++;
			var _g1 = rectX;
			while(_g1 < pointX) {
				var dx = _g1++;
				if(this.getTile(dx,dy)) return true;
			}
		}
		return false;
	}
	,collidePixelmask: function(other) {
		this._point.x = this._parent.get_x() + this._x - this._parent.originX;
		this._point.y = this._parent.get_y() + this._y - this._parent.originY;
		if(((other instanceof com_haxepunk_masks_Imagemask)?other:null) != null) {
			this._rect = (js_Boot.__cast(other , com_haxepunk_masks_Imagemask)).getBounds();
			this._rect.x += other._parent.get_x();
			this._rect.y += other._parent.get_y();
		} else {
			this._rect.x = other._parent.get_x() + other.get_x() - other._parent.originX;
			this._rect.y = other._parent.get_y() + other.get_y() - other._parent.originY;
			this._rect.width = other.get_width();
			this._rect.height = other.get_height();
		}
		var r1 = new openfl_geom_Rectangle(this._point.x,this._point.y,this._width,this._height);
		var intersect = r1.intersection(this._rect);
		if(intersect.isEmpty()) return false;
		var _g1 = Math.floor(intersect.x - this._rect.x);
		var _g = Math.floor(intersect.x - this._rect.x + intersect.width);
		while(_g1 < _g) {
			var dx = _g1++;
			var _g3 = Math.floor(intersect.y - this._rect.y);
			var _g2 = Math.floor(intersect.y - this._rect.y + intersect.height);
			while(_g3 < _g2) {
				var dy = _g3++;
				var tx = (dx + this._rect.x) / this._tile.width | 0;
				var ty = (dy + this._rect.y) / this._tile.height | 0;
				if(this.data[ty][tx] && (other.get_data().getPixel32(dx,dy) >> 24 & 255) > 0) return true;
			}
		}
		return false;
	}
	,collideGrid: function(other) {
		var ax1 = this._parent.get_x() + this._x;
		var ax2 = ax1 + this._width;
		var bx1 = other._parent.get_x() + other._x;
		var bx2 = bx1 + other._width;
		if(ax2 < bx1 || ax1 > bx2) return false;
		var ay1 = this._parent.get_y() + this._y;
		var ay2 = ay1 + this._height;
		var by1 = other._parent.get_y() + other._y;
		var by2 = by1 + other._height;
		if(ay2 < by1 || ay1 > by2) return false;
		var ox1;
		if(ax1 > bx1) ox1 = ax1; else ox1 = bx1;
		var oy1;
		if(ay1 > by1) oy1 = ay1; else oy1 = by1;
		var ox2;
		if(ax2 < bx2) ox2 = ax2; else ox2 = bx2;
		var oy2;
		if(ay2 < by2) oy2 = ay2; else oy2 = by2;
		var tw;
		var th;
		if(this._tile.width < other._tile.width) {
			tw = this._tile.width;
			ox1 -= this._parent.get_x() + this._x;
			ox1 = (ox1 / tw | 0) * tw;
			ox1 += this._parent.get_x() + this._x;
		} else {
			tw = other._tile.width;
			ox1 -= other._parent.get_x() + other._x;
			ox1 = (ox1 / tw | 0) * tw;
			ox1 += other._parent.get_x() + other._x;
		}
		if(this._tile.height < other._tile.height) {
			th = this._tile.height;
			oy1 -= this._parent.get_y() + this._y;
			oy1 = (oy1 / th | 0) * th;
			oy1 += this._parent.get_y() + this._y;
		} else {
			th = other._tile.height;
			oy1 -= other._parent.get_y() + other._y;
			oy1 = (oy1 / th | 0) * th;
			oy1 += other._parent.get_y() + other._y;
		}
		var y = oy1;
		var x = 0;
		while(y < oy2) {
			var ar1 = Std["int"]((y - this._parent.get_y() - this._y) / this._tile.height);
			var br1 = Std["int"]((y - other._parent.get_y() - other._y) / other._tile.height);
			var ar2 = Std["int"]((y - this._parent.get_y() - this._y + (th - 1)) / this._tile.height);
			var br2 = Std["int"]((y - other._parent.get_y() - other._y + (th - 1)) / other._tile.height);
			x = ox1;
			while(x < ox2) {
				var ac1 = Std["int"]((x - this._parent.get_x() - this._x) / this._tile.width);
				var bc1 = Std["int"]((x - other._parent.get_x() - other._x) / other._tile.width);
				var ac2 = Std["int"]((x - this._parent.get_x() - this._x + (tw - 1)) / this._tile.width);
				var bc2 = Std["int"]((x - other._parent.get_x() - other._x + (tw - 1)) / other._tile.width);
				if(this.getTile(ac1,ar1) && other.getTile(bc1,br1) || this.getTile(ac2,ar1) && other.getTile(bc2,br1) || this.getTile(ac1,ar2) && other.getTile(bc1,br2) || this.getTile(ac2,ar2) && other.getTile(bc2,br2)) return true;
				x += tw;
			}
			y += th;
		}
		return false;
	}
	,debugDraw: function(graphics,scaleX,scaleY) {
		var cellX;
		var cellY;
		var stepX = (this._tile.width | 0) * scaleX;
		var stepY = (this._tile.height | 0) * scaleY;
		var px = this._x + this._parent.get_x() - com_haxepunk_HXP.camera.x;
		var py = this._y + this._parent.get_y() - com_haxepunk_HXP.camera.y;
		var startx = Math.floor(-px / (this._tile.width | 0));
		var starty = Math.floor(-py / (this._tile.height | 0));
		var destx = startx + 1 + Math.ceil(com_haxepunk_HXP.width / (this._tile.width | 0));
		var desty = starty + 1 + Math.ceil(com_haxepunk_HXP.height / (this._tile.height | 0));
		if(startx > this.columns || starty > this.rows || destx < 0 || desty < 0) return;
		if(startx < 0) startx = 0;
		if(destx > this.columns) destx = this.columns;
		if(starty < 0) starty = 0;
		if(desty > this.rows) desty = this.rows;
		px = (px + startx * (this._tile.width | 0)) * scaleX;
		py = (py + starty * (this._tile.height | 0)) * scaleY;
		var row;
		cellY = py;
		var _g = starty;
		while(_g < desty) {
			var y = _g++;
			cellX = px;
			row = this.data[y];
			var _g1 = startx;
			while(_g1 < destx) {
				var x = _g1++;
				if(row[x]) {
					graphics.lineStyle(1,16777215,0.3);
					graphics.drawRect(cellX,cellY,stepX,stepY);
					if(x < this.columns - 1 && !row[x + 1]) {
						graphics.lineStyle(1,255);
						graphics.moveTo(cellX + stepX,cellY);
						graphics.lineTo(cellX + stepX,cellY + stepY);
					}
					if(x > 0 && !row[x - 1]) {
						graphics.lineStyle(1,255);
						graphics.moveTo(cellX,cellY);
						graphics.lineTo(cellX,cellY + stepY);
					}
					if(y < this.rows - 1 && !this.data[y + 1][x]) {
						graphics.lineStyle(1,255);
						graphics.moveTo(cellX,cellY + stepY);
						graphics.lineTo(cellX + stepX,cellY + stepY);
					}
					if(y > 0 && !this.data[y - 1][x]) {
						graphics.lineStyle(1,255);
						graphics.moveTo(cellX,cellY);
						graphics.lineTo(cellX + stepX,cellY);
					}
				}
				cellX += stepX;
			}
			cellY += stepY;
		}
	}
	,squareProjection: function(axis,point) {
		if(axis.x < axis.y) {
			point.x = axis.x;
			point.y = axis.y;
		} else {
			point.y = axis.x;
			point.x = axis.y;
		}
	}
	,_tile: null
	,_rect: null
	,_point: null
	,_point2: null
	,__class__: com_haxepunk_masks_Grid
	,__properties__: $extend(com_haxepunk_masks_Hitbox.prototype.__properties__,{get_tileHeight:"get_tileHeight",get_tileWidth:"get_tileWidth"})
});
var com_haxepunk_masks_Pixelmask = function(source,x,y) {
	if(y == null) y = 0;
	if(x == null) x = 0;
	com_haxepunk_masks_Hitbox.call(this);
	if(js_Boot.__instanceof(source,openfl_display_BitmapData)) this._data = source; else this._data = com_haxepunk_HXP.getBitmap(source);
	if(this._data == null) throw new js__$Boot_HaxeError("Invalid Pixelmask source image.");
	this.threshold = 1;
	this._rect = com_haxepunk_HXP.rect;
	this._point = com_haxepunk_HXP.point;
	this._point2 = com_haxepunk_HXP.point2;
	this._width = this.get_data().width;
	this._height = this.get_data().height;
	this._x = x;
	this._y = y;
	var key = Type.getClassName(com_haxepunk_Mask);
	this._check.set(key,$bind(this,this.collideMask));
	var key1 = Type.getClassName(com_haxepunk_masks_Pixelmask);
	this._check.set(key1,$bind(this,this.collidePixelmask));
	var key2 = Type.getClassName(com_haxepunk_masks_Hitbox);
	this._check.set(key2,$bind(this,this.collideHitbox));
};
$hxClasses["com.haxepunk.masks.Pixelmask"] = com_haxepunk_masks_Pixelmask;
com_haxepunk_masks_Pixelmask.__name__ = ["com","haxepunk","masks","Pixelmask"];
com_haxepunk_masks_Pixelmask.__super__ = com_haxepunk_masks_Hitbox;
com_haxepunk_masks_Pixelmask.prototype = $extend(com_haxepunk_masks_Hitbox.prototype,{
	threshold: null
	,collideMask: function(other) {
		this._point.x = this._parent.get_x() + this._x;
		this._point.y = this._parent.get_y() + this._y;
		this._rect.x = other._parent.get_x() - other._parent.originX;
		this._rect.y = other._parent.get_y() - other._parent.originY;
		this._rect.width = other._parent.get_width();
		this._rect.height = other._parent.get_height();
		this._point.x = other._parent.get_x() - other._parent.originX - (this._parent.get_x() + this._x);
		this._point.y = other._parent.get_y() - other._parent.originY - (this._parent.get_y() + this._y);
		var r1 = new openfl_geom_Rectangle(0,0,this._data.width,this._data.height);
		var r2 = new openfl_geom_Rectangle(this._point.x,this._point.y,other._parent.get_width(),other._parent.get_height());
		var intersect = r1.intersection(r2);
		if(intersect.isEmpty()) return false;
		var _g1 = Math.floor(intersect.x);
		var _g = Math.floor(intersect.x + intersect.width + 1);
		while(_g1 < _g) {
			var dx = _g1++;
			var _g3 = Math.floor(intersect.y);
			var _g2 = Math.floor(intersect.y + intersect.height + 1);
			while(_g3 < _g2) {
				var dy = _g3++;
				if((this._data.getPixel32(dx,dy) >> 24 & 255) > 0) return true;
			}
		}
		return false;
	}
	,collideHitbox: function(other) {
		this._point.x = this._parent.get_x() + this._x;
		this._point.y = this._parent.get_y() + this._y;
		this._rect.x = other._parent.get_x() + other._x;
		this._rect.y = other._parent.get_y() + other._y;
		this._rect.width = other._width;
		this._rect.height = other._height;
		this._point.x = other._parent.get_x() + other._x - (this._parent.get_x() + this._x);
		this._point.y = other._parent.get_y() + other._y - (this._parent.get_y() + this._y);
		var r1 = new openfl_geom_Rectangle(0,0,this._data.width,this._data.height);
		var r2 = new openfl_geom_Rectangle(this._point.x,this._point.y,other.get_width(),other.get_height());
		var intersect = r1.intersection(r2);
		if(intersect.isEmpty()) return false;
		var _g1 = Math.floor(intersect.x);
		var _g = Math.floor(intersect.x + intersect.width + 1);
		while(_g1 < _g) {
			var dx = _g1++;
			var _g3 = Math.floor(intersect.y);
			var _g2 = Math.floor(intersect.y + intersect.height + 1);
			while(_g3 < _g2) {
				var dy = _g3++;
				if((this._data.getPixel32(dx,dy) >> 24 & 255) > 0) return true;
			}
		}
		return false;
	}
	,collidePixelmask: function(other) {
		this._point.x = other._parent.get_x() + other._x - (this._parent.get_x() + this._x);
		this._point.y = other._parent.get_y() + other._y - (this._parent.get_y() + this._y);
		var r1 = new openfl_geom_Rectangle(0,0,this._data.width,this._data.height);
		var r2 = new openfl_geom_Rectangle(this._point.x,this._point.y,other._data.width,other._data.height);
		var intersect = r1.intersection(r2);
		if(intersect.isEmpty()) return false;
		var _g1 = Math.floor(intersect.x);
		var _g = Math.floor(intersect.x + intersect.width + 1);
		while(_g1 < _g) {
			var dx = _g1++;
			var _g3 = Math.floor(intersect.y);
			var _g2 = Math.floor(intersect.y + intersect.height + 1);
			while(_g3 < _g2) {
				var dy = _g3++;
				var p1 = this._data.getPixel32(dx,dy) >> 24 & 255;
				var p2 = other._data.getPixel32(Math.floor(dx - this._point.x),Math.floor(dy - this._point.y)) >> 24 & 255;
				if(p1 > 0 && p2 > 0) return true;
			}
		}
		return false;
	}
	,get_data: function() {
		return this._data;
	}
	,set_data: function(value) {
		this._data = value;
		this._width = value.width;
		this._height = value.height;
		this.update();
		return this._data;
	}
	,_data: null
	,_rect: null
	,_point: null
	,_point2: null
	,__class__: com_haxepunk_masks_Pixelmask
	,__properties__: $extend(com_haxepunk_masks_Hitbox.prototype.__properties__,{set_data:"set_data",get_data:"get_data"})
});
var com_haxepunk_masks_Imagemask = function(source) {
	com_haxepunk_masks_Pixelmask.call(this,new openfl_display_BitmapData(1,1));
	this._class = Type.getClassName(Type.getSuperClass(js_Boot.getClass(this)));
	this._source = source;
	this.update();
	var key = Type.getClassName(com_haxepunk_masks_Imagemask);
	this._check.set(key,$bind(this,this.collidePixelmask));
};
$hxClasses["com.haxepunk.masks.Imagemask"] = com_haxepunk_masks_Imagemask;
com_haxepunk_masks_Imagemask.__name__ = ["com","haxepunk","masks","Imagemask"];
com_haxepunk_masks_Imagemask.__super__ = com_haxepunk_masks_Pixelmask;
com_haxepunk_masks_Imagemask.prototype = $extend(com_haxepunk_masks_Pixelmask.prototype,{
	setSource: function(newsource) {
		this._source = newsource;
		this.update();
	}
	,update: function() {
		var r = this.getBounds();
		this._x = Math.floor(r.x);
		this._y = Math.floor(r.y);
		this._width = Math.ceil(r.width);
		this._height = Math.ceil(r.height);
		this._data = new openfl_display_BitmapData(this._width,this._height,true,0);
		this._source.render(this._data,new openfl_geom_Point(-this._x,-this._y),new openfl_geom_Point(0,0));
		com_haxepunk_masks_Pixelmask.prototype.update.call(this);
	}
	,getBounds: function() {
		var sx = this._source._scale * this._source.scaleX;
		var sy = this._source._scale * this._source.scaleY;
		var matrix = new openfl_geom_Matrix(sx,0,0,sy,-this._source.originX * sx,-this._source.originY * sy);
		matrix.rotate(this._source.angle * (Math.PI / -180));
		var point = new openfl_geom_Point(0,0);
		var p1 = matrix.transformPoint(point);
		point.x = this._source.get_width();
		point.y = this._source.get_height();
		var p2 = matrix.transformPoint(point);
		point.x = 0;
		point.y = this._source.get_height();
		var p3 = matrix.transformPoint(point);
		point.x = this._source.get_width();
		point.y = 0;
		var p4 = matrix.transformPoint(point);
		var r = new openfl_geom_Rectangle(0,0,0,0);
		r.x = Math.min(Math.min(p1.x,p2.x),Math.min(p3.x,p4.x));
		r.y = Math.min(Math.min(p1.y,p2.y),Math.min(p3.y,p4.y));
		r.width = Math.max(Math.max(p1.x - r.x,p2.x - r.x),Math.max(p3.x - r.x,p4.x - r.x));
		r.height = Math.max(Math.max(p1.y - r.y,p2.y - r.y),Math.max(p3.y - r.y,p4.y - r.y));
		return r;
	}
	,collidePixelmask: function(other) {
		var rect = this.getBounds();
		rect.x += this._parent.get_x();
		rect.y += this._parent.get_y();
		if(((other instanceof com_haxepunk_masks_Imagemask)?other:null) != null) {
			this._rect = (js_Boot.__cast(other , com_haxepunk_masks_Imagemask)).getBounds();
			this._rect.x += other._parent.get_x();
			this._rect.y += other._parent.get_y();
		} else {
			this._rect.x = other._parent.get_x() + other.get_x() - other._parent.originX;
			this._rect.y = other._parent.get_y() + other.get_y() - other._parent.originY;
			this._rect.width = other.get_width();
			this._rect.height = other.get_height();
		}
		var intersect = rect.intersection(this._rect);
		if(intersect.isEmpty()) return false;
		var _g1 = Math.floor(intersect.x);
		var _g = Math.floor(intersect.x + intersect.width);
		while(_g1 < _g) {
			var dx = _g1++;
			var _g3 = Math.floor(intersect.y);
			var _g2 = Math.floor(intersect.y + intersect.height);
			while(_g3 < _g2) {
				var dy = _g3++;
				var p1 = this._data.getPixel32(dx - rect.x | 0,dy - rect.y | 0) >> 24 & 255;
				var p2 = other._data.getPixel32(dx - this._rect.x | 0,dy - this._rect.y | 0) >> 24 & 255;
				if(p1 > 0 && p2 > 0) return true;
			}
		}
		return false;
	}
	,_source: null
	,__class__: com_haxepunk_masks_Imagemask
});
var com_haxepunk_math_Projection = function() {
	this.max = this.min = 0;
};
$hxClasses["com.haxepunk.math.Projection"] = com_haxepunk_math_Projection;
com_haxepunk_math_Projection.__name__ = ["com","haxepunk","math","Projection"];
com_haxepunk_math_Projection.prototype = {
	max: null
	,min: null
	,overlaps: function(other) {
		return !(this.min > other.max || this.max < other.min);
	}
	,getOverlap: function(other) {
		if(this.max > other.max) return this.max - other.min; else return other.max - this.min;
	}
	,toString: function() {
		return "[ " + this.min + ", " + this.max + " ]";
	}
	,__class__: com_haxepunk_math_Projection
};
var com_haxepunk_masks_Polygon = function(points,origin) {
	this.maxY = 0;
	this.maxX = 0;
	this.minY = 0;
	this.minX = 0;
	com_haxepunk_masks_Hitbox.call(this);
	if(points.length < 3) throw new js__$Boot_HaxeError("The polygon needs at least 3 sides.");
	this._points = points;
	this._fakeEntity = new com_haxepunk_Entity();
	this._fakeTileHitbox = new com_haxepunk_masks_Hitbox();
	var key = Type.getClassName(com_haxepunk_Mask);
	this._check.set(key,$bind(this,this.collideMask));
	var key1 = Type.getClassName(com_haxepunk_masks_Hitbox);
	this._check.set(key1,$bind(this,this.collideHitbox));
	var key2 = Type.getClassName(com_haxepunk_masks_Grid);
	this._check.set(key2,$bind(this,this.collideGrid));
	var key3 = Type.getClassName(com_haxepunk_masks_Circle);
	this._check.set(key3,$bind(this,this.collideCircle));
	var key4 = Type.getClassName(com_haxepunk_masks_Polygon);
	this._check.set(key4,$bind(this,this.collidePolygon));
	if(origin != null) this.origin = origin; else this.origin = new openfl_geom_Point();
	this._angle = 0;
	this.updateAxes();
};
$hxClasses["com.haxepunk.masks.Polygon"] = com_haxepunk_masks_Polygon;
com_haxepunk_masks_Polygon.__name__ = ["com","haxepunk","masks","Polygon"];
com_haxepunk_masks_Polygon.createPolygon = function(sides,radius,angle) {
	if(angle == null) angle = 0;
	if(radius == null) radius = 100;
	if(sides == null) sides = 3;
	if(sides < 3) throw new js__$Boot_HaxeError("The polygon needs at least 3 sides.");
	var rotationAngle = Math.PI * 2 / sides;
	var points = [];
	var _g = 0;
	while(_g < sides) {
		var i = _g++;
		var tempAngle = Math.PI + i * rotationAngle;
		var p = new openfl_geom_Point(0,0);
		var value = Math.cos(tempAngle) * radius + radius;
		p.x = value;
		var value1 = Math.sin(tempAngle) * radius + radius;
		p.y = value1;
		points.push(p);
	}
	var poly = new com_haxepunk_masks_Polygon(points);
	poly.origin.x = radius;
	poly.origin.y = radius;
	poly.set_angle(angle);
	return poly;
};
com_haxepunk_masks_Polygon.createFromArray = function(points) {
	var p = [];
	var i = 0;
	while(i < points.length) p.push((function($this) {
		var $r;
		var x = points[i++];
		var y = points[i++];
		$r = new openfl_geom_Point(x,y);
		return $r;
	}(this)));
	return new com_haxepunk_masks_Polygon(p);
};
com_haxepunk_masks_Polygon.__super__ = com_haxepunk_masks_Hitbox;
com_haxepunk_masks_Polygon.prototype = $extend(com_haxepunk_masks_Hitbox.prototype,{
	origin: null
	,minX: null
	,minY: null
	,maxX: null
	,maxY: null
	,collideMask: function(other) {
		var offset;
		var offsetX = this._parent.get_x() + this._x - other._parent.get_x();
		var offsetY = this._parent.get_y() + this._y - other._parent.get_y();
		this.project(com_haxepunk_masks_Polygon.vertical,com_haxepunk_masks_Polygon.firstProj);
		other.project(com_haxepunk_masks_Polygon.vertical,com_haxepunk_masks_Polygon.secondProj);
		com_haxepunk_masks_Polygon.firstProj.min += offsetY;
		com_haxepunk_masks_Polygon.firstProj.max += offsetY;
		if(!com_haxepunk_masks_Polygon.firstProj.overlaps(com_haxepunk_masks_Polygon.secondProj)) return false;
		this.project(com_haxepunk_masks_Polygon.horizontal,com_haxepunk_masks_Polygon.firstProj);
		other.project(com_haxepunk_masks_Polygon.horizontal,com_haxepunk_masks_Polygon.secondProj);
		com_haxepunk_masks_Polygon.firstProj.min += offsetX;
		com_haxepunk_masks_Polygon.firstProj.max += offsetX;
		if(!com_haxepunk_masks_Polygon.firstProj.overlaps(com_haxepunk_masks_Polygon.secondProj)) return false;
		var _g = 0;
		var _g1 = this._axes;
		while(_g < _g1.length) {
			var a = _g1[_g];
			++_g;
			this.project(a,com_haxepunk_masks_Polygon.firstProj);
			other.project(a,com_haxepunk_masks_Polygon.secondProj);
			offset = offsetX * a.x + offsetY * a.y;
			com_haxepunk_masks_Polygon.firstProj.min += offset;
			com_haxepunk_masks_Polygon.firstProj.max += offset;
			if(!com_haxepunk_masks_Polygon.firstProj.overlaps(com_haxepunk_masks_Polygon.secondProj)) return false;
		}
		return true;
	}
	,collideHitbox: function(hitbox) {
		var offset;
		var offsetX = this._parent.get_x() + this._x - hitbox._parent.get_x();
		var offsetY = this._parent.get_y() + this._y - hitbox._parent.get_y();
		this.project(com_haxepunk_masks_Polygon.vertical,com_haxepunk_masks_Polygon.firstProj);
		hitbox.project(com_haxepunk_masks_Polygon.vertical,com_haxepunk_masks_Polygon.secondProj);
		com_haxepunk_masks_Polygon.firstProj.min += offsetY;
		com_haxepunk_masks_Polygon.firstProj.max += offsetY;
		if(!com_haxepunk_masks_Polygon.firstProj.overlaps(com_haxepunk_masks_Polygon.secondProj)) return false;
		this.project(com_haxepunk_masks_Polygon.horizontal,com_haxepunk_masks_Polygon.firstProj);
		hitbox.project(com_haxepunk_masks_Polygon.horizontal,com_haxepunk_masks_Polygon.secondProj);
		com_haxepunk_masks_Polygon.firstProj.min += offsetX;
		com_haxepunk_masks_Polygon.firstProj.max += offsetX;
		if(!com_haxepunk_masks_Polygon.firstProj.overlaps(com_haxepunk_masks_Polygon.secondProj)) return false;
		var _g = 0;
		var _g1 = this._axes;
		while(_g < _g1.length) {
			var a = _g1[_g];
			++_g;
			this.project(a,com_haxepunk_masks_Polygon.firstProj);
			hitbox.project(a,com_haxepunk_masks_Polygon.secondProj);
			offset = offsetX * a.x + offsetY * a.y;
			com_haxepunk_masks_Polygon.firstProj.min += offset;
			com_haxepunk_masks_Polygon.firstProj.max += offset;
			if(!com_haxepunk_masks_Polygon.firstProj.overlaps(com_haxepunk_masks_Polygon.secondProj)) return false;
		}
		return true;
	}
	,collideGrid: function(grid) {
		var tileW = grid._tile.width | 0;
		var tileH = grid._tile.height | 0;
		var solidTile;
		this._fakeEntity.set_width(tileW);
		this._fakeEntity.set_height(tileH);
		this._fakeEntity.set_x(this._parent.get_x());
		this._fakeEntity.set_y(this._parent.get_y());
		this._fakeEntity.originX = grid._parent.originX + grid._x;
		this._fakeEntity.originY = grid._parent.originY + grid._y;
		this._fakeTileHitbox._width = tileW;
		this._fakeTileHitbox._height = tileH;
		this._fakeTileHitbox.set_parent(this._fakeEntity);
		var _g1 = 0;
		var _g = grid.rows;
		while(_g1 < _g) {
			var r = _g1++;
			var _g3 = 0;
			var _g2 = grid.columns;
			while(_g3 < _g2) {
				var c = _g3++;
				this._fakeEntity.set_x(grid._parent.get_x() + grid._x + c * tileW);
				this._fakeEntity.set_y(grid._parent.get_y() + grid._y + r * tileH);
				solidTile = grid.getTile(c,r);
				if(solidTile && this.collideHitbox(this._fakeTileHitbox)) return true;
			}
		}
		return false;
	}
	,collideCircle: function(circle) {
		var edgesCrossed = 0;
		var p1;
		var p2;
		var i;
		var j;
		var nPoints = this._points.length;
		var offsetX = this._parent.get_x() + this._x;
		var offsetY = this._parent.get_y() + this._y;
		i = 0;
		j = nPoints - 1;
		while(i < nPoints) {
			p1 = this._points[i];
			p2 = this._points[j];
			var distFromCenter = (p2.x - p1.x) * (circle._y + circle._parent.get_y() - p1.y - offsetY) / (p2.y - p1.y) + p1.x + offsetX;
			if(p1.y + offsetY > circle._y + circle._parent.get_y() != p2.y + offsetY > circle._y + circle._parent.get_y() && circle._x + circle._parent.get_x() < distFromCenter) edgesCrossed++;
			j = i;
			i++;
		}
		if((edgesCrossed & 1) > 0) return true;
		var radiusSqr = circle._radius * circle._radius;
		var cx = circle._x + circle._parent.get_x();
		var cy = circle._y + circle._parent.get_y();
		var minDistanceSqr = 0;
		var closestX;
		var closestY;
		i = 0;
		j = nPoints - 1;
		while(i < nPoints) {
			p1 = this._points[i];
			p2 = this._points[j];
			var segmentLenSqr = (p1.x - p2.x) * (p1.x - p2.x) + (p1.y - p2.y) * (p1.y - p2.y);
			var t = ((cx - p1.x - offsetX) * (p2.x - p1.x) + (cy - p1.y - offsetY) * (p2.y - p1.y)) / segmentLenSqr;
			if(t < 0) {
				closestX = p1.x;
				closestY = p1.y;
			} else if(t > 1) {
				closestX = p2.x;
				closestY = p2.y;
			} else {
				closestX = p1.x + t * (p2.x - p1.x);
				closestY = p1.y + t * (p2.y - p1.y);
			}
			closestX += offsetX;
			closestY += offsetY;
			minDistanceSqr = (cx - closestX) * (cx - closestX) + (cy - closestY) * (cy - closestY);
			if(minDistanceSqr <= radiusSqr) return true;
			j = i;
			i++;
		}
		return false;
	}
	,collidePolygon: function(other) {
		var offset;
		var offsetX = this._parent.get_x() + this._x - other._parent.get_x() - other._x;
		var offsetY = this._parent.get_y() + this._y - other._parent.get_y() - other._y;
		var _g = 0;
		var _g1 = this._axes;
		while(_g < _g1.length) {
			var a = _g1[_g];
			++_g;
			this.project(a,com_haxepunk_masks_Polygon.firstProj);
			other.project(a,com_haxepunk_masks_Polygon.secondProj);
			offset = offsetX * a.x + offsetY * a.y;
			com_haxepunk_masks_Polygon.firstProj.min += offset;
			com_haxepunk_masks_Polygon.firstProj.max += offset;
			if(!com_haxepunk_masks_Polygon.firstProj.overlaps(com_haxepunk_masks_Polygon.secondProj)) return false;
		}
		var _g2 = 0;
		var _g11 = other._axes;
		while(_g2 < _g11.length) {
			var a1 = _g11[_g2];
			++_g2;
			this.project(a1,com_haxepunk_masks_Polygon.firstProj);
			other.project(a1,com_haxepunk_masks_Polygon.secondProj);
			offset = offsetX * a1.x + offsetY * a1.y;
			com_haxepunk_masks_Polygon.firstProj.min += offset;
			com_haxepunk_masks_Polygon.firstProj.max += offset;
			if(!com_haxepunk_masks_Polygon.firstProj.overlaps(com_haxepunk_masks_Polygon.secondProj)) return false;
		}
		return true;
	}
	,project: function(axis,projection) {
		var p = this._points[0];
		var min = axis.x * p.x + axis.y * p.y;
		var max = min;
		var _g1 = 1;
		var _g = this._points.length;
		while(_g1 < _g) {
			var i = _g1++;
			p = this._points[i];
			var cur = axis.x * p.x + axis.y * p.y;
			if(cur < min) min = cur; else if(cur > max) max = cur;
		}
		projection.min = min;
		projection.max = max;
	}
	,debugDraw: function(graphics,scaleX,scaleY) {
		var offsetX = this._parent.get_x() + this._x - com_haxepunk_HXP.camera.x;
		var offsetY = this._parent.get_y() + this._y - com_haxepunk_HXP.camera.y;
		graphics.beginFill(255,.3);
		graphics.moveTo((this._points[this._points.length - 1].x + offsetX) * scaleX,(this._points[this._points.length - 1].y + offsetY) * scaleY);
		var _g1 = 0;
		var _g = this._points.length;
		while(_g1 < _g) {
			var i = _g1++;
			graphics.lineTo((this._points[i].x + offsetX) * scaleX,(this._points[i].y + offsetY) * scaleY);
		}
		graphics.endFill();
		graphics.drawCircle((offsetX + this.origin.x) * scaleX,(offsetY + this.origin.y) * scaleY,2);
	}
	,get_angle: function() {
		return this._angle;
	}
	,set_angle: function(value) {
		if(value != this._angle) {
			this.rotate(value - this._angle);
			if(this.list != null || (this._parent != com_haxepunk_Entity._EMPTY?this._parent:null) != null) this.update();
		}
		return value;
	}
	,get_points: function() {
		return this._points;
	}
	,set_points: function(value) {
		if(this._points != value) {
			this._points = value;
			if(this.list != null || (this._parent != com_haxepunk_Entity._EMPTY?this._parent:null) != null) this.updateAxes();
		}
		return value;
	}
	,update: function() {
		this.project(com_haxepunk_masks_Polygon.horizontal,com_haxepunk_masks_Polygon.firstProj);
		var projX = Math.round(com_haxepunk_masks_Polygon.firstProj.min);
		this._width = Math.round(com_haxepunk_masks_Polygon.firstProj.max - com_haxepunk_masks_Polygon.firstProj.min);
		this.project(com_haxepunk_masks_Polygon.vertical,com_haxepunk_masks_Polygon.secondProj);
		var projY = Math.round(com_haxepunk_masks_Polygon.secondProj.min);
		this._height = Math.round(com_haxepunk_masks_Polygon.secondProj.max - com_haxepunk_masks_Polygon.secondProj.min);
		this.minX = this._x + projX;
		this.minY = this._y + projY;
		this.maxX = Math.round(this.minX + this._width);
		this.maxY = Math.round(this.minY + this._height);
		if(this.list != null) this.list.update(); else if((this._parent != com_haxepunk_Entity._EMPTY?this._parent:null) != null) {
			this._parent.originX = -this._x - projX;
			this._parent.originY = -this._y - projY;
			this._parent.set_width(this._width);
			this._parent.set_height(this._height);
		}
	}
	,rotate: function(angleDelta) {
		this._angle += angleDelta;
		angleDelta *= Math.PI / -180;
		var p;
		var _g1 = 0;
		var _g = this._points.length;
		while(_g1 < _g) {
			var i = _g1++;
			p = this._points[i];
			var dx = p.x - this.origin.x;
			var dy = p.y - this.origin.y;
			var pointAngle = Math.atan2(dy,dx);
			var length = Math.sqrt(dx * dx + dy * dy);
			var value = Math.cos(pointAngle + angleDelta) * length + this.origin.x;
			p.x = value;
			var value1 = Math.sin(pointAngle + angleDelta) * length + this.origin.y;
			p.y = value1;
		}
		var _g2 = 0;
		var _g11 = this._axes;
		while(_g2 < _g11.length) {
			var a = _g11[_g2];
			++_g2;
			var axisAngle = Math.atan2(a.y,a.x);
			var value2 = Math.cos(axisAngle + angleDelta);
			a.x = value2;
			var value3 = Math.sin(axisAngle + angleDelta);
			a.y = value3;
		}
	}
	,generateAxes: function() {
		this._axes = [];
		var temp;
		var nPoints = this._points.length;
		var edge;
		var i;
		var j;
		i = 0;
		j = nPoints - 1;
		while(i < nPoints) {
			edge = new openfl_geom_Point(0,0);
			edge.x = this._points[i].x - this._points[j].x;
			edge.y = this._points[i].y - this._points[j].y;
			temp = edge.y;
			edge.y = -edge.x;
			edge.x = temp;
			com_haxepunk_math__$Vector_Vector_$Impl_$.normalize(edge,1);
			this._axes.push(edge);
			j = i;
			i++;
		}
	}
	,removeDuplicateAxes: function() {
		var i = this._axes.length - 1;
		var j = i - 1;
		while(i > 0) {
			if(Math.abs(this._axes[i].x - this._axes[j].x) < com_haxepunk_masks_Polygon.EPSILON && Math.abs(this._axes[i].y - this._axes[j].y) < com_haxepunk_masks_Polygon.EPSILON || Math.abs(this._axes[j].x + this._axes[i].x) < com_haxepunk_masks_Polygon.EPSILON && Math.abs(this._axes[i].y + this._axes[j].y) < com_haxepunk_masks_Polygon.EPSILON) {
				this._axes.splice(i,1);
				i--;
			}
			j--;
			if(j < 0) {
				i--;
				j = i - 1;
			}
		}
	}
	,updateAxes: function() {
		this.generateAxes();
		this.removeDuplicateAxes();
		this.update();
	}
	,_angle: null
	,_points: null
	,_axes: null
	,_fakeEntity: null
	,_fakeTileHitbox: null
	,__class__: com_haxepunk_masks_Polygon
	,__properties__: $extend(com_haxepunk_masks_Hitbox.prototype.__properties__,{set_points:"set_points",get_points:"get_points",set_angle:"set_angle",get_angle:"get_angle"})
});
var com_haxepunk_masks_TileType = $hxClasses["com.haxepunk.masks.TileType"] = { __ename__ : ["com","haxepunk","masks","TileType"], __constructs__ : ["Empty","Solid","AboveSlope","BelowSlope","TopLeft","TopRight","BottomLeft","BottomRight"] };
com_haxepunk_masks_TileType.Empty = ["Empty",0];
com_haxepunk_masks_TileType.Empty.toString = $estr;
com_haxepunk_masks_TileType.Empty.__enum__ = com_haxepunk_masks_TileType;
com_haxepunk_masks_TileType.Solid = ["Solid",1];
com_haxepunk_masks_TileType.Solid.toString = $estr;
com_haxepunk_masks_TileType.Solid.__enum__ = com_haxepunk_masks_TileType;
com_haxepunk_masks_TileType.AboveSlope = ["AboveSlope",2];
com_haxepunk_masks_TileType.AboveSlope.toString = $estr;
com_haxepunk_masks_TileType.AboveSlope.__enum__ = com_haxepunk_masks_TileType;
com_haxepunk_masks_TileType.BelowSlope = ["BelowSlope",3];
com_haxepunk_masks_TileType.BelowSlope.toString = $estr;
com_haxepunk_masks_TileType.BelowSlope.__enum__ = com_haxepunk_masks_TileType;
com_haxepunk_masks_TileType.TopLeft = ["TopLeft",4];
com_haxepunk_masks_TileType.TopLeft.toString = $estr;
com_haxepunk_masks_TileType.TopLeft.__enum__ = com_haxepunk_masks_TileType;
com_haxepunk_masks_TileType.TopRight = ["TopRight",5];
com_haxepunk_masks_TileType.TopRight.toString = $estr;
com_haxepunk_masks_TileType.TopRight.__enum__ = com_haxepunk_masks_TileType;
com_haxepunk_masks_TileType.BottomLeft = ["BottomLeft",6];
com_haxepunk_masks_TileType.BottomLeft.toString = $estr;
com_haxepunk_masks_TileType.BottomLeft.__enum__ = com_haxepunk_masks_TileType;
com_haxepunk_masks_TileType.BottomRight = ["BottomRight",7];
com_haxepunk_masks_TileType.BottomRight.toString = $estr;
com_haxepunk_masks_TileType.BottomRight.__enum__ = com_haxepunk_masks_TileType;
var com_haxepunk_masks_SlopedGrid = function(width,height,tileWidth,tileHeight,x,y) {
	if(y == null) y = 0;
	if(x == null) x = 0;
	com_haxepunk_masks_Hitbox.call(this);
	if(width == 0 || height == 0 || tileWidth == 0 || tileHeight == 0) throw new js__$Boot_HaxeError("Illegal Grid, sizes cannot be 0.");
	this._rect = com_haxepunk_HXP.rect;
	this._point = com_haxepunk_HXP.point;
	this._point2 = com_haxepunk_HXP.point2;
	this.columns = width / tileWidth | 0;
	this.rows = height / tileHeight | 0;
	this._tile = new openfl_geom_Rectangle(0,0,tileWidth,tileHeight);
	this._x = x;
	this._y = y;
	this._width = width;
	this._height = height;
	this.usePositions = false;
	var key = Type.getClassName(com_haxepunk_Mask);
	this._check.set(key,$bind(this,this.collideMask));
	var key1 = Type.getClassName(com_haxepunk_masks_Hitbox);
	this._check.set(key1,$bind(this,this.collideHitbox));
	this.data = [];
	var _g1 = 0;
	var _g = this.rows;
	while(_g1 < _g) {
		var x1 = _g1++;
		this.data.push([]);
	}
};
$hxClasses["com.haxepunk.masks.SlopedGrid"] = com_haxepunk_masks_SlopedGrid;
com_haxepunk_masks_SlopedGrid.__name__ = ["com","haxepunk","masks","SlopedGrid"];
com_haxepunk_masks_SlopedGrid.__super__ = com_haxepunk_masks_Hitbox;
com_haxepunk_masks_SlopedGrid.prototype = $extend(com_haxepunk_masks_Hitbox.prototype,{
	usePositions: null
	,collidePoint: function(cx,cy) {
		var px = this._x + this._parent.get_x();
		var py = this._y + this._parent.get_y();
		var column = (cx - px) / this._tile.width | 0;
		var row = (cy - py) / this._tile.height | 0;
		var x = px + column * this._tile.width;
		var y = py + row * this._tile.height;
		var tile = this.getTile(column,row);
		if(tile != null) {
			if(tile.type == com_haxepunk_masks_TileType.Solid) return true; else if(tile.type == com_haxepunk_masks_TileType.AboveSlope || tile.type == com_haxepunk_masks_TileType.BelowSlope) {
				if(this.collidePointInSlope(x,y,cx,cy,tile)) return true;
			}
		}
		return false;
	}
	,collidePointInSlope: function(x1,y1,px,py,tile) {
		y1 += tile.yOffset;
		var yoff = tile.slope * this._tile.width;
		var x2 = x1 + yoff / tile.slope;
		var y2 = y1 + yoff;
		var left = (x2 - x1) * (py - y1) > (y2 - y1) * (px - x1);
		return tile.type == com_haxepunk_masks_TileType.AboveSlope && !left || tile.type == com_haxepunk_masks_TileType.BelowSlope && left;
	}
	,setTile: function(column,row,type,slope,yOffset) {
		if(yOffset == null) yOffset = 0;
		if(slope == null) slope = 0;
		if(row == null) row = 0;
		if(column == null) column = 0;
		if(!(column >= 0 && column < this.columns && row >= 0 && row < this.rows)) return;
		if(type == null) type = com_haxepunk_masks_TileType.Solid;
		if(this.usePositions) {
			column = column / this._tile.width | 0;
			row = row / this._tile.height | 0;
		}
		if(type != null) switch(type[1]) {
		case 4:
			this.data[row][column] = { type : com_haxepunk_masks_TileType.AboveSlope, slope : -1, yOffset : this._tile.height};
			break;
		case 5:
			this.data[row][column] = { type : com_haxepunk_masks_TileType.AboveSlope, slope : 1, yOffset : 0};
			break;
		case 6:
			this.data[row][column] = { type : com_haxepunk_masks_TileType.BelowSlope, slope : 1, yOffset : 0};
			break;
		case 7:
			this.data[row][column] = { type : com_haxepunk_masks_TileType.BelowSlope, slope : -1, yOffset : this._tile.height};
			break;
		default:
			this.data[row][column] = { type : type, slope : slope, yOffset : yOffset * this._tile.height};
		} else this.data[row][column] = { type : type, slope : slope, yOffset : yOffset * this._tile.height};
	}
	,clearTile: function(column,row) {
		if(row == null) row = 0;
		if(column == null) column = 0;
		this.setTile(column,row,com_haxepunk_masks_TileType.Empty);
	}
	,checkTile: function(column,row) {
		return column >= 0 && column < this.columns && row >= 0 && row < this.rows;
	}
	,getTile: function(column,row) {
		if(row == null) row = 0;
		if(column == null) column = 0;
		if(!(column >= 0 && column < this.columns && row >= 0 && row < this.rows)) return com_haxepunk_masks_SlopedGrid._emptyTile; else {
			if(this.usePositions) {
				column = column / this._tile.width | 0;
				row = row / this._tile.height | 0;
			}
			return this.data[row][column];
		}
	}
	,setRect: function(column,row,width,height,type,slope,yOffset) {
		if(yOffset == null) yOffset = 0;
		if(slope == null) slope = 0;
		if(height == null) height = 1;
		if(width == null) width = 1;
		if(row == null) row = 0;
		if(column == null) column = 0;
		if(type == null) type = com_haxepunk_masks_TileType.Solid;
		if(this.usePositions) {
			column = column / this._tile.width | 0;
			row = row / this._tile.height | 0;
			width = width / this._tile.width | 0;
			height = height / this._tile.height | 0;
		}
		var _g1 = row;
		var _g = row + height;
		while(_g1 < _g) {
			var yy = _g1++;
			var _g3 = column;
			var _g2 = column + width;
			while(_g3 < _g2) {
				var xx = _g3++;
				this.setTile(xx,yy,type,slope,yOffset);
			}
		}
	}
	,clearRect: function(column,row,width,height) {
		if(height == null) height = 1;
		if(width == null) width = 1;
		if(row == null) row = 0;
		if(column == null) column = 0;
		this.setRect(column,row,width,height,com_haxepunk_masks_TileType.Empty);
	}
	,get_tileWidth: function() {
		return this._tile.width | 0;
	}
	,get_tileHeight: function() {
		return this._tile.height | 0;
	}
	,columns: null
	,rows: null
	,data: null
	,collideBox: function(opx,opy,opw,oph,px,py) {
		this._rect.x = opx - px;
		this._rect.y = opy - py;
		var startx = this._rect.x / this._tile.width | 0;
		var starty = this._rect.y / this._tile.height | 0;
		var endx = ((this._rect.x + opw - 1) / this._tile.width | 0) + 1;
		var endy = ((this._rect.y + oph - 1) / this._tile.height | 0) + 1;
		var yy = py + starty * this._tile.height;
		var _g = starty;
		while(_g < endy) {
			var dy = _g++;
			var xx = px + startx * this._tile.width;
			var _g1 = startx;
			while(_g1 < endx) {
				var dx = _g1++;
				var tile = this.getTile(dx,dy);
				if(tile == null) continue;
				var _g2 = tile.type;
				switch(_g2[1]) {
				case 1:
					return true;
				case 3:
					var x = opx;
					var y = opy + oph;
					if(tile.slope < 0) x += opw;
					x = com_haxepunk_HXP.clamp(x,xx,xx + (this._tile.width | 0));
					y = com_haxepunk_HXP.clamp(y,yy,yy + (this._tile.height | 0));
					if(this.collidePointInSlope(xx,yy,x,y,tile)) return true;
					break;
				case 2:
					var x1 = opx;
					var y1 = opy;
					if(tile.slope > 0) x1 += opw;
					x1 = com_haxepunk_HXP.clamp(x1,xx,xx + (this._tile.width | 0));
					y1 = com_haxepunk_HXP.clamp(y1,yy,yy + (this._tile.height | 0));
					if(this.collidePointInSlope(xx,yy,x1,y1,tile)) return true;
					break;
				default:
				}
				xx += this._tile.width;
			}
			yy += this._tile.height;
		}
		return false;
	}
	,collideMask: function(other) {
		var x = this._x + this._parent.get_x();
		var y = this._y + this._parent.get_y();
		return this.collideBox(other._parent.get_x() - other._parent.originX,other._parent.get_y() - other._parent.originY,other._parent.get_width(),other._parent.get_height(),this._parent.get_x() + this._parent.originX,this._parent.get_y() + this._parent.originY);
	}
	,collideHitbox: function(other) {
		var x = this._x + this._parent.get_x();
		var y = this._y + this._parent.get_y();
		var ox = other._x + other._parent.get_x();
		var oy = other._y + other._parent.get_y();
		return this.collideBox(ox,oy,other._width,other._height,x,y);
	}
	,debugDraw: function(graphics,scaleX,scaleY) {
		var cellX;
		var cellY;
		var stepX = (this._tile.width | 0) * scaleX;
		var stepY = (this._tile.height | 0) * scaleY;
		var px = this._x + this._parent.get_x() - com_haxepunk_HXP.camera.x;
		var py = this._y + this._parent.get_y() - com_haxepunk_HXP.camera.y;
		var startx = Math.floor(-px / (this._tile.width | 0));
		var starty = Math.floor(-py / (this._tile.height | 0));
		var destx = startx + 1 + Math.ceil(com_haxepunk_HXP.width / (this._tile.width | 0));
		var desty = starty + 1 + Math.ceil(com_haxepunk_HXP.height / (this._tile.height | 0));
		if(startx > this.columns || starty > this.rows || destx < 0 || desty < 0) return;
		if(startx < 0) startx = 0;
		if(destx > this.columns) destx = this.columns;
		if(starty < 0) starty = 0;
		if(desty > this.rows) desty = this.rows;
		px = (px + startx * (this._tile.width | 0)) * scaleX;
		py = (py + starty * (this._tile.height | 0)) * scaleY;
		var row;
		cellY = py;
		var _g = starty;
		while(_g < desty) {
			var y = _g++;
			cellX = px;
			row = this.data[y];
			var _g1 = startx;
			while(_g1 < destx) {
				var x = _g1++;
				var tile = row[x];
				if(tile == null || tile.type == null) {
				} else if(tile.type == com_haxepunk_masks_TileType.Solid) {
					graphics.lineStyle(1,16777215,0.3);
					graphics.drawRect(cellX,cellY,stepX,stepY);
					if(x < this.columns - 1 && row[x + 1].type == com_haxepunk_masks_TileType.Empty) {
						graphics.lineStyle(1,255);
						graphics.moveTo(cellX + stepX,cellY);
						graphics.lineTo(cellX + stepX,cellY + stepY);
					}
					if(x > 0 && row[x - 1].type == com_haxepunk_masks_TileType.Empty) {
						graphics.lineStyle(1,255);
						graphics.moveTo(cellX,cellY);
						graphics.lineTo(cellX,cellY + stepY);
					}
					if(y < this.rows - 1 && this.data[y + 1][x].type == com_haxepunk_masks_TileType.Empty) {
						graphics.lineStyle(1,255);
						graphics.moveTo(cellX,cellY + stepY);
						graphics.lineTo(cellX + stepX,cellY + stepY);
					}
					if(y > 0 && this.data[y - 1][x].type == com_haxepunk_masks_TileType.Empty) {
						graphics.lineStyle(1,255);
						graphics.moveTo(cellX,cellY);
						graphics.lineTo(cellX + stepX,cellY);
					}
				} else if(tile.type == com_haxepunk_masks_TileType.BelowSlope || tile.type == com_haxepunk_masks_TileType.AboveSlope) {
					var offset = tile.yOffset * scaleY;
					var xpos = cellX;
					var endx = stepX;
					var ypos = cellY + offset;
					var endy = tile.slope * endx;
					if(offset < 0) {
						var fx = -offset / tile.slope;
						endx = stepX - fx;
						xpos = cellX + fx;
						ypos = cellY;
						if(y <= 0 || this.data[y - 1][x].type == com_haxepunk_masks_TileType.Solid) {
							graphics.moveTo(cellX,ypos);
							graphics.lineTo(xpos,ypos);
						}
					} else if(offset > (this._tile.height | 0)) {
						var fx1 = -(offset - (this._tile.width | 0)) / tile.slope;
						endx = stepX - fx1;
						xpos = cellX + fx1;
						ypos = cellY + stepY;
						if(y >= this.rows - 1 || this.data[y + 1][x].type == com_haxepunk_masks_TileType.Solid) {
							graphics.moveTo(cellX,ypos);
							graphics.lineTo(xpos,ypos);
						}
					} else if(offset + endy < 0) {
						var fx2 = -offset / tile.slope;
						endx = fx2;
						if(y <= 0 || this.data[y - 1][x].type == com_haxepunk_masks_TileType.Solid) {
							graphics.moveTo(cellX + fx2,cellY);
							graphics.lineTo(cellX + stepX,cellY);
						}
					} else if(offset + endy > (this._tile.height | 0)) {
						var fx3 = -(offset - (this._tile.width | 0)) / tile.slope;
						endx = fx3;
						if(y >= this.rows - 1 || this.data[y + 1][x].type == com_haxepunk_masks_TileType.Solid) {
							graphics.moveTo(cellX + fx3,cellY + stepY);
							graphics.lineTo(cellX + stepX,cellY + stepY);
						}
					}
					endy = tile.slope * endx;
					graphics.lineStyle(1,255);
					graphics.moveTo(xpos,ypos);
					graphics.lineTo(xpos + endx,ypos + endy);
				}
				cellX += stepX;
			}
			cellY += stepY;
		}
	}
	,_tile: null
	,_rect: null
	,_point: null
	,_point2: null
	,__class__: com_haxepunk_masks_SlopedGrid
	,__properties__: $extend(com_haxepunk_masks_Hitbox.prototype.__properties__,{get_tileHeight:"get_tileHeight",get_tileWidth:"get_tileWidth"})
});
var com_haxepunk_math__$Vector_Vector_$Impl_$ = {};
$hxClasses["com.haxepunk.math._Vector.Vector_Impl_"] = com_haxepunk_math__$Vector_Vector_$Impl_$;
com_haxepunk_math__$Vector_Vector_$Impl_$.__name__ = ["com","haxepunk","math","_Vector","Vector_Impl_"];
com_haxepunk_math__$Vector_Vector_$Impl_$.__properties__ = {get_unit:"get_unit",get_angle:"get_angle",get_length:"get_length",get_squareLength:"get_squareLength",set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x"}
com_haxepunk_math__$Vector_Vector_$Impl_$._new = function(x,y) {
	if(y == null) y = 0;
	if(x == null) x = 0;
	return new openfl_geom_Point(x,y);
};
com_haxepunk_math__$Vector_Vector_$Impl_$.toPoint = function(this1) {
	return this1;
};
com_haxepunk_math__$Vector_Vector_$Impl_$.fromPoint = function(point) {
	return new openfl_geom_Point(point.x,point.y);
};
com_haxepunk_math__$Vector_Vector_$Impl_$.get_x = function(this1) {
	return this1.x;
};
com_haxepunk_math__$Vector_Vector_$Impl_$.set_x = function(this1,value) {
	return this1.x = value;
};
com_haxepunk_math__$Vector_Vector_$Impl_$.get_y = function(this1) {
	return this1.y;
};
com_haxepunk_math__$Vector_Vector_$Impl_$.set_y = function(this1,value) {
	return this1.y = value;
};
com_haxepunk_math__$Vector_Vector_$Impl_$.dot = function(this1,b) {
	return this1.x * b.x + this1.y * b.y;
};
com_haxepunk_math__$Vector_Vector_$Impl_$.cross = function(this1,b) {
	return this1.x * b.x - this1.y * b.y;
};
com_haxepunk_math__$Vector_Vector_$Impl_$.invert = function(this1) {
	this1.x = -this1.x;
	this1.y = -this1.y;
};
com_haxepunk_math__$Vector_Vector_$Impl_$.rotate = function(this1,angle) {
	var sin = Math.sin(angle);
	var cos = Math.cos(angle);
	return new openfl_geom_Point(this1.x * cos - this1.y * sin,this1.x * sin + this1.y * cos);
};
com_haxepunk_math__$Vector_Vector_$Impl_$.normalize = function(this1,size) {
	if(size == null) size = 1;
	var len = Math.sqrt(this1.x * this1.x + this1.y * this1.y);
	if(len == 0) {
		var value = this1.y = 0;
		this1.x = value;
	} else {
		this1.x = this1.x / len * size;
		this1.y = this1.y / len * size;
	}
};
com_haxepunk_math__$Vector_Vector_$Impl_$.get_squareLength = function(this1) {
	return this1.x * this1.x + this1.y * this1.y;
};
com_haxepunk_math__$Vector_Vector_$Impl_$.get_length = function(this1) {
	return Math.sqrt(this1.x * this1.x + this1.y * this1.y);
};
com_haxepunk_math__$Vector_Vector_$Impl_$.get_angle = function(this1) {
	return Math.atan2(this1.y,this1.x);
};
com_haxepunk_math__$Vector_Vector_$Impl_$.get_unit = function(this1) {
	var len = Math.sqrt(this1.x * this1.x + this1.y * this1.y);
	return new openfl_geom_Point(this1.x / len,this1.y / len);
};
com_haxepunk_math__$Vector_Vector_$Impl_$.add = function(a,b) {
	return new openfl_geom_Point(a.x + b.x,a.y + b.y);
};
com_haxepunk_math__$Vector_Vector_$Impl_$.sub = function(a,b) {
	return new openfl_geom_Point(a.x - b.x,a.y - b.y);
};
com_haxepunk_math__$Vector_Vector_$Impl_$.scalar_mult = function(a,b) {
	return new openfl_geom_Point(a.x * b,a.y * b);
};
com_haxepunk_math__$Vector_Vector_$Impl_$.scalar_divide = function(a,b) {
	return new openfl_geom_Point(a.x / b,a.y / b);
};
var com_haxepunk_screen_ScaleMode = function(integer) {
	if(integer == null) integer = false;
	this.baseHeight = 0;
	this.baseWidth = 0;
	this.integer = false;
	this.integer = integer;
	this.setBaseSize(com_haxepunk_HXP.width,com_haxepunk_HXP.height);
};
$hxClasses["com.haxepunk.screen.ScaleMode"] = com_haxepunk_screen_ScaleMode;
com_haxepunk_screen_ScaleMode.__name__ = ["com","haxepunk","screen","ScaleMode"];
com_haxepunk_screen_ScaleMode.prototype = {
	integer: null
	,baseWidth: null
	,baseHeight: null
	,setBaseSize: function(width,height) {
		if(width == null) width = com_haxepunk_HXP.width;
		if(height == null) height = com_haxepunk_HXP.height;
		this.baseWidth = width;
		this.baseHeight = height;
	}
	,resize: function(stageWidth,stageHeight) {
		com_haxepunk_HXP.screen.set_x(com_haxepunk_HXP.screen.set_y(0));
		com_haxepunk_HXP.screen.offsetX = com_haxepunk_HXP.screen.offsetY = 0;
		var scaleXMult = com_haxepunk_HXP.screen._scaleXMult;
		var scaleYMult = com_haxepunk_HXP.screen._scaleYMult;
		com_haxepunk_HXP.screen.set_scaleX(scaleXMult * stageWidth / this.baseWidth);
		com_haxepunk_HXP.screen.set_scaleY(scaleYMult * stageHeight / this.baseHeight);
		com_haxepunk_HXP.screen._scaleXMult = scaleXMult;
		com_haxepunk_HXP.screen._scaleYMult = scaleYMult;
		com_haxepunk_HXP.screen.width = stageWidth;
		com_haxepunk_HXP.screen.height = stageHeight;
		if(this.integer) {
			com_haxepunk_HXP.screen.set_scaleX(com_haxepunk_HXP.screen.scaleX | 0);
			com_haxepunk_HXP.screen.set_scaleY(com_haxepunk_HXP.screen.scaleY | 0);
		}
	}
	,__class__: com_haxepunk_screen_ScaleMode
};
var openfl_events_Event = function(type,bubbles,cancelable) {
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	this.type = type;
	this.bubbles = bubbles;
	this.cancelable = cancelable;
	this.eventPhase = 2;
};
$hxClasses["openfl.events.Event"] = openfl_events_Event;
openfl_events_Event.__name__ = ["openfl","events","Event"];
openfl_events_Event.prototype = {
	bubbles: null
	,cancelable: null
	,currentTarget: null
	,eventPhase: null
	,target: null
	,type: null
	,__isCanceled: null
	,__isCanceledNow: null
	,__preventDefault: null
	,clone: function() {
		var event = new openfl_events_Event(this.type,this.bubbles,this.cancelable);
		event.eventPhase = this.eventPhase;
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		return event;
	}
	,formatToString: function(className,p1,p2,p3,p4,p5) {
		var parameters = [];
		if(p1 != null) parameters.push(p1);
		if(p2 != null) parameters.push(p2);
		if(p3 != null) parameters.push(p3);
		if(p4 != null) parameters.push(p4);
		if(p5 != null) parameters.push(p5);
		return $bind(this,this.__formatToString).apply(this,[className,parameters]);
	}
	,isDefaultPrevented: function() {
		return this.__preventDefault;
	}
	,preventDefault: function() {
		if(this.cancelable) this.__preventDefault = true;
	}
	,stopImmediatePropagation: function() {
		this.__isCanceled = true;
		this.__isCanceledNow = true;
	}
	,stopPropagation: function() {
		this.__isCanceled = true;
	}
	,toString: function() {
		return this.__formatToString("Event",["type","bubbles","cancelable"]);
	}
	,__formatToString: function(className,parameters) {
		var output = "[" + className;
		var arg = null;
		var _g = 0;
		while(_g < parameters.length) {
			var param = parameters[_g];
			++_g;
			arg = Reflect.field(this,param);
			if(typeof(arg) == "string") output += " " + param + "=\"" + Std.string(arg) + "\""; else output += " " + param + "=" + Std.string(arg);
		}
		output += "]";
		return output;
	}
	,__class__: openfl_events_Event
};
var com_haxepunk_tweens_TweenEvent = function(type,bubbles,cancelable) {
	openfl_events_Event.call(this,type,bubbles,cancelable);
};
$hxClasses["com.haxepunk.tweens.TweenEvent"] = com_haxepunk_tweens_TweenEvent;
com_haxepunk_tweens_TweenEvent.__name__ = ["com","haxepunk","tweens","TweenEvent"];
com_haxepunk_tweens_TweenEvent.__super__ = openfl_events_Event;
com_haxepunk_tweens_TweenEvent.prototype = $extend(openfl_events_Event.prototype,{
	__class__: com_haxepunk_tweens_TweenEvent
});
var com_haxepunk_tweens_misc_Alarm = function(duration,complete,type) {
	com_haxepunk_Tween.call(this,duration,type,complete,null);
};
$hxClasses["com.haxepunk.tweens.misc.Alarm"] = com_haxepunk_tweens_misc_Alarm;
com_haxepunk_tweens_misc_Alarm.__name__ = ["com","haxepunk","tweens","misc","Alarm"];
com_haxepunk_tweens_misc_Alarm.__super__ = com_haxepunk_Tween;
com_haxepunk_tweens_misc_Alarm.prototype = $extend(com_haxepunk_Tween.prototype,{
	reset: function(duration) {
		this._target = duration;
		this.start();
	}
	,get_elapsed: function() {
		return this._time;
	}
	,get_duration: function() {
		return this._target;
	}
	,get_remaining: function() {
		return this._target - this._time;
	}
	,__class__: com_haxepunk_tweens_misc_Alarm
	,__properties__: $extend(com_haxepunk_Tween.prototype.__properties__,{get_remaining:"get_remaining",get_duration:"get_duration",get_elapsed:"get_elapsed"})
});
var com_haxepunk_tweens_misc_MultiVarTween = function(complete,type) {
	this._vars = [];
	this._start = [];
	this._range = [];
	com_haxepunk_Tween.call(this,0,type,complete);
};
$hxClasses["com.haxepunk.tweens.misc.MultiVarTween"] = com_haxepunk_tweens_misc_MultiVarTween;
com_haxepunk_tweens_misc_MultiVarTween.__name__ = ["com","haxepunk","tweens","misc","MultiVarTween"];
com_haxepunk_tweens_misc_MultiVarTween.__super__ = com_haxepunk_Tween;
com_haxepunk_tweens_misc_MultiVarTween.prototype = $extend(com_haxepunk_Tween.prototype,{
	tween: function(object,properties,duration,ease) {
		this._object = object;
		this._vars.length = 0;
		this._start.length = 0;
		this._range.length = 0;
		this._target = duration;
		this._ease = ease;
		var p;
		var fields = null;
		if(Reflect.isObject(properties)) fields = Reflect.fields(properties); else throw new js__$Boot_HaxeError("Unsupported MultiVar properties container - use Object containing key/value pairs.");
		var _g = 0;
		while(_g < fields.length) {
			var p1 = fields[_g];
			++_g;
			var a = Reflect.getProperty(object,p1);
			if(isNaN(a)) throw new js__$Boot_HaxeError("The property \"" + p1 + "\" is not numeric.");
			this._vars.push(p1);
			this._start.push(a);
			this._range.push(Reflect.field(properties,p1) - a);
		}
		this.start();
	}
	,update: function() {
		com_haxepunk_Tween.prototype.update.call(this);
		var i = this._vars.length;
		while(i-- > 0) Reflect.setProperty(this._object,this._vars[i],this._start[i] + this._range[i] * this._t);
	}
	,_object: null
	,_vars: null
	,_start: null
	,_range: null
	,__class__: com_haxepunk_tweens_misc_MultiVarTween
});
var com_haxepunk_utils_Cursor = function(image) {
	var img = new com_haxepunk_graphics_Image(image);
	img.smooth = true;
	com_haxepunk_Entity.call(this,0,0,img);
};
$hxClasses["com.haxepunk.utils.Cursor"] = com_haxepunk_utils_Cursor;
com_haxepunk_utils_Cursor.__name__ = ["com","haxepunk","utils","Cursor"];
com_haxepunk_utils_Cursor.__super__ = com_haxepunk_Entity;
com_haxepunk_utils_Cursor.prototype = $extend(com_haxepunk_Entity.prototype,{
	update: function() {
		com_haxepunk_Entity.prototype.update.call(this);
		this.set_x(Std["int"](com_haxepunk_HXP.screen.get_mouseX() + this._scene.camera.x));
		this.set_y(Std["int"](com_haxepunk_HXP.screen.get_mouseY() + this._scene.camera.y));
		var img = this._graphic;
		if(img != null) {
			img.scaleX = 1 / com_haxepunk_HXP.screen.fullScaleX;
			img.scaleY = 1 / com_haxepunk_HXP.screen.fullScaleY;
		}
	}
	,show: function() {
		this.visible = true;
	}
	,hide: function() {
		this.visible = false;
	}
	,__class__: com_haxepunk_utils_Cursor
});
var com_haxepunk_utils_Draw = function() { };
$hxClasses["com.haxepunk.utils.Draw"] = com_haxepunk_utils_Draw;
com_haxepunk_utils_Draw.__name__ = ["com","haxepunk","utils","Draw"];
com_haxepunk_utils_Draw.init = function() {
	if(com_haxepunk_HXP.renderMode == com_haxepunk_RenderMode.HARDWARE) {
		var sprite = new openfl_display_Sprite();
		com_haxepunk_HXP.stage.addChild(sprite);
		com_haxepunk_utils_Draw._graphics = sprite.get_graphics();
	} else com_haxepunk_utils_Draw._graphics = com_haxepunk_HXP.sprite.get_graphics();
	com_haxepunk_utils_Draw._rect = com_haxepunk_HXP.rect;
};
com_haxepunk_utils_Draw.setTarget = function(target,camera,blend) {
	com_haxepunk_utils_Draw._target = target;
	if(camera != null) com_haxepunk_utils_Draw._camera = camera; else com_haxepunk_utils_Draw._camera = com_haxepunk_HXP.zero;
	com_haxepunk_utils_Draw.blend = blend;
};
com_haxepunk_utils_Draw.resetTarget = function() {
	com_haxepunk_utils_Draw._target = com_haxepunk_HXP.buffer;
	com_haxepunk_utils_Draw._camera = com_haxepunk_HXP.camera;
	com_haxepunk_utils_Draw.blend = null;
	com_haxepunk_utils_Draw._graphics.clear();
};
com_haxepunk_utils_Draw.drawToScreen = function() {
	if(com_haxepunk_utils_Draw.blend == null) com_haxepunk_utils_Draw._target.draw(com_haxepunk_HXP.sprite); else com_haxepunk_utils_Draw._target.draw(com_haxepunk_HXP.sprite,null,null,com_haxepunk_utils_Draw.blend);
};
com_haxepunk_utils_Draw.line = function(x1,y1,x2,y2,color) {
	if(color == null) color = 16777215;
	if(com_haxepunk_HXP.renderMode == com_haxepunk_RenderMode.BUFFER) {
		color = -16777216 | 16777215 & color;
		var screen = com_haxepunk_utils_Draw._target;
		var x = Math.abs(x2 - x1);
		var y = Math.abs(y2 - y1);
		var xx;
		var yy;
		x1 -= com_haxepunk_utils_Draw._camera.x | 0;
		y1 -= com_haxepunk_utils_Draw._camera.y | 0;
		x2 -= com_haxepunk_utils_Draw._camera.x | 0;
		y2 -= com_haxepunk_utils_Draw._camera.y | 0;
		if(x == 0) {
			if(y == 0) {
				screen.setPixel32(x1,y1,color);
				return;
			}
			if(y2 > y1) yy = 1; else yy = -1;
			while(y1 != y2) {
				screen.setPixel32(x1,y1,color);
				y1 += yy;
			}
			screen.setPixel32(x2,y2,color);
			return;
		}
		if(y == 0) {
			if(x2 > x1) xx = 1; else xx = -1;
			while(x1 != x2) {
				screen.setPixel32(x1,y1,color);
				x1 += xx;
			}
			screen.setPixel32(x2,y2,color);
			return;
		}
		if(x2 > x1) xx = 1; else xx = -1;
		if(y2 > y1) yy = 1; else yy = -1;
		var c = 0;
		var slope;
		if(x > y) {
			slope = y / x;
			c = .5;
			while(x1 != x2) {
				screen.setPixel32(x1,y1,color);
				x1 += xx;
				c += slope;
				if(c >= 1) {
					y1 += yy;
					c -= 1;
				}
			}
			screen.setPixel32(x2,y2,color);
		} else {
			slope = x / y;
			c = .5;
			while(y1 != y2) {
				screen.setPixel32(x1,y1,color);
				y1 += yy;
				c += slope;
				if(c >= 1) {
					x1 += xx;
					c -= 1;
				}
			}
			screen.setPixel32(x2,y2,color);
		}
	} else com_haxepunk_utils_Draw.linePlus(x1,y1,x2,y2,color);
};
com_haxepunk_utils_Draw.linePlus = function(x1,y1,x2,y2,color,alpha,thick) {
	if(thick == null) thick = 1;
	if(alpha == null) alpha = 1;
	if(color == null) color = -16777216;
	if(com_haxepunk_HXP.renderMode == com_haxepunk_RenderMode.BUFFER) {
		com_haxepunk_utils_Draw._graphics.clear();
		com_haxepunk_utils_Draw._graphics.lineStyle(thick,color,alpha,false,1);
		com_haxepunk_utils_Draw._graphics.moveTo(x1 - com_haxepunk_utils_Draw._camera.x,y1 - com_haxepunk_utils_Draw._camera.y);
		com_haxepunk_utils_Draw._graphics.lineTo(x2 - com_haxepunk_utils_Draw._camera.x,y2 - com_haxepunk_utils_Draw._camera.y);
		if(com_haxepunk_utils_Draw.blend == null) com_haxepunk_utils_Draw._target.draw(com_haxepunk_HXP.sprite); else com_haxepunk_utils_Draw._target.draw(com_haxepunk_HXP.sprite,null,null,com_haxepunk_utils_Draw.blend);
	} else {
		com_haxepunk_utils_Draw._graphics.lineStyle(thick,color,alpha,false,1);
		com_haxepunk_utils_Draw._graphics.moveTo(x1 - com_haxepunk_utils_Draw._camera.x,y1 - com_haxepunk_utils_Draw._camera.y);
		com_haxepunk_utils_Draw._graphics.lineTo(x2 - com_haxepunk_utils_Draw._camera.x,y2 - com_haxepunk_utils_Draw._camera.y);
		com_haxepunk_utils_Draw._graphics.lineStyle(0);
	}
};
com_haxepunk_utils_Draw.rect = function(x,y,width,height,color,alpha) {
	if(alpha == null) alpha = 1;
	if(color == null) color = 16777215;
	if(com_haxepunk_HXP.renderMode == com_haxepunk_RenderMode.BUFFER) {
		if(alpha >= 1 && com_haxepunk_utils_Draw.blend == null) {
			color = -16777216 | 16777215 & color;
			com_haxepunk_utils_Draw._rect.x = x - com_haxepunk_utils_Draw._camera.x;
			com_haxepunk_utils_Draw._rect.y = y - com_haxepunk_utils_Draw._camera.y;
			com_haxepunk_utils_Draw._rect.width = width;
			com_haxepunk_utils_Draw._rect.height = height;
			com_haxepunk_utils_Draw._target.fillRect(com_haxepunk_utils_Draw._rect,color);
			return;
		}
		com_haxepunk_utils_Draw._graphics.clear();
		com_haxepunk_utils_Draw._graphics.beginFill(color,alpha);
		com_haxepunk_utils_Draw._graphics.drawRect(x - com_haxepunk_utils_Draw._camera.x,y - com_haxepunk_utils_Draw._camera.y,width,height);
		if(com_haxepunk_utils_Draw.blend == null) com_haxepunk_utils_Draw._target.draw(com_haxepunk_HXP.sprite); else com_haxepunk_utils_Draw._target.draw(com_haxepunk_HXP.sprite,null,null,com_haxepunk_utils_Draw.blend);
	} else {
		com_haxepunk_utils_Draw._graphics.beginFill(color,alpha);
		com_haxepunk_utils_Draw._graphics.drawRect(x - com_haxepunk_utils_Draw._camera.x,y - com_haxepunk_utils_Draw._camera.y,width,height);
		com_haxepunk_utils_Draw._graphics.endFill();
	}
};
com_haxepunk_utils_Draw.rectPlus = function(x,y,width,height,color,alpha,fill,thick) {
	if(thick == null) thick = 1;
	if(fill == null) fill = true;
	if(alpha == null) alpha = 1;
	if(color == null) color = 16777215;
	color = 16777215 & color;
	if(com_haxepunk_HXP.renderMode == com_haxepunk_RenderMode.BUFFER) com_haxepunk_utils_Draw._graphics.clear();
	if(fill) com_haxepunk_utils_Draw._graphics.beginFill(color,alpha); else com_haxepunk_utils_Draw._graphics.lineStyle(thick,color,alpha);
	com_haxepunk_utils_Draw._graphics.drawRect(x - com_haxepunk_utils_Draw._camera.x,y - com_haxepunk_utils_Draw._camera.y,width,height);
	com_haxepunk_utils_Draw._graphics.endFill();
	if(com_haxepunk_HXP.renderMode == com_haxepunk_RenderMode.BUFFER) {
		if(com_haxepunk_utils_Draw.blend == null) com_haxepunk_utils_Draw._target.draw(com_haxepunk_HXP.sprite); else com_haxepunk_utils_Draw._target.draw(com_haxepunk_HXP.sprite,null,null,com_haxepunk_utils_Draw.blend);
	} else com_haxepunk_utils_Draw._graphics.lineStyle(0);
};
com_haxepunk_utils_Draw.circle = function(x,y,radius,color) {
	if(color == null) color = 16777215;
	if(com_haxepunk_HXP.renderMode == com_haxepunk_RenderMode.BUFFER) {
		color = -16777216 | 16777215 & color;
		x -= com_haxepunk_utils_Draw._camera.x | 0;
		y -= com_haxepunk_utils_Draw._camera.y | 0;
		var f = 1 - radius;
		var fx = 1;
		var fy = -2 * radius;
		var xx = 0;
		var yy = radius;
		com_haxepunk_utils_Draw._target.setPixel32(x,y + radius,color);
		com_haxepunk_utils_Draw._target.setPixel32(x,y - radius,color);
		com_haxepunk_utils_Draw._target.setPixel32(x + radius,y,color);
		com_haxepunk_utils_Draw._target.setPixel32(x - radius,y,color);
		while(xx < yy) {
			if(f >= 0) {
				yy--;
				fy += 2;
				f += fy;
			}
			xx++;
			fx += 2;
			f += fx;
			com_haxepunk_utils_Draw._target.setPixel32(x + xx,y + yy,color);
			com_haxepunk_utils_Draw._target.setPixel32(x - xx,y + yy,color);
			com_haxepunk_utils_Draw._target.setPixel32(x + xx,y - yy,color);
			com_haxepunk_utils_Draw._target.setPixel32(x - xx,y - yy,color);
			com_haxepunk_utils_Draw._target.setPixel32(x + yy,y + xx,color);
			com_haxepunk_utils_Draw._target.setPixel32(x - yy,y + xx,color);
			com_haxepunk_utils_Draw._target.setPixel32(x + yy,y - xx,color);
			com_haxepunk_utils_Draw._target.setPixel32(x - yy,y - xx,color);
		}
	} else com_haxepunk_utils_Draw.circlePlus(x,y,radius,color,1.0,false);
};
com_haxepunk_utils_Draw.circlePlus = function(x,y,radius,color,alpha,fill,thick) {
	if(thick == null) thick = 1;
	if(fill == null) fill = true;
	if(alpha == null) alpha = 1;
	if(color == null) color = 16777215;
	if(com_haxepunk_HXP.renderMode == com_haxepunk_RenderMode.BUFFER) {
		com_haxepunk_utils_Draw._graphics.clear();
		if(fill) {
			com_haxepunk_utils_Draw._graphics.beginFill(color & 16777215,alpha);
			com_haxepunk_utils_Draw._graphics.drawCircle(x - com_haxepunk_utils_Draw._camera.x,y - com_haxepunk_utils_Draw._camera.y,radius);
			com_haxepunk_utils_Draw._graphics.endFill();
		} else {
			com_haxepunk_utils_Draw._graphics.lineStyle(thick,color & 16777215,alpha);
			com_haxepunk_utils_Draw._graphics.drawCircle(x - com_haxepunk_utils_Draw._camera.x,y - com_haxepunk_utils_Draw._camera.y,radius);
		}
		if(com_haxepunk_utils_Draw.blend == null) com_haxepunk_utils_Draw._target.draw(com_haxepunk_HXP.sprite); else com_haxepunk_utils_Draw._target.draw(com_haxepunk_HXP.sprite,null,null,com_haxepunk_utils_Draw.blend);
	} else if(fill) {
		com_haxepunk_utils_Draw._graphics.beginFill(color & 16777215,alpha);
		com_haxepunk_utils_Draw._graphics.drawCircle(x - com_haxepunk_utils_Draw._camera.x,y - com_haxepunk_utils_Draw._camera.y,radius);
		com_haxepunk_utils_Draw._graphics.endFill();
	} else {
		com_haxepunk_utils_Draw._graphics.lineStyle(thick,color & 16777215,alpha);
		com_haxepunk_utils_Draw._graphics.drawCircle(x - com_haxepunk_utils_Draw._camera.x,y - com_haxepunk_utils_Draw._camera.y,radius);
		com_haxepunk_utils_Draw._graphics.lineStyle(0);
	}
};
com_haxepunk_utils_Draw.hitbox = function(e,outline,color,alpha) {
	if(alpha == null) alpha = 1;
	if(color == null) color = 16777215;
	if(outline == null) outline = true;
	if(com_haxepunk_HXP.renderMode == com_haxepunk_RenderMode.BUFFER) {
		if(outline) {
			color = -16777216 | 16777215 & color;
			var x = Std["int"](e.get_x() - e.originX - com_haxepunk_utils_Draw._camera.x);
			var y = Std["int"](e.get_y() - e.originY - com_haxepunk_utils_Draw._camera.y);
			com_haxepunk_utils_Draw._rect.x = x;
			com_haxepunk_utils_Draw._rect.y = y;
			com_haxepunk_utils_Draw._rect.width = e.get_width();
			com_haxepunk_utils_Draw._rect.height = 1;
			com_haxepunk_utils_Draw._target.fillRect(com_haxepunk_utils_Draw._rect,color);
			com_haxepunk_utils_Draw._rect.y += e.get_height() - 1;
			com_haxepunk_utils_Draw._target.fillRect(com_haxepunk_utils_Draw._rect,color);
			com_haxepunk_utils_Draw._rect.y = y;
			com_haxepunk_utils_Draw._rect.width = 1;
			com_haxepunk_utils_Draw._rect.height = e.get_height();
			com_haxepunk_utils_Draw._target.fillRect(com_haxepunk_utils_Draw._rect,color);
			com_haxepunk_utils_Draw._rect.x += e.get_width() - 1;
			com_haxepunk_utils_Draw._target.fillRect(com_haxepunk_utils_Draw._rect,color);
			return;
		}
		if(alpha >= 1 && com_haxepunk_utils_Draw.blend == null) {
			color = -16777216 | 16777215 & color;
			com_haxepunk_utils_Draw._rect.x = e.get_x() - e.originX - com_haxepunk_utils_Draw._camera.x;
			com_haxepunk_utils_Draw._rect.y = e.get_y() - e.originY - com_haxepunk_utils_Draw._camera.y;
			com_haxepunk_utils_Draw._rect.width = e.get_width();
			com_haxepunk_utils_Draw._rect.height = e.get_height();
			com_haxepunk_utils_Draw._target.fillRect(com_haxepunk_utils_Draw._rect,color);
			return;
		}
		com_haxepunk_utils_Draw._graphics.clear();
		com_haxepunk_utils_Draw._graphics.beginFill(color,alpha);
		com_haxepunk_utils_Draw._graphics.drawRect(e.get_x() - e.originX - com_haxepunk_utils_Draw._camera.x,e.get_y() - e.originY - com_haxepunk_utils_Draw._camera.y,e.get_width(),e.get_height());
		if(com_haxepunk_utils_Draw.blend == null) com_haxepunk_utils_Draw._target.draw(com_haxepunk_HXP.sprite); else com_haxepunk_utils_Draw._target.draw(com_haxepunk_HXP.sprite,null,null,com_haxepunk_utils_Draw.blend);
	} else {
		com_haxepunk_utils_Draw._graphics.beginFill(color,alpha);
		com_haxepunk_utils_Draw._graphics.drawRect(e.get_x() - e.originX - com_haxepunk_utils_Draw._camera.x,e.get_y() - e.originY - com_haxepunk_utils_Draw._camera.y,e.get_width(),e.get_height());
		com_haxepunk_utils_Draw._graphics.endFill();
	}
};
com_haxepunk_utils_Draw.curve = function(x1,y1,x2,y2,x3,y3,thick,color,alpha) {
	if(alpha == null) alpha = 1;
	if(color == null) color = 0;
	if(thick == null) thick = 1;
	if(com_haxepunk_HXP.renderMode == com_haxepunk_RenderMode.BUFFER) {
		com_haxepunk_utils_Draw._graphics.clear();
		com_haxepunk_utils_Draw._graphics.lineStyle(thick,color,alpha);
		com_haxepunk_utils_Draw._graphics.moveTo(x1 - com_haxepunk_utils_Draw._camera.x,y1 - com_haxepunk_utils_Draw._camera.y);
		com_haxepunk_utils_Draw._graphics.curveTo(x2 - com_haxepunk_utils_Draw._camera.x,y2 - com_haxepunk_utils_Draw._camera.y,x3 - com_haxepunk_utils_Draw._camera.x,y3 - com_haxepunk_utils_Draw._camera.y);
		if(com_haxepunk_utils_Draw.blend == null) com_haxepunk_utils_Draw._target.draw(com_haxepunk_HXP.sprite); else com_haxepunk_utils_Draw._target.draw(com_haxepunk_HXP.sprite,null,null,com_haxepunk_utils_Draw.blend);
	} else {
		com_haxepunk_utils_Draw._graphics.lineStyle(thick,color,alpha);
		com_haxepunk_utils_Draw._graphics.moveTo(x1 - com_haxepunk_utils_Draw._camera.x,y1 - com_haxepunk_utils_Draw._camera.y);
		com_haxepunk_utils_Draw._graphics.curveTo(x2 - com_haxepunk_utils_Draw._camera.x,y2 - com_haxepunk_utils_Draw._camera.y,x3 - com_haxepunk_utils_Draw._camera.x,y3 - com_haxepunk_utils_Draw._camera.y);
		com_haxepunk_utils_Draw._graphics.lineStyle(0);
	}
};
com_haxepunk_utils_Draw.graphic = function(g,x,y,layer) {
	if(layer == null) layer = 0;
	if(y == null) y = 0;
	if(x == null) x = 0;
	if(g._visible) {
		if(g.relative) {
			com_haxepunk_HXP.point.x = x;
			com_haxepunk_HXP.point.y = y;
		} else com_haxepunk_HXP.point.x = com_haxepunk_HXP.point.y = 0;
		com_haxepunk_HXP.point2.x = com_haxepunk_HXP.camera.x;
		com_haxepunk_HXP.point2.y = com_haxepunk_HXP.camera.y;
		if(com_haxepunk_HXP.renderMode == com_haxepunk_RenderMode.BUFFER) g.render(com_haxepunk_utils_Draw._target,com_haxepunk_HXP.point,com_haxepunk_HXP.point2); else g.renderAtlas(layer,com_haxepunk_HXP.point,com_haxepunk_HXP.point2);
	}
};
com_haxepunk_utils_Draw.entity = function(e,x,y,addEntityPosition) {
	if(addEntityPosition == null) addEntityPosition = false;
	if(y == null) y = 0;
	if(x == null) x = 0;
	if(e.visible && e._graphic != null) {
		if(addEntityPosition) com_haxepunk_utils_Draw.graphic(e._graphic,Std["int"](x + e.get_x()),Std["int"](y + e.get_y())); else com_haxepunk_utils_Draw.graphic(e._graphic,x,y);
	}
};
com_haxepunk_utils_Draw.text = function(text,x,y,options) {
	if(y == null) y = 0;
	if(x == null) x = 0;
	var textGfx = new com_haxepunk_graphics_Text(text,x,y,0,0,options);
	textGfx.render(com_haxepunk_utils_Draw._target,com_haxepunk_HXP.zero,com_haxepunk_utils_Draw._camera);
};
var com_haxepunk_utils_GestureType = function() {
	this.released = false;
	this.pressed = false;
	this.active = false;
	this.time = 0;
	this.magnitude = 0;
	this.y2 = 0;
	this.x2 = 0;
	this.y = 0;
	this.x = 0;
	this.reset();
};
$hxClasses["com.haxepunk.utils.GestureType"] = com_haxepunk_utils_GestureType;
com_haxepunk_utils_GestureType.__name__ = ["com","haxepunk","utils","GestureType"];
com_haxepunk_utils_GestureType.prototype = {
	x: null
	,y: null
	,x2: null
	,y2: null
	,magnitude: null
	,time: null
	,active: null
	,pressed: null
	,released: null
	,reset: function() {
		this.x = this.y = this.x2 = this.y2 = this.time = 0;
		this.active = this.pressed = this.released = false;
	}
	,start: function(x,y) {
		if(y == null) y = 0;
		if(x == null) x = 0;
		this.active = this.pressed = true;
		this.x = x;
		this.y = y;
		this.x2 = this.y2 = this.magnitude = 0;
		this.time = 0;
	}
	,get_distance: function() {
		return com_haxepunk_HXP.distance(this.x,this.y,this.x2,this.y2);
	}
	,get_velocity: function() {
		if(this.time == 0) return 0; else return this.get_distance() / this.time;
	}
	,get_angle: function() {
		return 0;
	}
	,release: function() {
		this.released = true;
	}
	,update: function() {
		if(this.pressed) this.pressed = false; else if(this.released) this.reset(); else if(this.active) this.time += com_haxepunk_HXP.elapsed;
	}
	,__class__: com_haxepunk_utils_GestureType
	,__properties__: {get_angle:"get_angle",get_velocity:"get_velocity",get_distance:"get_distance"}
};
var com_haxepunk_utils__$Gesture_Gesture_$Impl_$ = {};
$hxClasses["com.haxepunk.utils._Gesture.Gesture_Impl_"] = com_haxepunk_utils__$Gesture_Gesture_$Impl_$;
com_haxepunk_utils__$Gesture_Gesture_$Impl_$.__name__ = ["com","haxepunk","utils","_Gesture","Gesture_Impl_"];
com_haxepunk_utils__$Gesture_Gesture_$Impl_$.enable = function() {
	com_haxepunk_utils__$Gesture_Gesture_$Impl_$.enabled = true;
	com_haxepunk_utils__$Gesture_Gesture_$Impl_$.mode = 0;
};
com_haxepunk_utils__$Gesture_Gesture_$Impl_$.disable = function() {
	com_haxepunk_utils__$Gesture_Gesture_$Impl_$.enabled = false;
};
com_haxepunk_utils__$Gesture_Gesture_$Impl_$.getTouch = function(touches,touchOrder,n) {
	if(n >= touchOrder.length) return null;
	return touches.h[touchOrder[n]];
};
com_haxepunk_utils__$Gesture_Gesture_$Impl_$.check = function(gestureType) {
	if(!com_haxepunk_utils__$Gesture_Gesture_$Impl_$.gestures.h.hasOwnProperty(gestureType)) return false;
	return com_haxepunk_utils__$Gesture_Gesture_$Impl_$.gestures.h[gestureType].active;
};
com_haxepunk_utils__$Gesture_Gesture_$Impl_$.pressed = function(gestureType) {
	if(!com_haxepunk_utils__$Gesture_Gesture_$Impl_$.gestures.h.hasOwnProperty(gestureType)) return false;
	return com_haxepunk_utils__$Gesture_Gesture_$Impl_$.gestures.h[gestureType].pressed;
};
com_haxepunk_utils__$Gesture_Gesture_$Impl_$.released = function(gestureType) {
	if(!com_haxepunk_utils__$Gesture_Gesture_$Impl_$.gestures.h.hasOwnProperty(gestureType)) return false;
	return com_haxepunk_utils__$Gesture_Gesture_$Impl_$.gestures.h[gestureType].released;
};
com_haxepunk_utils__$Gesture_Gesture_$Impl_$.get = function(gestureType) {
	if(!com_haxepunk_utils__$Gesture_Gesture_$Impl_$.check(gestureType)) return null;
	return com_haxepunk_utils__$Gesture_Gesture_$Impl_$.gestures.h[gestureType];
};
com_haxepunk_utils__$Gesture_Gesture_$Impl_$.start = function(gestureType,x,y) {
	if(y == null) y = 0;
	if(x == null) x = 0;
	if(!com_haxepunk_utils__$Gesture_Gesture_$Impl_$.gestures.h.hasOwnProperty(gestureType)) {
		var v = new com_haxepunk_utils_GestureType();
		com_haxepunk_utils__$Gesture_Gesture_$Impl_$.gestures.h[gestureType] = v;
		v;
	}
	if(!com_haxepunk_utils__$Gesture_Gesture_$Impl_$.gestures.h[gestureType].active) com_haxepunk_utils__$Gesture_Gesture_$Impl_$.gestures.h[gestureType].start(x,y);
};
com_haxepunk_utils__$Gesture_Gesture_$Impl_$.finish = function(gestureType) {
	if(!com_haxepunk_utils__$Gesture_Gesture_$Impl_$.gestures.h.hasOwnProperty(gestureType)) {
		var v = new com_haxepunk_utils_GestureType();
		com_haxepunk_utils__$Gesture_Gesture_$Impl_$.gestures.h[gestureType] = v;
		v;
	}
	com_haxepunk_utils__$Gesture_Gesture_$Impl_$.gestures.h[gestureType].release();
};
com_haxepunk_utils__$Gesture_Gesture_$Impl_$.finishAll = function() {
	var $it0 = com_haxepunk_utils__$Gesture_Gesture_$Impl_$.gestures.iterator();
	while( $it0.hasNext() ) {
		var gesture = $it0.next();
		if(gesture.active) gesture.release();
	}
};
com_haxepunk_utils__$Gesture_Gesture_$Impl_$.update = function() {
	var $it0 = com_haxepunk_utils__$Gesture_Gesture_$Impl_$.gestures.iterator();
	while( $it0.hasNext() ) {
		var gesture = $it0.next();
		gesture.update();
	}
	var touches = com_haxepunk_utils_Input._touches;
	var touchOrder = com_haxepunk_utils_Input._touchOrder;
	var touchCount = 0;
	var _g = 0;
	while(_g < touchOrder.length) {
		var touch = touchOrder[_g];
		++_g;
		if(touches.h.hasOwnProperty(touch)) {
			if(touches.h[touch].get_pressed() || !touches.h[touch].released) touchCount += 1;
		} else HxOverrides.remove(touchOrder,touch);
	}
	if(com_haxepunk_utils__$Gesture_Gesture_$Impl_$._lastTap > 0) com_haxepunk_utils__$Gesture_Gesture_$Impl_$._lastTap = Math.max(0,com_haxepunk_utils__$Gesture_Gesture_$Impl_$._lastTap - com_haxepunk_HXP.elapsed / com_haxepunk_utils__$Gesture_Gesture_$Impl_$.doubleTapTime);
	var _g1 = com_haxepunk_utils__$Gesture_Gesture_$Impl_$.mode;
	switch(_g1) {
	case 0:
		if(touchCount > 0) if(touchCount == 1) com_haxepunk_utils__$Gesture_Gesture_$Impl_$.mode = 1; else com_haxepunk_utils__$Gesture_Gesture_$Impl_$.mode = 3;
		break;
	case 1:
		if(touchCount == 0) {
			com_haxepunk_utils__$Gesture_Gesture_$Impl_$.mode = 0;
			var touch1;
			if(0 >= touchOrder.length) touch1 = null; else touch1 = touches.h[touchOrder[0]];
			var t;
			if(touch1.time < com_haxepunk_utils__$Gesture_Gesture_$Impl_$.longPressTime) t = 1; else t = 3;
			if(t == 1 && com_haxepunk_utils__$Gesture_Gesture_$Impl_$._lastTap > 0) t = 2;
			if(!com_haxepunk_utils__$Gesture_Gesture_$Impl_$.check(t)) {
				com_haxepunk_utils__$Gesture_Gesture_$Impl_$.start(t,touch1.x,touch1.y);
				if(t == 1) com_haxepunk_utils__$Gesture_Gesture_$Impl_$._lastTap = 1;
			}
		} else if(touchCount == 1) {
			var touch2;
			if(0 >= touchOrder.length) touch2 = null; else touch2 = touches.h[touchOrder[0]];
			var dist = com_haxepunk_HXP.distance(touch2.startX,touch2.startY,touch2.x,touch2.y);
			if(dist > com_haxepunk_utils__$Gesture_Gesture_$Impl_$.deadZone) com_haxepunk_utils__$Gesture_Gesture_$Impl_$.mode = 2; else if(touch2.time >= com_haxepunk_utils__$Gesture_Gesture_$Impl_$.longPressTime && !com_haxepunk_utils__$Gesture_Gesture_$Impl_$.check(3)) com_haxepunk_utils__$Gesture_Gesture_$Impl_$.start(3,touch2.x,touch2.y);
		} else if(touchCount > 1) com_haxepunk_utils__$Gesture_Gesture_$Impl_$.mode = 3;
		break;
	case 2:
		if(touchCount == 0) com_haxepunk_utils__$Gesture_Gesture_$Impl_$.mode = 0; else {
			var touch3;
			if(0 >= touchOrder.length) touch3 = null; else touch3 = touches.h[touchOrder[0]];
			var dist1 = com_haxepunk_HXP.distance(touch3.startX,touch3.startY,touch3.x,touch3.y);
			if(!com_haxepunk_utils__$Gesture_Gesture_$Impl_$.check(4)) com_haxepunk_utils__$Gesture_Gesture_$Impl_$.start(4,touch3.startX,touch3.startY);
			var g = com_haxepunk_utils__$Gesture_Gesture_$Impl_$.get(4);
			g.x2 = touch3.x;
			g.y2 = touch3.y;
			g.magnitude = dist1;
		}
		if(touchCount > 1) {
			var touch4;
			if(1 >= touchOrder.length) touch4 = null; else touch4 = touches.h[touchOrder[1]];
			com_haxepunk_utils__$Gesture_Gesture_$Impl_$.start(6,touch4.x,touch4.y);
		} else if(com_haxepunk_utils__$Gesture_Gesture_$Impl_$.check(6)) com_haxepunk_utils__$Gesture_Gesture_$Impl_$.finish(6);
		break;
	case 3:
		if(touchCount < 2) {
			if(touchCount == 0) com_haxepunk_utils__$Gesture_Gesture_$Impl_$.mode = 0; else com_haxepunk_utils__$Gesture_Gesture_$Impl_$.mode = 5;
			if(!com_haxepunk_utils__$Gesture_Gesture_$Impl_$.check(5)) {
				var t1;
				if(0 >= touchOrder.length) t1 = null; else t1 = touches.h[touchOrder[0]];
				var t2;
				if(1 >= touchOrder.length) t2 = null; else t2 = touches.h[touchOrder[1]];
				if(t2 != null) {
					var mx = (t1.startX - t2.startX) / 2;
					var my = (t1.startY - t2.startY) / 2;
					com_haxepunk_utils__$Gesture_Gesture_$Impl_$.start(6,mx,my);
				}
			}
			com_haxepunk_utils__$Gesture_Gesture_$Impl_$.finishAll();
		} else {
			var t11;
			if(0 >= touchOrder.length) t11 = null; else t11 = touches.h[touchOrder[0]];
			var t21;
			if(1 >= touchOrder.length) t21 = null; else t21 = touches.h[touchOrder[1]];
			if(t11 != null && t21 != null) {
				var d1 = com_haxepunk_HXP.distance(t11.startX,t11.startY,t11.x,t11.y);
				var d2 = com_haxepunk_HXP.distance(t21.startX,t21.startY,t21.x,t21.y);
				if(d1 > com_haxepunk_utils__$Gesture_Gesture_$Impl_$.deadZone && d2 > com_haxepunk_utils__$Gesture_Gesture_$Impl_$.deadZone) {
					if(!com_haxepunk_utils__$Gesture_Gesture_$Impl_$.check(5)) {
						var mx1 = (t11.startX - t21.startX) / 2;
						var my1 = (t11.startY - t21.startY) / 2;
						com_haxepunk_utils__$Gesture_Gesture_$Impl_$.start(5,mx1,my1);
					}
					var inner = com_haxepunk_HXP.distance(t11.startX,t11.startY,t21.startX,t21.startY);
					var outer = com_haxepunk_HXP.distance(t11.x,t11.y,t21.x,t21.y);
					com_haxepunk_utils__$Gesture_Gesture_$Impl_$.get(5).magnitude = inner / outer;
				}
			}
		}
		break;
	default:
		if(touchCount == 0) com_haxepunk_utils__$Gesture_Gesture_$Impl_$.mode = 0;
	}
	if(touchCount == 0) com_haxepunk_utils__$Gesture_Gesture_$Impl_$.finishAll();
};
var com_haxepunk_utils_HaxelibInfoBuilder = function() { };
$hxClasses["com.haxepunk.utils.HaxelibInfoBuilder"] = com_haxepunk_utils_HaxelibInfoBuilder;
com_haxepunk_utils_HaxelibInfoBuilder.__name__ = ["com","haxepunk","utils","HaxelibInfoBuilder"];
var com_haxepunk_utils_HaxelibInfo = function() { };
$hxClasses["com.haxepunk.utils.HaxelibInfo"] = com_haxepunk_utils_HaxelibInfo;
com_haxepunk_utils_HaxelibInfo.__name__ = ["com","haxepunk","utils","HaxelibInfo"];
var com_haxepunk_utils__$Input_InputType_$Impl_$ = {};
$hxClasses["com.haxepunk.utils._Input.InputType_Impl_"] = com_haxepunk_utils__$Input_InputType_$Impl_$;
com_haxepunk_utils__$Input_InputType_$Impl_$.__name__ = ["com","haxepunk","utils","_Input","InputType_Impl_"];
com_haxepunk_utils__$Input_InputType_$Impl_$.__properties__ = {get_type:"get_type"}
com_haxepunk_utils__$Input_InputType_$Impl_$._new = function(e) {
	return e;
};
com_haxepunk_utils__$Input_InputType_$Impl_$.get_type = function(this1) {
	return this1;
};
com_haxepunk_utils__$Input_InputType_$Impl_$.fromLeft = function(v) {
	var e = com_haxepunk_ds_Either.Left(v);
	return e;
};
com_haxepunk_utils__$Input_InputType_$Impl_$.fromRight = function(v) {
	var e = com_haxepunk_ds_Either.Right(v);
	return e;
};
var com_haxepunk_utils_Input = function() { };
$hxClasses["com.haxepunk.utils.Input"] = com_haxepunk_utils_Input;
com_haxepunk_utils_Input.__name__ = ["com","haxepunk","utils","Input"];
com_haxepunk_utils_Input.__properties__ = {get_joysticks:"get_joysticks",get_touchOrder:"get_touchOrder",get_touches:"get_touches",get_mouseFlashY:"get_mouseFlashY",get_mouseFlashX:"get_mouseFlashX",get_mouseY:"get_mouseY",get_mouseX:"get_mouseX",get_mouseWheelDelta:"get_mouseWheelDelta"}
com_haxepunk_utils_Input.get_mouseWheelDelta = function() {
	if(com_haxepunk_utils_Input.mouseWheel) {
		com_haxepunk_utils_Input.mouseWheel = false;
		return com_haxepunk_utils_Input._mouseWheelDelta;
	}
	return 0;
};
com_haxepunk_utils_Input.showCursor = function() {
	openfl_ui_Mouse.show();
};
com_haxepunk_utils_Input.hideCursor = function() {
	openfl_ui_Mouse.hide();
};
com_haxepunk_utils_Input.get_mouseX = function() {
	return com_haxepunk_HXP.screen.get_mouseX();
};
com_haxepunk_utils_Input.get_mouseY = function() {
	return com_haxepunk_HXP.screen.get_mouseY();
};
com_haxepunk_utils_Input.get_mouseFlashX = function() {
	return Std["int"](com_haxepunk_HXP.stage.get_mouseX() - com_haxepunk_HXP.screen.x);
};
com_haxepunk_utils_Input.get_mouseFlashY = function() {
	return Std["int"](com_haxepunk_HXP.stage.get_mouseY() - com_haxepunk_HXP.screen.y);
};
com_haxepunk_utils_Input.define = function(name,keys) {
	com_haxepunk_utils_Input._control.set(name,keys);
};
com_haxepunk_utils_Input.check = function(input) {
	{
		var _g = input;
		switch(_g[1]) {
		case 0:
			var s = _g[2];
			var _g1 = 0;
			var _g2 = com_haxepunk_utils_Input._control.get(s);
			while(_g1 < _g2.length) {
				var key = _g2[_g1];
				++_g1;
				if(key < 0 && com_haxepunk_utils_Input._keyNum > 0 || com_haxepunk_utils_Input._key.h[key]) return true;
			}
			return false;
		case 1:
			var i = _g[2];
			if(i < 0) return com_haxepunk_utils_Input._keyNum > 0; else return com_haxepunk_utils_Input._key.h[i];
			break;
		}
	}
	return false;
};
com_haxepunk_utils_Input.pressed = function(input) {
	{
		var _g = input;
		switch(_g[1]) {
		case 0:
			var s = _g[2];
			if(com_haxepunk_utils_Input._control.exists(s)) {
				var _g1 = 0;
				var _g2 = com_haxepunk_utils_Input._control.get(s);
				while(_g1 < _g2.length) {
					var key = _g2[_g1];
					++_g1;
					if(key < 0?com_haxepunk_utils_Input._pressNum != 0:HxOverrides.indexOf(com_haxepunk_utils_Input._press,key,0) >= 0) return true;
				}
			}
			break;
		case 1:
			var i = _g[2];
			if(i < 0) return com_haxepunk_utils_Input._pressNum != 0; else return HxOverrides.indexOf(com_haxepunk_utils_Input._press,i,0) >= 0;
			break;
		}
	}
	return false;
};
com_haxepunk_utils_Input.released = function(input) {
	{
		var _g = input;
		switch(_g[1]) {
		case 0:
			var s = _g[2];
			var _g1 = 0;
			var _g2 = com_haxepunk_utils_Input._control.get(s);
			while(_g1 < _g2.length) {
				var key = _g2[_g1];
				++_g1;
				if(key < 0?com_haxepunk_utils_Input._releaseNum != 0:HxOverrides.indexOf(com_haxepunk_utils_Input._release,key,0) >= 0) return true;
			}
			return false;
		case 1:
			var i = _g[2];
			if(i < 0) return com_haxepunk_utils_Input._releaseNum != 0; else return HxOverrides.indexOf(com_haxepunk_utils_Input._release,i,0) >= 0;
			break;
		}
	}
};
com_haxepunk_utils_Input.touchPoints = function(touchCallback) {
	var $it0 = com_haxepunk_utils_Input._touches.iterator();
	while( $it0.hasNext() ) {
		var touch = $it0.next();
		touchCallback(touch);
	}
};
com_haxepunk_utils_Input.get_touches = function() {
	return com_haxepunk_utils_Input._touches;
};
com_haxepunk_utils_Input.get_touchOrder = function() {
	return com_haxepunk_utils_Input._touchOrder;
};
com_haxepunk_utils_Input.joystick = function(id) {
	var joy = com_haxepunk_utils_Input._joysticks.h[id];
	if(joy == null) {
		joy = new com_haxepunk_utils_Joystick();
		com_haxepunk_utils_Input._joysticks.h[id] = joy;
	}
	return joy;
};
com_haxepunk_utils_Input.get_joysticks = function() {
	var count = 0;
	var $it0 = com_haxepunk_utils_Input._joysticks.iterator();
	while( $it0.hasNext() ) {
		var joystick = $it0.next();
		if(joystick.get_connected()) count += 1;
	}
	return count;
};
com_haxepunk_utils_Input.enable = function() {
	if(!com_haxepunk_utils_Input._enabled && com_haxepunk_HXP.stage != null) {
		com_haxepunk_HXP.stage.addEventListener("keyDown",com_haxepunk_utils_Input.onKeyDown,false,2);
		com_haxepunk_HXP.stage.addEventListener("keyUp",com_haxepunk_utils_Input.onKeyUp,false,2);
		com_haxepunk_HXP.stage.addEventListener("mouseDown",com_haxepunk_utils_Input.onMouseDown,false,2);
		com_haxepunk_HXP.stage.addEventListener("mouseUp",com_haxepunk_utils_Input.onMouseUp,false,2);
		com_haxepunk_HXP.stage.addEventListener("mouseWheel",com_haxepunk_utils_Input.onMouseWheel,false,2);
		com_haxepunk_utils_Input.multiTouchSupported = openfl_ui_Multitouch.get_supportsTouchEvents();
		if(com_haxepunk_utils_Input.multiTouchSupported) {
			openfl_ui_Multitouch.inputMode = 2;
			com_haxepunk_HXP.stage.addEventListener("touchBegin",com_haxepunk_utils_Input.onTouchBegin);
			com_haxepunk_HXP.stage.addEventListener("touchMove",com_haxepunk_utils_Input.onTouchMove);
			com_haxepunk_HXP.stage.addEventListener("touchEnd",com_haxepunk_utils_Input.onTouchEnd);
		}
	}
};
com_haxepunk_utils_Input.update = function() {
	while(com_haxepunk_utils_Input._pressNum > 0) com_haxepunk_utils_Input._press[--com_haxepunk_utils_Input._pressNum] = -1;
	while(com_haxepunk_utils_Input._releaseNum > 0) com_haxepunk_utils_Input._release[--com_haxepunk_utils_Input._releaseNum] = -1;
	if(com_haxepunk_utils_Input.mousePressed) com_haxepunk_utils_Input.mousePressed = false;
	if(com_haxepunk_utils_Input.mouseReleased) com_haxepunk_utils_Input.mouseReleased = false;
	if(com_haxepunk_utils_Input.multiTouchSupported) {
		var $it0 = com_haxepunk_utils_Input._touches.iterator();
		while( $it0.hasNext() ) {
			var touch = $it0.next();
			touch.update();
		}
		if(com_haxepunk_utils__$Gesture_Gesture_$Impl_$.enabled) com_haxepunk_utils__$Gesture_Gesture_$Impl_$.update();
		var $it1 = com_haxepunk_utils_Input._touches.iterator();
		while( $it1.hasNext() ) {
			var touch1 = $it1.next();
			if(touch1.released && !(touch1.time == 0)) {
				com_haxepunk_utils_Input._touches.remove(touch1.id);
				HxOverrides.remove(com_haxepunk_utils_Input._touchOrder,touch1.id);
			}
		}
	}
};
com_haxepunk_utils_Input.onKeyDown = function(e) {
	var code = com_haxepunk_utils_Input.keyCode(e);
	if(code == -1) return;
	com_haxepunk_utils_Input.lastKey = code;
	if(code == 8) com_haxepunk_utils_Input.keyString = HxOverrides.substr(com_haxepunk_utils_Input.keyString,0,com_haxepunk_utils_Input.keyString.length - 1); else if(code > 47 && code < 58 || code > 64 && code < 91 || code == 32) {
		if(com_haxepunk_utils_Input.keyString.length > 100) com_haxepunk_utils_Input.keyString = HxOverrides.substr(com_haxepunk_utils_Input.keyString,1,null);
		var $char = String.fromCharCode(code);
		if(e.shiftKey != com_haxepunk_utils_Input.check(com_haxepunk_utils__$Input_InputType_$Impl_$.fromRight(20))) $char = $char.toUpperCase(); else $char = $char.toLowerCase();
		com_haxepunk_utils_Input.keyString += $char;
	}
	if(!com_haxepunk_utils_Input._key.h[code]) {
		{
			com_haxepunk_utils_Input._key.h[code] = true;
			true;
		}
		com_haxepunk_utils_Input._keyNum++;
		com_haxepunk_utils_Input._press[com_haxepunk_utils_Input._pressNum++] = code;
	}
};
com_haxepunk_utils_Input.onKeyUp = function(e) {
	var code = com_haxepunk_utils_Input.keyCode(e);
	if(code == -1) return;
	if(com_haxepunk_utils_Input._key.h[code]) {
		{
			com_haxepunk_utils_Input._key.h[code] = false;
			false;
		}
		com_haxepunk_utils_Input._keyNum--;
		com_haxepunk_utils_Input._release[com_haxepunk_utils_Input._releaseNum++] = code;
	}
};
com_haxepunk_utils_Input.keyCode = function(e) {
	return e.keyCode;
};
com_haxepunk_utils_Input.onMouseDown = function(e) {
	if(!com_haxepunk_utils_Input.mouseDown) {
		com_haxepunk_utils_Input.mouseDown = true;
		com_haxepunk_utils_Input.mouseUp = false;
		com_haxepunk_utils_Input.mousePressed = true;
	}
};
com_haxepunk_utils_Input.onMouseUp = function(e) {
	com_haxepunk_utils_Input.mouseDown = false;
	com_haxepunk_utils_Input.mouseUp = true;
	com_haxepunk_utils_Input.mouseReleased = true;
};
com_haxepunk_utils_Input.onMouseWheel = function(e) {
	com_haxepunk_utils_Input.mouseWheel = true;
	com_haxepunk_utils_Input._mouseWheelDelta = e.delta;
};
com_haxepunk_utils_Input.onTouchBegin = function(e) {
	var touchPoint = new com_haxepunk_utils_Touch(e.stageX / com_haxepunk_HXP.screen.fullScaleX,e.stageY / com_haxepunk_HXP.screen.fullScaleY,e.touchPointID);
	com_haxepunk_utils_Input._touches.h[e.touchPointID] = touchPoint;
	com_haxepunk_utils_Input._touchOrder.push(e.touchPointID);
};
com_haxepunk_utils_Input.onTouchMove = function(e) {
	if(com_haxepunk_utils_Input._touches.h.hasOwnProperty(e.touchPointID)) {
		var point = com_haxepunk_utils_Input._touches.h[e.touchPointID];
		point.x = e.stageX / com_haxepunk_HXP.screen.fullScaleX;
		point.y = e.stageY / com_haxepunk_HXP.screen.fullScaleY;
	}
};
com_haxepunk_utils_Input.onTouchEnd = function(e) {
	if(com_haxepunk_utils_Input._touches.h.hasOwnProperty(e.touchPointID)) com_haxepunk_utils_Input._touches.h[e.touchPointID].released = true;
};
var com_haxepunk_utils_JoyButtonState = $hxClasses["com.haxepunk.utils.JoyButtonState"] = { __ename__ : ["com","haxepunk","utils","JoyButtonState"], __constructs__ : ["BUTTON_ON","BUTTON_OFF","BUTTON_PRESSED","BUTTON_RELEASED"] };
com_haxepunk_utils_JoyButtonState.BUTTON_ON = ["BUTTON_ON",0];
com_haxepunk_utils_JoyButtonState.BUTTON_ON.toString = $estr;
com_haxepunk_utils_JoyButtonState.BUTTON_ON.__enum__ = com_haxepunk_utils_JoyButtonState;
com_haxepunk_utils_JoyButtonState.BUTTON_OFF = ["BUTTON_OFF",1];
com_haxepunk_utils_JoyButtonState.BUTTON_OFF.toString = $estr;
com_haxepunk_utils_JoyButtonState.BUTTON_OFF.__enum__ = com_haxepunk_utils_JoyButtonState;
com_haxepunk_utils_JoyButtonState.BUTTON_PRESSED = ["BUTTON_PRESSED",2];
com_haxepunk_utils_JoyButtonState.BUTTON_PRESSED.toString = $estr;
com_haxepunk_utils_JoyButtonState.BUTTON_PRESSED.__enum__ = com_haxepunk_utils_JoyButtonState;
com_haxepunk_utils_JoyButtonState.BUTTON_RELEASED = ["BUTTON_RELEASED",3];
com_haxepunk_utils_JoyButtonState.BUTTON_RELEASED.toString = $estr;
com_haxepunk_utils_JoyButtonState.BUTTON_RELEASED.__enum__ = com_haxepunk_utils_JoyButtonState;
var com_haxepunk_utils_Joystick = function() {
	this.buttons = new haxe_ds_IntMap();
	this.ball = new openfl_geom_Point(0,0);
	this.axis = [];
	this.hat = new openfl_geom_Point(0,0);
	this.set_connected(false);
	this._timeout = 0;
};
$hxClasses["com.haxepunk.utils.Joystick"] = com_haxepunk_utils_Joystick;
com_haxepunk_utils_Joystick.__name__ = ["com","haxepunk","utils","Joystick"];
com_haxepunk_utils_Joystick.prototype = {
	buttons: null
	,axis: null
	,hat: null
	,ball: null
	,update: function() {
		this._timeout -= com_haxepunk_HXP.elapsed;
		var $it0 = this.buttons.keys();
		while( $it0.hasNext() ) {
			var button = $it0.next();
			var _g = this.buttons.h[button];
			if(_g != null) switch(_g[1]) {
			case 2:
				this.buttons.h[button] = com_haxepunk_utils_JoyButtonState.BUTTON_ON;
				break;
			case 3:
				this.buttons.h[button] = com_haxepunk_utils_JoyButtonState.BUTTON_OFF;
				break;
			default:
			} else {
			}
		}
	}
	,pressed: function(button) {
		if(button == null) {
			var $it0 = this.buttons.keys();
			while( $it0.hasNext() ) {
				var k = $it0.next();
				if(this.buttons.h[k] == com_haxepunk_utils_JoyButtonState.BUTTON_PRESSED) return true;
			}
		} else if(this.buttons.h.hasOwnProperty(button)) return this.buttons.h[button] == com_haxepunk_utils_JoyButtonState.BUTTON_PRESSED;
		return false;
	}
	,released: function(button) {
		if(button == null) {
			var $it0 = this.buttons.keys();
			while( $it0.hasNext() ) {
				var k = $it0.next();
				if(this.buttons.h[k] == com_haxepunk_utils_JoyButtonState.BUTTON_RELEASED) return true;
			}
		} else if(this.buttons.h.hasOwnProperty(button)) return this.buttons.h[button] == com_haxepunk_utils_JoyButtonState.BUTTON_RELEASED;
		return false;
	}
	,check: function(button) {
		if(button == null) {
			var $it0 = this.buttons.keys();
			while( $it0.hasNext() ) {
				var k = $it0.next();
				var b = this.buttons.h[k];
				if(b != com_haxepunk_utils_JoyButtonState.BUTTON_OFF && b != com_haxepunk_utils_JoyButtonState.BUTTON_RELEASED) return true;
			}
		} else if(this.buttons.h.hasOwnProperty(button)) {
			var b1 = this.buttons.h[button];
			return b1 != com_haxepunk_utils_JoyButtonState.BUTTON_OFF && b1 != com_haxepunk_utils_JoyButtonState.BUTTON_RELEASED;
		}
		return false;
	}
	,getAxis: function(a) {
		if(a < 0 || a >= this.axis.length) return 0; else if(Math.abs(this.axis[a]) < 0.15) return 0; else return this.axis[a];
	}
	,get_connected: function() {
		return this._timeout > 0;
	}
	,set_connected: function(value) {
		if(value) this._timeout = 3; else this._timeout = 0;
		return value;
	}
	,_timeout: null
	,__class__: com_haxepunk_utils_Joystick
	,__properties__: {set_connected:"set_connected",get_connected:"get_connected"}
};
var com_haxepunk_utils_OUYA_$GAMEPAD = function() { };
$hxClasses["com.haxepunk.utils.OUYA_GAMEPAD"] = com_haxepunk_utils_OUYA_$GAMEPAD;
com_haxepunk_utils_OUYA_$GAMEPAD.__name__ = ["com","haxepunk","utils","OUYA_GAMEPAD"];
var com_haxepunk_utils_XBOX_$GAMEPAD = function() { };
$hxClasses["com.haxepunk.utils.XBOX_GAMEPAD"] = com_haxepunk_utils_XBOX_$GAMEPAD;
com_haxepunk_utils_XBOX_$GAMEPAD.__name__ = ["com","haxepunk","utils","XBOX_GAMEPAD"];
var com_haxepunk_utils_ROCK_$PS3_$GAMEPAD = function() { };
$hxClasses["com.haxepunk.utils.ROCK_PS3_GAMEPAD"] = com_haxepunk_utils_ROCK_$PS3_$GAMEPAD;
com_haxepunk_utils_ROCK_$PS3_$GAMEPAD.__name__ = ["com","haxepunk","utils","ROCK_PS3_GAMEPAD"];
var com_haxepunk_utils_PS3_$GAMEPAD = function() { };
$hxClasses["com.haxepunk.utils.PS3_GAMEPAD"] = com_haxepunk_utils_PS3_$GAMEPAD;
com_haxepunk_utils_PS3_$GAMEPAD.__name__ = ["com","haxepunk","utils","PS3_GAMEPAD"];
var com_haxepunk_utils_Key = function() { };
$hxClasses["com.haxepunk.utils.Key"] = com_haxepunk_utils_Key;
com_haxepunk_utils_Key.__name__ = ["com","haxepunk","utils","Key"];
com_haxepunk_utils_Key.nameOfKey = function($char) {
	if($char == -1) return "";
	if($char >= 65 && $char <= 90) return String.fromCharCode($char);
	if($char >= 112 && $char <= 126) return "F" + Std.string($char - 111);
	if($char >= 96 && $char <= 105) return "NUMPAD " + Std.string($char - 96);
	switch($char) {
	case 37:
		return "LEFT";
	case 38:
		return "UP";
	case 39:
		return "RIGHT";
	case 40:
		return "DOWN";
	case 219:
		return "{";
	case 221:
		return "}";
	case 192:
		return "~";
	case 13:
		return "ENTER";
	case 17:
		return "CONTROL";
	case 32:
		return "SPACE";
	case 16:
		return "SHIFT";
	case 8:
		return "BACKSPACE";
	case 20:
		return "CAPS LOCK";
	case 46:
		return "DELETE";
	case 35:
		return "END";
	case 27:
		return "ESCAPE";
	case 36:
		return "HOME";
	case 45:
		return "INSERT";
	case 9:
		return "TAB";
	case 34:
		return "PAGE DOWN";
	case 33:
		return "PAGE UP";
	case 107:
		return "NUMPAD ADD";
	case 110:
		return "NUMPAD DECIMAL";
	case 111:
		return "NUMPAD DIVIDE";
	case 108:
		return "NUMPAD ENTER";
	case 106:
		return "NUMPAD MULTIPLY";
	case 109:
		return "NUMPAD SUBTRACT";
	}
	return String.fromCharCode($char);
};
var com_haxepunk_utils_Touch = function(x,y,id) {
	this.released = false;
	this.startX = this.x = x;
	this.startY = this.y = y;
	this.id = id;
	this.time = 0;
};
$hxClasses["com.haxepunk.utils.Touch"] = com_haxepunk_utils_Touch;
com_haxepunk_utils_Touch.__name__ = ["com","haxepunk","utils","Touch"];
com_haxepunk_utils_Touch.prototype = {
	id: null
	,x: null
	,y: null
	,startX: null
	,startY: null
	,time: null
	,get_sceneX: function() {
		return this.x + com_haxepunk_HXP.camera.x;
	}
	,get_sceneY: function() {
		return this.y + com_haxepunk_HXP.camera.y;
	}
	,get_pressed: function() {
		return this.time == 0;
	}
	,released: null
	,update: function() {
		this.time += com_haxepunk_HXP.elapsed;
	}
	,__class__: com_haxepunk_utils_Touch
	,__properties__: {get_pressed:"get_pressed",get_sceneY:"get_sceneY",get_sceneX:"get_sceneX"}
};
var const_EvolutionConst = function() { };
$hxClasses["const.EvolutionConst"] = const_EvolutionConst;
const_EvolutionConst.__name__ = ["const","EvolutionConst"];
const_EvolutionConst.getInfo = function(id) {
	var _g = 0;
	var _g1 = const_EvolutionConst.improvements;
	while(_g < _g1.length) {
		var imp = _g1[_g];
		++_g;
		if(imp.id == id) return imp;
	}
	throw new js__$Boot_HaxeError("No such improvement: " + Std.string(id));
	return null;
};
const_EvolutionConst.getParams = function(id,level) {
	var _g = 0;
	var _g1 = const_EvolutionConst.improvements;
	while(_g < _g1.length) {
		var imp = _g1[_g];
		++_g;
		if(imp.id == id) return imp.levelParams[level];
	}
	throw new js__$Boot_HaxeError("No such improvement: " + Std.string(id));
	return null;
};
const_EvolutionConst.getPathInfo = function(id) {
	var _g = 0;
	var _g1 = const_EvolutionConst.paths;
	while(_g < _g1.length) {
		var p = _g1[_g];
		++_g;
		if(p.id == id) return p;
	}
	throw new js__$Boot_HaxeError("No such path: " + Std.string(id));
	return null;
};
var const_Goals = function() { };
$hxClasses["const.Goals"] = const_Goals;
const_Goals.__name__ = ["const","Goals"];
var objects_AreaObject = function(g,vx,vy,addToCurrent) {
	if(addToCurrent == null) addToCurrent = true;
	this.game = g;
	this.type = "undefined";
	this.name = "undefined";
	this.id = objects_AreaObject._maxID++;
	this.isStatic = false;
	this.creationTime = this.game.turns;
	this._listActions = new List();
	this.x = vx;
	this.y = vy;
	if(addToCurrent) this.game.area._objects.h[this.id] = this;
};
$hxClasses["objects.AreaObject"] = objects_AreaObject;
objects_AreaObject.__name__ = ["objects","AreaObject"];
objects_AreaObject.prototype = {
	game: null
	,entity: null
	,type: null
	,name: null
	,item: null
	,id: null
	,x: null
	,y: null
	,isStatic: null
	,creationTime: null
	,_listActions: null
	,setDecay: function(turns) {
		this.game.managerArea.addObject(this,_$AreaManagerEventType.AREAEVENT_OBJECT_DECAY,turns);
	}
	,createEntityByType: function(parentType) {
		var atlasRow = Reflect.field(Const,"ROW_" + parentType.toUpperCase());
		if(atlasRow == null) {
			haxe_Log.trace("No such entity type: " + parentType,{ fileName : "AreaObject.hx", lineNumber : 61, className : "objects.AreaObject", methodName : "createEntityByType"});
			return;
		}
		var atlasCol = Reflect.field(Const,"FRAME_" + this.type.toUpperCase());
		if(atlasCol == null) {
			haxe_Log.trace("No such entity frame: " + this.type,{ fileName : "AreaObject.hx", lineNumber : 67, className : "objects.AreaObject", methodName : "createEntityByType"});
			return;
		}
		this.entity = new entities_ObjectEntity(this,this.game,this.x,this.y,atlasRow,atlasCol);
		this.game.scene.add(this.entity);
	}
	,createEntity: function(atlasRow,atlasCol) {
		this.entity = new entities_ObjectEntity(this,this.game,this.x,this.y,atlasRow,atlasCol);
		this.game.scene.add(this.entity);
	}
	,show: function() {
		this.game.scene.add(this.entity);
	}
	,hide: function() {
		this.game.scene.remove(this.entity);
	}
	,addAction: function(id,name,energy) {
		if(this.game.player.energy >= energy) this._listActions.add({ id : id, type : _$PlayerActionType.ACTION_OBJECT, name : name, energy : energy, obj : this});
	}
	,addActionFull: function(a) {
		if(this.game.player.energy >= a.energy) this._listActions.add(a);
	}
	,addActions: function(tmp) {
		this._listActions.clear();
		this.updateActionsList();
		var _g_head = this._listActions.h;
		var _g_val = null;
		while(_g_head != null) {
			var a;
			a = (function($this) {
				var $r;
				_g_val = _g_head[0];
				_g_head = _g_head[1];
				$r = _g_val;
				return $r;
			}(this));
			tmp.add(a);
		}
	}
	,action: function(a) {
		this.onAction(a.id);
	}
	,turn: function() {
	}
	,updateActionsList: function() {
	}
	,onAction: function(id) {
	}
	,toString: function() {
		return this.id + " (" + this.x + "," + this.y + ") t:" + this.type + " n:" + this.name;
	}
	,__class__: objects_AreaObject
};
var objects_Pickup = function(g,vx,vy) {
	objects_AreaObject.call(this,g,vx,vy);
	this.type = "pickup";
	this.name = "pickup";
};
$hxClasses["objects.Pickup"] = objects_Pickup;
objects_Pickup.__name__ = ["objects","Pickup"];
objects_Pickup.__super__ = objects_AreaObject;
objects_Pickup.prototype = $extend(objects_AreaObject.prototype,{
	updateActionsList: function() {
		if(this.game.player.state != _$PlayerState.PLR_STATE_HOST) return;
		var tmpname;
		if(Lambda.has(this.game.player.knownItems,this.item.info.id)) tmpname = this.item.name; else tmpname = this.item.info.unknown;
		if(this.game.player.energy >= 5) this._listActions.add({ id : "get", type : _$PlayerActionType.ACTION_OBJECT, name : "Get " + tmpname, energy : 5, obj : this});
	}
	,onAction: function(id) {
		if(id == "get") {
			var tmpname;
			if(Lambda.has(this.game.player.knownItems,this.item.info.id)) tmpname = this.item.name; else tmpname = this.item.info.unknown;
			this.game.player.game.log("You pick the " + tmpname + " up.",null);
			this.game.player.host.inventory._list.add(this.item);
			this.game.scene.remove(this.entity);
			this.game.area._objects.remove(this.id);
		}
	}
	,__class__: objects_Pickup
});
var objects_Paper = function(g,vx,vy) {
	objects_Pickup.call(this,g,vx,vy);
	this.type = "paper";
	this.name = "paper";
	this.entity = new entities_ObjectEntity(this,this.game,this.x,this.y,Const.ROW_OBJECT,Const.FRAME_PAPER);
	this.game.scene.add(this.entity);
};
$hxClasses["objects.Paper"] = objects_Paper;
objects_Paper.__name__ = ["objects","Paper"];
objects_Paper.__super__ = objects_Pickup;
objects_Paper.prototype = $extend(objects_Pickup.prototype,{
	event: null
	,__class__: objects_Paper
});
var objects_Book = function(g,vx,vy) {
	objects_Pickup.call(this,g,vx,vy);
	this.type = "book";
	this.name = "book";
	this.entity = new entities_ObjectEntity(this,this.game,this.x,this.y,Const.ROW_OBJECT,Const.FRAME_BOOK);
	this.game.scene.add(this.entity);
};
$hxClasses["objects.Book"] = objects_Book;
objects_Book.__name__ = ["objects","Book"];
objects_Book.__super__ = objects_Pickup;
objects_Book.prototype = $extend(objects_Pickup.prototype,{
	event: null
	,__class__: objects_Book
});
var const_ItemsConst = function() { };
$hxClasses["const.ItemsConst"] = const_ItemsConst;
const_ItemsConst.__name__ = ["const","ItemsConst"];
const_ItemsConst.getInfo = function(id) {
	var _g = 0;
	var _g1 = const_ItemsConst.items;
	while(_g < _g1.length) {
		var ii = _g1[_g];
		++_g;
		if(ii.id == id) return ii;
	}
	throw new js__$Boot_HaxeError("No such item: " + id);
	return null;
};
var const_NameConst = function() { };
$hxClasses["const.NameConst"] = const_NameConst;
const_NameConst.__name__ = ["const","NameConst"];
const_NameConst.generate = function(name) {
	if(name.indexOf("%num") >= 0) {
		var _g = 0;
		while(_g < 9) {
			var i = _g++;
			name = StringTools.replace(name,"%num" + i + "%","" + Std.random(10));
		}
	}
	if(name.indexOf("%letter") >= 0) {
		var _g1 = 0;
		while(_g1 < 9) {
			var i1 = _g1++;
			name = StringTools.replace(name,"%letter" + i1 + "%",String.fromCharCode(65 + Std.random(26)));
		}
	}
	var _g2 = 0;
	var _g11 = const_NameConst.types;
	while(_g2 < _g11.length) {
		var t = _g11[_g2];
		++_g2;
		if(name.indexOf("%" + t) >= 0) {
			var _g21 = 0;
			while(_g21 < 9) {
				var i2 = _g21++;
				var arr = Reflect.field(const_NameConst,t);
				if(arr == null) {
					haxe_Log.trace("No such NameConst field: " + t,{ fileName : "NameConst.hx", lineNumber : 81, className : "const.NameConst", methodName : "generate"});
					arr = ["BUG"];
				}
				var item = arr[Std.random(arr.length)];
				name = StringTools.replace(name,"%" + t + i2 + "%",item);
			}
		}
	}
	return name;
};
const_NameConst.getHumanName = function() {
	return (Std.random(2) == 0?const_NameConst.maleFirst[Std.random(const_NameConst.maleFirst.length)]:const_NameConst.femaleFirst[Std.random(const_NameConst.femaleFirst.length)]) + " " + const_NameConst.last[Std.random(const_NameConst.last.length)];
};
var const_SkillsConst = function() { };
$hxClasses["const.SkillsConst"] = const_SkillsConst;
const_SkillsConst.__name__ = ["const","SkillsConst"];
const_SkillsConst.getInfo = function(id) {
	var _g = 0;
	var _g1 = const_SkillsConst.skills;
	while(_g < _g1.length) {
		var ii = _g1[_g];
		++_g;
		if(ii.id == id) return ii;
	}
	throw new js__$Boot_HaxeError("No such skill: " + Std.string(id));
	return null;
};
var const_TraitsConst = function() { };
$hxClasses["const.TraitsConst"] = const_TraitsConst;
const_TraitsConst.__name__ = ["const","TraitsConst"];
const_TraitsConst.getInfo = function(id) {
	var _g = 0;
	var _g1 = const_TraitsConst.traits;
	while(_g < _g1.length) {
		var ii = _g1[_g];
		++_g;
		if(ii.id == id) return ii;
	}
	throw new js__$Boot_HaxeError("No such trait: " + Std.string(id));
	return null;
};
var const_WorldConst = function() { };
$hxClasses["const.WorldConst"] = const_WorldConst;
const_WorldConst.__name__ = ["const","WorldConst"];
const_WorldConst.getAreaInfo = function(id) {
	return const_WorldConst.areas.get(id);
};
const_WorldConst.getRegionInfo = function(id) {
	var _g = 0;
	var _g1 = const_WorldConst.regions;
	while(_g < _g1.length) {
		var r = _g1[_g];
		++_g;
		if(r.id == id) return r;
	}
	return null;
};
var entities_PawnEntity = function(g,xx,yy,r) {
	com_haxepunk_Entity.call(this,xx * Const.TILE_WIDTH,yy * Const.TILE_HEIGHT);
	this.game = g;
	this.atlasRow = r;
	this._list = new com_haxepunk_graphics_Graphiclist();
	this._spriteBody = new com_haxepunk_graphics_Spritemap((function($this) {
		var $r;
		var e = com_haxepunk_ds_Either.Right($this.game.scene.entityAtlas);
		$r = e;
		return $r;
	}(this)),32,32);
	this._spriteBody.setFrame(Const.FRAME_DEFAULT,this.atlasRow);
	this._spriteMask = new com_haxepunk_graphics_Spritemap((function($this) {
		var $r;
		var e1 = com_haxepunk_ds_Either.Right($this.game.scene.entityAtlas);
		$r = e1;
		return $r;
	}(this)),32,32);
	this._spriteMask.set_frame(Const.FRAME_EMPTY);
	this._list.add(this._spriteBody);
	this._list.add(this._spriteMask);
	this._text = new com_haxepunk_graphics_Text("",0,-10);
	this._textTimer = 0;
	this._list.add(this._text);
	this.set_type("undefined");
	this.set_layer(Const.LAYER_AI);
	this.set_graphic(this._list);
};
$hxClasses["entities.PawnEntity"] = entities_PawnEntity;
entities_PawnEntity.__name__ = ["entities","PawnEntity"];
entities_PawnEntity.__super__ = com_haxepunk_Entity;
entities_PawnEntity.prototype = $extend(com_haxepunk_Entity.prototype,{
	game: null
	,_text: null
	,_list: null
	,_spriteBody: null
	,_spriteMask: null
	,atlasRow: null
	,_textTimer: null
	,setText: function(s,timer) {
		this._text.set_text(s);
		this._text.x = -(this._text.textWidth - Const.TILE_WIDTH) / 2;
		this._textTimer = timer;
	}
	,turn: function() {
		if(this._textTimer <= 0) return;
		this._textTimer--;
		if(this._textTimer == 0) this._text.set_text("");
	}
	,setPosition: function(vx,vy) {
		this.set_x(vx * Const.TILE_WIDTH);
		this.set_y(vy * Const.TILE_HEIGHT);
	}
	,setImage: function(col,row) {
		this._spriteBody.setFrame(col,row == null?this.atlasRow:row);
	}
	,getImage: function() {
		return this._spriteBody.get_frame();
	}
	,setMask: function(col,row) {
		this._spriteMask.setFrame(col,row == null?this.atlasRow:row);
	}
	,__class__: entities_PawnEntity
});
var entities_AIEntity = function(vai,g,xx,yy,atlasRow) {
	entities_PawnEntity.call(this,g,xx,yy,atlasRow);
	this._spriteAlert = new com_haxepunk_graphics_Spritemap((function($this) {
		var $r;
		var e = com_haxepunk_ds_Either.Right($this.game.scene.entityAtlas);
		$r = e;
		return $r;
	}(this)),32,32);
	this._spriteAlert.set_frame(Const.FRAME_EMPTY);
	this._list.add(this._spriteAlert);
	this._spriteNPC = new com_haxepunk_graphics_Spritemap((function($this) {
		var $r;
		var e1 = com_haxepunk_ds_Either.Right($this.game.scene.entityAtlas);
		$r = e1;
		return $r;
	}(this)),32,32);
	this._spriteNPC.set_frame(Const.FRAME_EMPTY);
	this._list.add(this._spriteNPC);
	this.ai = vai;
	this.set_type("ai");
};
$hxClasses["entities.AIEntity"] = entities_AIEntity;
entities_AIEntity.__name__ = ["entities","AIEntity"];
entities_AIEntity.__super__ = entities_PawnEntity;
entities_AIEntity.prototype = $extend(entities_PawnEntity.prototype,{
	ai: null
	,_spriteAlert: null
	,_spriteNPC: null
	,setAlert: function(index) {
		this._spriteAlert.setFrame(index,Const.ROW_ALERT);
	}
	,setNPC: function() {
		this._spriteNPC.setFrame(Const.FRAME_EVENT_NPC,Const.ROW_REGION_ICON);
	}
	,__class__: entities_AIEntity
});
var entities_TextWindow = function(g) {
	this.game = g;
	this.actionName = "action";
	this.exitByEnter = false;
	this.width = 0;
	this.height = 0;
	this.x = 0;
	this.y = 0;
	this._actions = new List();
	var font = openfl_Assets.getFont(Const.FONT);
	this._textField = new openfl_text_TextField();
	this._textField.set_wordWrap(true);
	this._textField.set_width(com_haxepunk_HXP.width);
	this._textField.set_height(com_haxepunk_HXP.height);
	this.textFormat = new openfl_text_TextFormat(font.name,this.game.config.fontSize,16777215);
	this.textFormat.align = 3;
	this._textField.set_defaultTextFormat(this.textFormat);
	this._back = new openfl_display_Sprite();
	this._back.addChild(this._textField);
	this._back.set_x(0);
	this._back.set_y(0);
	this._back.set_width(com_haxepunk_HXP.width);
	this._back.set_height(com_haxepunk_HXP.height);
	com_haxepunk_HXP.stage.addChild(this._back);
};
$hxClasses["entities.TextWindow"] = entities_TextWindow;
entities_TextWindow.__name__ = ["entities","TextWindow"];
entities_TextWindow.prototype = {
	game: null
	,_actions: null
	,_textField: null
	,_back: null
	,actionName: null
	,exitByEnter: null
	,width: null
	,height: null
	,x: null
	,y: null
	,textFormat: null
	,setSize: function(w,h) {
		this.width = w;
		this.height = h;
	}
	,setPosition: function(xv,yv) {
		this.x = xv;
		this.y = yv;
		this._back.set_x(this.x);
		this._back.set_y(this.y);
	}
	,action: function(index) {
		var i = 1;
		var act = null;
		var _g_head = this._actions.h;
		var _g_val = null;
		while(_g_head != null) {
			var a;
			a = (function($this) {
				var $r;
				_g_val = _g_head[0];
				_g_head = _g_head[1];
				$r = _g_val;
				return $r;
			}(this));
			if(i++ == index) {
				act = a;
				break;
			}
		}
		if(act == null) return;
		var state = this.game.scene.getState();
		this.onAction(act);
		if(state == this.game.scene.getState()) this.update();
		this.game.scene.hud.update();
	}
	,scroll: function(n) {
		var _g = this._textField;
		_g.set_scrollV(_g.get_scrollV() + n);
	}
	,scrollToBegin: function() {
		this._textField.set_scrollV(0);
	}
	,scrollToEnd: function() {
		this._textField.set_scrollV(this._textField.get_maxScrollV());
	}
	,show: function() {
		this.update();
		this._back.set_visible(true);
	}
	,hide: function() {
		this._back.set_visible(false);
	}
	,update: function() {
		var text = this.getText();
		var buf = new StringBuf();
		this._actions = this.getActions();
		var _g_head = this._actions.h;
		var _g_val = null;
		while(_g_head != null) {
			var a;
			a = (function($this) {
				var $r;
				_g_val = _g_head[0];
				_g_head = _g_head[1];
				$r = _g_val;
				return $r;
			}(this));
			if(a.energy > 0 && this.game.player.host.energy < a.energy) this._actions.remove(a);
		}
		if(this._actions.length > 0) {
			var n = 1;
			buf.b += Std.string("\n\nSelect " + this.actionName + " (press 0-9):\n\n");
			var _g_head1 = this._actions.h;
			var _g_val1 = null;
			while(_g_head1 != null) {
				var action;
				action = (function($this) {
					var $r;
					_g_val1 = _g_head1[0];
					_g_head1 = _g_head1[1];
					$r = _g_val1;
					return $r;
				}(this));
				if(action.energy == 0 || this.game.player.host.energy >= action.energy) {
					buf.add(n++ + ": " + action.name);
					if(action.energy > 0) buf.b += Std.string(" (" + action.energy + " energy)");
					buf.b += "\n";
				}
			}
		}
		this._textField.set_htmlText(text + buf.b);
		this._textField.set_width(this.width > 0?this.width:com_haxepunk_HXP.width);
		this._textField.set_height(this.height > 0?this.height:com_haxepunk_HXP.height);
		this._back.get_graphics().clear();
		this._back.get_graphics().beginFill(2105376,.95);
		this._back.get_graphics().drawRect(0,0,this._textField.get_width(),this._textField.get_height());
	}
	,getText: function() {
		return "";
	}
	,getActions: function() {
		return entities_TextWindow._emptyList;
	}
	,onAction: function(action) {
	}
	,__class__: entities_TextWindow
};
var entities_DebugWindow = function(g) {
	entities_TextWindow.call(this,g);
};
$hxClasses["entities.DebugWindow"] = entities_DebugWindow;
entities_DebugWindow.__name__ = ["entities","DebugWindow"];
entities_DebugWindow.__super__ = entities_TextWindow;
entities_DebugWindow.prototype = $extend(entities_TextWindow.prototype,{
	getActions: function() {
		var list = new List();
		var actions = null;
		if(this.game.location == _$LocationType.LOCATION_AREA) actions = this.game.debugArea.actions; else if(this.game.location == _$LocationType.LOCATION_REGION) actions = this.game.debugRegion.actions;
		var n = 0;
		var _g = 0;
		while(_g < actions.length) {
			var a = actions[_g];
			++_g;
			list.add({ id : "debug" + n++, type : _$PlayerActionType.ACTION_DEBUG, name : a.name, energy : 0});
		}
		return list;
	}
	,onAction: function(action) {
		var index = Std.parseInt(HxOverrides.substr(action.id,5,null));
		if(this.game.location == _$LocationType.LOCATION_AREA) this.game.debugArea.action(index); else if(this.game.location == _$LocationType.LOCATION_REGION) this.game.debugRegion.action(index);
	}
	,getText: function() {
		var buf = new StringBuf();
		buf.b += "Debug\n===\n\n";
		if(this.game.location == _$LocationType.LOCATION_AREA) {
			buf.add("Area alertness: " + this.game.area.get_alertness() + "\n");
			buf.b += Std.string("Area interest: " + this.game.area.interest + "\n");
		} else {
			var area = this.game.playerRegion.get_currentArea();
			buf.add("Area alertness: " + area.get_alertness() + "\n");
			buf.b += Std.string("Area interest: " + area.interest + "\n");
		}
		return buf.b;
	}
	,__class__: entities_DebugWindow
});
var entities_EffectEntity = function(g,xx,yy,t,atlasRow,atlasCol) {
	com_haxepunk_Entity.call(this,xx * Const.TILE_WIDTH,yy * Const.TILE_HEIGHT);
	this.game = g;
	this.turns = t;
	this._spriteBody = new com_haxepunk_graphics_Spritemap((function($this) {
		var $r;
		var e = com_haxepunk_ds_Either.Right($this.game.scene.entityAtlas);
		$r = e;
		return $r;
	}(this)),32,32);
	this._spriteBody.setFrame(atlasCol,atlasRow);
	this.set_type("undefined");
	this.set_layer(Const.LAYER_EFFECT);
	this.set_graphic(this._spriteBody);
};
$hxClasses["entities.EffectEntity"] = entities_EffectEntity;
entities_EffectEntity.__name__ = ["entities","EffectEntity"];
entities_EffectEntity.__super__ = com_haxepunk_Entity;
entities_EffectEntity.prototype = $extend(com_haxepunk_Entity.prototype,{
	game: null
	,turns: null
	,_spriteBody: null
	,setPosition: function(vx,vy) {
		this.set_x(vx * Const.TILE_WIDTH);
		this.set_y(vy * Const.TILE_HEIGHT);
	}
	,setImage: function(index) {
		this._spriteBody.set_frame(index);
	}
	,getImage: function() {
		return this._spriteBody.get_frame();
	}
	,__class__: entities_EffectEntity
});
var entities_EvolutionWindow = function(g) {
	entities_TextWindow.call(this,g);
	this.actionName = "evolution direction";
};
$hxClasses["entities.EvolutionWindow"] = entities_EvolutionWindow;
entities_EvolutionWindow.__name__ = ["entities","EvolutionWindow"];
entities_EvolutionWindow.__super__ = entities_TextWindow;
entities_EvolutionWindow.prototype = $extend(entities_TextWindow.prototype,{
	getActions: function() {
		var list = new List();
		if(this.game.player.evolutionManager.isActive) list.add({ id : "stop", type : _$PlayerActionType.ACTION_EVOLUTION, name : "Stop evolution", energy : 0});
		var $it0 = this.game.player.evolutionManager.iterator();
		while( $it0.hasNext() ) {
			var imp = $it0.next();
			if(imp.level < 3) {
				var buf = new StringBuf();
				buf.b += Std.string("<font color='#00ffff'>" + imp.info.name + "</font>");
				buf.b += " ";
				buf.b += Std.string(imp.level + 1);
				buf.b += Std.string(" (" + imp.ep + "/" + const_EvolutionConst.epCostImprovement[imp.level] + " ep) (");
				var epLeft = const_EvolutionConst.epCostImprovement[imp.level] - imp.ep;
				buf.add(Math.round(epLeft / _$_$Math.epPerTurn()));
				buf.b += " turns)\n";
				buf.b += Std.string("<font color='#5ebee5'>" + imp.info.note + "</font>\n");
				var levelNote = imp.info.levelNotes[imp.level + 1];
				if(levelNote.indexOf("fluff") < 0 && levelNote.indexOf("todo") < 0) buf.b += Std.string("<font color='#4cd47b'>" + levelNote + "</font>\n");
				if(imp.info.noteFunc != null) buf.add("<font color='#13ff65'>" + imp.info.noteFunc(imp.info.levelParams[imp.level + 1]) + "</font>\n");
				list.add({ id : "set." + Std.string(imp.id), type : _$PlayerActionType.ACTION_EVOLUTION, name : buf.b, energy : 0});
			}
		}
		if(this.game.player.evolutionManager.state > 1) {
			var _g = this.game.player.evolutionManager.getPathList().iterator();
			while(_g.head != null) {
				var p;
				p = (function($this) {
					var $r;
					_g.val = _g.head[0];
					_g.head = _g.head[1];
					$r = _g.val;
					return $r;
				}(this));
				if(p.info.id == _$Path.PATH_SPECIAL) continue;
				if(this.game.player.evolutionManager.isPathComplete(p.id)) continue;
				var buf1 = new StringBuf();
				buf1.b += Std.string("<font color='#00ffff'>" + p.info.name + "</font>");
				buf1.b += " (";
				buf1.b += Std.string(p.ep + "/" + const_EvolutionConst.epCostPath[p.level] + " ep) (");
				var epLeft1 = const_EvolutionConst.epCostPath[p.level] - p.ep;
				buf1.add(Math.round(epLeft1 / _$_$Math.epPerTurn()));
				buf1.b += " turns)";
				list.add({ id : "setPath." + Std.string(p.id), type : _$PlayerActionType.ACTION_EVOLUTION, name : buf1.b, energy : 0});
			}
		}
		return list;
	}
	,onAction: function(action) {
		this.game.player.evolutionManager.action(action.id);
	}
	,getText: function() {
		var buf = new StringBuf();
		buf.b += "Controlled Evolution\n===\n\n";
		buf.b += "Improvements\n===\n";
		var n = 0;
		var $it0 = this.game.player.evolutionManager.iterator();
		while( $it0.hasNext() ) {
			var imp = $it0.next();
			buf.b += Std.string("<font color='#00ffff'>" + imp.info.name + "</font>");
			buf.b += " ";
			if(imp.level == null) buf.b += "null"; else buf.b += "" + imp.level;
			if(imp.level < 3) buf.b += Std.string(" (" + imp.ep + "/" + const_EvolutionConst.epCostImprovement[imp.level] + " ep)");
			buf.b += Std.string("\n<font color='#5ebee5'>" + imp.info.note + "</font>\n");
			var levelNote = imp.info.levelNotes[imp.level];
			if(levelNote.indexOf("fluff") < 0 && levelNote.indexOf("todo") < 0) buf.b += Std.string("<font color='#4cd47b'>" + levelNote + "</font>\n");
			if(imp.info.noteFunc != null) buf.add("<font color='#13ff65'>" + imp.info.noteFunc(imp.info.levelParams[imp.level]) + "</font>\n");
			buf.b += "\n";
			n++;
		}
		if(n == 0) buf.b += "  --- empty ---\n";
		if(this.game.location == _$LocationType.LOCATION_AREA && this.game.area.isHabitat) buf.b += "You are in a microhabitat.\n";
		buf.add("Evolving costs additional " + (_$_$Math.game.location == _$LocationType.LOCATION_AREA && _$_$Math.game.area.isHabitat?_$_$Math.game.player.vars.evolutionEnergyPerTurnMicrohabitat:_$_$Math.game.player.vars.evolutionEnergyPerTurn) + " energy per turn.\n" + "You will receive " + _$_$Math.epPerTurn() + " ep per turn.\n" + "Your host will survive for " + (this.game.player.host.energy / (_$_$Math.game.location == _$LocationType.LOCATION_AREA && _$_$Math.game.area.isHabitat?_$_$Math.game.player.vars.evolutionEnergyPerTurnMicrohabitat:_$_$Math.game.player.vars.evolutionEnergyPerTurn) | 0) + " turns while evolving (not counting other spending).\n");
		buf.b += "\nCurrent evolution direction: ";
		buf.add(this.game.player.evolutionManager.getEvolutionDirectionInfo());
		return buf.b;
	}
	,__class__: entities_EvolutionWindow
});
var entities_FinishWindow = function(g) {
	entities_TextWindow.call(this,g);
	var font = openfl_Assets.getFont(Const.FONT);
	this.textFormat = new openfl_text_TextFormat(font.name,this.game.config.fontSizeLarge,16777215);
	this.textFormat.align = 0;
	this._textField.set_defaultTextFormat(this.textFormat);
	var w = com_haxepunk_HXP.width / 2 | 0;
	var h = com_haxepunk_HXP.height / 2 | 0;
	this.width = w;
	this.height = h;
	this.x = com_haxepunk_HXP.width / 2 - w / 2 | 0;
	this.y = com_haxepunk_HXP.height / 2 - h / 2 | 0;
	this._back.set_x(this.x);
	this._back.set_y(this.y);
};
$hxClasses["entities.FinishWindow"] = entities_FinishWindow;
entities_FinishWindow.__name__ = ["entities","FinishWindow"];
entities_FinishWindow.__super__ = entities_TextWindow;
entities_FinishWindow.prototype = $extend(entities_TextWindow.prototype,{
	getText: function() {
		var buf_b = "";
		buf_b += "\n\nGame Over\n===\n\n";
		buf_b += Std.string(this.game.finishText);
		return buf_b;
	}
	,__class__: entities_FinishWindow
});
var entities_GoalsWindow = function(g) {
	entities_TextWindow.call(this,g);
};
$hxClasses["entities.GoalsWindow"] = entities_GoalsWindow;
entities_GoalsWindow.__name__ = ["entities","GoalsWindow"];
entities_GoalsWindow.__super__ = entities_TextWindow;
entities_GoalsWindow.prototype = $extend(entities_TextWindow.prototype,{
	getText: function() {
		var buf_b = "";
		buf_b += "Current goals\n====\n\n";
		var _g = this.game.goals.iteratorCurrent();
		while(_g.head != null) {
			var g;
			g = (function($this) {
				var $r;
				_g.val = _g.head[0];
				_g.head = _g.head[1];
				$r = _g.val;
				return $r;
			}(this));
			var info = this.game.goals.getInfo(g);
			if(info.isHidden) continue;
			buf_b += Std.string("<font color='#4788FF'>" + info.name + "</font>\n");
			buf_b += Std.string(info.note + "\n\n");
		}
		buf_b += "\nCompleted goals\n====\n\n<font color='#777777'>";
		var _g1 = this.game.goals.iteratorCompleted();
		while(_g1.head != null) {
			var g1;
			g1 = (function($this) {
				var $r;
				_g1.val = _g1.head[0];
				_g1.head = _g1.head[1];
				$r = _g1.val;
				return $r;
			}(this));
			var info1 = this.game.goals.getInfo(g1);
			if(info1.isHidden) continue;
			buf_b += Std.string(info1.name + "\n");
			buf_b += Std.string(info1.note + "\n\n");
		}
		buf_b += "</font>";
		buf_b += "\nFailed goals\n====\n\n<font color='#770000'>";
		var _g2 = this.game.goals.iteratorFailed();
		while(_g2.head != null) {
			var g2;
			g2 = (function($this) {
				var $r;
				_g2.val = _g2.head[0];
				_g2.head = _g2.head[1];
				$r = _g2.val;
				return $r;
			}(this));
			var info2 = this.game.goals.getInfo(g2);
			if(info2.isHidden) continue;
			buf_b += Std.string(info2.name + "\n");
			buf_b += Std.string(info2.note + "\n\n");
		}
		buf_b += "</font>";
		return buf_b;
	}
	,__class__: entities_GoalsWindow
});
var entities_HUD = function(g) {
	this.game = g;
	this._listActions = new List();
	this._listLog = new List();
	var font = openfl_Assets.getFont(Const.FONT);
	this._console = new openfl_text_TextField();
	var fmt = new openfl_text_TextFormat(font.name,this.game.config.fontSize,16777215);
	fmt.align = 3;
	this._console.set_defaultTextFormat(fmt);
	this._console.set_type(1);
	this._consoleBack = new openfl_display_Sprite();
	this._consoleBack.addChild(this._console);
	this._consoleBack.set_x(20);
	this._consoleBack.set_y(0);
	this._consoleBack.set_visible(false);
	this._console.set_width(com_haxepunk_HXP.width - 40);
	this._console.set_height(this.game.config.fontSize + 4);
	com_haxepunk_HXP.stage.addChild(this._consoleBack);
	this._log = new openfl_text_TextField();
	this._log.set_width(com_haxepunk_HXP.width - 40);
	this._log.set_wordWrap(true);
	this._log.set_autoSize(1);
	var fmt1 = new openfl_text_TextFormat(font.name,this.game.config.fontSize,16777215);
	fmt1.align = 3;
	this._log.set_defaultTextFormat(fmt1);
	this._logBack = new openfl_display_Sprite();
	this._logBack.addChild(this._log);
	this._logBack.set_x(20);
	this._logBack.set_y(this.game.config.fontSize + 10);
	com_haxepunk_HXP.stage.addChild(this._logBack);
	this._textField = new openfl_text_TextField();
	this._textField.set_autoSize(1);
	var fmt2 = new openfl_text_TextFormat(font.name,this.game.config.fontSize,16777215);
	fmt2.align = 3;
	this._textField.set_defaultTextFormat(fmt2);
	this._textFieldBack = new openfl_display_Sprite();
	this._textFieldBack.addChild(this._textField);
	this._textFieldBack.set_x(20);
	this._textFieldBack.set_y(20);
	com_haxepunk_HXP.stage.addChild(this._textFieldBack);
	this._help = new openfl_text_TextField();
	var fmt3 = new openfl_text_TextFormat(font.name,this.game.config.fontSize,16777215);
	fmt3.align = 3;
	this._help.set_defaultTextFormat(fmt3);
	this._help.set_type(1);
	this._helpBack = new openfl_display_Sprite();
	this._helpBack.addChild(this._help);
	this._helpBack.set_x(20);
	this._helpBack.set_y(com_haxepunk_HXP.height - this.game.config.fontSize - 8);
	this._help.set_width(com_haxepunk_HXP.width - 40);
	this._help.set_height(this.game.config.fontSize + 4);
	com_haxepunk_HXP.stage.addChild(this._helpBack);
};
$hxClasses["entities.HUD"] = entities_HUD;
entities_HUD.__name__ = ["entities","HUD"];
entities_HUD.prototype = {
	game: null
	,_textField: null
	,_textFieldBack: null
	,_listActions: null
	,_log: null
	,_logBack: null
	,_listLog: null
	,_console: null
	,_consoleBack: null
	,_help: null
	,_helpBack: null
	,log: function(s) {
		this._listLog.add(s);
		if(this._listLog.length > 4) this._listLog.pop();
		this.updateLog();
	}
	,action: function(index) {
		var i = 1;
		var action = null;
		var _g_head = this._listActions.h;
		var _g_val = null;
		while(_g_head != null) {
			var a;
			a = (function($this) {
				var $r;
				_g_val = _g_head[0];
				_g_head = _g_head[1];
				$r = _g_val;
				return $r;
			}(this));
			if(i++ == index) {
				action = a;
				break;
			}
		}
		if(action == null) return;
		if(this.game.location == _$LocationType.LOCATION_AREA) this.game.playerArea.action(action); else if(this.game.location == _$LocationType.LOCATION_REGION) this.game.playerRegion.action(action);
	}
	,updateActionList: function() {
		if(this.game.location == _$LocationType.LOCATION_AREA) this._listActions = this.game.playerArea.getActionList(); else if(this.game.location == _$LocationType.LOCATION_REGION) this._listActions = this.game.playerRegion.getActionList();
	}
	,getTextColor: function(val,max) {
		if(val > 0.7 * max) return "#FFFFFF"; else if(val > 0.3 * max) return "#FFFF00";
		return "#FF0000";
	}
	,updateWindow: function() {
		var buf = new StringBuf();
		buf.b += Std.string("Turn: " + this.game.turns + ", at (");
		if(this.game.location == _$LocationType.LOCATION_AREA) buf.add(this.game.playerArea.x + "," + this.game.playerArea.y + ")" + " A " + Math.round(this.game.area.get_alertness()) + ", I " + Math.round(this.game.area.interest) + "\nActions: " + this.game.playerArea.ap + "\n"); else if(this.game.location == _$LocationType.LOCATION_REGION) buf.add(this.game.playerRegion.x + "," + this.game.playerRegion.y + ")" + " A " + Math.round(this.game.playerRegion.get_currentArea().get_alertness()) + ", I " + Math.round(this.game.playerRegion.get_currentArea().interest) + "\n" + this.game.playerRegion.get_currentArea().name + "\n");
		buf.b += "===\n";
		var colEnergy = this.getTextColor(this.game.player.energy,this.game.player.maxEnergy);
		buf.b += Std.string("Energy: " + "<font color='" + colEnergy + "'>" + this.game.player.energy + "</font>" + "/" + this.game.player.maxEnergy + "\n");
		var colHealth = this.getTextColor(this.game.player.health,this.game.player.maxHealth);
		buf.b += Std.string("Health: " + "<font color='" + colHealth + "'>" + this.game.player.health + "</font>" + "/" + this.game.player.maxHealth + "\n");
		buf.b += "===\n";
		if(this.game.player.state == _$PlayerState.PLR_STATE_ATTACHED) buf.add("Grip: <font color='" + this.getTextColor(this.game.playerArea.attachHold,100) + "'>" + this.game.playerArea.attachHold + "</font>/100\n"); else if(this.game.player.state == _$PlayerState.PLR_STATE_HOST) {
			buf.add(this.game.player.host.getNameCapped());
			if(this.game.player.host.isJobKnown) buf.b += Std.string(" (" + this.game.player.host.job + ")\n"); else buf.b += "\n";
			if(this.game.player.host.isAttrsKnown) buf.add("STR " + this.game.player.host.get_strength() + " CON " + this.game.player.host.get_constitution() + " INT " + this.game.player.host.get_intellect() + " PSY " + this.game.player.host.get_psyche() + "\n");
			var colHealth1 = this.getTextColor(this.game.player.host.health,this.game.player.host.maxHealth);
			buf.b += Std.string("Health: " + "<font color='" + colHealth1 + "'>" + this.game.player.host.health + "</font>" + "/" + this.game.player.host.maxHealth + "\n");
			var colControl = this.getTextColor(this.game.player.hostControl,100);
			buf.b += Std.string("Control: " + "<font color='" + colControl + "'>" + this.game.player.hostControl + "</font>" + "/100\n");
			var colEnergy1 = this.getTextColor(this.game.player.host.energy,this.game.player.host.maxEnergy);
			buf.b += Std.string("Energy: <font color='" + colEnergy1 + "'>" + this.game.player.host.energy + "</font>/" + this.game.player.host.maxEnergy + "\n");
			buf.b += "Evolution direction:\n  ";
			buf.add(this.game.player.evolutionManager.getEvolutionDirectionInfo());
			buf.b += "\n";
			var str = this.game.player.host.organs.getInfo();
			if(str != null) if(str == null) buf.b += "null"; else buf.b += "" + str;
		}
		buf.b += "\n===\n\n";
		var n = 1;
		var _g_head = this._listActions.h;
		var _g_val = null;
		while(_g_head != null) {
			var action;
			action = (function($this) {
				var $r;
				_g_val = _g_head[0];
				_g_head = _g_head[1];
				$r = _g_val;
				return $r;
			}(this));
			buf.b += Std.string(n + ": ");
			if(action.name == null) buf.b += "null"; else buf.b += "" + action.name;
			if(action.energy != null && action.energy > 0) buf.b += Std.string(" (" + action.energy + " energy)"); else if(action.energyFunc != null) buf.add(" (" + action.energyFunc(this.game.player) + " energy)");
			if(action != this._listActions.last()) buf.b += "\n";
			n++;
		}
		if(this._listActions.length == 0) buf.b += "No available actions.";
		this._textField.set_htmlText(buf.b);
		this._textFieldBack.get_graphics().clear();
		this._textFieldBack.get_graphics().beginFill(2105376,.75);
		this._textFieldBack.get_graphics().drawRect(0,0,this._textField.get_width(),this._textField.get_height());
		this._textFieldBack.set_x(20);
		this._textFieldBack.set_y(com_haxepunk_HXP.windowHeight - this._textField.get_height() - this.game.config.fontSize - 12);
	}
	,test: function() {
	}
	,updateLog: function() {
		var buf_b = "";
		var _g_head = this._listLog.h;
		var _g_val = null;
		while(_g_head != null) {
			var l;
			l = (function($this) {
				var $r;
				_g_val = _g_head[0];
				_g_head = _g_head[1];
				$r = _g_val;
				return $r;
			}(this));
			if(l == null) buf_b += "null"; else buf_b += "" + l;
			buf_b += "\n";
		}
		this._log.set_htmlText(buf_b);
		this._log.set_width(com_haxepunk_HXP.width - 40);
		this._logBack.get_graphics().clear();
		this._logBack.get_graphics().beginFill(2105376,.75);
		this._logBack.get_graphics().drawRect(0,0,this._log.get_width(),this._log.get_height());
	}
	,updateHelp: function() {
		var buf_b = "";
		var prefix = "C-";
		buf_b += Std.string(prefix + "1: Goals  ");
		if(this.game.player.state == _$PlayerState.PLR_STATE_HOST) {
			if(this.game.player.vars.inventoryEnabled) buf_b += Std.string(prefix + "2: Inventory  ");
		}
		if(this.game.player.vars.skillsEnabled) buf_b += Std.string(prefix + "3: Knowledge  ");
		buf_b += Std.string(prefix + "4: Log  ");
		if(this.game.player.vars.timelineEnabled) buf_b += Std.string(prefix + "5: Timeline  ");
		if(this.game.player.state == _$PlayerState.PLR_STATE_HOST) {
			if(this.game.player.evolutionManager.state > 0) buf_b += Std.string(prefix + "6: Evolution  ");
			if(this.game.player.vars.organsEnabled) buf_b += Std.string(prefix + "7: Body features  ");
		}
		buf_b += Std.string(prefix + "9: Debug  ");
		this._help.set_htmlText(buf_b);
		this._helpBack.get_graphics().clear();
		this._helpBack.get_graphics().beginFill(2105376,.75);
		this._helpBack.get_graphics().drawRect(0,0,this._help.get_width(),this._help.get_height());
	}
	,update: function() {
		if(this.game.location == _$LocationType.LOCATION_AREA) this._listActions = this.game.playerArea.getActionList(); else if(this.game.location == _$LocationType.LOCATION_REGION) this._listActions = this.game.playerRegion.getActionList();
		this.updateWindow();
		this.updateLog();
		this.updateHelp();
		this.updateConsole();
	}
	,showConsole: function() {
		this._console.set_text("");
		this._consoleBack.set_visible(true);
		com_haxepunk_HXP.stage.set_focus(this._console);
	}
	,hideConsole: function() {
		this._consoleBack.set_visible(false);
	}
	,consoleVisible: function() {
		return this._consoleBack.get_visible();
	}
	,runConsoleCommand: function() {
		this.game.console.run(this._console.get_text());
		this.hideConsole();
	}
	,updateConsole: function() {
		this._consoleBack.get_graphics().clear();
		this._consoleBack.get_graphics().beginFill(2105376,.75);
		this._consoleBack.get_graphics().drawRect(0,0,this._console.get_width(),this._console.get_height());
	}
	,show: function(state) {
		this._textFieldBack.set_visible(state);
		this._logBack.set_visible(state);
		this._helpBack.set_visible(state);
	}
	,__class__: entities_HUD
};
var entities_InventoryWindow = function(g) {
	entities_TextWindow.call(this,g);
};
$hxClasses["entities.InventoryWindow"] = entities_InventoryWindow;
entities_InventoryWindow.__name__ = ["entities","InventoryWindow"];
entities_InventoryWindow.__super__ = entities_TextWindow;
entities_InventoryWindow.prototype = $extend(entities_TextWindow.prototype,{
	getActions: function() {
		return this.game.player.host.inventory.getActions();
	}
	,onAction: function(action) {
		this.game.player.host.inventory.action(action);
		if(this.game.scene.getState() != _$HUDState.HUDSTATE_MESSAGE) this.game.scene.setState(_$HUDState.HUDSTATE_DEFAULT);
	}
	,getText: function() {
		var buf_b = "";
		buf_b += "Inventory\n===\n\n";
		var n = 0;
		var $it0 = this.game.player.host.inventory.iterator();
		while( $it0.hasNext() ) {
			var item = $it0.next();
			n++;
			var knowsItem = Lambda.has(this.game.player.knownItems,item.id);
			var name;
			if(knowsItem) name = item.name; else name = item.info.unknown;
			buf_b += Std.string(name + "\n");
		}
		if(n == 0) buf_b += "  --- empty ---\n";
		return buf_b;
	}
	,__class__: entities_InventoryWindow
});
var entities_LogWindow = function(g) {
	entities_TextWindow.call(this,g);
};
$hxClasses["entities.LogWindow"] = entities_LogWindow;
entities_LogWindow.__name__ = ["entities","LogWindow"];
entities_LogWindow.__super__ = entities_TextWindow;
entities_LogWindow.prototype = $extend(entities_TextWindow.prototype,{
	getText: function() {
		var buf_b = "";
		var _g_head = this.game.messageList.h;
		var _g_val = null;
		while(_g_head != null) {
			var l;
			l = (function($this) {
				var $r;
				_g_val = _g_head[0];
				_g_head = _g_head[1];
				$r = _g_val;
				return $r;
			}(this));
			if(l == null) buf_b += "null"; else buf_b += "" + l;
			buf_b += "\n";
		}
		return buf_b;
	}
	,__class__: entities_LogWindow
});
var entities_MessageWindow = function(g) {
	entities_TextWindow.call(this,g);
	this.exitByEnter = true;
	var ww = com_haxepunk_HXP.width / 2 | 0;
	var hh = com_haxepunk_HXP.height / 4 | 0;
	this.width = ww;
	this.height = hh;
	this.x = com_haxepunk_HXP.halfWidth - ww / 2 | 0;
	this.y = com_haxepunk_HXP.halfHeight - hh / 2 | 0;
	this._back.set_x(this.x);
	this._back.set_y(this.y);
	this.textFormat.size = this.game.config.fontSizeLarge;
	this._textField.set_defaultTextFormat(this.textFormat);
	this._textField.set_border(true);
	this._textField.set_borderColor(16448);
};
$hxClasses["entities.MessageWindow"] = entities_MessageWindow;
entities_MessageWindow.__name__ = ["entities","MessageWindow"];
entities_MessageWindow.__super__ = entities_TextWindow;
entities_MessageWindow.prototype = $extend(entities_TextWindow.prototype,{
	getText: function() {
		return "<br>" + this.game.importantMessage + "\n\n" + "Press ENTER to continue";
	}
	,__class__: entities_MessageWindow
});
var entities_MouseEntity = function(g) {
	com_haxepunk_Entity.call(this,0,0);
	this.game = g;
	this._oldMode = this._mode = entities_MouseEntity.MODE_DEFAULT;
	this._frame = entities_MouseEntity.CURSOR_DEFAULT;
	this._map = new com_haxepunk_graphics_Spritemap(com_haxepunk_HXP.renderMode == com_haxepunk_RenderMode.HARDWARE?(function($this) {
		var $r;
		var e = com_haxepunk_ds_Either.Right(new com_haxepunk_graphics_atlas_TileAtlas((function($this) {
			var $r;
			var data = com_haxepunk_graphics_atlas_AtlasData.getAtlasDataByName("gfx/mouse.png",true);
			$r = data;
			return $r;
		}($this))));
		$r = e;
		return $r;
	}(this)):(function($this) {
		var $r;
		var e1 = com_haxepunk_ds_Either.Left(com_haxepunk_HXP.getBitmap("gfx/mouse.png"));
		$r = e1;
		return $r;
	}(this)),entities_MouseEntity.CURSOR_WIDTH,entities_MouseEntity.CURSOR_HEIGHT);
	this._map.centerOrigin();
	this.set_graphic(this._map);
	this.set_layer(Const.LAYER_MOUSE);
	openfl_ui_Mouse.hide();
};
$hxClasses["entities.MouseEntity"] = entities_MouseEntity;
entities_MouseEntity.__name__ = ["entities","MouseEntity"];
entities_MouseEntity.__super__ = com_haxepunk_Entity;
entities_MouseEntity.prototype = $extend(com_haxepunk_Entity.prototype,{
	game: null
	,_map: null
	,_frame: null
	,_mode: null
	,_oldMode: null
	,getXY: function() {
		return { x : Std["int"](Std["int"](com_haxepunk_HXP.screen.get_mouseX() + this.game.scene.camera.x) / Const.TILE_WIDTH), y : Std["int"](Std["int"](com_haxepunk_HXP.screen.get_mouseY() + this.game.scene.camera.y) / Const.TILE_HEIGHT)};
	}
	,update: function() {
		com_haxepunk_Entity.prototype.update.call(this);
		if(this.get_x() == Std["int"](com_haxepunk_HXP.screen.get_mouseX() + this.game.scene.camera.x) && this.get_y() == Std["int"](com_haxepunk_HXP.screen.get_mouseY() + this.game.scene.camera.y) && this._oldMode == this._mode) return;
		this.set_x(Std["int"](com_haxepunk_HXP.screen.get_mouseX() + this.game.scene.camera.x));
		this.set_y(Std["int"](com_haxepunk_HXP.screen.get_mouseY() + this.game.scene.camera.y));
		var newframe = this._frame;
		if(this._mode == entities_MouseEntity.MODE_DEFAULT) {
			var pos_x = Std["int"](Std["int"](com_haxepunk_HXP.screen.get_mouseX() + this.game.scene.camera.x) / Const.TILE_WIDTH);
			var pos_y = Std["int"](Std["int"](com_haxepunk_HXP.screen.get_mouseY() + this.game.scene.camera.y) / Const.TILE_HEIGHT);
			var ai = this.game.area.getAI(pos_x,pos_y);
			if(this.game.player.state == _$PlayerState.PLR_STATE_HOST && ai != null && ai != this.game.player.host && this.game.area.isVisible(this.game.playerArea.x,this.game.playerArea.y,pos_x,pos_y)) newframe = entities_MouseEntity.CURSOR_ATTACK; else newframe = entities_MouseEntity.CURSOR_DEFAULT;
		} else newframe = entities_MouseEntity.CURSOR_DEBUG;
		if(this._frame != newframe) {
			this._map.setFrame(newframe);
			this._frame = newframe;
		}
	}
	,onWheel: function(delta) {
		this._oldMode = this._mode;
		if(this._mode == entities_MouseEntity.MODE_DEFAULT) this._mode = entities_MouseEntity.MODE_DEBUG; else this._mode = entities_MouseEntity.MODE_DEFAULT;
		this.update();
	}
	,handleInput: function() {
		if(this.game.location == _$LocationType.LOCATION_AREA) this.handleInputArea(); else if(this.game.location == _$LocationType.LOCATION_REGION) this.handleInputRegion();
	}
	,handleInputArea: function() {
		if(com_haxepunk_utils_Input.mouseReleased) {
			var x = Std["int"](Std["int"](com_haxepunk_HXP.screen.get_mouseX() + this.game.scene.camera.x) / Const.TILE_WIDTH);
			var y = Std["int"](Std["int"](com_haxepunk_HXP.screen.get_mouseY() + this.game.scene.camera.y) / Const.TILE_HEIGHT);
			var ai = this.game.area.getAI(x,y);
			if(this._mode == entities_MouseEntity.MODE_DEBUG) {
				haxe_Log.trace("(" + x + "," + y + ") " + this.game.area.getCellType(x,y) + " " + this.game.area.getCellTypeString(x,y) + " player vis: " + Std.string(this.game.area.isVisible(this.game.playerArea.x,this.game.playerArea.y,x,y,true)),{ fileName : "MouseEntity.hx", lineNumber : 127, className : "entities.MouseEntity", methodName : "handleInputArea"});
				if(this.game.playerArea.x == x && this.game.playerArea.y == y) Const.debugObject(this.game.player);
				if(ai != null) Const.debugObject(ai);
			} else if(this._mode == entities_MouseEntity.MODE_DEFAULT) {
				if(this.game.player.state == _$PlayerState.PLR_STATE_HOST && ai != null && ai != this.game.player.host) this.game.playerArea.attackAction(ai);
			}
		}
		if(com_haxepunk_utils_Input.mouseWheel) this.onWheel(com_haxepunk_utils_Input.get_mouseWheelDelta());
	}
	,handleInputRegion: function() {
		if(com_haxepunk_utils_Input.mouseReleased) {
			var x = Std["int"](Std["int"](com_haxepunk_HXP.screen.get_mouseX() + this.game.scene.camera.x) / Const.TILE_WIDTH);
			var y = Std["int"](Std["int"](com_haxepunk_HXP.screen.get_mouseY() + this.game.scene.camera.y) / Const.TILE_HEIGHT);
			var reg = this.game.world._list.h[0];
			var area = reg.getXY(x,y);
			this.game.scene.region.updateIconsArea(x,y);
		}
	}
	,__class__: entities_MouseEntity
});
var entities_ObjectEntity = function(o,g,xx,yy,atlasRow,atlasCol) {
	com_haxepunk_Entity.call(this,xx * Const.TILE_WIDTH,yy * Const.TILE_HEIGHT);
	this.game = g;
	this.object = o;
	this._list = new com_haxepunk_graphics_Graphiclist();
	this._spriteBody = new com_haxepunk_graphics_Spritemap((function($this) {
		var $r;
		var e = com_haxepunk_ds_Either.Right($this.game.scene.entityAtlas);
		$r = e;
		return $r;
	}(this)),32,32);
	this._spriteBody.setFrame(atlasCol,atlasRow);
	this._list.add(this._spriteBody);
	this.set_type("undefined");
	this.set_layer(Const.LAYER_OBJECT);
	this.set_graphic(this._list);
};
$hxClasses["entities.ObjectEntity"] = entities_ObjectEntity;
entities_ObjectEntity.__name__ = ["entities","ObjectEntity"];
entities_ObjectEntity.__super__ = com_haxepunk_Entity;
entities_ObjectEntity.prototype = $extend(com_haxepunk_Entity.prototype,{
	game: null
	,object: null
	,_list: null
	,_spriteBody: null
	,setPosition: function(vx,vy) {
		this.set_x(vx * Const.TILE_WIDTH);
		this.set_y(vy * Const.TILE_HEIGHT);
	}
	,setImage: function(index) {
		this._spriteBody.set_frame(index);
	}
	,getImage: function() {
		return this._spriteBody.get_frame();
	}
	,__class__: entities_ObjectEntity
});
var entities_OrgansWindow = function(g) {
	entities_TextWindow.call(this,g);
	this.actionName = "body feature to grow";
};
$hxClasses["entities.OrgansWindow"] = entities_OrgansWindow;
entities_OrgansWindow.__name__ = ["entities","OrgansWindow"];
entities_OrgansWindow.__super__ = entities_TextWindow;
entities_OrgansWindow.prototype = $extend(entities_TextWindow.prototype,{
	getActions: function() {
		var list = new List();
		var $it0 = this.game.player.evolutionManager.iterator();
		while( $it0.hasNext() ) {
			var imp = $it0.next();
			if(imp.level == 0 || imp.info.organ == null) continue;
			var organInfo = imp.info.organ;
			if(this.game.player.host.organs.getActive(imp.info.id) != null) continue;
			var organ = this.game.player.host.organs.get(imp.info.id);
			var currentGP = 0;
			if(organ != null) currentGP = organ.gp;
			var buf = new StringBuf();
			buf.b += Std.string("<font color='#DDDD00'>" + organInfo.name + "</font>");
			buf.b += " ";
			if(imp.level == null) buf.b += "null"; else buf.b += "" + imp.level;
			buf.b += Std.string(" (" + organInfo.gp + " gp) (");
			var gpLeft = organInfo.gp - currentGP;
			buf.add(Math.round(gpLeft / _$_$Math.gpPerTurn()));
			buf.b += " turns)";
			buf.b += Std.string("\n<font color='#5ebee5'>" + organInfo.note + "</font>\n");
			var levelNote = imp.info.levelNotes[imp.level];
			if(levelNote.indexOf("fluff") < 0 || levelNote.indexOf("todo") < 0) buf.b += Std.string("<font color='#4cd47b'>" + levelNote + "</font>\n");
			if(imp.info.noteFunc != null) buf.add("<font color='#13ff65'>" + imp.info.noteFunc(imp.info.levelParams[imp.level]) + "</font>\n"); else buf.b += "\n";
			list.add({ id : "set." + Std.string(imp.id), type : _$PlayerActionType.ACTION_ORGAN, name : buf.b, energy : 0});
		}
		return list;
	}
	,onAction: function(action) {
		this.game.player.host.organs.action(action.id);
	}
	,getText: function() {
		var buf = new StringBuf();
		buf.b += "Body features\n===\n\n";
		var n = 0;
		var $it0 = this.game.player.host.organs.iterator();
		while( $it0.hasNext() ) {
			var organ = $it0.next();
			if(organ.isActive) buf.b += Std.string("<font color='#DDDD00'>" + organ.info.name + "</font>"); else buf.b += Std.string("<font color='#CCCCCC'>" + organ.info.name + "</font>");
			buf.b += " ";
			if(organ.level == null) buf.b += "null"; else buf.b += "" + organ.level;
			if(organ.isActive) {
				if(organ.info.hasTimeout && organ.timeout > 0) buf.b += Std.string(" (timeout: " + organ.timeout + ")");
			} else buf.b += Std.string(" (" + organ.gp + "/" + organ.info.gp + " gp)");
			var imp = this.game.player.evolutionManager.getImprov(organ.improvInfo.id);
			buf.b += Std.string("\n<font color='#5ebee5'>" + organ.info.note + "</font>\n");
			var levelNote = organ.improvInfo.levelNotes[imp.level];
			if(levelNote.indexOf("fluff") < 0 || levelNote.indexOf("todo") < 0) buf.b += Std.string("<font color='#4cd47b'>" + levelNote + "</font>\n");
			if(organ.improvInfo.noteFunc != null) buf.add("<font color='#13ff65'>" + organ.improvInfo.noteFunc(organ.improvInfo.levelParams[imp.level]) + "</font>\n");
			buf.b += "\n";
			n++;
		}
		if(n == 0) buf.b += "  --- empty ---\n\n";
		if(this.game.location == _$LocationType.LOCATION_AREA && this.game.area.isHabitat) buf.b += "You are in a microhabitat.\n";
		buf.add("Body feature growth costs additional " + _$_$Math.growthEnergyPerTurn() + " energy per turn.\n" + "You will receive " + _$_$Math.gpPerTurn() + " gp per turn.\n" + "Your host will survive for " + (this.game.player.host.energy / this.game.player.vars.organGrowthEnergyPerTurn | 0) + " turns while growing body features (not counting other spending).\n");
		buf.b += "\nGrowing body feature: ";
		buf.add("<font color='#DDDD00'>" + this.game.player.host.organs.getGrowInfo() + "</font>");
		return buf.b;
	}
	,__class__: entities_OrgansWindow
});
var entities_PlayerEntity = function(g,xx,yy) {
	entities_PawnEntity.call(this,g,xx,yy,Const.ROW_PARASITE);
	this.set_type("player");
};
$hxClasses["entities.PlayerEntity"] = entities_PlayerEntity;
entities_PlayerEntity.__name__ = ["entities","PlayerEntity"];
entities_PlayerEntity.__super__ = entities_PawnEntity;
entities_PlayerEntity.prototype = $extend(entities_PawnEntity.prototype,{
	__class__: entities_PlayerEntity
});
var entities_SkillsWindow = function(g) {
	entities_TextWindow.call(this,g);
};
$hxClasses["entities.SkillsWindow"] = entities_SkillsWindow;
entities_SkillsWindow.__name__ = ["entities","SkillsWindow"];
entities_SkillsWindow.__super__ = entities_TextWindow;
entities_SkillsWindow.prototype = $extend(entities_TextWindow.prototype,{
	getText: function() {
		var buf = new StringBuf();
		buf.b += "Parasite skills and knowledges\n===\n\n";
		var n = 0;
		var $it0 = this.game.player.skills.iterator();
		while( $it0.hasNext() ) {
			var skill = $it0.next();
			n++;
			buf.b += Std.string((skill.info.isKnowledge?"Knowledge: ":"") + skill.info.name);
			if(skill.info.isBool == null || !skill.info.isBool) buf.b += Std.string(" " + skill.level + "%\n"); else buf.b += "\n";
		}
		if(n == 0) buf.b += "  --- empty ---\n";
		if(this.game.player.state == _$PlayerState.PLR_STATE_HOST) {
			buf.b += "\nHost skills and knowledges\n===\n\n";
			var n1 = 0;
			var $it1 = this.game.player.host.skills.iterator();
			while( $it1.hasNext() ) {
				var skill1 = $it1.next();
				n1++;
				buf.b += Std.string(skill1.info.name);
				if(skill1.info.isBool == null || !skill1.info.isBool) buf.b += Std.string(" " + skill1.level + "%\n"); else buf.b += "\n";
			}
			if(n1 == 0) buf.b += "  --- empty ---\n";
			if(this.game.player.host.isAttrsKnown) {
				buf.b += "\nHost attributes\n===\n\n";
				buf.add("Strength " + this.game.player.host.get_strength() + "\n");
				buf.b += Std.string("<font color=#777777>" + "Increases health and energy\n" + "Increases melee damage\n" + "Decreases grip efficiency\n" + "Decreases paralysis efficiency\n" + "Increases speed of removing slime\n" + "</font>\n");
				buf.add("Constitution " + this.game.player.host.get_constitution() + "\n");
				buf.b += Std.string("<font color=#777777>" + "Increases health and energy\n" + "</font>\n");
				buf.add("Intellect " + this.game.player.host.get_intellect() + "\n");
				buf.b += Std.string("<font color=#777777>" + "Increases skills and society knowledge learning efficiency\n" + "</font>\n");
				buf.add("Psyche " + this.game.player.host.get_psyche() + "\n");
				buf.b += Std.string("<font color=#777777>" + "Increases energy needed to probe brain\n" + "Reduces the efficiency of reinforcing control\n" + "</font>\n");
				buf.b += "Host traits\n===\n\n";
				var _g_head = this.game.player.host.traits.h;
				var _g_val = null;
				while(_g_head != null) {
					var t;
					t = (function($this) {
						var $r;
						_g_val = _g_head[0];
						_g_head = _g_head[1];
						$r = _g_val;
						return $r;
					}(this));
					var info = const_TraitsConst.getInfo(t);
					buf.b += Std.string(info.name + "\n");
					buf.b += Std.string("<font color=#777777>" + info.note + "</font>\n");
				}
			}
		}
		return buf.b;
	}
	,__class__: entities_SkillsWindow
});
var entities_TimelineWindow = function(g) {
	entities_TextWindow.call(this,g);
};
$hxClasses["entities.TimelineWindow"] = entities_TimelineWindow;
entities_TimelineWindow.__name__ = ["entities","TimelineWindow"];
entities_TimelineWindow.__super__ = entities_TextWindow;
entities_TimelineWindow.prototype = $extend(entities_TextWindow.prototype,{
	getText: function() {
		var buf_b = "";
		buf_b += "Event timeline\n===\n\n";
		var $it0 = this.game.timeline.iterator();
		while( $it0.hasNext() ) {
			var event = $it0.next();
			if(event.isHidden) continue;
			var npcSomethingKnown = event.npcSomethingKnown();
			var notesSomethingKnown = event.notesSomethingKnown();
			if(!event.locationKnown && !npcSomethingKnown && !notesSomethingKnown) continue;
			buf_b += Std.string("Event " + event.num);
			buf_b += Std.string(" [index: " + event.index + "]");
			if(event.location != null) {
				buf_b += ": ";
				if(event.locationKnown) {
					if(event.location.hasName) buf_b += Std.string(event.location.name + " ");
					buf_b += Std.string("at (" + event.location.area.x + "," + event.location.area.y + ")");
				} else buf_b += "at (?,?)";
			}
			buf_b += "\n";
			var _g = 0;
			var _g1 = event.notes;
			while(_g < _g1.length) {
				var n = _g1[_g];
				++_g;
				if(n.isKnown) buf_b += Std.string(" + " + n.text + "\n"); else if(n.clues > 0) buf_b += Std.string(" - ? [" + n.clues + "/4]\n");
			}
			buf_b += "Participants:\n";
			var numDeceasedAndKnown = 0;
			var numAliveAndMemoryKnown = 0;
			if(npcSomethingKnown) {
				var _g2 = 0;
				var _g11 = event.npc;
				while(_g2 < _g11.length) {
					var npc = _g11[_g2];
					++_g2;
					if(!npc.nameKnown && !npc.jobKnown && !npc.areaKnown && !npc.statusKnown) continue;
					if(npc.isDead && npc.statusKnown) {
						numDeceasedAndKnown++;
						continue;
					}
					if(!npc.isDead && npc.memoryKnown) {
						numAliveAndMemoryKnown++;
						continue;
					}
					if(npc.nameKnown && npc.jobKnown && npc.areaKnown && npc.statusKnown) buf_b += " + "; else buf_b += " - ";
					buf_b += Std.string((npc.nameKnown?npc.name:"?") + " ");
					buf_b += Std.string("(" + (npc.jobKnown?npc.job:"?") + ") ");
					if(npc.areaKnown) buf_b += Std.string("at (" + npc.area.x + "," + npc.area.y + ") "); else buf_b += "at (?,?) ";
					if(npc.jobKnown) buf_b += "[photo] "; else buf_b += "[no photo] ";
					if(!npc.statusKnown) buf_b += "status: unknown";
					buf_b += "\n";
				}
			}
			if(!npcSomethingKnown && event.npc.length > 0) buf_b += "  unknown\n"; else if(event.npc.length == 0) buf_b += "  none\n";
			if(numAliveAndMemoryKnown > 0) buf_b += Std.string(" ... +" + numAliveAndMemoryKnown + " persons probed ...\n");
			if(numDeceasedAndKnown > 0) buf_b += Std.string(" ... +" + numDeceasedAndKnown + " persons deceased ...\n");
			buf_b += "\n";
		}
		return buf_b;
	}
	,__class__: entities_TimelineWindow
});
var game_AreaGame = function(g,r,tv,vx,vy) {
	this.game = g;
	this.events = [];
	this.region = r;
	this.isGenerated = false;
	this.isEntering = false;
	this.isKnown = false;
	this.isHabitat = false;
	this.hasHabitat = false;
	this.habitat = null;
	this.id = game_AreaGame._maxID++;
	this.name = null;
	this.parent = null;
	this.x = vx;
	this.y = vy;
	this.width = 10;
	this.height = 10;
	this._alertness = 0;
	this.alertnessMod = 0;
	this.set_interest(0);
	this.habitatAreaID = 0;
	this.habitatIsDetected = false;
	this.npc = new List();
	this._cells = [];
	this._ai = new List();
	this._objects = new haxe_ds_IntMap();
	this._pathEngine = null;
	this.setType(tv);
};
$hxClasses["game.AreaGame"] = game_AreaGame;
game_AreaGame.__name__ = ["game","AreaGame"];
game_AreaGame.prototype = {
	game: null
	,region: null
	,id: null
	,name: null
	,typeID: null
	,tileID: null
	,isGenerated: null
	,isEntering: null
	,isKnown: null
	,info: null
	,width: null
	,height: null
	,x: null
	,y: null
	,events: null
	,npc: null
	,parent: null
	,habitat: null
	,isHabitat: null
	,hasHabitat: null
	,habitatAreaID: null
	,habitatIsDetected: null
	,alertnessMod: null
	,_alertness: null
	,interest: null
	,_cells: null
	,_ai: null
	,_objects: null
	,_pathEngine: null
	,enter: function() {
		this.game.log("DEBUG " + "Area.enter()",_$TextColor.COLOR_DEBUG);
		this.game.area = this;
		this.isEntering = true;
		if(!this.isGenerated) this.generate(); else {
			var $it0 = this._objects.iterator();
			while( $it0.hasNext() ) {
				var o = $it0.next();
				o.game.scene.add(o.entity);
			}
		}
		if(this.isHabitat && this.habitatIsDetected) this.enterHabitatDetected();
		var loc = null;
		if(!this.info.isInhabited || this.game.turns == 0) loc = this.findEmptyLocation(); else {
			var tmp = [];
			var $it1 = this._objects.iterator();
			while( $it1.hasNext() ) {
				var o1 = $it1.next();
				if(o1.type == "sewer_hatch") tmp.push(o1);
			}
			if(tmp.length == 0) {
				haxe_Log.trace("inhabited area with no sewers, weird",{ fileName : "AreaGame.hx", lineNumber : 126, className : "game.AreaGame", methodName : "enter"});
				loc = this.findEmptyLocation();
			} else {
				var o2 = tmp[Std.random(tmp.length)];
				loc = { x : o2.x, y : o2.y};
			}
		}
		if(this.game.player.state == _$PlayerState.PLR_STATE_HOST) {
			this.game.playerArea.entity.visible = false;
			this.game.scene.add(this.game.player.host.entity);
			this.game.player.host.setPosition(loc.x,loc.y);
			this._ai.add(this.game.player.host);
		}
		this.game.playerArea.moveTo(loc.x,loc.y);
		this.game.playerArea.ap = 2;
		this.alertnessMod = 0;
		if(this.info.isHighRisk && Lambda.has(this.game.goals._listCompleted,_$Goal.GOAL_EVOLVE_PROBE)) this.game.goals.receive(_$Goal.GOAL_EVOLVE_CAMO);
		if(this.events.length > 0) this.game.goals.complete(_$Goal.GOAL_TRAVEL_EVENT);
		this.game.scene.area.update();
		if(this.game.turns != 0) {
			this.turnSpawnAI();
			this.turnSpawnMoreAI();
		}
		if(this.game.player.state == _$PlayerState.PLR_STATE_HOST) this.updateVisibilityHost(); else this.updateVisibilityParasite();
		this.game.scene.area.updateVisibility();
		this.isEntering = false;
		this.game.scene.area.show();
	}
	,enterHabitatDetected: function() {
		var _g = 0;
		while(_g < 4) {
			var i = _g++;
			var loc = this.findEmptyLocation();
			var ai1 = new ai_BlackopsAI(this.game,loc.x,loc.y);
			ai1.set_alertness(75);
			this.addAI(ai1);
		}
	}
	,leave: function() {
		this.game.log("DEBUG " + "Area.leave()",_$TextColor.COLOR_DEBUG);
		if(!this.isHabitat) {
			var totalPoints = 0;
			var totalBodies = 0;
			var $it0 = this._objects.iterator();
			while( $it0.hasNext() ) {
				var o = $it0.next();
				if(o.type == "body") {
					var body = o;
					totalPoints += body.organPoints;
					totalBodies++;
				}
			}
			if(totalBodies == 1) this.game.managerRegion.onBodyDiscovered(this,totalPoints); else if(totalBodies > 0) this.game.managerRegion.onBodiesDiscovered(this,totalBodies,totalPoints);
		}
		var _g_head = this._ai.h;
		var _g_val = null;
		while(_g_head != null) {
			var ai;
			ai = (function($this) {
				var $r;
				_g_val = _g_head[0];
				_g_head = _g_head[1];
				$r = _g_val;
				return $r;
			}(this));
			this.removeAI(ai);
		}
		var $it1 = this._objects.iterator();
		while( $it1.hasNext() ) {
			var o1 = $it1.next();
			if(o1.isStatic || this.isHabitat) o1.game.scene.remove(o1.entity); else {
				o1.game.scene.remove(o1.entity);
				this._objects.remove(o1.id);
			}
		}
		if(this.isHabitat && this.habitatIsDetected) {
			this.game.playerRegion.get_currentArea().hasHabitat = false;
			this.game.region.removeArea(this.id);
			this.game.scene.region.updateIconsArea(this.game.playerRegion.x,this.game.playerRegion.y);
			this.game.log("This habitat is no longer secure.");
		}
		this.game.scene.area.hide();
	}
	,generate: function() {
		this.game.log("DEBUG " + "Area.generate()",_$TextColor.COLOR_DEBUG);
		this._cells = [];
		var _g1 = 0;
		var _g = this.width;
		while(_g1 < _g) {
			var i = _g1++;
			this._cells[i] = [];
		}
		var _g11 = 0;
		var _g2 = this.height;
		while(_g11 < _g2) {
			var y = _g11++;
			var _g3 = 0;
			var _g21 = this.width;
			while(_g3 < _g21) {
				var x = _g3++;
				this._cells[x][y] = Const.TILE_GROUND;
			}
		}
		game_AreaGenerator.generate(this.game,this,this.info);
		this._pathEngine = new aPath_Engine(this,this.width,this.height);
		this.isGenerated = true;
		this.game.log("DEBUG " + "Area generated.",_$TextColor.COLOR_DEBUG);
	}
	,addEventObject: function(params) {
		if(!this.isGenerated) this.generate();
		var loc = this.findEmptyLocation();
		this.game.log("DEBUG " + ("!!! event obj " + params.name + " loc: (" + loc.x + "," + loc.y + ") area: (" + this.x + "," + this.y + ")"),_$TextColor.COLOR_DEBUG);
		var o = new objects_EventObject(this.game,loc.x,loc.y,false);
		o.name = params.name;
		o.eventAction = params.action;
		o.eventAction.obj = o;
		o.eventOnAction = params.onAction;
		if(this.game.area != this) o.game.scene.remove(o.entity);
		this._objects.h[o.id] = o;
		return o;
	}
	,addObject: function(o) {
		this._objects.h[o.id] = o;
	}
	,getObject: function(id) {
		return this._objects.h[id];
	}
	,getObjectsAt: function(x,y) {
		var tmp = new List();
		var $it0 = this._objects.iterator();
		while( $it0.hasNext() ) {
			var o = $it0.next();
			if(o.x == x && o.y == y) tmp.push(o);
		}
		return tmp;
	}
	,removeObject: function(o) {
		o.game.scene.remove(o.entity);
		this._objects.remove(o.id);
	}
	,findUnseenEmptyLocation: function() {
		var rect = this.getVisibleRect();
		var cnt = 0;
		while(true) {
			cnt++;
			if(cnt > 100) {
				haxe_Log.trace("findUnseenEmptyLocation(): could not find empty spot (report this please)!",{ fileName : "AreaGame.hx", lineNumber : 370, className : "game.AreaGame", methodName : "findUnseenEmptyLocation"});
				return { x : -1, y : -1};
			}
			var x = rect.x1 + Std.random(rect.x2);
			var y = rect.y1 + Std.random(rect.y2);
			if(!this.isWalkable(x,y)) continue;
			if(this.getAI(x,y) != null) continue;
			if(!this.isEntering) {
				if(this.game.player.state != _$PlayerState.PLR_STATE_HOST && com_haxepunk_HXP.distanceSquared(this.game.playerArea.x,this.game.playerArea.y,x,y) < 36) continue;
				if(this.game.player.state == _$PlayerState.PLR_STATE_HOST && this.isVisible(this.game.playerArea.x,this.game.playerArea.y,x,y)) continue;
			}
			return { x : x, y : y};
		}
		return { x : -1, y : -1};
	}
	,findEmptyLocation: function() {
		var x = -1;
		var y = -1;
		var cnt = 0;
		while(true) {
			cnt++;
			if(cnt > 100) {
				haxe_Log.trace("could not find empty spot!",{ fileName : "AreaGame.hx", lineNumber : 417, className : "game.AreaGame", methodName : "findEmptyLocation"});
				return { x : 0, y : 0};
			}
			x = Std.random(this.width);
			y = Std.random(this.height);
			if(!this.isWalkable(x,y)) continue;
			if(this.getAI(x,y) != null) continue;
			break;
		}
		return { x : x, y : y};
	}
	,findLocation: function(params) {
		if(params.near == null) {
			haxe_Log.trace("TODO: " + "findLocation near == null",{ fileName : "Const.hx", lineNumber : 216, className : "Const", methodName : "todo"});
			return null;
		}
		if(params.radius == null) params.radius = 3;
		var xo = params.near.x;
		var yo = params.near.y;
		var tmp = [];
		var _g1 = -params.radius;
		var _g = params.radius;
		while(_g1 < _g) {
			var dy = _g1++;
			var _g3 = -params.radius;
			var _g2 = params.radius;
			while(_g3 < _g2) {
				var dx = _g3++;
				if(!this.isEntering) {
					if(this.game.player.state != _$PlayerState.PLR_STATE_HOST && com_haxepunk_HXP.distanceSquared(this.game.playerArea.x,this.game.playerArea.y,xo + dx,yo + dy) < 36) continue;
					if(this.game.player.state == _$PlayerState.PLR_STATE_HOST && this.isVisible(this.game.playerArea.x,this.game.playerArea.y,xo + dx,yo + dy)) continue;
				}
				if(this.isWalkable(xo + dx,yo + dy) && this.getAI(xo + dx,yo + dy) == null && !(this.game.playerArea.x == xo + dx && this.game.playerArea.y == yo + dy)) tmp.push({ x : xo + dx, y : yo + dy});
			}
		}
		if(tmp.length == 0) return null;
		return tmp[Std.random(tmp.length)];
	}
	,findEmptyLocationNear: function(xo,yo) {
		var tmp = [];
		var _g = -3;
		while(_g < 3) {
			var dy = _g++;
			var _g1 = -3;
			while(_g1 < 3) {
				var dx = _g1++;
				if(this.isWalkable(xo + dx,yo + dy) && this.getAI(xo + dx,yo + dy) == null && !(this.game.playerArea.x == xo + dx && this.game.playerArea.y == yo + dy)) tmp.push({ x : xo + dx, y : yo + dy});
			}
		}
		if(tmp.length == 0) return null;
		return tmp[Std.random(tmp.length)];
	}
	,setType: function(t) {
		this.typeID = t;
		this.info = const_WorldConst.areas.get(this.typeID);
		this.width = this.info.width - 10 + Std.random(20);
		this.height = this.info.height - 10 + Std.random(20);
		if(this.typeID == _$AreaType.AREA_GROUND) this.tileID = Const.TILE_REGION_GROUND; else if(this.typeID == _$AreaType.AREA_CITY_LOW) this.tileID = Const.TILE_REGION_CITY_LOW; else if(this.typeID == _$AreaType.AREA_CITY_MEDIUM) this.tileID = Const.TILE_REGION_CITY_MEDIUM; else if(this.typeID == _$AreaType.AREA_CITY_HIGH) this.tileID = Const.TILE_REGION_CITY_HIGH; else if(this.typeID == _$AreaType.AREA_MILITARY_BASE) this.tileID = Const.TILE_REGION_MILITARY_BASE; else if(this.typeID == _$AreaType.AREA_FACILITY) this.tileID = Const.TILE_REGION_FACILITY;
		this.name = this.info.name;
		if(this.typeID == _$AreaType.AREA_MILITARY_BASE) this.name = const_NameConst.generate("%baseA1% %baseB1%"); else if(this.typeID == _$AreaType.AREA_FACILITY) this.name = const_NameConst.generate("%tree1% %geo1% %lab1%");
	}
	,setAlertness: function(v) {
		this._alertness = Const.clampFloat(v,0,100.0);
	}
	,getCells: function() {
		return this._cells;
	}
	,getCellTypeString: function(x,y) {
		if(x < 0 || y < 0 || x >= this.width || y >= this.height) return null;
		return Const.TILE_TYPE[this._cells[x][y]];
	}
	,getCellType: function(x,y) {
		if(x < 0 || y < 0 || x >= this.width || y >= this.height) return -1;
		return this._cells[x][y];
	}
	,hasAI: function(x,y) {
		var _g_head = this._ai.h;
		var _g_val = null;
		while(_g_head != null) {
			var ai;
			ai = (function($this) {
				var $r;
				_g_val = _g_head[0];
				_g_head = _g_head[1];
				$r = _g_val;
				return $r;
			}(this));
			if(ai.x == x && ai.y == y) return true;
		}
		return false;
	}
	,getAI: function(x,y) {
		var _g_head = this._ai.h;
		var _g_val = null;
		while(_g_head != null) {
			var ai;
			ai = (function($this) {
				var $r;
				_g_val = _g_head[0];
				_g_head = _g_head[1];
				$r = _g_val;
				return $r;
			}(this));
			if(ai.x == x && ai.y == y) return ai;
		}
		return null;
	}
	,setCellType: function(x,y,index) {
		if(x >= 0 && y >= 0 && x < this.width && y < this.height) this._cells[x][y] = index;
	}
	,isWalkable: function(x,y) {
		if(x < 0 || y < 0 || x >= this.width || y >= this.height) return false;
		return Const.TILE_WALKABLE[this._cells[x][y]];
	}
	,isVisible: function(x1,y1,x2,y2,doTrace) {
		var ox2 = x2;
		var oy2 = y2;
		var steep = Math.abs(y2 - y1) > Math.abs(x2 - x1);
		var tmp;
		if(steep) {
			tmp = x1;
			x1 = y1;
			y1 = tmp;
			tmp = x2;
			x2 = y2;
			y2 = tmp;
		}
		if(x1 > x2) {
			tmp = x1;
			x1 = x2;
			x2 = tmp;
			tmp = y1;
			y1 = y2;
			y2 = tmp;
		}
		var dx = x2 - x1;
		var dy = Math.floor(Math.abs(y2 - y1));
		var error = Math.floor(dx / 2);
		var yy = y1;
		var ystep;
		if(y1 < y2) ystep = 1; else ystep = -1;
		var _g = x1;
		while(_g < x2) {
			var xx = _g++;
			var ok = true;
			if(steep) {
				ok = this.isWalkable(yy,xx);
				if(ox2 == yy && oy2 == xx) ok = true;
			} else {
				ok = this.isWalkable(xx,yy);
				if(ox2 == xx && oy2 == yy) ok = true;
			}
			if(!ok) return false;
			error -= dy;
			if(error < 0) {
				yy = yy + ystep;
				error = error + dx;
			}
		}
		return true;
	}
	,addAI: function(ai) {
		this._ai.add(ai);
		ai.createEntity();
	}
	,removeAI: function(ai) {
		if(ai.npc != null) ai.npc.ai = null;
		this.game.scene.remove(ai.entity);
		this._ai.remove(ai);
	}
	,turn: function() {
		var _g_head = this._ai.h;
		var _g_val = null;
		while(_g_head != null) {
			var ai;
			ai = (function($this) {
				var $r;
				_g_val = _g_head[0];
				_g_head = _g_head[1];
				$r = _g_val;
				return $r;
			}(this));
			ai.turn();
			if(this.game.isFinished) return;
		}
		var $it0 = this._objects.iterator();
		while( $it0.hasNext() ) {
			var o = $it0.next();
			o.turn();
		}
		this.game.scene.area.turn();
		this.turnSpawnAI();
		this.turnSpawnMoreAI();
		this.turnSpawnNPC();
		this.turnSpawnClues();
		this.turnAlertness();
	}
	,turnSpawnClues: function() {
		if(!this.game.player.vars.timelineEnabled || this.events.length == 0) return;
		var e = null;
		var _g = 0;
		var _g1 = this.events;
		while(_g < _g1.length) {
			var ev = _g1[_g];
			++_g;
			if(ev.notesKnown() && ev.npcNamesOrJobsKnown()) continue;
			e = ev;
			if(Std.random(2) == 0) break;
		}
		if(e == null) return;
		var cnt = 0;
		var $it0 = this._objects.iterator();
		while( $it0.hasNext() ) {
			var o = $it0.next();
			if(o.item != null && o.item.info.type == "readable") cnt++;
		}
		var maxSpawn = 5 - cnt;
		var info = const_ItemsConst.getInfo(Std.random(100) < 80?"paper":"book");
		var _g2 = 0;
		while(_g2 < maxSpawn) {
			var i = _g2++;
			var loc = this.findUnseenEmptyLocation();
			if(loc.x < 0) {
				haxe_Log.trace("Area.turnSpawnClues(): no free spot for another " + info.id + ", please report",{ fileName : "AreaGame.hx", lineNumber : 780, className : "game.AreaGame", methodName : "turnSpawnClues"});
				return;
			}
			var o1 = Type.createInstance(info.areaObjectClass,[this.game,loc.x,loc.y]);
			o1.name = info.names[Std.random(info.names.length)];
			o1.item = { id : info.id, name : o1.name, info : info, event : e};
			this._objects.h[o1.id] = o1;
		}
	}
	,turnAlertness: function() {
		var cnt = 0;
		var _g_head = this._ai.h;
		var _g_val = null;
		while(_g_head != null) {
			var ai;
			ai = (function($this) {
				var $r;
				_g_val = _g_head[0];
				_g_head = _g_head[1];
				$r = _g_val;
				return $r;
			}(this));
			if(ai.state == _$AIState.AI_STATE_ALERT) cnt++;
		}
		if(cnt > 0) return;
		var _g = this;
		_g.set_alertness(_g.get_alertness() - 0.1);
	}
	,turnSpawnNPC: function() {
		if(this.npc.length == 0) return;
		if(!this.game.player.vars.npcEnabled) return;
		var total = 0;
		var _g_head = this.npc.h;
		var _g_val = null;
		while(_g_head != null) {
			var n;
			n = (function($this) {
				var $r;
				_g_val = _g_head[0];
				_g_head = _g_head[1];
				$r = _g_val;
				return $r;
			}(this));
			if(n.jobKnown && !n.isDead) total++;
		}
		var cnt = 0;
		var _g_head1 = this._ai.h;
		var _g_val1 = null;
		while(_g_head1 != null) {
			var ai;
			ai = (function($this) {
				var $r;
				_g_val1 = _g_head1[0];
				_g_head1 = _g_head1[1];
				$r = _g_val1;
				return $r;
			}(this));
			if(ai.npc != null && !ai.parasiteAttached) cnt++;
		}
		if(cnt > 2) return;
		var maxSpawn = total - cnt;
		if(maxSpawn > 3) maxSpawn = 3;
		var i = 0;
		var _g_head2 = this.npc.h;
		var _g_val2 = null;
		while(_g_head2 != null) {
			var n1;
			n1 = (function($this) {
				var $r;
				_g_val2 = _g_head2[0];
				_g_head2 = _g_head2[1];
				$r = _g_val2;
				return $r;
			}(this));
			if(n1.jobKnown && !n1.isDead && n1.ai == null) {
				var ai1 = this.spawnUnseenAI(n1.type,true);
				if(ai1 == null) break;
				this.game.log("DEBUG " + "spawn npc",_$TextColor.COLOR_DEBUG);
				n1.ai = ai1;
				ai1.event = n1.event;
				ai1.job = n1.job;
				ai1.npc = n1;
				ai1.name.real = n1.name;
				ai1.name.realCapped = n1.name;
				ai1.isNameKnown = true;
				ai1.isJobKnown = true;
				ai1.entity._spriteNPC.setFrame(Const.FRAME_EVENT_NPC,Const.ROW_REGION_ICON);
				i++;
				if(i >= maxSpawn) break;
			}
		}
	}
	,turnSpawnAI: function() {
		var cnt = 0;
		var _g_head = this._ai.h;
		var _g_val = null;
		while(_g_head != null) {
			var ai;
			ai = (function($this) {
				var $r;
				_g_val = _g_head[0];
				_g_head = _g_head[1];
				$r = _g_val;
				return $r;
			}(this));
			if(ai.isCommon) cnt++;
		}
		if(cnt > this.info.commonAI) return;
		var maxSpawn = this.info.commonAI - cnt;
		if(maxSpawn > 10) maxSpawn = 10;
		var _g = 0;
		while(_g < maxSpawn) {
			var i = _g++;
			var rnd = Std.random(100);
			var min = 0;
			var type = null;
			var $it0 = this.info.ai.keys();
			while( $it0.hasNext() ) {
				var key = $it0.next();
				if(rnd < min + this.info.ai.get(key)) {
					type = key;
					break;
				}
				min += this.info.ai.get(key);
			}
			this.spawnUnseenAI(type,true);
		}
	}
	,turnSpawnMoreAI: function() {
		var cnt = 0;
		var _g_head = this._ai.h;
		var _g_val = null;
		while(_g_head != null) {
			var ai;
			ai = (function($this) {
				var $r;
				_g_val = _g_head[0];
				_g_head = _g_head[1];
				$r = _g_val;
				return $r;
			}(this));
			if(!ai.isCommon) cnt++;
		}
		var uncommonAI = Std["int"](this.info.uncommonAI * this.get_alertness() / 100.0);
		if(cnt >= uncommonAI) return;
		this.game.info("Uncommon AI " + cnt + "/" + uncommonAI + " (alertness: " + this.get_alertness() + "%, max: " + this.info.uncommonAI + ")");
		var maxSpawn = uncommonAI - cnt;
		if(maxSpawn > 10) maxSpawn = 10;
		var _g = 0;
		while(_g < maxSpawn) {
			var i = _g++;
			this.spawnUnseenAI("police",false);
		}
	}
	,spawnUnseenAI: function(type,isCommon) {
		var loc = this.findUnseenEmptyLocation();
		if(loc.x < 0) {
			haxe_Log.trace("Area.spawnUnseenAI(): no free spot for another " + type + ", please report",{ fileName : "AreaGame.hx", lineNumber : 951, className : "game.AreaGame", methodName : "spawnUnseenAI"});
			return null;
		}
		var ai1 = null;
		if(type == "dog") ai1 = new ai_DogAI(this.game,loc.x,loc.y); else if(type == "civilian") ai1 = new ai_CivilianAI(this.game,loc.x,loc.y); else if(type == "police") ai1 = new ai_PoliceAI(this.game,loc.x,loc.y); else if(type == "soldier") ai1 = new ai_SoldierAI(this.game,loc.x,loc.y); else if(type == "security") ai1 = new ai_SecurityAI(this.game,loc.x,loc.y); else if(type == "agent") ai1 = new ai_AgentAI(this.game,loc.x,loc.y); else throw new js__$Boot_HaxeError("spawnUnseenAI(): AI type [" + type + "] unknown");
		ai1.isCommon = isCommon;
		this.addAI(ai1);
		return ai1;
	}
	,updateVisibility: function() {
		if(this.game.player.state == _$PlayerState.PLR_STATE_HOST) this.updateVisibilityHost(); else this.updateVisibilityParasite();
		this.game.scene.area.updateVisibility();
	}
	,getVisibleRect: function() {
		var rect = { x1 : (com_haxepunk_HXP.camera.x / Const.TILE_WIDTH | 0) - 1, y1 : (com_haxepunk_HXP.camera.y / Const.TILE_HEIGHT | 0) - 1, x2 : ((com_haxepunk_HXP.camera.x + com_haxepunk_HXP.windowWidth) / Const.TILE_WIDTH | 0) + 2, y2 : ((com_haxepunk_HXP.camera.y + com_haxepunk_HXP.windowHeight) / Const.TILE_HEIGHT | 0) + 2};
		if(rect.x1 < 0) rect.x1 = 0;
		if(rect.y1 < 0) rect.y1 = 0;
		if(rect.x2 > this.width) rect.x2 = this.width;
		if(rect.y2 > this.height) rect.y2 = this.height;
		return rect;
	}
	,updateVisibilityHost: function() {
		var _g_head = this._ai.h;
		var _g_val = null;
		while(_g_head != null) {
			var ai;
			ai = (function($this) {
				var $r;
				_g_val = _g_head[0];
				_g_head = _g_head[1];
				$r = _g_val;
				return $r;
			}(this));
			if(this.game.player.vars.losEnabled) ai.entity.visible = this.isVisible(this.game.playerArea.x,this.game.playerArea.y,ai.x,ai.y); else ai.entity.visible = true;
		}
		var $it0 = this._objects.iterator();
		while( $it0.hasNext() ) {
			var obj = $it0.next();
			if(this.game.player.vars.losEnabled) obj.entity.visible = this.isVisible(this.game.playerArea.x,this.game.playerArea.y,obj.x,obj.y); else obj.entity.visible = true;
		}
	}
	,updateVisibilityParasite: function() {
		var _g_head = this._ai.h;
		var _g_val = null;
		while(_g_head != null) {
			var ai;
			ai = (function($this) {
				var $r;
				_g_val = _g_head[0];
				_g_head = _g_head[1];
				$r = _g_val;
				return $r;
			}(this));
			if(this.game.player.vars.losEnabled) ai.entity.visible = com_haxepunk_HXP.distanceSquared(this.game.playerArea.x,this.game.playerArea.y,ai.x,ai.y) < 36; else ai.entity.visible = true;
		}
		var $it0 = this._objects.iterator();
		while( $it0.hasNext() ) {
			var obj = $it0.next();
			if(this.game.player.vars.losEnabled) obj.entity.visible = com_haxepunk_HXP.distanceSquared(this.game.playerArea.x,this.game.playerArea.y,obj.x,obj.y) < 36; else obj.entity.visible = true;
		}
	}
	,getRandomDirection: function(x,y) {
		var tmp = [];
		var _g1 = 0;
		var _g = Const.dirx.length;
		while(_g1 < _g) {
			var i = _g1++;
			var nx = x + Const.dirx[i];
			var ny = y + Const.diry[i];
			var ok = this.isWalkable(nx,ny) && !this.hasAI(nx,ny) && !(this.game.playerArea.x == nx && this.game.playerArea.y == ny);
			if(ok) tmp.push(i);
		}
		if(tmp.length == 0) {
			haxe_Log.trace("ai at (" + x + "," + y + "): no dirs",{ fileName : "AreaGame.hx", lineNumber : 1069, className : "game.AreaGame", methodName : "getRandomDirection"});
			return -1;
		}
		return tmp[Std.random(tmp.length)];
	}
	,getAIinRadius: function(x,y,dist,los) {
		var tmp = new List();
		var _g_head = this._ai.h;
		var _g_val = null;
		while(_g_head != null) {
			var ai;
			ai = (function($this) {
				var $r;
				_g_val = _g_head[0];
				_g_head = _g_head[1];
				$r = _g_val;
				return $r;
			}(this));
			if(com_haxepunk_HXP.distanceSquared(x,y,ai.x,ai.y) <= dist * dist && (!los || this.isVisible(ai.x,ai.y,x,y))) tmp.add(ai);
		}
		return tmp;
	}
	,getAllAI: function() {
		return this._ai;
	}
	,getObjectsInRadius: function(x,y,dist,los) {
		var tmp = new List();
		var $it0 = this._objects.iterator();
		while( $it0.hasNext() ) {
			var o = $it0.next();
			if(com_haxepunk_HXP.distanceSquared(x,y,o.x,o.y) <= dist * dist && (!los || this.isVisible(o.x,o.y,x,y))) tmp.add(o);
		}
		return tmp;
	}
	,getObjects: function() {
		return this._objects.iterator();
	}
	,getPath: function(x1,y1,x2,y2) {
		if(!this.isWalkable(x1,y1) || !this.isWalkable(x2,y2) || x1 == x2 && y1 == y2) return null;
		try {
			var p = this._pathEngine.getPath(x1,y1,x2,y2);
			return p;
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			haxe_Log.trace(haxe_CallStack.toString(haxe_CallStack.exceptionStack()),{ fileName : "AreaGame.hx", lineNumber : 1131, className : "game.AreaGame", methodName : "getPath"});
		}
		return null;
	}
	,hasAnyAI: function() {
		if(this.game.player.state == _$PlayerState.PLR_STATE_HOST) return this._ai.length > 1; else return this._ai.length > 0;
	}
	,debugShowObjects: function() {
		var $it0 = this._objects.iterator();
		while( $it0.hasNext() ) {
			var o = $it0.next();
			haxe_Log.trace(o,{ fileName : "AreaGame.hx", lineNumber : 1147, className : "game.AreaGame", methodName : "debugShowObjects"});
		}
	}
	,toString: function() {
		return "(" + this.x + "," + this.y + "): " + Std.string(this.typeID) + " alertness:" + this.get_alertness() + " interest:" + this.interest;
	}
	,get_alertness: function() {
		return this._alertness;
	}
	,set_alertness: function(v) {
		this.alertnessMod += v - this._alertness;
		return this._alertness = Const.clampFloat(v,0,100.0);
	}
	,set_interest: function(v) {
		if(this.game.isInited && this.interest != null && v != this.interest) this.game.info("Area interest changed: " + (v - this.interest > 0?"+":"") + (v - this.interest) + ".");
		return this.interest = Const.clampFloat(v,0,100.0);
	}
	,__class__: game_AreaGame
	,__properties__: {set_interest:"set_interest",set_alertness:"set_alertness",get_alertness:"get_alertness"}
};
var game_AreaGenerator = function() { };
$hxClasses["game.AreaGenerator"] = game_AreaGenerator;
game_AreaGenerator.__name__ = ["game","AreaGenerator"];
game_AreaGenerator.generate = function(game1,area,info) {
	if(info.type == "city") game_AreaGenerator.generateBuildings(game1,area,info); else if(info.type == "militaryBase") game_AreaGenerator.generateBuildings(game1,area,info); else if(info.type == "facility") game_AreaGenerator.generateBuildings(game1,area,info); else if(info.type == "wilderness") game_AreaGenerator.generateWilderness(game1,area,info); else if(info.type == "habitat") game_AreaGenerator.generateHabitat(game1,area,info); else haxe_Log.trace("AreaGenerator.generate(): unknown area type: " + info.type,{ fileName : "AreaGenerator.hx", lineNumber : 24, className : "game.AreaGenerator", methodName : "generate"});
	game_AreaGenerator.generateObjects(game1,area,info);
};
game_AreaGenerator.addAlley = function(area,x,y,w) {
	var cells = area.getCells();
	var maxrange;
	if(w == 1) maxrange = 7; else maxrange = 10;
	var minx = x - maxrange;
	if(minx < 0) minx = 0;
	var maxx = x + maxrange;
	if(maxx > area.width) maxx = area.width;
	var miny = y - maxrange;
	if(miny < 0) miny = 0;
	var maxy = y + maxrange;
	if(maxy > area.height) maxy = area.height;
	var roadNear = false;
	var _g = miny;
	while(_g < maxy) {
		var yy1 = _g++;
		var _g1 = minx;
		while(_g1 < maxx) {
			var xx1 = _g1++;
			if(cells[xx1][yy1] == game_AreaGenerator.TEMP_ROAD || cells[xx1][yy1] == game_AreaGenerator.TEMP_ALLEY) {
				roadNear = true;
				break;
			}
		}
	}
	if(roadNear) return;
	var dir;
	if(Std.random(100) > 50) dir = game__$LineDir.LR; else dir = game__$LineDir.TB;
	var len = 0;
	var xx = x;
	var yy = y;
	if(xx >= 0 && yy >= 0 && xx < area.width && yy < area.height) area._cells[xx][yy] = game_AreaGenerator.TEMP_ALLEY;
	var _g2 = 0;
	while(_g2 < w) {
		var j = _g2++;
		area.setCellType(xx + (dir == game__$LineDir.TB || dir == game__$LineDir.BT?j:0),yy + (dir == game__$LineDir.LR || dir == game__$LineDir.RL?j:0),game_AreaGenerator.TEMP_ALLEY);
	}
	var dirChanged = 0;
	while(true) {
		var dx = 0;
		var dy = 0;
		if(dir == game__$LineDir.TB) dy = 1; else if(dir == game__$LineDir.BT) dy = -1; else if(dir == game__$LineDir.LR) dx = 1; else if(dir == game__$LineDir.RL) dx = -1;
		xx += dx;
		yy += dy;
		len++;
		if(xx < 0 || yy < 0) break;
		if(xx >= area.width) break;
		if(yy >= area.height) break;
		if(cells[xx][yy] == game_AreaGenerator.TEMP_ROAD) break;
		if(xx >= 0 && yy >= 0 && xx < area.width && yy < area.height) area._cells[xx][yy] = game_AreaGenerator.TEMP_ALLEY;
		var _g3 = 0;
		while(_g3 < w) {
			var j1 = _g3++;
			area.setCellType(xx + (dir == game__$LineDir.TB || dir == game__$LineDir.BT?j1:0),yy + (dir == game__$LineDir.LR || dir == game__$LineDir.RL?j1:0),game_AreaGenerator.TEMP_ALLEY);
		}
		if(len > 5 && len % 10 == 2 && Std.random(100) < 40 && dirChanged < 4) {
			if(dir == game__$LineDir.TB) {
				if(Std.random(100) > 50) dir = game__$LineDir.LR; else dir = game__$LineDir.RL;
				yy--;
			} else if(dir == game__$LineDir.LR) {
				if(Std.random(100) > 50) dir = game__$LineDir.BT; else dir = game__$LineDir.TB;
				xx--;
			}
			dirChanged++;
		}
		if(len > 100) break;
	}
};
game_AreaGenerator.addStreet = function(area,dir,sx,sy,level) {
	var i = 0;
	var xx = sx;
	var yy = sy;
	var prevRoad;
	if(dir == game__$LineDir.TB || dir == game__$LineDir.BT) prevRoad = sy; else prevRoad = sx;
	var w = 0;
	var maxlen = 200;
	if(level == 0) w = 10; else if(level == 1) {
		maxlen = 50;
		w = 5;
	} else if(level == 2) {
		maxlen = 25;
		w = 3;
	} else {
		maxlen = 15;
		w = 3;
	}
	while(true) {
		var _g = 0;
		while(_g < w) {
			var i1 = _g++;
			area.setCellType(xx + (dir == game__$LineDir.TB || dir == game__$LineDir.BT?i1:0),yy + (dir == game__$LineDir.LR || dir == game__$LineDir.RL?i1:0),game_AreaGenerator.TEMP_ROAD);
		}
		if(i > maxlen && Std.random(100) > i && level > 0) break;
		var dx = 0;
		var dy = 0;
		if(dir == game__$LineDir.TB) dy = 1; else if(dir == game__$LineDir.BT) dy = -1; else if(dir == game__$LineDir.LR) dx = 1; else if(dir == game__$LineDir.RL) dx = -1;
		if(xx + dx < 0 || yy + dy < 0 || xx + dx >= area.width || yy + dy >= area.height) break;
		var newRoad;
		if(dx != 0) newRoad = xx; else newRoad = yy;
		var blocksz = 10;
		if(level == 0) blocksz = 20; else if(level == 1) blocksz = 10;
		var newblock = (newRoad - prevRoad) % 20 == 0;
		if(level < 3 && newRoad - prevRoad > 0 && newblock) {
			var newdir = null;
			if(dir == game__$LineDir.TB || dir == game__$LineDir.BT) if(Std.random(100) < 50) newdir = game__$LineDir.LR; else newdir = game__$LineDir.RL; else if(dir == game__$LineDir.LR || dir == game__$LineDir.RL) if(Std.random(100) < 50) newdir = game__$LineDir.BT; else newdir = game__$LineDir.TB;
			var rx = xx;
			var ry = yy;
			if(newdir == game__$LineDir.TB) ry += w; else if(newdir == game__$LineDir.BT) ry -= 1;
			if(newdir == game__$LineDir.LR) rx += w; else if(newdir == game__$LineDir.RL) rx -= 1;
			prevRoad == (dx != 0?xx:yy);
			game_AreaGenerator.addStreet(area,newdir,rx,ry,level + 1);
		}
		xx += dx;
		yy += dy;
		i++;
	}
};
game_AreaGenerator.generateCity = function(game1,area,info) {
	var cells = area.getCells();
	var _g1 = 0;
	var _g = area.height;
	while(_g1 < _g) {
		var y = _g1++;
		var _g3 = 0;
		var _g2 = area.width;
		while(_g3 < _g2) {
			var x = _g3++;
			cells[x][y] = game_AreaGenerator.TEMP_BUILDING;
		}
	}
	var blockSize = 20;
	var blockW = area.width / blockSize | 0;
	var blockH = area.height / blockSize | 0;
	var blockW4 = area.width / blockSize / 4 | 0;
	var blockH4 = area.height / blockSize / 4 | 0;
	var bx = blockW4 + Std.random(blockW - 1 - blockW4);
	var by = blockH4 + Std.random(blockH - 1 - blockH4);
	game_AreaGenerator.addStreet(area,game__$LineDir.TB,bx * blockSize,0,0);
	var _g11 = 0;
	var _g4 = area.height;
	while(_g11 < _g4) {
		var y1 = _g11++;
		var x1 = 0;
		while(x1 < area.width) {
			game_AreaGenerator.addAlley(area,x1,y1,2);
			x1 += 10;
		}
	}
	var _g12 = 0;
	var _g5 = area.height;
	while(_g12 < _g5) {
		var y2 = _g12++;
		var _g31 = 0;
		var _g21 = area.width;
		while(_g31 < _g21) {
			var x2 = _g31++;
			if(area.getCellType(x2,y2) != game_AreaGenerator.TEMP_BUILDING) continue;
			if(area.getCellType(x2,y2 - 1) == game_AreaGenerator.TEMP_ROAD && area.getCellType(x2,y2 + 1) == game_AreaGenerator.TEMP_ROAD) {
				if(x2 >= 0 && y2 >= 0 && x2 < area.width && y2 < area.height) area._cells[x2][y2] = game_AreaGenerator.TEMP_ROAD;
			}
			if(area.getCellType(x2 - 1,y2) == game_AreaGenerator.TEMP_ROAD && area.getCellType(x2 + 1,y2) == game_AreaGenerator.TEMP_ROAD) {
				if(x2 >= 0 && y2 >= 0 && x2 < area.width && y2 < area.height) area._cells[x2][y2] = game_AreaGenerator.TEMP_ROAD;
			}
			if(area.getCellType(x2,y2 - 1) != game_AreaGenerator.TEMP_BUILDING && area.getCellType(x2,y2 + 1) != game_AreaGenerator.TEMP_BUILDING) {
				if(x2 >= 0 && y2 >= 0 && x2 < area.width && y2 < area.height) area._cells[x2][y2] = game_AreaGenerator.TEMP_ALLEY;
			}
			if(area.getCellType(x2 - 1,y2) != game_AreaGenerator.TEMP_BUILDING && area.getCellType(x2 + 1,y2) != game_AreaGenerator.TEMP_BUILDING) {
				if(x2 >= 0 && y2 >= 0 && x2 < area.width && y2 < area.height) area._cells[x2][y2] = game_AreaGenerator.TEMP_ALLEY;
			}
		}
	}
	var _g13 = 0;
	var _g6 = area.height;
	while(_g13 < _g6) {
		var y3 = _g13++;
		var _g32 = 0;
		var _g22 = area.width;
		while(_g32 < _g22) {
			var x3 = _g32++;
			if(cells[x3][y3] != game_AreaGenerator.TEMP_BUILDING) continue;
			var maxx = 0;
			var maxy = 0;
			var _g51 = x3;
			var _g41 = area.width;
			while(_g51 < _g41) {
				var xx = _g51++;
				if(cells[xx][y3] != game_AreaGenerator.TEMP_BUILDING) {
					maxx = xx;
					break;
				}
			}
			var _g52 = y3;
			var _g42 = area.height;
			while(_g52 < _g42) {
				var yy = _g52++;
				if(cells[x3][yy] != game_AreaGenerator.TEMP_BUILDING) {
					maxy = yy;
					break;
				}
			}
			var w = maxx - x3;
			var h = maxy - y3;
			var maxw = 10 + Std.random(5);
			var maxh = 10 + Std.random(5);
			if(w > maxw) {
				w = maxw;
				maxx = x3 + w;
			}
			if(h > maxh) {
				h = maxh;
				maxy = y3 + h;
			}
			var tile = game_AreaGenerator.TEMP_ACTUAL_BUILDING;
			if(w <= 3 || h <= 3) tile = game_AreaGenerator.TEMP_WALKWAY;
			var _g43 = y3;
			while(_g43 < maxy) {
				var yy1 = _g43++;
				var _g53 = x3;
				while(_g53 < maxx) {
					var xx1 = _g53++;
					if(yy1 == y3 || yy1 == maxy - 1 || xx1 == x3 || xx1 == maxx - 1) cells[xx1][yy1] = game_AreaGenerator.TEMP_WALKWAY; else cells[xx1][yy1] = tile;
				}
			}
		}
	}
	return;
	var _g14 = 0;
	var _g7 = area.height;
	while(_g14 < _g7) {
		var y4 = _g14++;
		var _g33 = 0;
		var _g23 = area.width;
		while(_g33 < _g23) {
			var x4 = _g33++;
			if(area.getCellType(x4,y4) != Const.TILE_ROAD) continue;
			var ok = false;
			var _g54 = 0;
			var _g44 = Const.dirx.length;
			while(_g54 < _g44) {
				var i = _g54++;
				if(area.getCellType(x4 + Const.dirx[i],y4 + Const.diry[i]) == Const.TILE_BUILDING) {
					ok = true;
					break;
				}
			}
			if(ok) {
				if(x4 >= 0 && y4 >= 0 && x4 < area.width && y4 < area.height) area._cells[x4][y4] = Const.TILE_WALKWAY;
			}
		}
	}
	var _g15 = 0;
	var _g8 = area.height;
	while(_g15 < _g8) {
		var y5 = _g15++;
		var _g34 = 0;
		var _g24 = area.width;
		while(_g34 < _g24) {
			var x5 = _g34++;
			if(area.getCellType(x5,y5) != Const.TILE_WALKWAY) continue;
			var cnt = 0;
			var _g55 = 0;
			var _g45 = Const.dirx.length;
			while(_g55 < _g45) {
				var i1 = _g55++;
				if(area.getCellType(x5 + Const.dirx[i1],y5 + Const.diry[i1]) == Const.TILE_ROAD) cnt++;
			}
			if(cnt < 5) continue;
			var roadDown = area.getCellType(x5,y5 - 1) == Const.TILE_WALKWAY;
			var roadRight = area.getCellType(x5 - 1,y5) == Const.TILE_WALKWAY;
			var yy2 = y5;
			var len = 0;
			while(true) {
				if(roadDown) yy2 = yy2 + 1; else yy2 = yy2 - 1;
				if(area.getCellType(x5,yy2) != Const.TILE_ROAD) break;
				len++;
			}
			if(len <= 5) {
				var yy3 = y5;
				while(true) {
					if(roadDown) yy3 = yy3 + 1; else yy3 = yy3 - 1;
					if(area.getCellType(x5,yy3) != Const.TILE_ROAD) break;
					if(x5 >= 0 && yy3 >= 0 && x5 < area.width && yy3 < area.height) area._cells[x5][yy3] = Const.TILE_CROSSWALKV;
				}
			}
			var xx2 = x5;
			var len1 = 0;
			while(true) {
				if(roadRight) xx2 = xx2 + 1; else xx2 = xx2 - 1;
				if(area.getCellType(xx2,y5) != Const.TILE_ROAD) break;
				len1++;
			}
			if(len1 <= 5) {
				var xx3 = x5;
				while(true) {
					if(roadRight) xx3 = xx3 + 1; else xx3 = xx3 - 1;
					if(area.getCellType(xx3,y5) != Const.TILE_ROAD) break;
					if(xx3 >= 0 && y5 >= 0 && xx3 < area.width && y5 < area.height) area._cells[xx3][y5] = Const.TILE_CROSSWALKH;
				}
			}
		}
	}
};
game_AreaGenerator.lineV = function(area,x,y1,y2,w,t) {
	if(w > 1) {
		var _g1 = x;
		var _g = x + w;
		while(_g1 < _g) {
			var xx = _g1++;
			var _g2 = y1;
			while(_g2 < y2) {
				var y = _g2++;
				if(xx >= 0 && y >= 0 && xx < area.width && y < area.height) area._cells[xx][y] = t;
			}
		}
	} else {
		var _g3 = y1;
		while(_g3 < y2) {
			var y3 = _g3++;
			if(x >= 0 && y3 >= 0 && x < area.width && y3 < area.height) area._cells[x][y3] = t;
		}
	}
};
game_AreaGenerator.lineH = function(area,x1,x2,y,w,t) {
	if(w > 1) {
		var _g = x1;
		while(_g < x2) {
			var x = _g++;
			var _g2 = y;
			var _g1 = y + w;
			while(_g2 < _g1) {
				var yy = _g2++;
				if(x >= 0 && yy >= 0 && x < area.width && yy < area.height) area._cells[x][yy] = t;
			}
		}
	} else {
		var _g3 = x1;
		while(_g3 < x2) {
			var x3 = _g3++;
			if(x3 >= 0 && y >= 0 && x3 < area.width && y < area.height) area._cells[x3][y] = t;
		}
	}
};
game_AreaGenerator.generateHabitat = function(game1,area,info) {
	var _g1 = 0;
	var _g = area.height;
	while(_g1 < _g) {
		var y = _g1++;
		var _g3 = 0;
		var _g2 = area.width;
		while(_g3 < _g2) {
			var x = _g3++;
			if(x >= 0 && y >= 0 && x < area.width && y < area.height) area._cells[x][y] = Const.TILE_WALL;
		}
	}
	var _g4 = 0;
	while(_g4 < 10) {
		var i = _g4++;
		var x1 = 1 + Std.random(area.width - 5);
		var y1 = 1 + Std.random(area.height - 5);
		var w = 5 + Std.random(15);
		var h = 5 + Std.random(15);
		if(x1 + w >= area.width - 1) w = area.width - x1 - 2;
		if(y1 + h >= area.height - 1) h = area.height - y1 - 2;
		game_AreaGenerator.makeRoom(area,x1,y1,w,h);
	}
};
game_AreaGenerator.makeRoom = function(area,x1,y1,w,h) {
	var _g1 = y1;
	var _g = y1 + h;
	while(_g1 < _g) {
		var y = _g1++;
		var _g3 = x1;
		var _g2 = x1 + w;
		while(_g3 < _g2) {
			var x = _g3++;
			if(x >= 0 && y >= 0 && x < area.width && y < area.height) area._cells[x][y] = Const.TILE_GROUND;
		}
	}
};
game_AreaGenerator.generateWilderness = function(game1,area,info) {
	var numStuff = area.width * area.height / 20 | 0;
	var _g = 0;
	while(_g < numStuff) {
		var i = _g++;
		var x = Std.random(area.width);
		var y = Std.random(area.height);
		area.setCellType(x,y,Std.random(100) < 50?Const.TILE_ROCK:Const.TILE_TREE);
	}
};
game_AreaGenerator.generateBuildings = function(game1,area,info) {
	var _g1 = 1;
	var _g = area.height;
	while(_g1 < _g) {
		var y = _g1++;
		var _g3 = 1;
		var _g2 = area.width;
		while(_g3 < _g2) {
			var x = _g3++;
			if(Math.random() > info.buildingChance) continue;
			var sx = 5 + Std.random(10);
			var sy = 5 + Std.random(10);
			if(x + sx > area.width - 1) sx = area.width - 1 - x;
			if(y + sy > area.height - 1) sy = area.height - 1 - y;
			if(sx < 2) continue;
			if(sy < 2) continue;
			var ok = true;
			var _g5 = -2;
			var _g4 = sy + 3;
			while(_g5 < _g4) {
				var dy = _g5++;
				var _g7 = -2;
				var _g6 = sx + 3;
				while(_g7 < _g6) {
					var dx = _g7++;
					if(dx == 0 && dy == 0) continue;
					var cellType = area.getCellType(x + dx,y + dy);
					if(cellType == Const.TILE_BUILDING) {
						ok = false;
						break;
					}
				}
			}
			if(!ok) continue;
			var _g41 = 0;
			while(_g41 < sy) {
				var dy1 = _g41++;
				var _g51 = 0;
				while(_g51 < sx) {
					var dx1 = _g51++;
					var cellType1 = area.getCellType(x + dx1,y + dy1);
					if(cellType1 == -1) continue;
					area.setCellType(x + dx1,y + dy1,Const.TILE_BUILDING);
				}
			}
		}
	}
};
game_AreaGenerator.generateObjects = function(game1,area,info) {
	var _g = 0;
	var _g1 = info.objects;
	while(_g < _g1.length) {
		var objInfo = _g1[_g];
		++_g;
		var _g3 = 0;
		var _g2 = objInfo.amount;
		while(_g3 < _g2) {
			var i = _g3++;
			var loc = null;
			var cnt = 0;
			while(true) {
				loc = area.findEmptyLocation();
				cnt++;
				if(cnt > 500) {
					haxe_Log.trace("Area.generateObjects(): no free spot for another " + objInfo.id + ", please report",{ fileName : "AreaGenerator.hx", lineNumber : 638, className : "game.AreaGenerator", methodName : "generateObjects"});
					return;
				}
				var ok = true;
				var _g4 = -3;
				while(_g4 < 3) {
					var y = _g4++;
					var _g5 = -3;
					while(_g5 < 3) {
						var x = _g5++;
						var olist = area.getObjectsAt(loc.x + x,loc.y + y);
						var _g6_head = olist.h;
						var _g6_val = null;
						while(_g6_head != null) {
							var o1;
							o1 = (function($this) {
								var $r;
								_g6_val = _g6_head[0];
								_g6_head = _g6_head[1];
								$r = _g6_val;
								return $r;
							}(this));
							if(o1.type == objInfo.id) {
								ok = false;
								break;
							}
						}
						if(!ok) break;
					}
				}
				if(ok) break;
			}
			var o = null;
			if(objInfo.id == "sewer_hatch") o = new objects_SewerHatch(game1,loc.x,loc.y); else throw new js__$Boot_HaxeError("unknown object type: " + objInfo.id);
			area._objects.h[o.id] = o;
		}
	}
};
var game__$LineDir = $hxClasses["game._LineDir"] = { __ename__ : ["game","_LineDir"], __constructs__ : ["TB","BT","LR","RL"] };
game__$LineDir.TB = ["TB",0];
game__$LineDir.TB.toString = $estr;
game__$LineDir.TB.__enum__ = game__$LineDir;
game__$LineDir.BT = ["BT",1];
game__$LineDir.BT.toString = $estr;
game__$LineDir.BT.__enum__ = game__$LineDir;
game__$LineDir.LR = ["LR",2];
game__$LineDir.LR.toString = $estr;
game__$LineDir.LR.__enum__ = game__$LineDir;
game__$LineDir.RL = ["RL",3];
game__$LineDir.RL.toString = $estr;
game__$LineDir.RL.__enum__ = game__$LineDir;
var game_AreaManager = function(g) {
	this.game = g;
	this._list = new List();
};
$hxClasses["game.AreaManager"] = game_AreaManager;
game_AreaManager.__name__ = ["game","AreaManager"];
game_AreaManager.prototype = {
	game: null
	,_list: null
	,area: null
	,debugShowQueue: function() {
		var _g_head = this._list.h;
		var _g_val = null;
		while(_g_head != null) {
			var e;
			e = (function($this) {
				var $r;
				_g_val = _g_head[0];
				_g_head = _g_head[1];
				$r = _g_val;
				return $r;
			}(this));
			haxe_Log.trace(e,{ fileName : "AreaManager.hx", lineNumber : 28, className : "game.AreaManager", methodName : "debugShowQueue"});
		}
	}
	,add: function(type,x,y,turns,params) {
		var e = { ai : null, objectID : -1, details : null, type : type, x : x, y : y, turns : turns, params : params};
		this._list.push(e);
	}
	,addObject: function(o,type,turns) {
		var e = { ai : null, objectID : o.id, type : type, x : -1, y : -1, details : null, turns : turns};
		this._list.push(e);
	}
	,addAI: function(ai,type,turns) {
		var e = { ai : ai, objectID : -1, type : type, x : ai.x, y : ai.y, details : "" + Std.string(ai.reason), turns : turns};
		this._list.push(e);
	}
	,turn: function() {
		var _g_head = this._list.h;
		var _g_val = null;
		while(_g_head != null) {
			var e;
			e = (function($this) {
				var $r;
				_g_val = _g_head[0];
				_g_head = _g_head[1];
				$r = _g_val;
				return $r;
			}(this));
			e.turns--;
			if(e.turns > 0) continue;
			if(e.ai != null && e.ai.state == _$AIState.AI_STATE_DEAD) {
				this._list.remove(e);
				continue;
			}
			var o;
			if(e.objectID >= 0) o = this.get_area().getObject(e.objectID); else o = null;
			if(e.objectID >= 0 && o == null) {
				this._list.remove(e);
				continue;
			}
			if(e.type == _$AreaManagerEventType.AREAEVENT_CALL_LAW) this.onCallLaw(e); else if(e.type == _$AreaManagerEventType.AREAEVENT_ALERT_LAW) this.onAlertLaw(e); else if(e.type == _$AreaManagerEventType.AREAEVENT_ARRIVE_LAW) this.onArriveLaw(e); else if(e.type == _$AreaManagerEventType.AREAEVENT_CALL_BACKUP) this.onCallBackup(e); else if(e.type == _$AreaManagerEventType.AREAEVENT_ARRIVE_BACKUP) this.onArriveBackup(e); else if(e.type == _$AreaManagerEventType.AREAEVENT_OBJECT_DECAY) this.onObjectDecay(o);
			this._list.remove(e);
		}
	}
	,onAttack: function(x,y,isRanged) {
		var tmp = this.get_area().getAIinRadius(x,y,isRanged?ai_AI.HEAR_DISTANCE:ai_AI.VIEW_DISTANCE,isRanged);
		var _g_head = tmp.h;
		var _g_val = null;
		while(_g_head != null) {
			var ai1;
			ai1 = (function($this) {
				var $r;
				_g_val = _g_head[0];
				_g_head = _g_head[1];
				$r = _g_val;
				return $r;
			}(this));
			if(ai1.state == _$AIState.AI_STATE_IDLE) ai1.setState(_$AIState.AI_STATE_ALERT,ai__$AIStateChangeReason.REASON_WITNESS);
		}
	}
	,onCallLaw: function(e) {
		var sdetails;
		if(e.details == "" + Std.string(ai__$AIStateChangeReason.REASON_HOST)) sdetails = "a suspicious individual"; else if(e.details == "" + Std.string(ai__$AIStateChangeReason.REASON_BODY)) sdetails = "a dead body"; else if(e.details == "" + Std.string(ai__$AIStateChangeReason.REASON_DAMAGE) || e.details == "" + Std.string(ai__$AIStateChangeReason.REASON_WITNESS)) sdetails = "an attack"; else sdetails = "wild animal sighting";
		this.log((this.get_area().typeID == _$AreaType.AREA_FACILITY?"Security":"Police") + " has received a report about " + sdetails + ". Dispatching units to the location.");
		if(this.game.playerArea.hears(e.ai.x,e.ai.y)) e.ai.log("calls the " + (this.get_area().typeID == _$AreaType.AREA_FACILITY?"security":"police") + "!");
		var _g = this.get_area();
		var _g1 = _g.get_alertness();
		_g.set_alertness(_g1 + 1);
		_g1;
		this.add(_$AreaManagerEventType.AREAEVENT_ALERT_LAW,e.ai.x,e.ai.y,2,null);
		this.add(_$AreaManagerEventType.AREAEVENT_ARRIVE_LAW,e.ai.x,e.ai.y,this.get_area().info.lawResponceTime,null);
	}
	,onAlertLaw: function(e) {
		var list = this.get_area().getAllAI();
		var _g_head = list.h;
		var _g_val = null;
		while(_g_head != null) {
			var ai1;
			ai1 = (function($this) {
				var $r;
				_g_val = _g_head[0];
				_g_head = _g_head[1];
				$r = _g_val;
				return $r;
			}(this));
			if(Lambda.has(["police","security","soldier"],ai1.type) && ai1.state == _$AIState.AI_STATE_IDLE) ai1.setState(_$AIState.AI_STATE_ALERT,ai__$AIStateChangeReason.REASON_BACKUP);
		}
	}
	,onArriveLaw: function(e) {
		this.log((this.get_area().typeID == _$AreaType.AREA_FACILITY?"Security":"Police") + " arrives on scene!");
		var _g1 = 0;
		var _g = this.get_area().info.lawResponceAmount;
		while(_g1 < _g) {
			var i = _g1++;
			var loc = this.get_area().findLocation({ near : { x : e.x, y : e.y}, radius : 5, isUnseen : true});
			if(loc == null) {
				haxe_Log.trace("TODO: " + "Could not find free spot for spawn!",{ fileName : "Const.hx", lineNumber : 216, className : "Const", methodName : "todo"});
				return;
			}
			var ai1 = null;
			if(this.get_area().typeID == _$AreaType.AREA_FACILITY) ai1 = new ai_SecurityAI(this.game,loc.x,loc.y); else ai1 = new ai_PoliceAI(this.game,loc.x,loc.y);
			ai1.roamTargetX = e.x;
			ai1.roamTargetY = e.y;
			ai1.inventory._list.clear();
			ai1.inventory.addID("pistol");
			ai1.skills.addID(_$Skill.SKILL_PISTOL,25 + Std.random(25));
			ai1.set_alertness(50);
			this.get_area().addAI(ai1);
		}
	}
	,onCallBackup: function(e) {
		this.game.log("DEBUG " + ((e.ai.type == "police"?"Officer":"Unit") + " calling for backup. Dispatching units to the location."),_$TextColor.COLOR_DEBUG);
		if(this.game.playerArea.hears(e.ai.x,e.ai.y)) e.ai.log("calls for backup!");
		var _g = this.get_area();
		_g.set_alertness(_g.get_alertness() + 2);
		this.add(_$AreaManagerEventType.AREAEVENT_ALERT_LAW,e.ai.x,e.ai.y,2,null);
		this.add(_$AreaManagerEventType.AREAEVENT_ARRIVE_BACKUP,e.ai.x,e.ai.y,this.get_area().info.lawResponceTime,{ type : e.ai.type});
	}
	,onArriveBackup: function(e) {
		this.game.log("DEBUG " + "Backup arrives on scene!",_$TextColor.COLOR_DEBUG);
		var _g = 0;
		while(_g < 2) {
			var i = _g++;
			var loc = this.get_area().findEmptyLocationNear(e.x,e.y);
			if(loc == null) {
				haxe_Log.trace("TODO: " + "Could not find free spot for spawn!",{ fileName : "Const.hx", lineNumber : 216, className : "Const", methodName : "todo"});
				return;
			}
			var ai1 = null;
			if(e.params.type == "police") ai1 = new ai_PoliceAI(this.game,loc.x,loc.y); else if(e.params.type == "security") ai1 = new ai_SecurityAI(this.game,loc.x,loc.y); else if(e.params.type == "soldier") ai1 = new ai_SoldierAI(this.game,loc.x,loc.y);
			ai1.inventory._list.clear();
			if(e.params.type == "police") {
				ai1.inventory.addID("pistol");
				ai1.skills.addID(_$Skill.SKILL_PISTOL,25 + Std.random(25));
			} else if(e.params.type == "security") {
				ai1.inventory.addID("pistol");
				ai1.skills.addID(_$Skill.SKILL_PISTOL,50 + Std.random(25));
			} else if(e.params.type == "soldier") {
				ai1.inventory.addID("assaultRifle");
				ai1.skills.addID(_$Skill.SKILL_RIFLE,50 + Std.random(25));
			}
			ai1.timers.alert = 10;
			ai1.state = _$AIState.AI_STATE_ALERT;
			ai1.isBackup = true;
			this.get_area().addAI(ai1);
		}
	}
	,onObjectDecay: function(o) {
		this.get_area().removeObject(o);
	}
	,log: function(s) {
		this.game.log("DEBUG " + s,_$TextColor.COLOR_DEBUG);
	}
	,get_area: function() {
		return this.game.area;
	}
	,__class__: game_AreaManager
	,__properties__: {get_area:"get_area"}
};
var game_ConsoleGame = function(g) {
	this.game = g;
};
$hxClasses["game.ConsoleGame"] = game_ConsoleGame;
game_ConsoleGame.__name__ = ["game","ConsoleGame"];
game_ConsoleGame.prototype = {
	game: null
	,run: function(cmd) {
		cmd = StringTools.trim(cmd);
		if(cmd == "") return;
		this.game.log("DEBUG " + ("Console command: " + cmd),_$TextColor.COLOR_DEBUG);
		var arr = cmd.split(" ");
		if(cmd.charAt(0) == "a") this.addCommand(cmd); else if(cmd.charAt(0) == "g") this.goCommand(cmd); else if(cmd.charAt(0) == "i") this.infoCommand(cmd); else if(cmd.charAt(0) == "l") this.learnCommand(cmd); else if(cmd.charAt(0) == "s") {
			if(arr[0] == "set") this.setOptionCommand(arr);
			this.setCommand(cmd);
		} else if(cmd.charAt(0) == "q") null;
		this.game.scene.hud.update();
	}
	,setOptionCommand: function(arr) {
		if(arr.length < 3) {
			this.game.log("DEBUG " + "set <option> <value>",_$TextColor.COLOR_DEBUG);
			return;
		}
		var key = arr[1];
		var val = arr[2];
		this.game.config.set(key,val,true);
	}
	,addCommand: function(cmd) {
		if(cmd.charAt(1) == "o") {
			var idx = Std.parseInt(HxOverrides.substr(cmd,2,null));
			var imp = const_EvolutionConst.improvements[idx];
			if(imp == null) {
				this.game.log("DEBUG " + ("Improvement [" + idx + "] not found."),_$TextColor.COLOR_DEBUG);
				return;
			}
			this.game.player.evolutionManager.addImprov(imp.id,3);
			this.game.player.host.organs.action("set." + Std.string(imp.id));
			this.game.player.host.organs.debugCompleteCurrent();
		}
	}
	,goCommand: function(cmd) {
		if(cmd.charAt(1) == "e") {
			var idx = Std.parseInt(HxOverrides.substr(cmd,2,null));
			var event = this.game.timeline._eventsList[idx];
			if(event == null) {
				this.game.log("DEBUG " + ("Event " + idx + " not found in the timeline."),_$TextColor.COLOR_DEBUG);
				return;
			}
			if(event.location == null) {
				this.game.log("DEBUG " + ("Event " + idx + " has no location."),_$TextColor.COLOR_DEBUG);
				return;
			}
			this.game.log("DEBUG " + ("Teleporting to event " + idx + " location."),_$TextColor.COLOR_DEBUG);
			var area = event.location.area;
			this.game.scene.setState(_$HUDState.HUDSTATE_DEFAULT);
			if(this.game.location == _$LocationType.LOCATION_AREA) this.game.setLocation(_$LocationType.LOCATION_REGION);
			this.game.playerRegion.moveTo(area.x,area.y);
			this.game.setLocation(_$LocationType.LOCATION_AREA);
		} else if(cmd.charAt(1) == "a") {
			var tmp = HxOverrides.substr(cmd,2,null).split(" ");
			if(tmp.length < 2 || tmp.length > 2) {
				this.game.log("DEBUG " + "wrong format",_$TextColor.COLOR_DEBUG);
				return;
			}
			var x = Std.parseInt(tmp[0]);
			var y = Std.parseInt(tmp[1]);
			var area1 = this.game.region.getXY(x,y);
			if(area1 == null) {
				this.game.log("DEBUG " + "wrong location",_$TextColor.COLOR_DEBUG);
				return;
			}
			this.game.log("DEBUG " + ("Teleporting to area (" + x + "," + y + ")."),_$TextColor.COLOR_DEBUG);
			if(this.game.location == _$LocationType.LOCATION_AREA) this.game.setLocation(_$LocationType.LOCATION_REGION);
			this.game.playerRegion.moveTo(area1.x,area1.y);
			this.game.setLocation(_$LocationType.LOCATION_AREA);
		} else if(cmd.charAt(1) == "g") {
			var tmp1 = HxOverrides.substr(cmd,2,null).split(" ");
			if(tmp1.length < 2 || tmp1.length > 2) {
				this.game.log("DEBUG " + "wrong format",_$TextColor.COLOR_DEBUG);
				return;
			}
			var x1 = Std.parseInt(tmp1[0]);
			var y1 = Std.parseInt(tmp1[1]);
			this.game.log("DEBUG " + ("Teleporting to location (" + x1 + "," + y1 + ")."),_$TextColor.COLOR_DEBUG);
			if(this.game.location == _$LocationType.LOCATION_AREA) this.game.playerArea.moveTo(x1,y1); else this.game.playerRegion.moveTo(x1,y1);
		}
	}
	,infoCommand: function(cmd) {
		if(cmd.charAt(1) == "e") {
			var $it0 = this.game.timeline.iterator();
			while( $it0.hasNext() ) {
				var ev = $it0.next();
				haxe_Log.trace("" + Std.string(ev),{ fileName : "Const.hx", lineNumber : 253, className : "Const", methodName : "p"});
			}
		} else if(cmd.charAt(1) == "i") {
			var _g1 = 0;
			var _g = const_EvolutionConst.improvements.length;
			while(_g1 < _g) {
				var i = _g1++;
				var imp = const_EvolutionConst.improvements[i];
				haxe_Log.trace(i + ": " + imp.name + ", " + Std.string(imp.id) + " (" + Std.string(imp.path) + ")",{ fileName : "Const.hx", lineNumber : 253, className : "Const", methodName : "p"});
				if(imp.organ != null) haxe_Log.trace("  organ: " + imp.organ.name,{ fileName : "Const.hx", lineNumber : 253, className : "Const", methodName : "p"});
			}
		}
	}
	,learnCommand: function(cmd) {
		if(cmd.charAt(1) == "e") {
			var idx = Std.parseInt(HxOverrides.substr(cmd,2,null));
			var event = this.game.timeline._eventsList[idx];
			if(event == null) {
				this.game.log("DEBUG " + ("Event [" + idx + "] not found in the timeline."),_$TextColor.COLOR_DEBUG);
				return;
			}
			while(!event.notesKnown()) event.learnNote();
			event.learnLocation();
		} else if(cmd.charAt(1) == "i" && cmd.charAt(2) == "a") {
			var level = 3;
			if(cmd.length > 2) level = Std.parseInt(HxOverrides.substr(cmd,3,null));
			var _g = 0;
			var _g1 = const_EvolutionConst.improvements;
			while(_g < _g1.length) {
				var imp = _g1[_g];
				++_g;
				this.game.player.evolutionManager.addImprov(imp.id,level);
			}
			this.game.player.evolutionManager.state = 2;
		} else if(cmd.charAt(1) == "i") {
			var idx1 = Std.parseInt(HxOverrides.substr(cmd,2,null));
			var imp1 = const_EvolutionConst.improvements[idx1];
			if(imp1 == null) {
				this.game.log("DEBUG " + ("Improvement [" + idx1 + "] not found."),_$TextColor.COLOR_DEBUG);
				return;
			}
			this.game.player.evolutionManager.addImprov(imp1.id,3);
		} else if(cmd.charAt(1) == "t") {
			this.game.log("Timeline opened.");
			var $it0 = this.game.timeline.iterator();
			while( $it0.hasNext() ) {
				var e = $it0.next();
				e.locationKnown = true;
				var _g2 = 0;
				var _g11 = e.notes;
				while(_g2 < _g11.length) {
					var n = _g11[_g2];
					++_g2;
					n.isKnown = true;
				}
				var _g3 = 0;
				var _g12 = e.npc;
				while(_g3 < _g12.length) {
					var npc = _g12[_g3];
					++_g3;
					npc.nameKnown = true;
					npc.jobKnown = true;
					npc.areaKnown = true;
					npc.statusKnown = true;
				}
			}
			this.game.timeline.update();
		}
	}
	,setCommand: function(cmd) {
		var stage = Std.parseInt(HxOverrides.substr(cmd,1,null));
		if(stage > 0) {
			if(stage == 1) this.stage1(); else if(stage == 2) {
				this.stage1();
				this.stage2();
			} else if(stage == 21) {
				this.stage1();
				this.stage2();
				this.stage21();
			} else if(stage == 22) {
				this.stage1();
				this.stage2();
				this.stage21();
				this.stage22();
			}
		} else if(cmd.charAt(1) == "a") {
			if(cmd.charAt(2) == "i") {
				var val = Std.parseInt(HxOverrides.substr(cmd,3,null));
				if(this.game.location == _$LocationType.LOCATION_AREA) this.game.area.set_interest(val); else this.game.playerRegion.get_currentArea().set_interest(val);
			}
		}
	}
	,stage1: function() {
		this.game.log("stage 1");
		var ai1 = new ai_CivilianAI(this.game,this.game.playerArea.x,this.game.playerArea.y);
		this.game.area.addAI(ai1);
		this.game.playerArea.debugAttachAndInvadeAction(ai1);
		this.game.player.set_hostControl(100);
		this.game.goals.complete(_$Goal.GOAL_INVADE_HUMAN);
		this.game.player.evolutionManager.addImprov(_$Improv.IMP_BRAIN_PROBE,2);
		this.game.goals.complete(_$Goal.GOAL_EVOLVE_PROBE);
		var probeInfo = const_EvolutionConst.getInfo(_$Improv.IMP_BRAIN_PROBE);
		this.game.playerArea.action(probeInfo.action);
		this.game.goals.complete(_$Goal.GOAL_LEARN_ITEMS);
		this.game.playerArea.action(probeInfo.action);
		this.game.player.skills.increase(_$Skill.KNOW_SOCIETY,1);
		this.game.player.skills.increase(_$Skill.KNOW_SOCIETY,24);
	}
	,stage2: function() {
		this.game.log("stage 2");
		this.game.player.evolutionManager.addImprov(_$Improv.IMP_ENERGY,1);
		this.game.player.evolutionManager.addImprov(_$Improv.IMP_BRAIN_PROBE,3);
		this.game.goals.complete(_$Goal.GOAL_EVOLVE_ORGAN);
		this.game.player.host.organs.action("set.IMP_ENERGY");
		this.game.player.host.organs.debugCompleteCurrent();
		this.game.player.evolutionManager.addImprov(_$Improv.IMP_MICROHABITAT,1);
		this.game.goals.complete(_$Goal.GOAL_EVOLVE_MICROHABITAT);
		this.game.playerArea.knownObjects.add("sewer_hatch");
		this.game.scene.setState(_$HUDState.HUDSTATE_DEFAULT);
		this.game.setLocation(_$LocationType.LOCATION_REGION);
		this.game.playerRegion.action({ id : "createHabitat", type : _$PlayerActionType.ACTION_REGION, name : "Create habitat", energy : 0});
	}
	,stage21: function() {
		this.game.goals.receive(_$Goal.GOAL_EVOLVE_CAMO);
		this.game.goals.complete(_$Goal.GOAL_EVOLVE_CAMO);
		this.game.player.evolutionManager.addImprov(_$Improv.IMP_CAMO_LAYER,2);
		this.game.player.host.organs.action("set.IMP_CAMO_LAYER");
		this.game.player.host.organs.debugCompleteCurrent();
		this.game.goals.receive(_$Goal.GOAL_EVOLVE_DOPAMINE);
		this.game.goals.complete(_$Goal.GOAL_EVOLVE_DOPAMINE);
		this.game.player.evolutionManager.addImprov(_$Improv.IMP_DOPAMINE,1);
		this.game.player.host.inventory.addID("smartphone");
		this.game.player.knownItems.add("smartphone");
		this.game.player.host.skills.addID(_$Skill.SKILL_COMPUTER,10 + Std.random(20));
		this.game.player.skills.addID(_$Skill.SKILL_COMPUTER,30);
		this.game.goals.receive(_$Goal.GOAL_LEARN_CLUE);
		this.game.timeline.learnClue(this.game.timeline.getStartEvent(),true);
		this.game.timeline.getStartEvent().learnNPC();
		this.game.goals.complete(_$Goal.GOAL_LEARN_NPC);
	}
	,stage22: function() {
		this.game.playerRegion.action({ id : "enterHabitat", type : _$PlayerActionType.ACTION_REGION, name : "Enter habitat", energy : 0});
		this.game.player.evolutionManager.addImprov(_$Improv.IMP_BIOMINERAL,1);
		this.game.player.host.organs.action("set.IMP_BIOMINERAL");
		this.game.player.host.organs.debugCompleteCurrent();
	}
	,__class__: game_ConsoleGame
};
var game_DebugArea = function(g) {
	var _g = this;
	this.game = g;
	this.actions = [{ name : "Remove energy spend without a host", func : function() {
		_g.game.player.vars.areaEnergyPerTurn = 0;
		_g.game.log("Energy per turn removed.");
	}},{ name : "Gain host", func : function() {
		if(_g.game.player.state != _$PlayerState.PLR_STATE_PARASITE) {
			haxe_Log.trace("Must be in default state: " + Std.string(_g.game.player.state),{ fileName : "DebugArea.hx", lineNumber : 35, className : "game.DebugArea", methodName : "new"});
			return;
		}
		var ai1 = new ai_CivilianAI(_g.game,_g.game.playerArea.x,_g.game.playerArea.y);
		_g.game.area.addAI(ai1);
		_g.game.playerArea.debugAttachAndInvadeAction(ai1);
		_g.game.player.set_hostControl(100);
		ai1.inventory.addID("pistol");
		ai1.skills.addID(_$Skill.SKILL_PISTOL,25 + Std.random(25));
		ai1.inventory.addID("stunner");
		ai1.skills.addID(_$Skill.SKILL_FISTS,50 + Std.random(25));
		ai1.inventory.addID("smartphone");
		ai1.skills.addID(_$Skill.SKILL_COMPUTER,10 + Std.random(20));
	}},{ name : "Gain host (advanced)", func : function() {
		if(_g.game.player.state != _$PlayerState.PLR_STATE_PARASITE) {
			haxe_Log.trace("Must be in default state: " + Std.string(_g.game.player.state),{ fileName : "DebugArea.hx", lineNumber : 65, className : "game.DebugArea", methodName : "new"});
			return;
		}
		var ai1 = new ai_CivilianAI(_g.game,_g.game.playerArea.x,_g.game.playerArea.y);
		_g.game.area.addAI(ai1);
		_g.game.playerArea.debugAttachAndInvadeAction(ai1);
		_g.game.player.set_hostControl(100);
		ai1.inventory.addID("pistol");
		ai1.skills.addID(_$Skill.SKILL_PISTOL,25 + Std.random(25));
		ai1.inventory.addID("smartphone");
		ai1.inventory.addID("laptop");
		ai1.skills.addID(_$Skill.SKILL_COMPUTER,20 + Std.random(20));
		_g.game.player.evolutionManager.state = 2;
		_g.game.player.vars.organsEnabled = true;
		_g.game.player.vars.inventoryEnabled = true;
		_g.game.player.vars.skillsEnabled = true;
		_g.game.player.vars.timelineEnabled = true;
		_g.game.timeline.unlock();
		var $it0 = _g.game.timeline.iterator();
		while( $it0.hasNext() ) {
			var ev = $it0.next();
			if(!ev.isHidden) {
				var _g1 = 0;
				var _g2 = ev.notes;
				while(_g1 < _g2.length) {
					var n = _g2[_g1];
					++_g1;
					n.clues = 3;
				}
			}
		}
		_g.game.timeline.learnClue(_g.game.timeline.getStartEvent(),true);
		_g.game.timeline.learnClue(_g.game.timeline.getStartEvent(),true);
		_g.game.timeline.learnClue(_g.game.timeline.getStartEvent(),true);
		_g.game.timeline.getStartEvent().learnNPC();
		_g.game.timeline.getStartEvent().learnNPC();
		_g.game.timeline.getStartEvent().learnNPC();
		_g.game.goals.receive(_$Goal.GOAL_PROBE_BRAIN);
		_g.game.goals.complete(_$Goal.GOAL_PROBE_BRAIN);
		_g.game.player.vars.npcEnabled = true;
		_g.game.player.vars.searchEnabled = true;
		_g.game.player.evolutionManager.addImprov(_$Improv.IMP_BRAIN_PROBE,2);
		_g.game.player.skills.addID(_$Skill.KNOW_HABITAT,100);
		_g.game.player.evolutionManager.addImprov(_$Improv.IMP_MICROHABITAT,1);
	}},{ name : "Toggle invisibility", func : function() {
		_g.game.player.vars.invisibilityEnabled = !_g.game.player.vars.invisibilityEnabled;
		_g.game.log("Invisibility toggled.");
	}},{ name : "Enter sewers", func : function() {
		_g.game.scene.setState(_$HUDState.HUDSTATE_DEFAULT);
		_g.game.setLocation(_$LocationType.LOCATION_REGION);
	}},{ name : "Toggle LOS", func : function() {
		_g.game.player.vars.losEnabled = !_g.game.player.vars.losEnabled;
		_g.game.area.updateVisibility();
		_g.game.log("LOS checks for player toggled.");
	}},{ name : "Complete current evolution", func : function() {
		_g.game.player.evolutionManager.turn(2000);
		_g.game.player.set_energy(100);
		_g.game.player.host.set_energy(100);
	}},{ name : "Complete current organ", func : function() {
		if(_g.game.player.state != _$PlayerState.PLR_STATE_HOST) return;
		_g.game.player.host.organs.debugCompleteCurrent();
	}},{ name : "Clear AI", func : function() {
		var _g11 = _g.game.area.getAIinRadius(_g.game.playerArea.x,_g.game.playerArea.y,100,false).iterator();
		while(_g11.head != null) {
			var ai2;
			ai2 = (function($this) {
				var $r;
				_g11.val = _g11.head[0];
				_g11.head = _g11.head[1];
				$r = _g11.val;
				return $r;
			}(this));
			if(ai2 != _g.game.player.host) _g.game.area.removeAI(ai2);
		}
	}},{ name : "Spawn a cop", func : function() {
		var ai3 = new ai_PoliceAI(_g.game,_g.game.playerArea.x,_g.game.playerArea.y);
		ai3.inventory._list.clear();
		ai3.inventory.addID("stunner");
		ai3.skills.addID(_$Skill.SKILL_FISTS,50 + Std.random(25));
		_g.game.area.addAI(ai3);
	}},{ name : "Spawn a body", func : function() {
		var o = new objects_BodyObject(_g.game,_g.game.playerArea.x,_g.game.playerArea.y,"civilian");
		o.isHumanBody = true;
		o.organPoints = 10;
		var $it1 = _g.game.area._objects.iterator();
		while( $it1.hasNext() ) {
			var o1 = $it1.next();
			haxe_Log.trace(o1,{ fileName : "AreaGame.hx", lineNumber : 1147, className : "game.AreaGame", methodName : "debugShowObjects"});
		}
	}},{ name : "Show area manager queue", func : function() {
		_g.game.managerArea.debugShowQueue();
	}},{ name : "Set area alertness to 100", func : function() {
		_g.game.area.set_alertness(100);
	}},{ name : "Learn random clues", func : function() {
		_g.game.goals.receive(_$Goal.GOAL_LEARN_CLUE);
		_g.game.goals.complete(_$Goal.GOAL_LEARN_CLUE);
		_g.game.timeline.learnClue(_g.game.timeline.getRandomEvent(),true);
		_g.game.timeline.learnClue(_g.game.timeline.getRandomEvent(),true);
		_g.game.timeline.learnClue(_g.game.timeline.getRandomEvent(),true);
		_g.game.timeline.learnClue(_g.game.timeline.getRandomEvent(),true);
		_g.game.timeline.learnClue(_g.game.timeline.getRandomEvent(),true);
	}}];
};
$hxClasses["game.DebugArea"] = game_DebugArea;
game_DebugArea.__name__ = ["game","DebugArea"];
game_DebugArea.prototype = {
	game: null
	,actions: null
	,action: function(idx) {
		var a = this.actions[idx];
		if(a == null) {
			haxe_Log.trace("No such area debug action " + idx,{ fileName : "DebugArea.hx", lineNumber : 244, className : "game.DebugArea", methodName : "action"});
			return;
		}
		Reflect.callMethod(this,a.func,[]);
	}
	,__class__: game_DebugArea
};
var game_DebugRegion = function(g) {
	var _g = this;
	this.game = g;
	this.actions = [{ name : "Remove energy spend per turn and movement cost", func : function() {
		_g.game.player.vars.areaEnergyPerTurn = 0;
		_g.game.player.vars.regionEnergyPerTurn = 0;
		_g.game.log("Energy per turn and movement cost removed.");
	}},{ name : "Make region known", func : function() {
		var $it0 = _g.game.region.iterator();
		while( $it0.hasNext() ) {
			var a = $it0.next();
			a.isKnown = true;
		}
		_g.game.region.game.scene.region.updateVisibility();
	}}];
};
$hxClasses["game.DebugRegion"] = game_DebugRegion;
game_DebugRegion.__name__ = ["game","DebugRegion"];
game_DebugRegion.prototype = {
	game: null
	,actions: null
	,action: function(idx) {
		var a = this.actions[idx];
		a.func.apply(this,[]);
	}
	,__class__: game_DebugRegion
};
var game_Effects = function(vgame,vai) {
	this.ai = vai;
	this.game = vgame;
	this._list = new List();
};
$hxClasses["game.Effects"] = game_Effects;
game_Effects.__name__ = ["game","Effects"];
game_Effects.prototype = {
	game: null
	,ai: null
	,_list: null
	,add: function(eff) {
		this._list.add({ type : eff.type, points : eff.points, isTimer : eff.isTimer == true});
	}
	,has: function(type) {
		var _g_head = this._list.h;
		var _g_val = null;
		while(_g_head != null) {
			var e;
			e = (function($this) {
				var $r;
				_g_val = _g_head[0];
				_g_head = _g_head[1];
				$r = _g_val;
				return $r;
			}(this));
			if(e.type == type) return true;
		}
		return false;
	}
	,get: function(type) {
		var _g_head = this._list.h;
		var _g_val = null;
		while(_g_head != null) {
			var e;
			e = (function($this) {
				var $r;
				_g_val = _g_head[0];
				_g_head = _g_head[1];
				$r = _g_val;
				return $r;
			}(this));
			if(e.type == type) return e;
		}
		return null;
	}
	,decrease: function(type,pts) {
		var e = this.get(type);
		e.points -= pts;
		if(e.points <= 0) {
			this._list.remove(e);
			return true;
		}
		return false;
	}
	,iterator: function() {
		return new _$List_ListIterator(this._list.h);
	}
	,turn: function(time) {
		var _g_head = this._list.h;
		var _g_val = null;
		while(_g_head != null) {
			var e;
			e = (function($this) {
				var $r;
				_g_val = _g_head[0];
				_g_head = _g_head[1];
				$r = _g_val;
				return $r;
			}(this));
			if(!e.isTimer) continue;
			e.points -= time;
			if(e.points <= 0) this._list.remove(e);
		}
	}
	,toString: function() {
		var tmp = [];
		var _g_head = this._list.h;
		var _g_val = null;
		while(_g_head != null) {
			var e;
			e = (function($this) {
				var $r;
				_g_val = _g_head[0];
				_g_head = _g_head[1];
				$r = _g_val;
				return $r;
			}(this));
			tmp.push(Std.string(e.type) + " pts:" + e.points);
		}
		return tmp.join(", ");
	}
	,__class__: game_Effects
};
var game_EvolutionManager = function(p,g) {
	this.player = p;
	this.game = g;
	this.state = 0;
	this.isActive = false;
	this._list = new List();
	this._listPaths = new List();
	this.taskID = "";
	this.isTaskPath = false;
	var _g = 0;
	var _g1 = const_EvolutionConst.paths;
	while(_g < _g1.length) {
		var p1 = _g1[_g];
		++_g;
		this._listPaths.add({ id : p1.id, ep : 0, level : 0, info : const_EvolutionConst.getPathInfo(p1.id)});
	}
};
$hxClasses["game.EvolutionManager"] = game_EvolutionManager;
game_EvolutionManager.__name__ = ["game","EvolutionManager"];
game_EvolutionManager.prototype = {
	game: null
	,player: null
	,state: null
	,isTaskPath: null
	,isActive: null
	,taskID: null
	,_list: null
	,_listPaths: null
	,iterator: function() {
		return new _$List_ListIterator(this._list.h);
	}
	,turn: function(time) {
		if(!this.isActive) return;
		var imp = null;
		var _g = this.player.host;
		_g.set_energy(_g.energy - (_$_$Math.game.location == _$LocationType.LOCATION_AREA && _$_$Math.game.area.isHabitat?_$_$Math.game.player.vars.evolutionEnergyPerTurnMicrohabitat:_$_$Math.game.player.vars.evolutionEnergyPerTurn) * time);
		if(this.isTaskPath) {
			var pathID = Type.createEnum(_$Path,this.taskID);
			var path = this.getPath(pathID);
			path.ep += _$_$Math.epPerTurn() * time;
			if(path.ep >= const_EvolutionConst.epCostPath[path.level]) {
				imp = this.openImprov(pathID);
				if(imp == null) {
					haxe_Log.trace("TODO: " + "BUG EvolutionManager: You should not be here.",{ fileName : "Const.hx", lineNumber : 216, className : "Const", methodName : "todo"});
					return;
				}
				this.player.game.log("Following the " + path.info.name + " direction you now possess the knowledge about " + imp.info.name + ".",_$TextColor.COLOR_EVOLUTION);
				path.ep = 0;
				path.level++;
				this.taskID = "";
				this.isActive = false;
			}
		} else {
			var impID = Type.createEnum(_$Improv,this.taskID);
			imp = this.getImprov(impID);
			imp.ep += 10 * time;
			if(imp.ep >= const_EvolutionConst.epCostImprovement[imp.level]) {
				imp.level++;
				this.player.game.log("You have improved your understanding of " + imp.info.name + " to level " + imp.level + ".",_$TextColor.COLOR_EVOLUTION);
				imp.ep = 0;
				this.taskID = "";
				this.isActive = false;
			}
		}
		if(imp != null) {
			if(imp.info.onUpgrade != null) imp.info.onUpgrade(imp.level,this.game,this.player);
			if(imp.info.organ != null) this.game.goals.complete(_$Goal.GOAL_EVOLVE_ORGAN);
		}
	}
	,openImprov: function(path) {
		var tmp = [];
		var _g = 0;
		var _g1 = const_EvolutionConst.improvements;
		while(_g < _g1.length) {
			var imp1 = _g1[_g];
			++_g;
			if(imp1.path == path && !this.isKnown(imp1.id)) tmp.push(imp1.id);
		}
		if(tmp.length == 0) return null;
		var index = Std.random(tmp.length);
		var impID = tmp[index];
		var imp = this.addImprov(impID,1);
		return imp;
	}
	,addImprov: function(id,level) {
		if(level == null) level = 0;
		var tmp = this.getImprov(id);
		if(tmp != null && tmp.level >= level) return tmp;
		var ep = 0;
		if(level > 0) ep = const_EvolutionConst.epCostImprovement[level - 1];
		if(tmp != null) {
			tmp.level = level;
			tmp.ep = ep;
			this.game.info("Improvement set: " + tmp.info.name + " (" + level + ")");
			return tmp;
		}
		var imp = { id : id, level : level, ep : ep, info : const_EvolutionConst.getInfo(id)};
		this._list.add(imp);
		this.game.info("Improvement gained: " + imp.info.name + " (" + level + ")");
		return imp;
	}
	,action: function(id) {
		var actionName;
		var len = id.indexOf(".");
		actionName = HxOverrides.substr(id,0,len);
		var actionID;
		var pos = id.indexOf(".") + 1;
		actionID = HxOverrides.substr(id,pos,null);
		if(id == "stop") {
			this.taskID = "";
			this.isActive = false;
			return;
		}
		this.taskID = actionID;
		this.isActive = true;
		if(actionName == "setPath") this.isTaskPath = true; else if(actionName == "set") this.isTaskPath = false;
	}
	,isKnown: function(id) {
		var _g_head = this._list.h;
		var _g_val = null;
		while(_g_head != null) {
			var imp;
			imp = (function($this) {
				var $r;
				_g_val = _g_head[0];
				_g_head = _g_head[1];
				$r = _g_val;
				return $r;
			}(this));
			if(imp.id == id) return true;
		}
		return false;
	}
	,getImprov: function(id) {
		var _g_head = this._list.h;
		var _g_val = null;
		while(_g_head != null) {
			var imp;
			imp = (function($this) {
				var $r;
				_g_val = _g_head[0];
				_g_head = _g_head[1];
				$r = _g_val;
				return $r;
			}(this));
			if(imp.id == id) return imp;
		}
		return null;
	}
	,getParams: function(id) {
		var imp = this.getImprov(id);
		if(imp == null) {
			var info = const_EvolutionConst.getInfo(id);
			return info.levelParams[0];
		}
		return imp.info.levelParams[imp.level];
	}
	,getLevel: function(id) {
		var _g_head = this._list.h;
		var _g_val = null;
		while(_g_head != null) {
			var imp;
			imp = (function($this) {
				var $r;
				_g_val = _g_head[0];
				_g_head = _g_head[1];
				$r = _g_val;
				return $r;
			}(this));
			if(imp.id == id) return imp.level;
		}
		return 0;
	}
	,getPath: function(id) {
		var _g_head = this._listPaths.h;
		var _g_val = null;
		while(_g_head != null) {
			var p;
			p = (function($this) {
				var $r;
				_g_val = _g_head[0];
				_g_head = _g_head[1];
				$r = _g_val;
				return $r;
			}(this));
			if(p.id == id) return p;
		}
		return null;
	}
	,getPathList: function() {
		return this._listPaths;
	}
	,isPathComplete: function(id) {
		var isComplete = true;
		var _g = 0;
		var _g1 = const_EvolutionConst.improvements;
		while(_g < _g1.length) {
			var imp = _g1[_g];
			++_g;
			if(imp.path != id) continue;
			if(!this.isKnown(imp.id)) {
				isComplete = false;
				break;
			}
		}
		return isComplete;
	}
	,getEvolutionDirectionInfo: function() {
		if(!this.isActive) return "<font color='#FF0000'>None</font>";
		var buf = new StringBuf();
		buf.b += "<font color='#00ffff'>";
		if(this.isTaskPath) buf.add(const_EvolutionConst.getPathInfo(Type.createEnum(_$Path,this.taskID)).name); else buf.add(const_EvolutionConst.getInfo(Type.createEnum(_$Improv,this.taskID)).name);
		buf.b += "</font> (";
		var epLeft = 0;
		if(this.isTaskPath) {
			var path = this.getPath(Type.createEnum(_$Path,this.taskID));
			epLeft = const_EvolutionConst.epCostPath[path.level] - path.ep;
		} else {
			var imp = this.getImprov(Type.createEnum(_$Improv,this.taskID));
			epLeft = const_EvolutionConst.epCostImprovement[imp.level] - imp.ep;
		}
		buf.add(Math.round(epLeft / _$_$Math.epPerTurn()));
		buf.b += " turns)";
		return buf.b;
	}
	,__class__: game_EvolutionManager
};
var game_Game = function() {
	this.config = new Config(this);
	this.scene = new GameScene(this);
	this.console = new game_ConsoleGame(this);
	this.managerWorld = new game_WorldManager(this);
	com_haxepunk_HXP.engine.set_scene(this.scene);
	this.messageList = new List();
	this.importantMessage = "";
	this.isInited = false;
	this.finishText = "";
	this.area = null;
	this.region = null;
	_$_$Math.game = this;
};
$hxClasses["game.Game"] = game_Game;
game_Game.__name__ = ["game","Game"];
game_Game.prototype = {
	config: null
	,scene: null
	,timeline: null
	,goals: null
	,world: null
	,managerWorld: null
	,region: null
	,console: null
	,area: null
	,managerArea: null
	,debugArea: null
	,managerRegion: null
	,playerRegion: null
	,debugRegion: null
	,player: null
	,playerArea: null
	,location: null
	,turns: null
	,turnsArea: null
	,isInited: null
	,isFinished: null
	,finishText: null
	,messageList: null
	,importantMessage: null
	,init: function() {
		this.log("Parasite v" + "0.2" + " (build: " + "20161226-229\n" + ")");
		haxe_Log.trace("TODO: " + "proper title screen",{ fileName : "Const.hx", lineNumber : 216, className : "Const", methodName : "todo"});
		this.turns = 0;
		this.turnsArea = 0;
		this.isFinished = false;
		this.isInited = false;
		this.player = new game_Player(this);
		this.managerArea = new game_AreaManager(this);
		this.playerArea = new game_PlayerArea(this);
		this.debugArea = new game_DebugArea(this);
		this.managerRegion = new game_RegionManager(this);
		this.playerRegion = new game_PlayerRegion(this);
		this.debugRegion = new game_DebugRegion(this);
		this.world = new game_World(this);
		this.world.generate();
		this.timeline = new scenario_Timeline(this);
		this.goals = new game_Goals(this);
		this.timeline.init();
		this.message("You are alone. You are scared. You need to find a host or you will die soon.",null);
		this.goals.receive(_$Goal.GOAL_INVADE_HOST);
		this.region = this.world._list.h[0];
		var event = this.timeline.getStartEvent();
		this.area = this.region.getRandomAround(event.location.area,{ isInhabited : true, minRadius : 2, maxRadius : 5, type : _$AreaType.AREA_CITY_LOW, canReturnNull : true});
		if(this.area == null) this.area = this.region.getRandomAround(event.location.area,{ isInhabited : true, minRadius : 2, maxRadius : 5});
		this.playerRegion.createEntity(this.area.x,this.area.y);
		var _g1 = this.area.y - 1;
		var _g = this.area.y + 2;
		while(_g1 < _g) {
			var yy = _g1++;
			var _g3 = this.area.x - 1;
			var _g2 = this.area.x + 2;
			while(_g3 < _g2) {
				var xx = _g3++;
				var aa = this.region.getXY(xx,yy);
				if(aa == null) continue;
				aa.isKnown = true;
			}
		}
		this.location = _$LocationType.LOCATION_AREA;
		this.area.enter();
		var spot = this.area.findEmptyLocationNear(this.playerArea.x,this.playerArea.y);
		var ai1 = new ai_DogAI(this,spot.x,spot.y);
		ai1.isCommon = true;
		this.area.addAI(ai1);
		this.scene.hud.update();
		this.isInited = true;
	}
	,setLocation: function(vloc,newarea) {
		if(this.location == _$LocationType.LOCATION_AREA) this.area.leave(); else if(this.location == _$LocationType.LOCATION_REGION) this.region.leave();
		this.location = vloc;
		if(this.location == _$LocationType.LOCATION_AREA) {
			this.turnsArea = 0;
			this.area = this.region.getXY(this.playerRegion.x,this.playerRegion.y);
			if(newarea != null) this.area = newarea;
			this.area.enter();
		} else if(this.location == _$LocationType.LOCATION_REGION) {
			this.region.updateAlertness();
			this.region.enter();
		}
		this.scene.updateCamera();
	}
	,turn: function() {
		this.player.turn();
		if(this.isFinished) return;
		this.turns++;
		if(this.location == _$LocationType.LOCATION_AREA) {
			this.area.turn();
			if(this.isFinished) return;
			this.managerArea.turn();
			if(this.isFinished) return;
			this.goals.turn();
			if(this.isFinished) return;
			this.turnsArea++;
			if(this.turnsArea % 10 == 0) this.region.turnDetectHabitats();
		} else if(this.location == _$LocationType.LOCATION_REGION) {
			this.region.turn();
			if(this.isFinished) return;
			this.goals.turn();
			if(this.isFinished) return;
		}
		this.area.updateVisibility();
	}
	,finish: function(result,condition) {
		this.isFinished = true;
		this.finishText = "";
		this.scene.setState(_$HUDState.HUDSTATE_FINISH);
		if(result == "lose") {
			this.log("You have lost the game.");
			if(condition == "noHost") this.log("You cannot survive without a host for long."); else if(condition == "noHost") this.log("You have succumbed to injuries.");
		} else this.log("You have won the game!");
	}
	,updateHUD: function() {
		this.scene.hud.update();
	}
	,message: function(s,col) {
		if(col == null) col = _$TextColor.COLOR_MESSAGE;
		this.importantMessage = "<font color='" + Const.TEXT_COLORS.get(col) + "'>" + s + "</font>";
		this.log(s,col);
		this.scene.setState(_$HUDState.HUDSTATE_MESSAGE);
	}
	,info: function(s) {
		if(this.config.extendedInfo) this.log("INFO " + s,_$TextColor.COLOR_DEBUG);
	}
	,debug: function(s) {
		this.log("DEBUG " + s,_$TextColor.COLOR_DEBUG);
	}
	,log: function(s,col) {
		if(col == null) col = _$TextColor.COLOR_DEFAULT;
		haxe_Log.trace(s,{ fileName : "Const.hx", lineNumber : 253, className : "Const", methodName : "p"});
		var hs = "<font color='" + Const.TEXT_COLORS.get(col) + "'>" + s + "</font>";
		this.scene.hud.log(hs);
		this.messageList.add(hs);
		if(this.messageList.length > 100) this.messageList.pop();
	}
	,__class__: game_Game
};
var game_Goals = function(g) {
	this.game = g;
	this._listCurrent = new List();
	this._listCompleted = new List();
	this._listFailed = new List();
};
$hxClasses["game.Goals"] = game_Goals;
game_Goals.__name__ = ["game","Goals"];
game_Goals.prototype = {
	game: null
	,_listCurrent: null
	,_listCompleted: null
	,_listFailed: null
	,iteratorCurrent: function() {
		return new _$List_ListIterator(this._listCurrent.h);
	}
	,iteratorCompleted: function() {
		return new _$List_ListIterator(this._listCompleted.h);
	}
	,iteratorFailed: function() {
		return new _$List_ListIterator(this._listFailed.h);
	}
	,turn: function() {
		var _g_head = this._listCurrent.h;
		var _g_val = null;
		while(_g_head != null) {
			var goal;
			goal = (function($this) {
				var $r;
				_g_val = _g_head[0];
				_g_head = _g_head[1];
				$r = _g_val;
				return $r;
			}(this));
			var info = this.getInfo(goal);
			if(info.onTurn != null) {
				this.game.log("DEBUG " + (Std.string(info.id) + " onTurn()"),_$TextColor.COLOR_DEBUG);
				info.onTurn(this.game,this.game.player);
			}
		}
	}
	,receive: function(id,silent) {
		if(silent == null) silent = false;
		if(Lambda.has(this._listCompleted,id) || Lambda.has(this._listCurrent,id)) return;
		this._listCurrent.add(id);
		var info = this.getInfo(id);
		if(info == null) throw new js__$Boot_HaxeError("No such goal: " + Std.string(id));
		if(!silent && info.messageReceive != null) this.game.message(info.messageReceive,null);
		if(info.isHidden == null || info.isHidden == false) {
			if(!silent) this.game.log("You have received a new goal: " + info.name + ".",_$TextColor.COLOR_GOAL);
		}
		if(info.onReceive != null) info.onReceive(this.game,this.game.player);
	}
	,complete: function(id,silent) {
		if(silent == null) silent = false;
		if(!Lambda.has(this._listCurrent,id)) return;
		this._listCurrent.remove(id);
		this._listCompleted.add(id);
		var info = this.getInfo(id);
		if(info.isHidden == null || info.isHidden == false) {
			if(!silent) this.game.log("You have completed a goal: " + info.name + ".",_$TextColor.COLOR_GOAL);
		}
		if(!silent && info.messageComplete != null) this.game.message(info.messageComplete,null);
		if(info.onComplete != null) info.onComplete(this.game,this.game.player);
	}
	,fail: function(id) {
		if(Lambda.has(this._listCompleted,id) || !Lambda.has(this._listCurrent,id)) return;
		this._listCurrent.remove(id);
		this._listFailed.add(id);
		var info = this.getInfo(id);
		if(info.isHidden == null || info.isHidden == false) this.game.log("You have failed a goal: " + info.name + ".",_$TextColor.COLOR_GOAL);
		if(info.messageFailure != null) this.game.message(info.messageFailure,null);
		if(info.onFailure != null) info.onFailure(this.game,this.game.player);
	}
	,has: function(id) {
		return Lambda.has(this._listCurrent,id);
	}
	,completed: function(id) {
		return Lambda.has(this._listCompleted,id);
	}
	,getInfo: function(id) {
		var info = const_Goals.map.get(id);
		if(info != null) return info;
		var info1 = this.game.timeline.scenario.goals.get(id);
		if(info1 != null) return info1;
		throw new js__$Boot_HaxeError("no such goal: " + Std.string(id));
	}
	,__class__: game_Goals
};
var game_Habitat = function(g,a) {
	this.game = g;
	this.player = this.game.player;
	this.area = a;
	this.energy = 0;
	this.energyUsed = 0;
	this.evolutionBonus = 0;
};
$hxClasses["game.Habitat"] = game_Habitat;
game_Habitat.__name__ = ["game","Habitat"];
game_Habitat.prototype = {
	game: null
	,player: null
	,area: null
	,energy: null
	,energyUsed: null
	,evolutionBonus: null
	,putBiomineral: function() {
		this.game.goals.complete(_$Goal.GOAL_PUT_BIOMINERAL);
		var ai = this.player.host;
		var level = ai.organs.getLevel(_$Improv.IMP_BIOMINERAL);
		var o = new objects_Biomineral(this.game,ai.x,ai.y,level);
		this.game.playerArea.onDetach();
		this.game.area.removeAI(ai);
		this.game.log("Biomineral formation completed.",_$TextColor.COLOR_AREA);
		this.game.area.updateVisibility();
		this.update();
		return true;
	}
	,putAssimilation: function() {
		if(this.energyUsed >= this.energy) {
			this.game.log("Not enough energy in habitat.",_$TextColor.COLOR_HINT);
			return false;
		}
		this.game.goals.complete(_$Goal.GOAL_PUT_ASSIMILATION);
		var ai = this.player.host;
		var level = ai.organs.getLevel(_$Improv.IMP_ASSIMILATION);
		var o = new objects_AssimilationCavity(this.game,ai.x,ai.y,level);
		this.game.playerArea.onDetach();
		this.game.area.removeAI(ai);
		this.game.log("Assimilation cavity completed.",_$TextColor.COLOR_AREA);
		this.game.area.updateVisibility();
		this.update();
		return true;
	}
	,update: function() {
		this.energy = 0;
		this.energyUsed = 0;
		this.evolutionBonus = 0;
		var $it0 = this.area.getObjects();
		while( $it0.hasNext() ) {
			var o = $it0.next();
			if(o.name == "biomineral") {
				var b = o;
				var info = const_EvolutionConst.getParams(_$Improv.IMP_BIOMINERAL,b.level);
				this.energy += info.energy;
				if(info.evolutionBonus > this.evolutionBonus) this.evolutionBonus = info.evolutionBonus;
			} else if(o.type == "habitat") this.energyUsed++;
		}
		Const.debugObject(this);
	}
	,__class__: game_Habitat
};
var game_Inventory = function(g) {
	this.game = g;
	this._list = new List();
};
$hxClasses["game.Inventory"] = game_Inventory;
game_Inventory.__name__ = ["game","Inventory"];
game_Inventory.prototype = {
	game: null
	,_list: null
	,getActions: function() {
		var tmp = new List();
		if(this.game.location == _$LocationType.LOCATION_REGION) return tmp;
		var _g_head = this._list.h;
		var _g_val = null;
		while(_g_head != null) {
			var item;
			item = (function($this) {
				var $r;
				_g_val = _g_head[0];
				_g_head = _g_head[1];
				$r = _g_val;
				return $r;
			}(this));
			if(!Lambda.has(this.game.player.knownItems,item.id)) tmp.add({ id : "learn." + item.id, type : _$PlayerActionType.ACTION_INVENTORY, name : "Learn about " + item.info.unknown, energy : 10, obj : item});
			if(Lambda.has(this.game.player.knownItems,item.id)) {
				if(item.info.type == "readable") tmp.add({ id : "read." + item.id, type : _$PlayerActionType.ACTION_INVENTORY, name : "Read " + item.name, energy : 10, obj : item}); else if(item.info.type == "computer") tmp.add({ id : "search." + item.id, type : _$PlayerActionType.ACTION_INVENTORY, name : "Use " + item.name + " to search", energy : 10, obj : item});
			}
			tmp.add({ id : "drop." + item.id, type : _$PlayerActionType.ACTION_INVENTORY, name : "Drop " + (Lambda.has(this.game.player.knownItems,item.id)?item.name:item.info.unknown), energy : 0, obj : item});
		}
		return tmp;
	}
	,action: function(action) {
		var item = action.obj;
		var actionID;
		var len = action.id.indexOf(".");
		actionID = HxOverrides.substr(action.id,0,len);
		var ret = true;
		if(actionID == "learn") this.learnAction(item); else if(actionID == "read") this.readAction(item); else if(actionID == "search") ret = this.searchAction(item); else if(actionID == "drop") this.dropAction(item);
		if(ret) {
			var _g = this.game.player.host;
			_g.set_energy(_g.energy - action.energy);
			if(this.game.location == _$LocationType.LOCATION_AREA) this.game.playerArea.postAction(); else haxe_Log.trace("TODO: " + "Inventory.action() in region mode!",{ fileName : "Const.hx", lineNumber : 216, className : "Const", methodName : "todo"});
		}
	}
	,readAction: function(item) {
		if(item.id == "book" && !this.game.area.isHabitat) {
			this.game.log("This requires intense concentration and time. You can only do it in a habitat.",_$TextColor.COLOR_HINT);
			return;
		}
		this.game.log("You study the contents of the " + item.name + " and destroy it.");
		var cnt = 0;
		if(this.game.timeline.learnClue(item.event,true)) cnt += 1; else cnt += 0;
		if(item.id == "book") if(this.game.timeline.learnClue(item.event,true)) cnt += 1; else cnt += 0;
		if(Std.random(100) < 30) if(this.game.timeline.learnClue(item.event,true)) cnt += 1; else cnt += 0;
		if(Std.random(100) < 10) if(this.game.timeline.learnClue(item.event,true)) cnt += 1; else cnt += 0;
		if(cnt == 0) this.game.player.game.log("You have not been able to gain any clues.",_$TextColor.COLOR_TIMELINE);
		this._list.remove(item);
	}
	,learnAction: function(item) {
		this.game.log("You probe the brain of the host and learn that this item is a " + item.name + ".");
		this.game.player.knownItems.add(item.id);
		this.game.goals.complete(_$Goal.GOAL_LEARN_ITEMS);
	}
	,searchAction: function(item) {
		var skillLevel = this.game.player.skills.getLevel(_$Skill.SKILL_COMPUTER);
		if(skillLevel == 0) {
			this.game.log("You require the computer use skill to do that.",_$TextColor.COLOR_HINT);
			return false;
		}
		if(!this.game.area.isHabitat) {
			this.game.log("This requires intense concentration and time. You can only do it in a habitat.",_$TextColor.COLOR_HINT);
			return false;
		}
		var allKnown = true;
		var $it0 = this.game.timeline.iterator();
		while( $it0.hasNext() ) {
			var e = $it0.next();
			if(e.isHidden) continue;
			if(!e.npcCanResearch()) continue;
			allKnown = false;
			break;
		}
		if(allKnown) {
			this.game.log("You have already researched all known persons.",_$TextColor.COLOR_HINT);
			return false;
		}
		var mods = [];
		if(item.info.name == "laptop") mods.push({ name : "laptop", val : 10.0});
		var ret = _$_$Math.skill({ id : _$Skill.SKILL_COMPUTER, level : skillLevel, mods : mods});
		if(!ret) {
			this.game.log("You have failed to use the human device properly. You still gain some insight.");
			this.game.player.skills.increase(_$Skill.SKILL_COMPUTER,0.5);
			return true;
		}
		this.game.log("You use the " + item.name + " to search for known persons data.");
		if(skillLevel < 99) this.game.player.skills.increase(_$Skill.SKILL_COMPUTER,1);
		var cnt = 1;
		if(item.info.name == "smartphone") cnt = 1; else if(item.info.name == "laptop") cnt = 3;
		this.game.goals.complete(_$Goal.GOAL_USE_COMPUTER);
		var $it1 = this.game.timeline.iterator();
		while( $it1.hasNext() ) {
			var e1 = $it1.next();
			var _g = 0;
			var _g1 = e1.npc;
			while(_g < _g1.length) {
				var n = _g1[_g];
				++_g;
				if(!n.nameKnown && !n.jobKnown) continue;
				while(cnt > 0 && n.research()) cnt--;
				if(cnt <= 0) return true;
			}
		}
		return true;
	}
	,dropAction: function(item) {
		var tmpname;
		if(Lambda.has(this.game.player.knownItems,item.info.id)) tmpname = item.name; else tmpname = item.info.unknown;
		var o = new objects_GenericPickup(this.game,this.game.playerArea.x,this.game.playerArea.y,Const.FRAME_PICKUP);
		o.name = tmpname;
		o.item = item;
		this.game.area._objects.h[o.id] = o;
		this._list.remove(item);
		this.game.player.game.log("You drop the " + tmpname + ".",null);
	}
	,iterator: function() {
		return new _$List_ListIterator(this._list.h);
	}
	,clear: function() {
		this._list.clear();
	}
	,has: function(id) {
		var _g_head = this._list.h;
		var _g_val = null;
		while(_g_head != null) {
			var item;
			item = (function($this) {
				var $r;
				_g_val = _g_head[0];
				_g_head = _g_head[1];
				$r = _g_val;
				return $r;
			}(this));
			if(item.id == id) return true;
		}
		return false;
	}
	,remove: function(id) {
		var _g_head = this._list.h;
		var _g_val = null;
		while(_g_head != null) {
			var item;
			item = (function($this) {
				var $r;
				_g_val = _g_head[0];
				_g_head = _g_head[1];
				$r = _g_val;
				return $r;
			}(this));
			if(item.id == id) {
				this._list.remove(item);
				break;
			}
		}
	}
	,getFirstWeapon: function() {
		var _g_head = this._list.h;
		var _g_val = null;
		while(_g_head != null) {
			var item;
			item = (function($this) {
				var $r;
				_g_val = _g_head[0];
				_g_head = _g_head[1];
				$r = _g_val;
				return $r;
			}(this));
			if(item.info.weapon != null) return item;
		}
		return null;
	}
	,addID: function(id) {
		var info = const_ItemsConst.getInfo(id);
		if(info == null) {
			haxe_Log.trace("No such item id: " + id,{ fileName : "Inventory.hx", lineNumber : 316, className : "game.Inventory", methodName : "addID"});
			return;
		}
		var name = info.name;
		if(info.names != null) name = info.names[Std.random(info.names.length)];
		var item = { id : id, info : info, name : name};
		this._list.add(item);
	}
	,add: function(item) {
		this._list.add(item);
	}
	,toString: function() {
		var tmp = [];
		var _g_head = this._list.h;
		var _g_val = null;
		while(_g_head != null) {
			var o;
			o = (function($this) {
				var $r;
				_g_val = _g_head[0];
				_g_head = _g_head[1];
				$r = _g_val;
				return $r;
			}(this));
			tmp.push(o.id);
		}
		return tmp.join(", ");
	}
	,__class__: game_Inventory
};
var game_Organs = function(vgame,vai) {
	this._ai = vai;
	this.game = vgame;
	this.currentOrgan = null;
	this.woundRegenTurn = 0;
	this._list = new List();
};
$hxClasses["game.Organs"] = game_Organs;
game_Organs.__name__ = ["game","Organs"];
game_Organs.prototype = {
	game: null
	,_ai: null
	,_list: null
	,currentOrgan: null
	,woundRegenTurn: null
	,getInfo: function() {
		var buf = new StringBuf();
		if(this.currentOrgan != null) {
			buf.b += "Body feature:\n  ";
			var col = _$TextColor.COLOR_ORGAN;
			buf.add("<font color='" + Const.TEXT_COLORS.get(col) + "'>");
			buf.b += Std.string(this.currentOrgan.info.name);
			buf.b += "</font> (";
			var gpLeft = this.currentOrgan.info.gp - this.currentOrgan.gp;
			buf.add(Math.round(gpLeft / _$_$Math.gpPerTurn()));
			buf.b += " turns)\n";
		}
		var $it0 = this.game.player.host.organs.iterator();
		while( $it0.hasNext() ) {
			var organ = $it0.next();
			if(!organ.isActive) continue;
			if(!organ.info.hasTimeout || organ.timeout == 0) continue;
			buf.b += Std.string("<font color='#DDDD00'>" + organ.info.name + "</font>");
			buf.b += " ";
			if(organ.level == null) buf.b += "null"; else buf.b += "" + organ.level;
			buf.b += Std.string(" (timeout: " + organ.timeout + ")\n");
		}
		return buf.b;
	}
	,getPoints: function() {
		var cnt = 0;
		var _g_head = this._list.h;
		var _g_val = null;
		while(_g_head != null) {
			var o;
			o = (function($this) {
				var $r;
				_g_val = _g_head[0];
				_g_head = _g_head[1];
				$r = _g_val;
				return $r;
			}(this));
			cnt += o.level;
		}
		return cnt;
	}
	,iterator: function() {
		return new _$List_ListIterator(this._list.h);
	}
	,turn: function(time) {
		this.turnGrowth(time);
		this.turnActivity(time);
	}
	,debugCompleteCurrent: function() {
		if(this.currentOrgan == null) return;
		this.currentOrgan.gp = 100000;
		this.turnGrowth(1);
	}
	,turnGrowth: function(time) {
		if(this.currentOrgan == null) return;
		this.currentOrgan.gp += _$_$Math.gpPerTurn() * time;
		var _g = this._ai;
		_g.set_energy(_g.energy - _$_$Math.growthEnergyPerTurn() * time);
		if(this.currentOrgan.gp < this.currentOrgan.info.gp) return;
		this.currentOrgan.isActive = true;
		this.game.log(this.currentOrgan.info.name + " growth completed.",_$TextColor.COLOR_ORGAN);
		this._ai.recalc();
		if(this.currentOrgan.id == _$Improv.IMP_ENERGY) this._ai.set_energy(this._ai.maxEnergy);
		this.game.goals.complete(_$Goal.GOAL_GROW_ORGAN);
		if(this.currentOrgan.info.onGrow != null) this.currentOrgan.info.onGrow(this.game,this.game.player);
		this.currentOrgan = null;
	}
	,turnActivity: function(time) {
		var _g_head = this._list.h;
		var _g_val = null;
		while(_g_head != null) {
			var o1;
			o1 = (function($this) {
				var $r;
				_g_val = _g_head[0];
				_g_head = _g_head[1];
				$r = _g_val;
				return $r;
			}(this));
			if(o1.info.hasTimeout && o1.timeout > 0) o1.timeout--;
		}
		var o = this.get(_$Improv.IMP_WOUND_REGEN);
		if(o != null) {
			this.woundRegenTurn++;
			var ok = false;
			if(this.woundRegenTurn >= o.params.turns) {
				ok = true;
				this.woundRegenTurn = 0;
			}
			if(ok) {
				if(this._ai.health < this._ai.maxHealth) {
					var _g = this._ai;
					var _g1 = _g.health;
					_g.set_health(_g1 + 1);
					_g1;
				}
				if(this.game.player.state == _$PlayerState.PLR_STATE_HOST && this._ai == this.game.player.host) {
					var _g2 = this.game.player;
					var _g11 = _g2.health;
					_g2.set_health(_g11 + 1);
					_g11;
				}
			}
		}
	}
	,action: function(id) {
		var actionName;
		var len = id.indexOf(".");
		actionName = HxOverrides.substr(id,0,len);
		var actionID;
		var pos = id.indexOf(".") + 1;
		actionID = HxOverrides.substr(id,pos,null);
		if(actionName != "set") throw new js__$Boot_HaxeError(actionName);
		var impID = Type.createEnum(_$Improv,actionID);
		var imp = this.game.player.evolutionManager.getImprov(impID);
		var o = this.get(imp.id);
		if(o == null) {
			this.currentOrgan = { id : imp.id, level : imp.level, isActive : false, gp : 0, improvInfo : imp.info, info : imp.info.organ, params : imp.info.levelParams[imp.level], timeout : 0};
			this._list.add(this.currentOrgan);
		} else this.currentOrgan = o;
	}
	,has: function(id) {
		var _g_head = this._list.h;
		var _g_val = null;
		while(_g_head != null) {
			var o;
			o = (function($this) {
				var $r;
				_g_val = _g_head[0];
				_g_head = _g_head[1];
				$r = _g_val;
				return $r;
			}(this));
			if(o.id == id) return true;
		}
		return false;
	}
	,get: function(id) {
		var _g_head = this._list.h;
		var _g_val = null;
		while(_g_head != null) {
			var o;
			o = (function($this) {
				var $r;
				_g_val = _g_head[0];
				_g_head = _g_head[1];
				$r = _g_val;
				return $r;
			}(this));
			if(o.id == id) return o;
		}
		return null;
	}
	,getLevel: function(id) {
		var _g_head = this._list.h;
		var _g_val = null;
		while(_g_head != null) {
			var o;
			o = (function($this) {
				var $r;
				_g_val = _g_head[0];
				_g_head = _g_head[1];
				$r = _g_val;
				return $r;
			}(this));
			if(o.id == id) return o.level;
		}
		return 0;
	}
	,getParams: function(id) {
		var _g_head = this._list.h;
		var _g_val = null;
		while(_g_head != null) {
			var o;
			o = (function($this) {
				var $r;
				_g_val = _g_head[0];
				_g_head = _g_head[1];
				$r = _g_val;
				return $r;
			}(this));
			if(o.id == id) return o.params;
		}
		return null;
	}
	,getActive: function(id) {
		var o = this.get(id);
		if(o != null && o.isActive) return o; else return null;
	}
	,addID: function(id) {
		var impInfo = const_EvolutionConst.getInfo(id);
		if(impInfo == null) {
			haxe_Log.trace("No such organ: " + Std.string(id),{ fileName : "Organs.hx", lineNumber : 262, className : "game.Organs", methodName : "addID"});
			return null;
		}
		var o = { id : id, level : this.game.player.evolutionManager.getLevel(impInfo.id), isActive : true, gp : 0, improvInfo : impInfo, info : impInfo.organ, params : impInfo.levelParams[0], timeout : 0};
		this._list.add(o);
		return o;
	}
	,addActions: function(tmp) {
		var _g_head = this._list.h;
		var _g_val = null;
		while(_g_head != null) {
			var o;
			o = (function($this) {
				var $r;
				_g_val = _g_head[0];
				_g_head = _g_head[1];
				$r = _g_val;
				return $r;
			}(this));
			if(!o.isActive) continue;
			var a = o.info.action;
			if(a == null) continue;
			if(this.game.player.energy < a.energy || o.info.hasTimeout && o.timeout > 0) continue;
			a.obj = o;
			tmp.add(a);
		}
	}
	,areaAction: function(a) {
		if(a.id == "acidSpit") return this.actionAcidSpit(); else if(a.id == "slimeSpit") return this.actionSlimeSpit(); else if(a.id == "paralysisSpit") return this.actionParalysisSpit(); else if(a.id == "panicGas") return this.actionPanicGas(); else if(a.id == "paralysisGas") return this.actionParalysisGas(); else {
			var o = a.obj;
			var ret = o.info.onAction(this.game,this.game.player);
			return ret;
		}
		return false;
	}
	,actionAcidSpit: function() {
		var pos = this.game.scene.mouse.getXY();
		var ai = this.game.area.getAI(pos.x,pos.y);
		if(ai == null) {
			this.game.log("Target AI with mouse first.",_$TextColor.COLOR_HINT);
			return false;
		}
		var params = this.getParams(_$Improv.IMP_ACID_SPIT);
		var distance = Const.getDist(ai.x,ai.y,this.game.playerArea.x,this.game.playerArea.y);
		if(distance > params.range) {
			this.game.log("Maximum range of " + params.range + " exceeded.",_$TextColor.COLOR_HINT);
			return false;
		}
		var damage = _$_$Math.damage({ name : "acid spit", min : params.minDamage, max : params.maxDamage});
		this.game.log("Your host spits a clot of corrosive substance on " + (ai.isNameKnown?ai.name.real:ai.name.unknown) + " for " + damage + " damage. " + (ai.isNameKnown?ai.name.realCapped:ai.name.unknownCapped) + " howls in pain.");
		ai.onDamage(damage);
		return true;
	}
	,actionSlimeSpit: function() {
		var pos = this.game.scene.mouse.getXY();
		var ai1 = this.game.area.getAI(pos.x,pos.y);
		if(ai1 == null) {
			this.game.log("Target AI with mouse first.",_$TextColor.COLOR_HINT);
			return false;
		}
		var params = this.getParams(_$Improv.IMP_SLIME_SPIT);
		var distance = Const.getDist(ai1.x,ai1.y,this.game.playerArea.x,this.game.playerArea.y);
		if(distance > params.range) {
			this.game.log("Maximum range of " + params.range + " exceeded.",_$TextColor.COLOR_HINT);
			return false;
		}
		this.game.log("Your host spits a clot of adhesive slime on " + (ai1.isNameKnown?ai1.name.real:ai1.name.unknown) + ". " + (ai1.isNameKnown?ai1.name.realCapped:ai1.name.unknownCapped) + " desperately tries to tear it away.");
		if(ai1.state == _$AIState.AI_STATE_IDLE) {
			ai1.set_alertness(100);
			ai1.setState(_$AIState.AI_STATE_ALERT,ai__$AIStateChangeReason.REASON_PARASITE);
		}
		ai1.effects.add({ type : _$AIEffectType.EFFECT_SLIME, points : params.strength});
		ai1.updateEntity();
		return true;
	}
	,actionParalysisSpit: function() {
		var pos = this.game.scene.mouse.getXY();
		var ai1 = this.game.area.getAI(pos.x,pos.y);
		if(ai1 == null) {
			this.game.log("Target AI with mouse first.",_$TextColor.COLOR_HINT);
			return false;
		}
		var params = this.getParams(_$Improv.IMP_PARALYSIS_SPIT);
		var distance = Const.getDist(ai1.x,ai1.y,this.game.playerArea.x,this.game.playerArea.y);
		if(distance > params.range) {
			this.game.log("Maximum range of " + params.range + " exceeded.",_$TextColor.COLOR_HINT);
			return false;
		}
		this.game.log("Your host releases a stream of paralyzing spores on " + (ai1.isNameKnown?ai1.name.real:ai1.name.unknown) + ".");
		if(ai1.state == _$AIState.AI_STATE_IDLE) {
			ai1.set_alertness(100);
			ai1.setState(_$AIState.AI_STATE_ALERT,ai__$AIStateChangeReason.REASON_PARASITE);
		}
		ai1.effects.add({ type : _$AIEffectType.EFFECT_PARALYSIS, points : params.time, isTimer : true});
		ai1.updateEntity();
		return true;
	}
	,actionPanicGas: function() {
		var params = this.getParams(_$Improv.IMP_PANIC_GAS);
		var tmp = this.game.area.getAIinRadius(this.game.playerArea.x,this.game.playerArea.y,params.range,false);
		this.game.log("Your host emits a noxious fear-inducing gas cloud.");
		var o = this.get(_$Improv.IMP_PANIC_GAS);
		o.timeout = params.timeout;
		var xo = this.game.playerArea.x;
		var yo = this.game.playerArea.y;
		var _g1 = yo - params.range;
		var _g = yo + params.range;
		while(_g1 < _g) {
			var yy = _g1++;
			var _g3 = xo - params.range;
			var _g2 = xo + params.range;
			while(_g3 < _g2) {
				var xx = _g3++;
				if(!this.game.area.isWalkable(xx,yy)) continue;
				if((xx - xo) * (xx - xo) + (yy - yo) * (yy - yo) > params.range * params.range) continue;
				this.game.scene.area.addEffect(xx,yy,2,Const.FRAME_PANIC_GAS);
			}
		}
		var _g_head = tmp.h;
		var _g_val = null;
		while(_g_head != null) {
			var ai1;
			ai1 = (function($this) {
				var $r;
				_g_val = _g_head[0];
				_g_head = _g_head[1];
				$r = _g_val;
				return $r;
			}(this));
			if(ai1 == this._ai) continue;
			if(ai1.state == _$AIState.AI_STATE_IDLE) {
				ai1.set_alertness(100);
				ai1.setState(_$AIState.AI_STATE_ALERT,ai__$AIStateChangeReason.REASON_PARASITE);
			}
			ai1.effects.add({ type : _$AIEffectType.EFFECT_PANIC, points : params.time, isTimer : true});
			ai1.updateEntity();
		}
		return true;
	}
	,actionParalysisGas: function() {
		var params = this.getParams(_$Improv.IMP_PARALYSIS_GAS);
		var tmp = this.game.area.getAIinRadius(this.game.playerArea.x,this.game.playerArea.y,params.range,false);
		this.game.log("Your host emits a cloud of paralysis spores.");
		var o = this.get(_$Improv.IMP_PARALYSIS_GAS);
		o.timeout = params.timeout;
		var xo = this.game.playerArea.x;
		var yo = this.game.playerArea.y;
		var _g1 = yo - params.range;
		var _g = yo + params.range;
		while(_g1 < _g) {
			var yy = _g1++;
			var _g3 = xo - params.range;
			var _g2 = xo + params.range;
			while(_g3 < _g2) {
				var xx = _g3++;
				if(!this.game.area.isWalkable(xx,yy)) continue;
				if((xx - xo) * (xx - xo) + (yy - yo) * (yy - yo) > params.range * params.range) continue;
				this.game.scene.area.addEffect(xx,yy,2,Const.FRAME_PARALYSIS_GAS);
			}
		}
		var _g_head = tmp.h;
		var _g_val = null;
		while(_g_head != null) {
			var ai1;
			ai1 = (function($this) {
				var $r;
				_g_val = _g_head[0];
				_g_head = _g_head[1];
				$r = _g_val;
				return $r;
			}(this));
			if(ai1 == this._ai) continue;
			if(ai1.state == _$AIState.AI_STATE_IDLE) {
				ai1.set_alertness(100);
				ai1.setState(_$AIState.AI_STATE_ALERT,ai__$AIStateChangeReason.REASON_PARASITE);
			}
			ai1.effects.add({ type : _$AIEffectType.EFFECT_PARALYSIS, points : params.time, isTimer : true});
			ai1.updateEntity();
		}
		return true;
	}
	,toString: function() {
		var tmp = [];
		var _g_head = this._list.h;
		var _g_val = null;
		while(_g_head != null) {
			var o;
			o = (function($this) {
				var $r;
				_g_val = _g_head[0];
				_g_head = _g_head[1];
				$r = _g_val;
				return $r;
			}(this));
			tmp.push(Std.string(o.id) + " active:" + (o.isActive == null?"null":"" + o.isActive) + " gp:" + o.gp);
		}
		return tmp.join(", ");
	}
	,getGrowInfo: function() {
		if(this.currentOrgan == null) return "<font color='#FF0000'>None</font>"; else return this.currentOrgan.info.name;
	}
	,onDamage: function(damage) {
		this.woundRegenTurn = 0;
	}
	,__class__: game_Organs
};
var game_Player = function(g) {
	this.game = g;
	this.evolutionManager = new game_EvolutionManager(this,this.game);
	this.vars = { inventoryEnabled : false, skillsEnabled : false, timelineEnabled : false, organsEnabled : false, npcEnabled : false, searchEnabled : false, evolutionEnergyPerTurn : 5, evolutionEnergyPerTurnMicrohabitat : 4, organGrowthEnergyPerTurn : 5, organGrowthPointsPerTurn : 10, areaEnergyPerTurn : 5, regionEnergyPerTurn : 15, startHealth : 10, startEnergy : 50, maxEnergy : 100, listenRadius : 10, losEnabled : true, invisibilityEnabled : false};
	this.state = _$PlayerState.PLR_STATE_PARASITE;
	this.set_energy(this.vars.startEnergy);
	this.maxEnergy = this.vars.maxEnergy;
	this.maxHealth = this.vars.startHealth;
	this.set_health(this.vars.startHealth);
	this.set_hostControl(0);
	this.knownItems = new List();
	this.skills = new game_Skills(this.game,true);
};
$hxClasses["game.Player"] = game_Player;
game_Player.__name__ = ["game","Player"];
game_Player.prototype = {
	game: null
	,evolutionManager: null
	,energy: null
	,maxEnergy: null
	,health: null
	,maxHealth: null
	,knownItems: null
	,vars: null
	,skills: null
	,state: null
	,host: null
	,hostControl: null
	,turn: function() {
		var time = 1;
		if(this.game.location == _$LocationType.LOCATION_REGION) time = 5;
		if(this.state == _$PlayerState.PLR_STATE_PARASITE) {
			if(this.game.location == _$LocationType.LOCATION_AREA && this.game.area.isHabitat) 1; else if(this.game.location == _$LocationType.LOCATION_AREA) {
				var _g = this;
				_g.set_energy(_g.energy - this.vars.areaEnergyPerTurn);
			} else if(this.game.location == _$LocationType.LOCATION_REGION) {
				var _g1 = this;
				_g1.set_energy(_g1.energy - this.vars.regionEnergyPerTurn);
			}
			if(this.state == _$PlayerState.PLR_STATE_PARASITE && this.energy <= 0) {
				this.game.finish("lose","noHost");
				return;
			}
		}
		if(this.state == _$PlayerState.PLR_STATE_HOST) {
			if(this.game.location == _$LocationType.LOCATION_AREA && this.game.area.isHabitat) 1; else {
				var _g2 = this.host;
				_g2.set_energy(_g2.energy - time);
			}
			if(this.host.energy <= 0) {
				if(this.game.location == _$LocationType.LOCATION_AREA) this.game.playerArea.onHostDeath(); else if(this.game.location == _$LocationType.LOCATION_REGION) this.game.playerRegion.onHostDeath();
				this.game.log("Your host has expired. You have to find a new one.",null);
			}
		}
		if(this.state == _$PlayerState.PLR_STATE_HOST) {
			var _g3 = this;
			_g3.set_energy(_g3.energy + 10 * time);
			this.evolutionManager.turn(time);
			this.host.organs.turn(time);
			if(this.host.type == "human" && this.evolutionManager.getLevel(_$Improv.IMP_BRAIN_PROBE) > 0) this.skills.increase(_$Skill.KNOW_SOCIETY,0.1 * this.host.get_intellect() * time);
		}
		if(this.game.location == _$LocationType.LOCATION_AREA) this.game.playerArea.turn(); else if(this.game.location == _$LocationType.LOCATION_REGION) this.game.playerRegion.turn();
	}
	,addKnownItem: function(id) {
		this.knownItems.add(id);
		return;
	}
	,knowsItem: function(id) {
		return Lambda.has(this.knownItems,id);
	}
	,log: function(s,col) {
		this.game.log(s,col);
	}
	,set_energy: function(v) {
		return this.energy = Const.clamp(v,0,this.maxEnergy);
	}
	,set_health: function(v) {
		return this.health = Const.clamp(v,0,this.maxHealth);
	}
	,set_hostControl: function(v) {
		return this.hostControl = Const.clamp(v,0,100);
	}
	,__class__: game_Player
	,__properties__: {set_hostControl:"set_hostControl",set_health:"set_health",set_energy:"set_energy"}
};
var game_PlayerArea = function(g) {
	this.game = g;
	this.player = this.game.player;
	this.x = 0;
	this.y = 0;
	this.ap = 2;
	this.set_attachHold(0);
	this.knownObjects = new List();
	this.knownObjects.add("body");
	this.knownObjects.add("pickup");
	this.entity = new entities_PlayerEntity(this.game,this.x,this.y);
	this.game.scene.add(this.entity);
};
$hxClasses["game.PlayerArea"] = game_PlayerArea;
game_PlayerArea.__name__ = ["game","PlayerArea"];
game_PlayerArea.prototype = {
	game: null
	,player: null
	,entity: null
	,x: null
	,y: null
	,ap: null
	,knownObjects: null
	,attachHost: null
	,attachHold: null
	,turn: function() {
		if(this.get_state() == _$PlayerState.PLR_STATE_HOST) {
			if(this.game.area.isHabitat) {
				var _g = this.player;
				var _g1 = _g.hostControl;
				_g.set_hostControl(_g1 + 1);
				_g1;
			} else if(this.player.skills.has(_$Skill.KNOW_DOPAMINE)) {
				var _g2 = this.player;
				_g2.set_hostControl(_g2.hostControl + 5);
			} else {
				var _g3 = this.player;
				var _g11 = _g3.hostControl;
				_g3.set_hostControl(_g11 - 1);
				_g11;
			}
			if(this.player.hostControl <= 0) {
				this.player.host.onDetach();
				this.onDetach();
				this.game.log("You've lost control of the host.");
			}
		}
		this.ap = 2;
	}
	,addActionToList: function(list,id,o) {
		var action = Const.PLAYER_ACTIONS.get(id);
		if(action.energy <= this.player.energy) {
			if(o != null) {
				var a = Reflect.copy(action);
				a.obj = o;
				list.add(a);
			} else list.add(action);
		}
	}
	,getActionList: function() {
		var tmp = new List();
		if(this.get_state() == _$PlayerState.PLR_STATE_PARASITE) {
			if(this.game.area.hasAI(this.x,this.y)) this.addActionToList(tmp,"attachHost",null);
		} else if(this.get_state() == _$PlayerState.PLR_STATE_ATTACHED) {
			this.addActionToList(tmp,"hardenGrip",null);
			if(this.attachHold >= 90) this.addActionToList(tmp,"invadeHost",null);
		} else if(this.get_state() == _$PlayerState.PLR_STATE_HOST) {
			if(this.player.hostControl < 100) this.addActionToList(tmp,"reinforceControl",null);
			this.player.host.organs.addActions(tmp);
			this.addActionToList(tmp,"leaveHost",null);
		}
		var $it0 = this.player.evolutionManager.iterator();
		while( $it0.hasNext() ) {
			var imp = $it0.next();
			var info = imp.info;
			if(info.action != null) {
				if(info.action.energy != null && info.action.energy <= this.player.energy) tmp.add(info.action); else if(info.action.energyFunc != null) {
					var e = info.action.energyFunc(this.player);
					if(e >= 0 && e <= this.player.energy) tmp.add(info.action);
				}
			}
		}
		var olist = this.game.area.getObjectsAt(this.x,this.y);
		if(olist == null) return tmp;
		if(Lambda.has(this.game.goals._listCompleted,_$Goal.GOAL_PROBE_BRAIN)) {
			var _g_head = olist.h;
			var _g_val = null;
			while(_g_head != null) {
				var o;
				o = (function($this) {
					var $r;
					_g_val = _g_head[0];
					_g_head = _g_head[1];
					$r = _g_val;
					return $r;
				}(this));
				if(this.get_state() == _$PlayerState.PLR_STATE_HOST && !Lambda.has(this.knownObjects,o.type) && this.player.host.isHuman && o.type != "event_object") this.addActionToList(tmp,"learnObject",o); else if(Lambda.has(this.knownObjects,o.type)) o.addActions(tmp);
			}
		}
		var _g_head1 = olist.h;
		var _g_val1 = null;
		while(_g_head1 != null) {
			var o1;
			o1 = (function($this) {
				var $r;
				_g_val1 = _g_head1[0];
				_g_head1 = _g_head1[1];
				$r = _g_val1;
				return $r;
			}(this));
			if(o1.type == "event_object") o1.addActions(tmp);
		}
		if(this.get_state() != _$PlayerState.PLR_STATE_ATTACHED && !this.game.area.info.isInhabited) this.addActionToList(tmp,"leaveArea",null);
		return tmp;
	}
	,action: function(action) {
		var ret = true;
		if(action.type == _$PlayerActionType.ACTION_OBJECT) {
			if(this.get_state() == _$PlayerState.PLR_STATE_HOST && this.player.host.effects.has(_$AIEffectType.EFFECT_PARALYSIS)) {
				this.game.log("Your host is paralyzed.",_$TextColor.COLOR_HINT);
				return;
			}
			var ao = action.obj;
			ao.action(action);
		} else if(action.type == _$PlayerActionType.ACTION_ORGAN) ret = this.player.host.organs.areaAction(action); else if(action.id == "hardenGrip") this.hardenGripAction(); else if(action.id == "attachHost") {
			var ai = this.game.area.getAI(this.x,this.y);
			this.attachToHostAction(ai);
			this.game.scene.hud.update();
		} else if(action.id == "invadeHost") this.invadeHostAction(); else if(action.id == "reinforceControl") this.reinforceControlAction(); else if(action.id == "leaveHost") this.leaveHostAction(); else if(action.id == "probeBrain") this.probeBrainAction(); else if(action.id == "learnObject") this.learnObjectAction(action.obj); else if(action.id == "leaveArea") this.leaveAreaAction();
		if(!ret) return;
		if(action.energy != null) {
			if(this.get_state() == _$PlayerState.PLR_STATE_HOST) {
				var _g = this.player.host;
				_g.set_energy(_g.energy - action.energy);
			} else {
				var _g1 = this.player;
				_g1.set_energy(_g1.energy - action.energy);
			}
		} else if(action.energyFunc != null) {
			if(this.get_state() == _$PlayerState.PLR_STATE_HOST) {
				var _g2 = this.player.host;
				_g2.set_energy(_g2.energy - action.energyFunc(this.player));
			} else {
				var _g3 = this.player;
				_g3.set_energy(_g3.energy - action.energyFunc(this.player));
			}
		}
		this.postAction();
	}
	,postAction: function() {
		if(this.get_state() == _$PlayerState.PLR_STATE_HOST && (this.player.host.state == _$AIState.AI_STATE_DEAD || this.player.host.energy <= 0)) {
			this.game.scene.setState(_$HUDState.HUDSTATE_DEFAULT);
			this.player.host.onDeath();
			this.onDetach();
			this.game.log("Your host has expired. You have to find a new one.",null);
			this.game.scene.setState(_$HUDState.HUDSTATE_DEFAULT);
		}
		if(this.get_state() == _$PlayerState.PLR_STATE_PARASITE && this.player.energy <= 0) {
			this.game.finish("lose","noHost");
			return;
		}
		this.ap--;
		if(this.ap > 0) {
			this.game.scene.hud.update();
			return;
		}
		if(this.game.location == _$LocationType.LOCATION_AREA) this.game.turn();
		this.game.scene.hud.update();
	}
	,moveAction: function(dx,dy) {
		if(this.get_state() == _$PlayerState.PLR_STATE_HOST && this.player.host.effects.has(_$AIEffectType.EFFECT_PARALYSIS)) {
			this.game.log("Your host is paralyzed.",_$TextColor.COLOR_HINT);
			return;
		}
		var ai = this.game.area.getAI(this.x + dx,this.y + dy);
		if(ai != null) {
			this.frobAIAction(ai);
			this.postAction();
			this.game.area.updateVisibility();
			return;
		}
		this.moveBy(dx,dy);
	}
	,frobAIAction: function(ai) {
		if(this.get_state() == _$PlayerState.PLR_STATE_PARASITE) this.attachToHostAction(ai); else if(this.get_state() == _$PlayerState.PLR_STATE_HOST) {
			if(!_$_$Math.opposingAttr(this.player.host.get_strength(),ai.get_strength(),"strength")) {
				this.game.log("Your host does not manage to push past " + (ai.isNameKnown?ai.name.real:ai.name.unknown) + ".",null);
				return;
			}
			var newx = ai.x;
			var newy = ai.y;
			ai.setPosition(this.x,this.y,true);
			this.moveTo(newx,newy);
			this.game.log("Your host pushes past " + (ai.isNameKnown?ai.name.real:ai.name.unknown) + ".",null);
		}
	}
	,debugAttachAndInvadeAction: function(ai) {
		this.attachToHostAction(ai);
		this.set_attachHold(100);
		this.invadeHostAction();
	}
	,attackAction: function(ai1) {
		if(this.get_state() != _$PlayerState.PLR_STATE_HOST) return;
		if(!this.game.area.isVisible(this.x,this.y,ai1.x,ai1.y)) return;
		var item = null;
		var info = null;
		var $it0 = this.player.host.inventory.iterator();
		while( $it0.hasNext() ) {
			var ii = $it0.next();
			if(ii.info.weapon != null && Lambda.has(this.player.knownItems,ii.id)) {
				item = ii;
				break;
			}
		}
		if(item == null) info = const_ItemsConst.fists; else info = item.info;
		var weapon = info.weapon;
		if(!weapon.isRanged && !(Math.abs(this.x - ai1.x) <= 1 && Math.abs(this.y - ai1.y) <= 1)) return;
		this.game.managerArea.onAttack(this.x,this.y,weapon.isRanged);
		ai1.onAttack();
		var roll = _$_$Math.skill({ id : weapon.skill, level : this.player.host.skills.getLevel(weapon.skill), mods : [{ name : "0.5x parasite", val : 0.5 * this.player.skills.getLevel(weapon.skill)}]});
		if(!roll) {
			this.game.log("Your host tries to " + weapon.verb1 + " " + (ai1.isNameKnown?ai1.name.real:ai1.name.unknown) + ", but misses.",null);
			if(ai1.state == _$AIState.AI_STATE_IDLE) ai1.setState(_$AIState.AI_STATE_ALERT,ai__$AIStateChangeReason.REASON_DAMAGE);
			this.postAction();
			return;
		}
		if(weapon.type == _$WeaponType.WEAPON_STUN) {
			var roll1 = _$_$Math.damage({ name : "STUN player->AI", min : weapon.minDamage, max : weapon.maxDamage});
			var resist = _$_$Math.opposingAttr(ai1.get_constitution(),roll1,"con/stun");
			if(resist) roll1 = roll1 / 2 | 0;
			if(this.game.config.extendedInfo) this.game.info("stun for " + roll1 + " rounds");
			this.game.log("Your host " + weapon.verb2 + " " + (ai1.isNameKnown?ai1.name.real:ai1.name.unknown) + " for " + roll1 + " rounds.",null);
			ai1.effects.add({ type : _$AIEffectType.EFFECT_PARALYSIS, points : roll1, isTimer : true});
			ai1.updateEntity();
			ai1.onDamage(0);
		} else {
			var mods = null;
			if(!weapon.isRanged) mods = [{ name : "melee 0.5xSTR", min : 0, max : Std["int"](this.player.host.get_strength() / 2)}];
			var damage = _$_$Math.damage({ name : "player->AI", min : weapon.minDamage, max : weapon.maxDamage, mods : mods});
			this.game.log("Your host " + weapon.verb2 + " " + (ai1.isNameKnown?ai1.name.real:ai1.name.unknown) + " for " + damage + " damage.",null);
			ai1.onDamage(damage);
		}
		this.postAction();
	}
	,attachToHostAction: function(ai1) {
		this.moveTo(ai1.x,ai1.y);
		this.set_state(_$PlayerState.PLR_STATE_ATTACHED);
		this.attachHost = ai1;
		var params = this.player.evolutionManager.getParams(_$Improv.IMP_ATTACH);
		this.set_attachHold(params.attachHoldBase);
		this.game.log("You have managed to attach to a host.");
		ai1.parasiteAttached = true;
		ai1.setState(_$AIState.AI_STATE_ALERT,ai__$AIStateChangeReason.REASON_ATTACH);
	}
	,hardenGripAction: function() {
		this.game.log("You harden your grip on the host.");
		var params = this.player.evolutionManager.getParams(_$Improv.IMP_HARDEN_GRIP);
		var tmp = params.attachHoldBase;
		if(!this.attachHost.effects.has(_$AIEffectType.EFFECT_PARALYSIS)) tmp -= Std["int"](this.attachHost.get_strength() / 2);
		var _g = this;
		_g.set_attachHold(_g.attachHold + tmp);
	}
	,invadeHostAction: function() {
		this.game.log("Your proboscis penetrates the warm flesh. You are now in control of the host.");
		this.player.host = this.attachHost;
		this.player.set_hostControl(game_Player.HOST_CONTROL_BASE);
		this.entity.visible = false;
		this.attachHost = null;
		this.player.host.onInvade();
		this.set_state(_$PlayerState.PLR_STATE_HOST);
		this.game.area.updateVisibility();
		this.game.goals.complete(_$Goal.GOAL_INVADE_HOST);
		if(this.player.host.isHuman) this.game.goals.complete(_$Goal.GOAL_INVADE_HUMAN);
	}
	,reinforceControlAction: function() {
		this.game.log("You reinforce mental control over the host.");
		var params = this.player.evolutionManager.getParams(_$Improv.IMP_REINFORCE);
		var _g = this.player;
		_g.set_hostControl(_g.hostControl + (params.reinforceControlBase - Std["int"](this.player.host.get_psyche() / 2)));
	}
	,leaveHostAction: function() {
		this.game.log("You release the host.");
		this.player.host.onDetach();
		this.onDetach();
	}
	,leaveAreaAction: function() {
		if(this.game.area.typeID == _$AreaType.AREA_HABITAT && this.game.area.hasAnyAI()) {
			this.game.log("You cannot leave the habitat with outsiders in it!");
			return;
		}
		this.game.log("You leave the area.");
		this.game.turns++;
		this.game.setLocation(_$LocationType.LOCATION_REGION);
	}
	,detachAction: function() {
		this.attachHost.parasiteAttached = false;
		this.onDetach();
		this.game.log("You detach from the potential host.");
	}
	,probeBrainAction: function() {
		if(!this.player.host.isHuman) {
			this.game.log("This host is not intelligent enough.");
			return;
		}
		this.game.log("You probe the brain of the host and learn its contents. The host grows weaker.");
		var params = this.player.evolutionManager.getParams(_$Improv.IMP_BRAIN_PROBE);
		if(this.game.player.vars.skillsEnabled) {
			if(params.hostSkillsMod > 0) this.accessSkillsAction(params.hostSkillsMod);
			if(params.hostAttrsMod > 0 && !this.player.host.isAttrsKnown) {
				this.player.host.isAttrsKnown = true;
				this.game.log("You have learned the parameters of this host.");
				if(Lambda.has(this.player.host.traits,_$AITraitType.TRAIT_DRUG_ADDICT)) this.game.goals.receive(_$Goal.GOAL_EVOLVE_DOPAMINE);
			}
			this.player.skills.increase(_$Skill.KNOW_SOCIETY,params.humanSociety * this.player.host.get_intellect());
		}
		if(!this.player.host.isNameKnown) {
			this.player.host.isNameKnown = true;
			this.game.log("You find out that the name of this host is " + this.player.host.getName() + ".");
		}
		this.game.goals.complete(_$Goal.GOAL_PROBE_BRAIN);
		if(this.player.host.event != null && this.player.host.brainProbed < 3) this.game.timeline.learnClue(this.player.host.event,true);
		if(this.player.host.event != null && this.player.host.brainProbed >= 2 && !this.player.host.npc.memoryKnown) {
			this.player.host.npc.memoryKnown = true;
			this.game.log("This human does not know anything else.",_$TextColor.COLOR_TIMELINE);
		}
		var damage = _$_$Math.damage({ name : "brain probe", val : params.hostHealthBase, mods : [{ name : "luck", val : params.hostHealthMod, chance : 25}]});
		this.player.host.onDamage(damage);
		this.player.host.brainProbed++;
	}
	,learnObjectAction: function(o) {
		this.game.log("You probe the brain of the host and learn what that object is for.");
		this.knownObjects.add(o.type);
		if(o.item != null) this.player.knownItems.add(o.item.id);
	}
	,accessSkillsAction: function(hostSkillsMod) {
		var hostSkill = this.player.host.skills.getRandomLearnableSkill();
		if(hostSkill == null) return;
		var skill = this.player.skills.get(hostSkill.id);
		this.game.goals.complete(_$Goal.GOAL_LEARN_SKILLS);
		var amount = Std["int"](this.player.host.get_intellect() / 10.0 * hostSkillsMod * hostSkill.level);
		if(skill == null) {
			this.game.log("You have learned the basics of " + hostSkill.info.name + " skill.");
			this.player.skills.addID(hostSkill.id,amount);
		} else if(!hostSkill.info.isBool) {
			this.game.log("You have increased your knowledge of " + hostSkill.info.name + " skill.");
			var val = Const.clampFloat(skill.level + amount,0,hostSkill.level);
			this.player.skills.increase(hostSkill.id,val - skill.level);
		}
	}
	,moveBy: function(dx,dy) {
		if(this.get_state() == _$PlayerState.PLR_STATE_ATTACHED) this.detachAction();
		var nx = this.x + dx;
		var ny = this.y + dy;
		if(!this.game.area.isWalkable(nx,ny)) return false;
		if(this.get_state() == _$PlayerState.PLR_STATE_HOST && this.player.hostControl < 90 && Std.random(100) < 0.75 * (100 - this.player.hostControl)) {
			this.game.log("The host resists your command.",null);
			var dir = this.game.area.getRandomDirection(this.x,this.y);
			if(dir == -1) throw new js__$Boot_HaxeError("nowhere to move!");
			nx = this.x + Const.dirx[dir];
			ny = this.y + Const.diry[dir];
		}
		this.x = nx;
		this.y = ny;
		if(this.get_state() == _$PlayerState.PLR_STATE_HOST) this.player.host.setPosition(this.x,this.y);
		this.entity.setPosition(this.x,this.y);
		this.postAction();
		this.game.area.updateVisibility();
		return true;
	}
	,moveTo: function(nx,ny) {
		if(!this.game.area.isWalkable(nx,ny)) return false;
		this.x = nx;
		this.y = ny;
		if(this.get_state() == _$PlayerState.PLR_STATE_HOST) this.player.host.setPosition(this.x,this.y);
		this.entity.setPosition(this.x,this.y);
		this.game.area.updateVisibility();
		return true;
	}
	,hears: function(xx,yy) {
		return com_haxepunk_HXP.distanceSquared(this.x,this.y,xx,yy) < this.player.vars.listenRadius * this.player.vars.listenRadius;
	}
	,onDamage: function(damage) {
		if(this.get_state() == _$PlayerState.PLR_STATE_HOST) this.onDamageHost(damage); else this.onDamagePlayer(damage);
	}
	,onDamageHost: function(damage) {
		this.player.host.onDamage(damage);
		if(this.player.host.state == _$AIState.AI_STATE_DEAD) {
			this.onDetach();
			this.game.log("Your host has died from injuries.",null);
			return;
		}
		var damage1 = _$_$Math.damage({ name : "transmit to parasite", chance : 10, val : damage == 1?1:2});
	}
	,onDamagePlayer: function(damage) {
		var _g = this.player;
		_g.set_health(_g.health - damage);
		if(this.player.health <= 0) this.game.finish("lose","noHealth");
	}
	,onDetach: function() {
		this.set_state(_$PlayerState.PLR_STATE_PARASITE);
		this.entity.visible = true;
		this.attachHost = null;
		this.player.host = null;
	}
	,onHostDeath: function() {
		this.game.scene.setState(_$HUDState.HUDSTATE_DEFAULT);
		this.player.host.onDeath();
		this.onDetach();
	}
	,debugLearnObject: function(t) {
		this.knownObjects.add(t);
	}
	,log: function(s,col) {
		this.game.log(s,col);
	}
	,get_state: function() {
		return this.player.state;
	}
	,set_state: function(v) {
		return this.player.state = v;
	}
	,set_attachHold: function(v) {
		return this.attachHold = Const.clamp(v,0,100);
	}
	,__class__: game_PlayerArea
	,__properties__: {set_attachHold:"set_attachHold",set_state:"set_state",get_state:"get_state"}
};
var game_PlayerRegion = function(g) {
	this.game = g;
	this.player = this.game.player;
	this.x = 0;
	this.y = 0;
};
$hxClasses["game.PlayerRegion"] = game_PlayerRegion;
game_PlayerRegion.__name__ = ["game","PlayerRegion"];
game_PlayerRegion.prototype = {
	game: null
	,player: null
	,currentArea: null
	,entity: null
	,x: null
	,y: null
	,createEntity: function(vx,vy) {
		this.x = vx;
		this.y = vy;
		this.entity = new entities_PlayerEntity(this.game,this.x,this.y);
		this.game.scene.add(this.entity);
		this.entity.visible = false;
	}
	,turn: function() {
		if(this.player.state == _$PlayerState.PLR_STATE_HOST && this.player.hostControl < 100) {
			var _g = this.player;
			_g.set_hostControl(_g.hostControl + 25);
		}
	}
	,addActionToList: function(list,name) {
		var action = Const.PLAYER_ACTIONS.get(name);
		if(action.energy <= this.player.energy) list.add(action);
	}
	,addActionToList2: function(list,action) {
		if(action.energy <= this.player.energy) list.add(action);
	}
	,getActionList: function() {
		var tmp = new List();
		if(this.get_currentArea().info.canEnter) this.addActionToList(tmp,"enterArea");
		if(this.player.skills.has(_$Skill.KNOW_HABITAT) && !this.get_currentArea().hasHabitat) {
			var params = this.player.evolutionManager.getParams(_$Improv.IMP_MICROHABITAT);
			var maxHabitats = params.numHabitats;
			var numHabitats = this.game.region.getHabitatsCount();
			if(numHabitats < maxHabitats) this.addActionToList2(tmp,{ id : "createHabitat", type : _$PlayerActionType.ACTION_REGION, name : "Create habitat", energy : 10});
		}
		if(this.get_currentArea().hasHabitat) this.addActionToList2(tmp,{ id : "enterHabitat", type : _$PlayerActionType.ACTION_REGION, name : "Enter habitat", energy : 0});
		return tmp;
	}
	,action: function(action) {
		if(action.id == "enterArea") this.enterAreaAction(); else if(action.id == "createHabitat") this.createHabitatAction(); else if(action.id == "enterHabitat") this.enterHabitatAction();
		var _g = this.player;
		_g.set_energy(_g.energy - action.energy);
		if(this.player.energy == 0) haxe_Log.trace("TODO: " + "Zero energy as a result of a region action. Fix this.",{ fileName : "Const.hx", lineNumber : 216, className : "Const", methodName : "todo"});
		this.game.scene.hud.update();
	}
	,enterAreaAction: function() {
		this.game.log(this.get_currentArea().info.isInhabited?"You emerge from the sewers.":"You enter the area.");
		this.game.setLocation(_$LocationType.LOCATION_AREA);
	}
	,createHabitatAction: function() {
		this.game.log("You have created a habitat in this area.");
		var area = this.game.region.createArea(_$AreaType.AREA_HABITAT);
		area.isHabitat = true;
		area.habitat = new game_Habitat(this.game,area);
		this.get_currentArea().hasHabitat = true;
		this.get_currentArea().habitatAreaID = area.id;
		area.parent = this.get_currentArea();
		this.game.scene.region.updateIconsArea(this.x,this.y);
		this.game.goals.complete(_$Goal.GOAL_CREATE_HABITAT);
	}
	,enterHabitatAction: function() {
		var habitatArea = this.game.region.get(this.get_currentArea().habitatAreaID);
		if(habitatArea.habitatIsDetected) this.game.log("You enter the habitat. Looks like someone is here!"); else this.game.log("You enter the habitat. You feel much safer here.");
		this.game.setLocation(_$LocationType.LOCATION_AREA,habitatArea);
	}
	,moveAction: function(dx,dy) {
		if(this.player.state == _$PlayerState.PLR_STATE_PARASITE) {
			if(this.player.energy < this.player.vars.regionEnergyPerTurn) {
				this.game.log("Not enough energy to move in region mode.");
				return;
			}
		}
		if(this.player.state == _$PlayerState.PLR_STATE_HOST) {
			if(this.player.host.energy <= 0) {
				this.player.state = _$PlayerState.PLR_STATE_PARASITE;
				this.entity.setMask(Const.FRAME_EMPTY,Const.ROW_PARASITE);
				this.entity.setImage(Const.FRAME_DEFAULT,Const.ROW_PARASITE);
				this.entity.visible = true;
				this.player.host = null;
				this.game.log("Your host has expired somewhere in the sewers. You have to find a new one.");
				this.game.scene.setState(_$HUDState.HUDSTATE_DEFAULT);
			}
		}
		this.moveBy(dx,dy);
	}
	,onHostDeath: function() {
		this.player.state = _$PlayerState.PLR_STATE_PARASITE;
		this.entity.setMask(Const.FRAME_EMPTY,Const.ROW_PARASITE);
		this.entity.setImage(Const.FRAME_DEFAULT,Const.ROW_PARASITE);
		this.entity.visible = true;
		this.player.host = null;
	}
	,moveBy: function(dx,dy) {
		var nx = this.x + dx;
		var ny = this.y + dy;
		return this.moveTo(nx,ny);
	}
	,moveTo: function(nx,ny) {
		if(!this.game.region.isWalkable(nx,ny)) return false;
		this.x = nx;
		this.y = ny;
		var _g1 = this.y - 1;
		var _g = this.y + 2;
		while(_g1 < _g) {
			var yy = _g1++;
			var _g3 = this.x - 1;
			var _g2 = this.x + 2;
			while(_g3 < _g2) {
				var xx = _g3++;
				var a = this.game.region.getXY(xx,yy);
				if(a == null) continue;
				a.isKnown = true;
			}
		}
		this.entity.setPosition(this.x,this.y);
		this.game.region.game.scene.region.updateVisibility();
		this.game.turn();
		this.game.scene.hud.update();
		return true;
	}
	,get_currentArea: function() {
		return this.game.region.getXY(this.x,this.y);
	}
	,__class__: game_PlayerRegion
	,__properties__: {get_currentArea:"get_currentArea"}
};
var game_RegionGame = function(g,tv,w,h) {
	this.game = g;
	this.typeID = tv;
	this.id = game_RegionGame._maxID++;
	this.width = w;
	this.height = h;
	this.info = const_WorldConst.getRegionInfo(this.typeID);
	this._list = new haxe_ds_IntMap();
	this._array = [];
	var _g1 = 0;
	var _g = this.width;
	while(_g1 < _g) {
		var i = _g1++;
		this._array[i] = [];
	}
};
$hxClasses["game.RegionGame"] = game_RegionGame;
game_RegionGame.__name__ = ["game","RegionGame"];
game_RegionGame.prototype = {
	game: null
	,id: null
	,typeID: null
	,info: null
	,width: null
	,height: null
	,_array: null
	,_list: null
	,iterator: function() {
		return this._list.iterator();
	}
	,enter: function() {
		this.game.log("DEBUG " + "Region.enter()",_$TextColor.COLOR_DEBUG);
		this.game.region = this;
		this.game.scene.region.update();
		this.game.scene.region.updateVisibility();
		this.game.scene.region.show();
	}
	,leave: function() {
		this.game.log("DEBUG " + "Region.leave()",_$TextColor.COLOR_DEBUG);
		this.game.scene.region.hide();
	}
	,turn: function() {
		var _g1 = 0;
		var _g = this.height;
		while(_g1 < _g) {
			var y = _g1++;
			var _g3 = 0;
			var _g2 = this.width;
			while(_g3 < _g2) {
				var x = _g3++;
				var a = this.game.region.getXY(x,y);
				if(a.get_alertness() == 0) continue;
				var _g4 = a;
				_g4.set_alertness(_g4.get_alertness() - 1);
			}
		}
		this.turnDetectHabitats();
		this.game.scene.region.updateIcons();
	}
	,turnDetectHabitats: function() {
		var params = this.game.player.evolutionManager.getParams(_$Improv.IMP_MICROHABITAT);
		var detectionChance = params.detectionChance;
		var tmp = this.getHabitatsList();
		var _g_head = tmp.h;
		var _g_val = null;
		while(_g_head != null) {
			var area;
			area = (function($this) {
				var $r;
				_g_val = _g_head[0];
				_g_head = _g_head[1];
				$r = _g_val;
				return $r;
			}(this));
			if(this.game.location == _$LocationType.LOCATION_AREA && area == this.game.area) continue;
			var ret = _$_$Math.detectHabitat({ base : detectionChance, interest : area.parent.interest});
			if(!ret) continue;
			this.game.log("DEBUG " + ("Habitat " + this.id + " detected."),_$TextColor.COLOR_DEBUG);
			area.habitatIsDetected = true;
		}
	}
	,generate: function() {
		if(this.typeID == const_WorldConst.REGION_CITY) this.generateCity(); else throw new js__$Boot_HaxeError("unsupported region type: " + this.typeID);
	}
	,traceTmp: function(tmp) {
		var _g1 = 0;
		var _g = this.height;
		while(_g1 < _g) {
			var y = _g1++;
			var s = "";
			var _g3 = 0;
			var _g2 = this.width;
			while(_g3 < _g2) {
				var x = _g3++;
				s += tmp[x][y];
			}
			haxe_Log.trace(s,{ fileName : "RegionGame.hx", lineNumber : 147, className : "game.RegionGame", methodName : "traceTmp"});
		}
	}
	,smoothAdjacentTmp: function(tmp,x,y) {
		if(y - 1 >= 0 && tmp[x][y - 1] == 0) tmp[x][y - 1] = 1;
		if(y + 1 < this.height && tmp[x][y + 1] == 0) tmp[x][y + 1] = 1;
		if(x - 1 >= 0 && tmp[x - 1][y] == 0) tmp[x - 1][y] = 1;
		if(x + 1 < this.width && tmp[x + 1][y] == 0) tmp[x + 1][y] = 1;
	}
	,generateCity: function() {
		var tmp = [];
		var _g1 = 0;
		var _g = this.width;
		while(_g1 < _g) {
			var i = _g1++;
			tmp[i] = [];
		}
		var _g11 = 0;
		var _g2 = this.height;
		while(_g11 < _g2) {
			var y = _g11++;
			var _g3 = 0;
			var _g21 = this.width;
			while(_g3 < _g21) {
				var x = _g3++;
				tmp[x][y] = 0;
			}
		}
		var numPeaks = this.width * this.height / 25 | 0;
		var _g4 = 0;
		while(_g4 < numPeaks) {
			var i1 = _g4++;
			var x1 = Std["int"](this.width / 4 + Std.random(this.width / 2 | 0));
			var y1 = Std["int"](this.height / 4 + Std.random(this.height / 2 | 0));
			tmp[x1][y1] = 7 + Std.random(3);
		}
		var _g5 = 0;
		while(_g5 < 4) {
			var i2 = _g5++;
			var _g22 = 0;
			var _g12 = this.height;
			while(_g22 < _g12) {
				var y2 = _g22++;
				var _g41 = 0;
				var _g31 = this.width;
				while(_g41 < _g31) {
					var x2 = _g41++;
					if(tmp[x2][y2] > 1) {
						if(y2 - 1 >= 0 && tmp[x2][y2 - 1] == 0) tmp[x2][y2 - 1] = tmp[x2][y2] - 1;
						if(y2 + 1 < this.height && tmp[x2][y2 + 1] == 0) tmp[x2][y2 + 1] = tmp[x2][y2] - 1;
						if(x2 - 1 >= 0 && tmp[x2 - 1][y2] == 0) tmp[x2 - 1][y2] = tmp[x2][y2] - 1;
						if(x2 + 1 < this.width && tmp[x2 + 1][y2] == 0) tmp[x2 + 1][y2] = tmp[x2][y2] - 1;
					}
				}
			}
		}
		var _g13 = 0;
		var _g6 = this.height;
		while(_g13 < _g6) {
			var y3 = _g13++;
			var _g32 = 0;
			var _g23 = this.width;
			while(_g32 < _g23) {
				var x3 = _g32++;
				tmp[x3][y3] = tmp[x3][y3] * 3.0 / 9.0 | 0;
			}
		}
		var chance = 30;
		var _g14 = 0;
		var _g7 = this.height;
		while(_g14 < _g7) {
			var y4 = _g14++;
			var _g33 = 0;
			var _g24 = this.width;
			while(_g33 < _g24) {
				var x4 = _g33++;
				if(tmp[x4][y4] == 0) {
					if(y4 - 1 >= 0 && tmp[x4][y4 - 1] == 1 && Std.random(100) < chance) tmp[x4][y4 - 1] = 0;
					if(y4 + 1 < this.height && tmp[x4][y4 + 1] == 1 && Std.random(100) < chance) tmp[x4][y4 + 1] = 0;
					if(x4 - 1 >= 0 && tmp[x4 - 1][y4] == 1 && Std.random(100) < chance) tmp[x4 - 1][y4] = 0;
					if(x4 + 1 < this.width && tmp[x4 + 1][y4] == 1 && Std.random(100) < chance) tmp[x4 + 1][y4] = 0;
				}
			}
		}
		var _g15 = 0;
		var _g8 = this.height;
		while(_g15 < _g8) {
			var y5 = _g15++;
			var _g34 = 0;
			var _g25 = this.width;
			while(_g34 < _g25) {
				var x5 = _g34++;
				if(tmp[x5][y5] == 3) {
					if(y5 - 1 >= 0 && tmp[x5][y5 - 1] == 0) tmp[x5][y5 - 1] = 1;
					if(y5 + 1 < this.height && tmp[x5][y5 + 1] == 0) tmp[x5][y5 + 1] = 1;
					if(x5 - 1 >= 0 && tmp[x5 - 1][y5] == 0) tmp[x5 - 1][y5] = 1;
					if(x5 + 1 < this.width && tmp[x5 + 1][y5] == 0) tmp[x5 + 1][y5] = 1;
				}
			}
		}
		var _g16 = 0;
		var _g9 = this.height;
		while(_g16 < _g9) {
			var y6 = _g16++;
			var _g35 = 0;
			var _g26 = this.width;
			while(_g35 < _g26) {
				var x6 = _g35++;
				if(tmp[x6][y6] == 2) {
					if(y6 - 1 >= 0 && tmp[x6][y6 - 1] == 0) tmp[x6][y6 - 1] = 1;
					if(y6 + 1 < this.height && tmp[x6][y6 + 1] == 0) tmp[x6][y6 + 1] = 1;
					if(x6 - 1 >= 0 && tmp[x6 - 1][y6] == 0) tmp[x6 - 1][y6] = 1;
					if(x6 + 1 < this.width && tmp[x6 + 1][y6] == 0) tmp[x6 + 1][y6] = 1;
				}
			}
		}
		var _g17 = 0;
		var _g10 = this.height;
		while(_g17 < _g10) {
			var y7 = _g17++;
			var _g36 = 0;
			var _g27 = this.width;
			while(_g36 < _g27) {
				var x7 = _g36++;
				var t = _$AreaType.AREA_GROUND;
				if(tmp[x7][y7] == 1) t = _$AreaType.AREA_CITY_LOW; else if(tmp[x7][y7] == 2) t = _$AreaType.AREA_CITY_MEDIUM; else if(tmp[x7][y7] == 3) t = _$AreaType.AREA_CITY_HIGH;
				var a = new game_AreaGame(this.game,this,t,x7,y7);
				this._list.h[a.id] = a;
				this._array[x7][y7] = a;
			}
		}
		this.spawnArea(_$AreaType.AREA_MILITARY_BASE,true);
		this.spawnArea(_$AreaType.AREA_MILITARY_BASE,true);
		this.spawnArea(_$AreaType.AREA_FACILITY,true);
		this.spawnArea(_$AreaType.AREA_FACILITY,true);
		this.spawnArea(_$AreaType.AREA_FACILITY,true);
	}
	,updateVisibility: function() {
		this.game.scene.region.updateVisibility();
	}
	,updateAlertness: function() {
		var tmp = [];
		var _g1 = 0;
		var _g = this.width;
		while(_g1 < _g) {
			var i = _g1++;
			tmp[i] = [];
		}
		var _g11 = 0;
		var _g2 = this.height;
		while(_g11 < _g2) {
			var y = _g11++;
			var _g3 = 0;
			var _g21 = this.width;
			while(_g3 < _g21) {
				var x = _g3++;
				var a = this._array[x][y];
				var _g5 = y - 1;
				var _g4 = y + 2;
				while(_g5 < _g4) {
					var yy = _g5++;
					var _g7 = x - 1;
					var _g6 = x + 2;
					while(_g7 < _g6) {
						var xx = _g7++;
						var aa = this.getXY(xx,yy);
						if(aa == null || aa == a || !aa.info.canEnter) continue;
						if(tmp[xx][yy] == null) tmp[xx][yy] = 0;
						tmp[xx][yy] += 0.75 * a.alertnessMod;
					}
				}
				a.alertnessMod = 0;
			}
		}
		var _g12 = 0;
		var _g8 = this.height;
		while(_g12 < _g8) {
			var y1 = _g12++;
			var _g31 = 0;
			var _g22 = this.width;
			while(_g31 < _g22) {
				var x1 = _g31++;
				if(tmp[x1][y1] != null) this._array[x1][y1].setAlertness(this._array[x1][y1].get_alertness() + tmp[x1][y1]);
			}
		}
	}
	,getHabitatsCount: function() {
		var cnt = 0;
		var $it0 = this._list.iterator();
		while( $it0.hasNext() ) {
			var area = $it0.next();
			if(area.isHabitat) cnt++;
		}
		return cnt;
	}
	,getHabitatsList: function() {
		var tmp = new List();
		var $it0 = this._list.iterator();
		while( $it0.hasNext() ) {
			var area = $it0.next();
			if(area.isHabitat) tmp.add(area);
		}
		return tmp;
	}
	,get: function(id) {
		return this._list.h[id];
	}
	,getCells: function() {
		return this._array;
	}
	,getXY: function(x,y) {
		if(x >= 0 && x < this.width && y >= 0 && y < this.height) return this._array[x][y];
		return null;
	}
	,getRandom: function() {
		var tmp = Lambda.array(this._list);
		return tmp[Std.random(tmp.length)];
	}
	,getRandomInhabited: function() {
		var tmp = Lambda.array(this._list);
		var tmp2 = [];
		var _g = 0;
		while(_g < tmp.length) {
			var a = tmp[_g];
			++_g;
			if(a.info.isInhabited) tmp2.push(a);
		}
		if(tmp2.length == 0) throw new js__$Boot_HaxeError("cannot find enterable area");
		return tmp2[Std.random(tmp2.length)];
	}
	,getRandomEnterable: function() {
		var tmp = Lambda.array(this._list);
		var tmp2 = [];
		var _g = 0;
		while(_g < tmp.length) {
			var a = tmp[_g];
			++_g;
			if(a.info.canEnter) tmp2.push(a);
		}
		if(tmp2.length == 0) throw new js__$Boot_HaxeError("cannot find enterable area");
		return tmp2[Std.random(tmp2.length)];
	}
	,getRandomWithType: function(t,noEvent) {
		var tmp = Lambda.array(this._list);
		var tmp2 = [];
		var _g = 0;
		while(_g < tmp.length) {
			var a = tmp[_g];
			++_g;
			if(a.typeID == t && (!noEvent || a.events.length == 0)) tmp2.push(a);
		}
		if(tmp2.length == 0) return null;
		return tmp2[Std.random(tmp2.length)];
	}
	,getRandomAround: function(area,params) {
		if(params.minRadius == null) params.minRadius = 1;
		if(params.maxRadius == null) params.maxRadius = 5;
		var tmp2 = [];
		var amin = null;
		var dist = 10000;
		var $it0 = this._list.iterator();
		while( $it0.hasNext() ) {
			var a = $it0.next();
			if(params.isInhabited != null && a.info.isInhabited != params.isInhabited) continue;
			if(params.type != null && a.info.id != params.type) continue;
			var tmpdist = Const.getDistSquared(a.x,a.y,area.x,area.y);
			if(a.x != area.x && a.x != area.y && tmpdist < dist) {
				amin = a;
				dist = tmpdist;
			}
			if(tmpdist >= params.minRadius * params.minRadius && tmpdist <= params.maxRadius * params.maxRadius) tmp2.push(a);
		}
		if(tmp2.length > 1) return tmp2[Std.random(tmp2.length)];
		if(params.canReturnNull) return null;
		return amin;
	}
	,spawnArea: function(t,noEvent) {
		var a = this.getRandomWithType(_$AreaType.AREA_GROUND,noEvent);
		a.setType(t);
		return a;
	}
	,createArea: function(t) {
		var a = new game_AreaGame(this.game,this,t,-1,-1);
		this._list.h[a.id] = a;
		return a;
	}
	,removeArea: function(areaID) {
		this._list.remove(areaID);
	}
	,isWalkable: function(x,y) {
		if(x < 0 || y < 0 || x >= this.width || y >= this.height) return false;
		return Const.TILE_WALKABLE_REGION[this._array[x][y].tileID];
	}
	,__class__: game_RegionGame
};
var game_RegionManager = function(g) {
	this.game = g;
};
$hxClasses["game.RegionManager"] = game_RegionManager;
game_RegionManager.__name__ = ["game","RegionManager"];
game_RegionManager.prototype = {
	game: null
	,onBodyDiscovered: function(area,pts) {
		var _g = area;
		_g.set_alertness(_g.get_alertness() + 1);
		var _g1 = area;
		_g1.set_interest(_g1.interest + pts);
		if(pts > 0) this.game.log("DEBUG " + "Authorities have discovered a body with some weird anomalies.",_$TextColor.COLOR_DEBUG);
	}
	,onBodiesDiscovered: function(area,bodies,pts) {
		var _g = area;
		_g.set_alertness(_g.get_alertness() + bodies);
		var _g1 = area;
		_g1.set_interest(_g1.interest + pts);
		if(pts > 0) this.game.log("DEBUG " + "Authorities have discovered multiple bodies with disturbing anomalies.",_$TextColor.COLOR_DEBUG);
	}
	,log: function(s) {
		this.game.log("DEBUG " + s,_$TextColor.COLOR_DEBUG);
	}
	,__class__: game_RegionManager
};
var game_Skills = function(g,ispv) {
	this.game = g;
	this.isPlayer = ispv;
	this._list = new List();
};
$hxClasses["game.Skills"] = game_Skills;
game_Skills.__name__ = ["game","Skills"];
game_Skills.prototype = {
	game: null
	,_list: null
	,isPlayer: null
	,iterator: function() {
		return new _$List_ListIterator(this._list.h);
	}
	,getRandomLearnableSkill: function() {
		if(this._list.length == 0) return null;
		var tmp = [];
		var _g_head = this._list.h;
		var _g_val = null;
		while(_g_head != null) {
			var s;
			s = (function($this) {
				var $r;
				_g_val = _g_head[0];
				_g_head = _g_head[1];
				$r = _g_val;
				return $r;
			}(this));
			var playerSkill = this.game.player.skills.get(s.id);
			if(playerSkill != null && s.info.isBool) continue;
			if(s.info.isBool == null || !s.info.isBool) {
				if(playerSkill != null && playerSkill.level >= s.level) continue;
			}
			tmp.push(s);
		}
		return tmp[Std.random(tmp.length)];
	}
	,getRandomSkill: function() {
		if(this._list.length == 0) return null;
		var tmp = Lambda.array(this._list);
		return tmp[Std.random(tmp.length)];
	}
	,has: function(id) {
		var _g_head = this._list.h;
		var _g_val = null;
		while(_g_head != null) {
			var o;
			o = (function($this) {
				var $r;
				_g_val = _g_head[0];
				_g_head = _g_head[1];
				$r = _g_val;
				return $r;
			}(this));
			if(o.id == id) return true;
		}
		return false;
	}
	,get: function(id) {
		var _g_head = this._list.h;
		var _g_val = null;
		while(_g_head != null) {
			var o;
			o = (function($this) {
				var $r;
				_g_val = _g_head[0];
				_g_head = _g_head[1];
				$r = _g_val;
				return $r;
			}(this));
			if(o.id == id) return o;
		}
		return null;
	}
	,increase: function(id,val) {
		var sk = this.get(id);
		var oldLevel = 0.0;
		var newLevel = 0.0;
		if(sk == null) {
			this.addID(id,val);
			newLevel = val;
		} else {
			oldLevel = sk.level;
			sk.level += val;
			sk.level = Const.clampFloat(sk.level,0,99);
			newLevel = sk.level;
			if(oldLevel == newLevel) return;
			if(this.isPlayer) this.game.info("Skill increased: " + sk.info.name + " +" + val + "% = " + sk.level + "%.");
		}
		if(this.isPlayer && id == _$Skill.KNOW_SOCIETY) {
			this.game.goals.receive(_$Goal.GOAL_LEARN_SOCIETY);
			if(oldLevel < 25 && newLevel >= 25) this.game.goals.complete(_$Goal.GOAL_LEARN_SOCIETY);
		}
	}
	,getLevel: function(id) {
		var _g_head = this._list.h;
		var _g_val = null;
		while(_g_head != null) {
			var o;
			o = (function($this) {
				var $r;
				_g_val = _g_head[0];
				_g_head = _g_head[1];
				$r = _g_val;
				return $r;
			}(this));
			if(o.id == id) return o.level;
		}
		var info = const_SkillsConst.getInfo(id);
		return info.defaultLevel;
	}
	,addID: function(id,lvl) {
		if(lvl == null) lvl = 1;
		var _g_head = this._list.h;
		var _g_val = null;
		while(_g_head != null) {
			var sk;
			sk = (function($this) {
				var $r;
				_g_val = _g_head[0];
				_g_head = _g_head[1];
				$r = _g_val;
				return $r;
			}(this));
			if(sk.id == id) {
				sk.level = lvl;
				return;
			}
		}
		var info = const_SkillsConst.getInfo(id);
		if(info == null) {
			haxe_Log.trace("No such skill id: " + Std.string(id),{ fileName : "Skills.hx", lineNumber : 155, className : "game.Skills", methodName : "addID"});
			return;
		}
		var skill = { id : id, level : lvl, info : info};
		this._list.add(skill);
		if(this.isPlayer) {
			if(info.isKnowledge) this.game.info("Knowledge added: " + info.name + (info.isBool?".":" " + lvl + "%.")); else this.game.info("Skill added: " + info.name + " " + lvl + "%.");
		}
	}
	,toString: function() {
		var tmp = [];
		var _g_head = this._list.h;
		var _g_val = null;
		while(_g_head != null) {
			var o;
			o = (function($this) {
				var $r;
				_g_val = _g_head[0];
				_g_head = _g_head[1];
				$r = _g_val;
				return $r;
			}(this));
			tmp.push(Std.string(o.id) + " " + o.level + "%");
		}
		return tmp.join(", ");
	}
	,__class__: game_Skills
};
var game_World = function(g) {
	this.game = g;
};
$hxClasses["game.World"] = game_World;
game_World.__name__ = ["game","World"];
game_World.prototype = {
	game: null
	,_list: null
	,generate: function() {
		this._list = new haxe_ds_IntMap();
		var _g = 0;
		while(_g < 1) {
			var i = _g++;
			var region = new game_RegionGame(this.game,const_WorldConst.REGION_CITY,32,24);
			region.generate();
			this._list.h[region.id] = region;
		}
	}
	,get: function(id) {
		return this._list.h[id];
	}
	,__class__: game_World
};
var game_WorldManager = function(g) {
	this.game = g;
};
$hxClasses["game.WorldManager"] = game_WorldManager;
game_WorldManager.__name__ = ["game","WorldManager"];
game_WorldManager.prototype = {
	game: null
	,log: function(s) {
		this.game.log("DEBUG: " + s,_$TextColor.COLOR_WORLD);
	}
	,__class__: game_WorldManager
};
var haxe_StackItem = $hxClasses["haxe.StackItem"] = { __ename__ : ["haxe","StackItem"], __constructs__ : ["CFunction","Module","FilePos","Method","LocalFunction"] };
haxe_StackItem.CFunction = ["CFunction",0];
haxe_StackItem.CFunction.toString = $estr;
haxe_StackItem.CFunction.__enum__ = haxe_StackItem;
haxe_StackItem.Module = function(m) { var $x = ["Module",1,m]; $x.__enum__ = haxe_StackItem; $x.toString = $estr; return $x; };
haxe_StackItem.FilePos = function(s,file,line) { var $x = ["FilePos",2,s,file,line]; $x.__enum__ = haxe_StackItem; $x.toString = $estr; return $x; };
haxe_StackItem.Method = function(classname,method) { var $x = ["Method",3,classname,method]; $x.__enum__ = haxe_StackItem; $x.toString = $estr; return $x; };
haxe_StackItem.LocalFunction = function(v) { var $x = ["LocalFunction",4,v]; $x.__enum__ = haxe_StackItem; $x.toString = $estr; return $x; };
var haxe_CallStack = function() { };
$hxClasses["haxe.CallStack"] = haxe_CallStack;
haxe_CallStack.__name__ = ["haxe","CallStack"];
haxe_CallStack.getStack = function(e) {
	if(e == null) return [];
	var oldValue = Error.prepareStackTrace;
	Error.prepareStackTrace = function(error,callsites) {
		var stack = [];
		var _g = 0;
		while(_g < callsites.length) {
			var site = callsites[_g];
			++_g;
			if(haxe_CallStack.wrapCallSite != null) site = haxe_CallStack.wrapCallSite(site);
			var method = null;
			var fullName = site.getFunctionName();
			if(fullName != null) {
				var idx = fullName.lastIndexOf(".");
				if(idx >= 0) {
					var className = HxOverrides.substr(fullName,0,idx);
					var methodName = HxOverrides.substr(fullName,idx + 1,null);
					method = haxe_StackItem.Method(className,methodName);
				}
			}
			stack.push(haxe_StackItem.FilePos(method,site.getFileName(),site.getLineNumber()));
		}
		return stack;
	};
	var a = haxe_CallStack.makeStack(e.stack);
	Error.prepareStackTrace = oldValue;
	return a;
};
haxe_CallStack.callStack = function() {
	try {
		throw new Error();
	} catch( e ) {
		haxe_CallStack.lastException = e;
		if (e instanceof js__$Boot_HaxeError) e = e.val;
		var a = haxe_CallStack.getStack(e);
		a.shift();
		return a;
	}
};
haxe_CallStack.exceptionStack = function() {
	return haxe_CallStack.getStack(haxe_CallStack.lastException);
};
haxe_CallStack.toString = function(stack) {
	var b = new StringBuf();
	var _g = 0;
	while(_g < stack.length) {
		var s = stack[_g];
		++_g;
		b.b += "\nCalled from ";
		haxe_CallStack.itemToString(b,s);
	}
	return b.b;
};
haxe_CallStack.itemToString = function(b,s) {
	switch(s[1]) {
	case 0:
		b.b += "a C function";
		break;
	case 1:
		var m = s[2];
		b.b += "module ";
		if(m == null) b.b += "null"; else b.b += "" + m;
		break;
	case 2:
		var line = s[4];
		var file = s[3];
		var s1 = s[2];
		if(s1 != null) {
			haxe_CallStack.itemToString(b,s1);
			b.b += " (";
		}
		if(file == null) b.b += "null"; else b.b += "" + file;
		b.b += " line ";
		if(line == null) b.b += "null"; else b.b += "" + line;
		if(s1 != null) b.b += ")";
		break;
	case 3:
		var meth = s[3];
		var cname = s[2];
		if(cname == null) b.b += "null"; else b.b += "" + cname;
		b.b += ".";
		if(meth == null) b.b += "null"; else b.b += "" + meth;
		break;
	case 4:
		var n = s[2];
		b.b += "local function #";
		if(n == null) b.b += "null"; else b.b += "" + n;
		break;
	}
};
haxe_CallStack.makeStack = function(s) {
	if(s == null) return []; else if(typeof(s) == "string") {
		var stack = s.split("\n");
		if(stack[0] == "Error") stack.shift();
		var m = [];
		var rie10 = new EReg("^   at ([A-Za-z0-9_. ]+) \\(([^)]+):([0-9]+):([0-9]+)\\)$","");
		var _g = 0;
		while(_g < stack.length) {
			var line = stack[_g];
			++_g;
			if(rie10.match(line)) {
				var path = rie10.matched(1).split(".");
				var meth = path.pop();
				var file = rie10.matched(2);
				var line1 = Std.parseInt(rie10.matched(3));
				m.push(haxe_StackItem.FilePos(meth == "Anonymous function"?haxe_StackItem.LocalFunction():meth == "Global code"?null:haxe_StackItem.Method(path.join("."),meth),file,line1));
			} else m.push(haxe_StackItem.Module(StringTools.trim(line)));
		}
		return m;
	} else return s;
};
var haxe_IMap = function() { };
$hxClasses["haxe.IMap"] = haxe_IMap;
haxe_IMap.__name__ = ["haxe","IMap"];
var haxe__$Int64__$_$_$Int64 = function(high,low) {
	this.high = high;
	this.low = low;
};
$hxClasses["haxe._Int64.___Int64"] = haxe__$Int64__$_$_$Int64;
haxe__$Int64__$_$_$Int64.__name__ = ["haxe","_Int64","___Int64"];
haxe__$Int64__$_$_$Int64.prototype = {
	high: null
	,low: null
	,__class__: haxe__$Int64__$_$_$Int64
};
var haxe_Log = function() { };
$hxClasses["haxe.Log"] = haxe_Log;
haxe_Log.__name__ = ["haxe","Log"];
haxe_Log.trace = function(v,infos) {
	js_Boot.__trace(v,infos);
};
var haxe_Serializer = function() {
	this.buf = new StringBuf();
	this.cache = [];
	this.useCache = haxe_Serializer.USE_CACHE;
	this.useEnumIndex = haxe_Serializer.USE_ENUM_INDEX;
	this.shash = new haxe_ds_StringMap();
	this.scount = 0;
};
$hxClasses["haxe.Serializer"] = haxe_Serializer;
haxe_Serializer.__name__ = ["haxe","Serializer"];
haxe_Serializer.run = function(v) {
	var s = new haxe_Serializer();
	s.serialize(v);
	return s.toString();
};
haxe_Serializer.prototype = {
	buf: null
	,cache: null
	,shash: null
	,scount: null
	,useCache: null
	,useEnumIndex: null
	,toString: function() {
		return this.buf.b;
	}
	,serializeString: function(s) {
		var x = this.shash.get(s);
		if(x != null) {
			this.buf.b += "R";
			if(x == null) this.buf.b += "null"; else this.buf.b += "" + x;
			return;
		}
		this.shash.set(s,this.scount++);
		this.buf.b += "y";
		s = encodeURIComponent(s);
		if(s.length == null) this.buf.b += "null"; else this.buf.b += "" + s.length;
		this.buf.b += ":";
		if(s == null) this.buf.b += "null"; else this.buf.b += "" + s;
	}
	,serializeRef: function(v) {
		var vt = typeof(v);
		var _g1 = 0;
		var _g = this.cache.length;
		while(_g1 < _g) {
			var i = _g1++;
			var ci = this.cache[i];
			if(typeof(ci) == vt && ci == v) {
				this.buf.b += "r";
				if(i == null) this.buf.b += "null"; else this.buf.b += "" + i;
				return true;
			}
		}
		this.cache.push(v);
		return false;
	}
	,serializeFields: function(v) {
		var _g = 0;
		var _g1 = Reflect.fields(v);
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			this.serializeString(f);
			this.serialize(Reflect.field(v,f));
		}
		this.buf.b += "g";
	}
	,serialize: function(v) {
		{
			var _g = Type["typeof"](v);
			switch(_g[1]) {
			case 0:
				this.buf.b += "n";
				break;
			case 1:
				var v1 = v;
				if(v1 == 0) {
					this.buf.b += "z";
					return;
				}
				this.buf.b += "i";
				if(v1 == null) this.buf.b += "null"; else this.buf.b += "" + v1;
				break;
			case 2:
				var v2 = v;
				if(isNaN(v2)) this.buf.b += "k"; else if(!isFinite(v2)) if(v2 < 0) this.buf.b += "m"; else this.buf.b += "p"; else {
					this.buf.b += "d";
					if(v2 == null) this.buf.b += "null"; else this.buf.b += "" + v2;
				}
				break;
			case 3:
				if(v) this.buf.b += "t"; else this.buf.b += "f";
				break;
			case 6:
				var c = _g[2];
				if(c == String) {
					this.serializeString(v);
					return;
				}
				if(this.useCache && this.serializeRef(v)) return;
				switch(c) {
				case Array:
					var ucount = 0;
					this.buf.b += "a";
					var l = v.length;
					var _g1 = 0;
					while(_g1 < l) {
						var i = _g1++;
						if(v[i] == null) ucount++; else {
							if(ucount > 0) {
								if(ucount == 1) this.buf.b += "n"; else {
									this.buf.b += "u";
									if(ucount == null) this.buf.b += "null"; else this.buf.b += "" + ucount;
								}
								ucount = 0;
							}
							this.serialize(v[i]);
						}
					}
					if(ucount > 0) {
						if(ucount == 1) this.buf.b += "n"; else {
							this.buf.b += "u";
							if(ucount == null) this.buf.b += "null"; else this.buf.b += "" + ucount;
						}
					}
					this.buf.b += "h";
					break;
				case List:
					this.buf.b += "l";
					var v3 = v;
					var _g1_head = v3.h;
					var _g1_val = null;
					while(_g1_head != null) {
						var i1;
						_g1_val = _g1_head[0];
						_g1_head = _g1_head[1];
						i1 = _g1_val;
						this.serialize(i1);
					}
					this.buf.b += "h";
					break;
				case Date:
					var d = v;
					this.buf.b += "v";
					this.buf.add(d.getTime());
					break;
				case haxe_ds_StringMap:
					this.buf.b += "b";
					var v4 = v;
					var $it0 = v4.keys();
					while( $it0.hasNext() ) {
						var k = $it0.next();
						this.serializeString(k);
						this.serialize(__map_reserved[k] != null?v4.getReserved(k):v4.h[k]);
					}
					this.buf.b += "h";
					break;
				case haxe_ds_IntMap:
					this.buf.b += "q";
					var v5 = v;
					var $it1 = v5.keys();
					while( $it1.hasNext() ) {
						var k1 = $it1.next();
						this.buf.b += ":";
						if(k1 == null) this.buf.b += "null"; else this.buf.b += "" + k1;
						this.serialize(v5.h[k1]);
					}
					this.buf.b += "h";
					break;
				case haxe_ds_ObjectMap:
					this.buf.b += "M";
					var v6 = v;
					var $it2 = v6.keys();
					while( $it2.hasNext() ) {
						var k2 = $it2.next();
						var id = Reflect.field(k2,"__id__");
						Reflect.deleteField(k2,"__id__");
						this.serialize(k2);
						k2.__id__ = id;
						this.serialize(v6.h[k2.__id__]);
					}
					this.buf.b += "h";
					break;
				case haxe_io_Bytes:
					var v7 = v;
					var i2 = 0;
					var max = v7.length - 2;
					var charsBuf = new StringBuf();
					var b64 = haxe_Serializer.BASE64;
					while(i2 < max) {
						var b1 = v7.get(i2++);
						var b2 = v7.get(i2++);
						var b3 = v7.get(i2++);
						charsBuf.add(b64.charAt(b1 >> 2));
						charsBuf.add(b64.charAt((b1 << 4 | b2 >> 4) & 63));
						charsBuf.add(b64.charAt((b2 << 2 | b3 >> 6) & 63));
						charsBuf.add(b64.charAt(b3 & 63));
					}
					if(i2 == max) {
						var b11 = v7.get(i2++);
						var b21 = v7.get(i2++);
						charsBuf.add(b64.charAt(b11 >> 2));
						charsBuf.add(b64.charAt((b11 << 4 | b21 >> 4) & 63));
						charsBuf.add(b64.charAt(b21 << 2 & 63));
					} else if(i2 == max + 1) {
						var b12 = v7.get(i2++);
						charsBuf.add(b64.charAt(b12 >> 2));
						charsBuf.add(b64.charAt(b12 << 4 & 63));
					}
					var chars = charsBuf.b;
					this.buf.b += "s";
					if(chars.length == null) this.buf.b += "null"; else this.buf.b += "" + chars.length;
					this.buf.b += ":";
					if(chars == null) this.buf.b += "null"; else this.buf.b += "" + chars;
					break;
				default:
					if(this.useCache) this.cache.pop();
					if(v.hxSerialize != null) {
						this.buf.b += "C";
						this.serializeString(Type.getClassName(c));
						if(this.useCache) this.cache.push(v);
						v.hxSerialize(this);
						this.buf.b += "g";
					} else {
						this.buf.b += "c";
						this.serializeString(Type.getClassName(c));
						if(this.useCache) this.cache.push(v);
						this.serializeFields(v);
					}
				}
				break;
			case 4:
				if(js_Boot.__instanceof(v,Class)) {
					var className = Type.getClassName(v);
					this.buf.b += "A";
					this.serializeString(className);
				} else if(js_Boot.__instanceof(v,Enum)) {
					this.buf.b += "B";
					this.serializeString(Type.getEnumName(v));
				} else {
					if(this.useCache && this.serializeRef(v)) return;
					this.buf.b += "o";
					this.serializeFields(v);
				}
				break;
			case 7:
				var e = _g[2];
				if(this.useCache) {
					if(this.serializeRef(v)) return;
					this.cache.pop();
				}
				if(this.useEnumIndex) this.buf.b += "j"; else this.buf.b += "w";
				this.serializeString(Type.getEnumName(e));
				if(this.useEnumIndex) {
					this.buf.b += ":";
					this.buf.b += Std.string(v[1]);
				} else this.serializeString(v[0]);
				this.buf.b += ":";
				var l1 = v.length;
				this.buf.b += Std.string(l1 - 2);
				var _g11 = 2;
				while(_g11 < l1) {
					var i3 = _g11++;
					this.serialize(v[i3]);
				}
				if(this.useCache) this.cache.push(v);
				break;
			case 5:
				throw new js__$Boot_HaxeError("Cannot serialize function");
				break;
			default:
				throw new js__$Boot_HaxeError("Cannot serialize " + Std.string(v));
			}
		}
	}
	,__class__: haxe_Serializer
};
var haxe_Timer = function(time_ms) {
	var me = this;
	this.id = setInterval(function() {
		me.run();
	},time_ms);
};
$hxClasses["haxe.Timer"] = haxe_Timer;
haxe_Timer.__name__ = ["haxe","Timer"];
haxe_Timer.delay = function(f,time_ms) {
	var t = new haxe_Timer(time_ms);
	t.run = function() {
		t.stop();
		f();
	};
	return t;
};
haxe_Timer.measure = function(f,pos) {
	var t0 = new Date().getTime() / 1000;
	var r = f();
	haxe_Log.trace(new Date().getTime() / 1000 - t0 + "s",pos);
	return r;
};
haxe_Timer.stamp = function() {
	return new Date().getTime() / 1000;
};
haxe_Timer.prototype = {
	id: null
	,stop: function() {
		if(this.id == null) return;
		clearInterval(this.id);
		this.id = null;
	}
	,run: function() {
	}
	,__class__: haxe_Timer
};
var haxe_Unserializer = function(buf) {
	this.buf = buf;
	this.length = buf.length;
	this.pos = 0;
	this.scache = [];
	this.cache = [];
	var r = haxe_Unserializer.DEFAULT_RESOLVER;
	if(r == null) {
		r = Type;
		haxe_Unserializer.DEFAULT_RESOLVER = r;
	}
	this.setResolver(r);
};
$hxClasses["haxe.Unserializer"] = haxe_Unserializer;
haxe_Unserializer.__name__ = ["haxe","Unserializer"];
haxe_Unserializer.initCodes = function() {
	var codes = [];
	var _g1 = 0;
	var _g = haxe_Unserializer.BASE64.length;
	while(_g1 < _g) {
		var i = _g1++;
		codes[haxe_Unserializer.BASE64.charCodeAt(i)] = i;
	}
	return codes;
};
haxe_Unserializer.run = function(v) {
	return new haxe_Unserializer(v).unserialize();
};
haxe_Unserializer.prototype = {
	buf: null
	,pos: null
	,length: null
	,cache: null
	,scache: null
	,resolver: null
	,setResolver: function(r) {
		if(r == null) this.resolver = { resolveClass : function(_) {
			return null;
		}, resolveEnum : function(_1) {
			return null;
		}}; else this.resolver = r;
	}
	,get: function(p) {
		return this.buf.charCodeAt(p);
	}
	,readDigits: function() {
		var k = 0;
		var s = false;
		var fpos = this.pos;
		while(true) {
			var c = this.buf.charCodeAt(this.pos);
			if(c != c) break;
			if(c == 45) {
				if(this.pos != fpos) break;
				s = true;
				this.pos++;
				continue;
			}
			if(c < 48 || c > 57) break;
			k = k * 10 + (c - 48);
			this.pos++;
		}
		if(s) k *= -1;
		return k;
	}
	,readFloat: function() {
		var p1 = this.pos;
		while(true) {
			var c = this.buf.charCodeAt(this.pos);
			if(c >= 43 && c < 58 || c == 101 || c == 69) this.pos++; else break;
		}
		return Std.parseFloat(HxOverrides.substr(this.buf,p1,this.pos - p1));
	}
	,unserializeObject: function(o) {
		while(true) {
			if(this.pos >= this.length) throw new js__$Boot_HaxeError("Invalid object");
			if(this.buf.charCodeAt(this.pos) == 103) break;
			var k = this.unserialize();
			if(!(typeof(k) == "string")) throw new js__$Boot_HaxeError("Invalid object key");
			var v = this.unserialize();
			o[k] = v;
		}
		this.pos++;
	}
	,unserializeEnum: function(edecl,tag) {
		if(this.get(this.pos++) != 58) throw new js__$Boot_HaxeError("Invalid enum format");
		var nargs = this.readDigits();
		if(nargs == 0) return Type.createEnum(edecl,tag);
		var args = [];
		while(nargs-- > 0) args.push(this.unserialize());
		return Type.createEnum(edecl,tag,args);
	}
	,unserialize: function() {
		var _g = this.get(this.pos++);
		switch(_g) {
		case 110:
			return null;
		case 116:
			return true;
		case 102:
			return false;
		case 122:
			return 0;
		case 105:
			return this.readDigits();
		case 100:
			return this.readFloat();
		case 121:
			var len = this.readDigits();
			if(this.get(this.pos++) != 58 || this.length - this.pos < len) throw new js__$Boot_HaxeError("Invalid string length");
			var s = HxOverrides.substr(this.buf,this.pos,len);
			this.pos += len;
			s = decodeURIComponent(s.split("+").join(" "));
			this.scache.push(s);
			return s;
		case 107:
			return NaN;
		case 109:
			return -Infinity;
		case 112:
			return Infinity;
		case 97:
			var buf = this.buf;
			var a = [];
			this.cache.push(a);
			while(true) {
				var c = this.buf.charCodeAt(this.pos);
				if(c == 104) {
					this.pos++;
					break;
				}
				if(c == 117) {
					this.pos++;
					var n = this.readDigits();
					a[a.length + n - 1] = null;
				} else a.push(this.unserialize());
			}
			return a;
		case 111:
			var o = { };
			this.cache.push(o);
			this.unserializeObject(o);
			return o;
		case 114:
			var n1 = this.readDigits();
			if(n1 < 0 || n1 >= this.cache.length) throw new js__$Boot_HaxeError("Invalid reference");
			return this.cache[n1];
		case 82:
			var n2 = this.readDigits();
			if(n2 < 0 || n2 >= this.scache.length) throw new js__$Boot_HaxeError("Invalid string reference");
			return this.scache[n2];
		case 120:
			throw new js__$Boot_HaxeError(this.unserialize());
			break;
		case 99:
			var name = this.unserialize();
			var cl = this.resolver.resolveClass(name);
			if(cl == null) throw new js__$Boot_HaxeError("Class not found " + name);
			var o1 = Type.createEmptyInstance(cl);
			this.cache.push(o1);
			this.unserializeObject(o1);
			return o1;
		case 119:
			var name1 = this.unserialize();
			var edecl = this.resolver.resolveEnum(name1);
			if(edecl == null) throw new js__$Boot_HaxeError("Enum not found " + name1);
			var e = this.unserializeEnum(edecl,this.unserialize());
			this.cache.push(e);
			return e;
		case 106:
			var name2 = this.unserialize();
			var edecl1 = this.resolver.resolveEnum(name2);
			if(edecl1 == null) throw new js__$Boot_HaxeError("Enum not found " + name2);
			this.pos++;
			var index = this.readDigits();
			var tag = Type.getEnumConstructs(edecl1)[index];
			if(tag == null) throw new js__$Boot_HaxeError("Unknown enum index " + name2 + "@" + index);
			var e1 = this.unserializeEnum(edecl1,tag);
			this.cache.push(e1);
			return e1;
		case 108:
			var l = new List();
			this.cache.push(l);
			var buf1 = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) l.add(this.unserialize());
			this.pos++;
			return l;
		case 98:
			var h = new haxe_ds_StringMap();
			this.cache.push(h);
			var buf2 = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) {
				var s1 = this.unserialize();
				h.set(s1,this.unserialize());
			}
			this.pos++;
			return h;
		case 113:
			var h1 = new haxe_ds_IntMap();
			this.cache.push(h1);
			var buf3 = this.buf;
			var c1 = this.get(this.pos++);
			while(c1 == 58) {
				var i = this.readDigits();
				h1.set(i,this.unserialize());
				c1 = this.get(this.pos++);
			}
			if(c1 != 104) throw new js__$Boot_HaxeError("Invalid IntMap format");
			return h1;
		case 77:
			var h2 = new haxe_ds_ObjectMap();
			this.cache.push(h2);
			var buf4 = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) {
				var s2 = this.unserialize();
				h2.set(s2,this.unserialize());
			}
			this.pos++;
			return h2;
		case 118:
			var d;
			if(this.buf.charCodeAt(this.pos) >= 48 && this.buf.charCodeAt(this.pos) <= 57 && this.buf.charCodeAt(this.pos + 1) >= 48 && this.buf.charCodeAt(this.pos + 1) <= 57 && this.buf.charCodeAt(this.pos + 2) >= 48 && this.buf.charCodeAt(this.pos + 2) <= 57 && this.buf.charCodeAt(this.pos + 3) >= 48 && this.buf.charCodeAt(this.pos + 3) <= 57 && this.buf.charCodeAt(this.pos + 4) == 45) {
				var s3 = HxOverrides.substr(this.buf,this.pos,19);
				d = HxOverrides.strDate(s3);
				this.pos += 19;
			} else {
				var t = this.readFloat();
				var d1 = new Date();
				d1.setTime(t);
				d = d1;
			}
			this.cache.push(d);
			return d;
		case 115:
			var len1 = this.readDigits();
			var buf5 = this.buf;
			if(this.get(this.pos++) != 58 || this.length - this.pos < len1) throw new js__$Boot_HaxeError("Invalid bytes length");
			var codes = haxe_Unserializer.CODES;
			if(codes == null) {
				codes = haxe_Unserializer.initCodes();
				haxe_Unserializer.CODES = codes;
			}
			var i1 = this.pos;
			var rest = len1 & 3;
			var size;
			size = (len1 >> 2) * 3 + (rest >= 2?rest - 1:0);
			var max = i1 + (len1 - rest);
			var bytes = new haxe_io_Bytes(new ArrayBuffer(size));
			var bpos = 0;
			while(i1 < max) {
				var c11 = codes[StringTools.fastCodeAt(buf5,i1++)];
				var c2 = codes[StringTools.fastCodeAt(buf5,i1++)];
				bytes.set(bpos++,c11 << 2 | c2 >> 4);
				var c3 = codes[StringTools.fastCodeAt(buf5,i1++)];
				bytes.set(bpos++,c2 << 4 | c3 >> 2);
				var c4 = codes[StringTools.fastCodeAt(buf5,i1++)];
				bytes.set(bpos++,c3 << 6 | c4);
			}
			if(rest >= 2) {
				var c12 = codes[StringTools.fastCodeAt(buf5,i1++)];
				var c21 = codes[StringTools.fastCodeAt(buf5,i1++)];
				bytes.set(bpos++,c12 << 2 | c21 >> 4);
				if(rest == 3) {
					var c31 = codes[StringTools.fastCodeAt(buf5,i1++)];
					bytes.set(bpos++,c21 << 4 | c31 >> 2);
				}
			}
			this.pos += len1;
			this.cache.push(bytes);
			return bytes;
		case 67:
			var name3 = this.unserialize();
			var cl1 = this.resolver.resolveClass(name3);
			if(cl1 == null) throw new js__$Boot_HaxeError("Class not found " + name3);
			var o2 = Type.createEmptyInstance(cl1);
			this.cache.push(o2);
			o2.hxUnserialize(this);
			if(this.get(this.pos++) != 103) throw new js__$Boot_HaxeError("Invalid custom data");
			return o2;
		case 65:
			var name4 = this.unserialize();
			var cl2 = this.resolver.resolveClass(name4);
			if(cl2 == null) throw new js__$Boot_HaxeError("Class not found " + name4);
			return cl2;
		case 66:
			var name5 = this.unserialize();
			var e2 = this.resolver.resolveEnum(name5);
			if(e2 == null) throw new js__$Boot_HaxeError("Enum not found " + name5);
			return e2;
		default:
		}
		this.pos--;
		throw new js__$Boot_HaxeError("Invalid char " + this.buf.charAt(this.pos) + " at position " + this.pos);
	}
	,__class__: haxe_Unserializer
};
var haxe_crypto_BaseCode = function(base) {
	var len = base.length;
	var nbits = 1;
	while(len > 1 << nbits) nbits++;
	if(nbits > 8 || len != 1 << nbits) throw new js__$Boot_HaxeError("BaseCode : base length must be a power of two.");
	this.base = base;
	this.nbits = nbits;
};
$hxClasses["haxe.crypto.BaseCode"] = haxe_crypto_BaseCode;
haxe_crypto_BaseCode.__name__ = ["haxe","crypto","BaseCode"];
haxe_crypto_BaseCode.prototype = {
	base: null
	,nbits: null
	,encodeBytes: function(b) {
		var nbits = this.nbits;
		var base = this.base;
		var size = b.length * 8 / nbits | 0;
		var out = new haxe_io_Bytes(new ArrayBuffer(size + (b.length * 8 % nbits == 0?0:1)));
		var buf = 0;
		var curbits = 0;
		var mask = (1 << nbits) - 1;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < nbits) {
				curbits += 8;
				buf <<= 8;
				buf |= b.get(pin++);
			}
			curbits -= nbits;
			out.set(pout++,base.b[buf >> curbits & mask]);
		}
		if(curbits > 0) out.set(pout++,base.b[buf << nbits - curbits & mask]);
		return out;
	}
	,__class__: haxe_crypto_BaseCode
};
var haxe_ds_BalancedTree = function() {
};
$hxClasses["haxe.ds.BalancedTree"] = haxe_ds_BalancedTree;
haxe_ds_BalancedTree.__name__ = ["haxe","ds","BalancedTree"];
haxe_ds_BalancedTree.prototype = {
	root: null
	,set: function(key,value) {
		this.root = this.setLoop(key,value,this.root);
	}
	,get: function(key) {
		var node = this.root;
		while(node != null) {
			var c = this.compare(key,node.key);
			if(c == 0) return node.value;
			if(c < 0) node = node.left; else node = node.right;
		}
		return null;
	}
	,setLoop: function(k,v,node) {
		if(node == null) return new haxe_ds_TreeNode(null,k,v,null);
		var c = this.compare(k,node.key);
		if(c == 0) return new haxe_ds_TreeNode(node.left,k,v,node.right,node == null?0:node._height); else if(c < 0) {
			var nl = this.setLoop(k,v,node.left);
			return this.balance(nl,node.key,node.value,node.right);
		} else {
			var nr = this.setLoop(k,v,node.right);
			return this.balance(node.left,node.key,node.value,nr);
		}
	}
	,balance: function(l,k,v,r) {
		var hl;
		if(l == null) hl = 0; else hl = l._height;
		var hr;
		if(r == null) hr = 0; else hr = r._height;
		if(hl > hr + 2) {
			if((function($this) {
				var $r;
				var _this = l.left;
				$r = _this == null?0:_this._height;
				return $r;
			}(this)) >= (function($this) {
				var $r;
				var _this1 = l.right;
				$r = _this1 == null?0:_this1._height;
				return $r;
			}(this))) return new haxe_ds_TreeNode(l.left,l.key,l.value,new haxe_ds_TreeNode(l.right,k,v,r)); else return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l.left,l.key,l.value,l.right.left),l.right.key,l.right.value,new haxe_ds_TreeNode(l.right.right,k,v,r));
		} else if(hr > hl + 2) {
			if((function($this) {
				var $r;
				var _this2 = r.right;
				$r = _this2 == null?0:_this2._height;
				return $r;
			}(this)) > (function($this) {
				var $r;
				var _this3 = r.left;
				$r = _this3 == null?0:_this3._height;
				return $r;
			}(this))) return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l,k,v,r.left),r.key,r.value,r.right); else return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l,k,v,r.left.left),r.left.key,r.left.value,new haxe_ds_TreeNode(r.left.right,r.key,r.value,r.right));
		} else return new haxe_ds_TreeNode(l,k,v,r,(hl > hr?hl:hr) + 1);
	}
	,compare: function(k1,k2) {
		return Reflect.compare(k1,k2);
	}
	,__class__: haxe_ds_BalancedTree
};
var haxe_ds_TreeNode = function(l,k,v,r,h) {
	if(h == null) h = -1;
	this.left = l;
	this.key = k;
	this.value = v;
	this.right = r;
	if(h == -1) this._height = ((function($this) {
		var $r;
		var _this = $this.left;
		$r = _this == null?0:_this._height;
		return $r;
	}(this)) > (function($this) {
		var $r;
		var _this1 = $this.right;
		$r = _this1 == null?0:_this1._height;
		return $r;
	}(this))?(function($this) {
		var $r;
		var _this2 = $this.left;
		$r = _this2 == null?0:_this2._height;
		return $r;
	}(this)):(function($this) {
		var $r;
		var _this3 = $this.right;
		$r = _this3 == null?0:_this3._height;
		return $r;
	}(this))) + 1; else this._height = h;
};
$hxClasses["haxe.ds.TreeNode"] = haxe_ds_TreeNode;
haxe_ds_TreeNode.__name__ = ["haxe","ds","TreeNode"];
haxe_ds_TreeNode.prototype = {
	left: null
	,right: null
	,key: null
	,value: null
	,_height: null
	,__class__: haxe_ds_TreeNode
};
var haxe_ds_EnumValueMap = function() {
	haxe_ds_BalancedTree.call(this);
};
$hxClasses["haxe.ds.EnumValueMap"] = haxe_ds_EnumValueMap;
haxe_ds_EnumValueMap.__name__ = ["haxe","ds","EnumValueMap"];
haxe_ds_EnumValueMap.__interfaces__ = [haxe_IMap];
haxe_ds_EnumValueMap.__super__ = haxe_ds_BalancedTree;
haxe_ds_EnumValueMap.prototype = $extend(haxe_ds_BalancedTree.prototype,{
	compare: function(k1,k2) {
		var d = k1[1] - k2[1];
		if(d != 0) return d;
		var p1 = k1.slice(2);
		var p2 = k2.slice(2);
		if(p1.length == 0 && p2.length == 0) return 0;
		return this.compareArgs(p1,p2);
	}
	,compareArgs: function(a1,a2) {
		var ld = a1.length - a2.length;
		if(ld != 0) return ld;
		var _g1 = 0;
		var _g = a1.length;
		while(_g1 < _g) {
			var i = _g1++;
			var d = this.compareArg(a1[i],a2[i]);
			if(d != 0) return d;
		}
		return 0;
	}
	,compareArg: function(v1,v2) {
		if(Reflect.isEnumValue(v1) && Reflect.isEnumValue(v2)) return this.compare(v1,v2); else if((v1 instanceof Array) && v1.__enum__ == null && ((v2 instanceof Array) && v2.__enum__ == null)) return this.compareArgs(v1,v2); else return Reflect.compare(v1,v2);
	}
	,__class__: haxe_ds_EnumValueMap
});
var haxe_ds_IntMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.IntMap"] = haxe_ds_IntMap;
haxe_ds_IntMap.__name__ = ["haxe","ds","IntMap"];
haxe_ds_IntMap.__interfaces__ = [haxe_IMap];
haxe_ds_IntMap.prototype = {
	h: null
	,set: function(key,value) {
		this.h[key] = value;
	}
	,remove: function(key) {
		if(!this.h.hasOwnProperty(key)) return false;
		delete(this.h[key]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) a.push(key | 0);
		}
		return HxOverrides.iter(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i];
		}};
	}
	,__class__: haxe_ds_IntMap
};
var haxe_ds_ObjectMap = function() {
	this.h = { };
	this.h.__keys__ = { };
};
$hxClasses["haxe.ds.ObjectMap"] = haxe_ds_ObjectMap;
haxe_ds_ObjectMap.__name__ = ["haxe","ds","ObjectMap"];
haxe_ds_ObjectMap.__interfaces__ = [haxe_IMap];
haxe_ds_ObjectMap.prototype = {
	h: null
	,set: function(key,value) {
		var id = key.__id__ || (key.__id__ = ++haxe_ds_ObjectMap.count);
		this.h[id] = value;
		this.h.__keys__[id] = key;
	}
	,remove: function(key) {
		var id = key.__id__;
		if(this.h.__keys__[id] == null) return false;
		delete(this.h[id]);
		delete(this.h.__keys__[id]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h.__keys__ ) {
		if(this.h.hasOwnProperty(key)) a.push(this.h.__keys__[key]);
		}
		return HxOverrides.iter(a);
	}
	,__class__: haxe_ds_ObjectMap
};
var haxe_ds__$StringMap_StringMapIterator = function(map,keys) {
	this.map = map;
	this.keys = keys;
	this.index = 0;
	this.count = keys.length;
};
$hxClasses["haxe.ds._StringMap.StringMapIterator"] = haxe_ds__$StringMap_StringMapIterator;
haxe_ds__$StringMap_StringMapIterator.__name__ = ["haxe","ds","_StringMap","StringMapIterator"];
haxe_ds__$StringMap_StringMapIterator.prototype = {
	map: null
	,keys: null
	,index: null
	,count: null
	,hasNext: function() {
		return this.index < this.count;
	}
	,next: function() {
		return this.map.get(this.keys[this.index++]);
	}
	,__class__: haxe_ds__$StringMap_StringMapIterator
};
var haxe_ds_StringMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.StringMap"] = haxe_ds_StringMap;
haxe_ds_StringMap.__name__ = ["haxe","ds","StringMap"];
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	h: null
	,rh: null
	,set: function(key,value) {
		if(__map_reserved[key] != null) this.setReserved(key,value); else this.h[key] = value;
	}
	,get: function(key) {
		if(__map_reserved[key] != null) return this.getReserved(key);
		return this.h[key];
	}
	,exists: function(key) {
		if(__map_reserved[key] != null) return this.existsReserved(key);
		return this.h.hasOwnProperty(key);
	}
	,setReserved: function(key,value) {
		if(this.rh == null) this.rh = { };
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) return null; else return this.rh["$" + key];
	}
	,existsReserved: function(key) {
		if(this.rh == null) return false;
		return this.rh.hasOwnProperty("$" + key);
	}
	,remove: function(key) {
		if(__map_reserved[key] != null) {
			key = "$" + key;
			if(this.rh == null || !this.rh.hasOwnProperty(key)) return false;
			delete(this.rh[key]);
			return true;
		} else {
			if(!this.h.hasOwnProperty(key)) return false;
			delete(this.h[key]);
			return true;
		}
	}
	,keys: function() {
		var _this = this.arrayKeys();
		return HxOverrides.iter(_this);
	}
	,arrayKeys: function() {
		var out = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) out.push(key);
		}
		if(this.rh != null) {
			for( var key in this.rh ) {
			if(key.charCodeAt(0) == 36) out.push(key.substr(1));
			}
		}
		return out;
	}
	,iterator: function() {
		return new haxe_ds__$StringMap_StringMapIterator(this,this.arrayKeys());
	}
	,toString: function() {
		var s = new StringBuf();
		s.b += "{";
		var keys = this.arrayKeys();
		var _g1 = 0;
		var _g = keys.length;
		while(_g1 < _g) {
			var i = _g1++;
			var k = keys[i];
			if(k == null) s.b += "null"; else s.b += "" + k;
			s.b += " => ";
			s.add(Std.string(__map_reserved[k] != null?this.getReserved(k):this.h[k]));
			if(i < keys.length) s.b += ", ";
		}
		s.b += "}";
		return s.b;
	}
	,__class__: haxe_ds_StringMap
};
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
$hxClasses["haxe.io.Bytes"] = haxe_io_Bytes;
haxe_io_Bytes.__name__ = ["haxe","io","Bytes"];
haxe_io_Bytes.alloc = function(length) {
	return new haxe_io_Bytes(new ArrayBuffer(length));
};
haxe_io_Bytes.ofString = function(s) {
	var a = [];
	var i = 0;
	while(i < s.length) {
		var c = StringTools.fastCodeAt(s,i++);
		if(55296 <= c && c <= 56319) c = c - 55232 << 10 | StringTools.fastCodeAt(s,i++) & 1023;
		if(c <= 127) a.push(c); else if(c <= 2047) {
			a.push(192 | c >> 6);
			a.push(128 | c & 63);
		} else if(c <= 65535) {
			a.push(224 | c >> 12);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		} else {
			a.push(240 | c >> 18);
			a.push(128 | c >> 12 & 63);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		}
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.ofData = function(b) {
	var hb = b.hxBytes;
	if(hb != null) return hb;
	return new haxe_io_Bytes(b);
};
haxe_io_Bytes.fastGet = function(b,pos) {
	return b.bytes[pos];
};
haxe_io_Bytes.prototype = {
	length: null
	,b: null
	,data: null
	,get: function(pos) {
		return this.b[pos];
	}
	,set: function(pos,v) {
		this.b[pos] = v & 255;
	}
	,blit: function(pos,src,srcpos,len) {
		if(pos < 0 || srcpos < 0 || len < 0 || pos + len > this.length || srcpos + len > src.length) throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		if(srcpos == 0 && len == src.b.byteLength) this.b.set(src.b,pos); else this.b.set(src.b.subarray(srcpos,srcpos + len),pos);
	}
	,fill: function(pos,len,value) {
		var _g = 0;
		while(_g < len) {
			var i = _g++;
			this.set(pos++,value);
		}
	}
	,sub: function(pos,len) {
		if(pos < 0 || len < 0 || pos + len > this.length) throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		return new haxe_io_Bytes(this.b.buffer.slice(pos + this.b.byteOffset,pos + this.b.byteOffset + len));
	}
	,compare: function(other) {
		var b1 = this.b;
		var b2 = other.b;
		var len;
		if(this.length < other.length) len = this.length; else len = other.length;
		var _g = 0;
		while(_g < len) {
			var i = _g++;
			if(b1[i] != b2[i]) return b1[i] - b2[i];
		}
		return this.length - other.length;
	}
	,initData: function() {
		if(this.data == null) this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
	}
	,getDouble: function(pos) {
		if(this.data == null) this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		return this.data.getFloat64(pos,true);
	}
	,getFloat: function(pos) {
		if(this.data == null) this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		return this.data.getFloat32(pos,true);
	}
	,setDouble: function(pos,v) {
		if(this.data == null) this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		this.data.setFloat64(pos,v,true);
	}
	,setFloat: function(pos,v) {
		if(this.data == null) this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		this.data.setFloat32(pos,v,true);
	}
	,getUInt16: function(pos) {
		if(this.data == null) this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		return this.data.getUint16(pos,true);
	}
	,setUInt16: function(pos,v) {
		if(this.data == null) this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		this.data.setUint16(pos,v,true);
	}
	,getInt32: function(pos) {
		if(this.data == null) this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		return this.data.getInt32(pos,true);
	}
	,setInt32: function(pos,v) {
		if(this.data == null) this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		this.data.setInt32(pos,v,true);
	}
	,getInt64: function(pos) {
		var high = this.getInt32(pos + 4);
		var low = this.getInt32(pos);
		var x = new haxe__$Int64__$_$_$Int64(high,low);
		return x;
	}
	,setInt64: function(pos,v) {
		this.setInt32(pos,v.low);
		this.setInt32(pos + 4,v.high);
	}
	,getString: function(pos,len) {
		if(pos < 0 || len < 0 || pos + len > this.length) throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		var s = "";
		var b = this.b;
		var fcc = String.fromCharCode;
		var i = pos;
		var max = pos + len;
		while(i < max) {
			var c = b[i++];
			if(c < 128) {
				if(c == 0) break;
				s += fcc(c);
			} else if(c < 224) s += fcc((c & 63) << 6 | b[i++] & 127); else if(c < 240) {
				var c2 = b[i++];
				s += fcc((c & 31) << 12 | (c2 & 127) << 6 | b[i++] & 127);
			} else {
				var c21 = b[i++];
				var c3 = b[i++];
				var u = (c & 15) << 18 | (c21 & 127) << 12 | (c3 & 127) << 6 | b[i++] & 127;
				s += fcc((u >> 10) + 55232);
				s += fcc(u & 1023 | 56320);
			}
		}
		return s;
	}
	,readString: function(pos,len) {
		return this.getString(pos,len);
	}
	,toString: function() {
		return this.getString(0,this.length);
	}
	,toHex: function() {
		var s_b = "";
		var chars = [];
		var str = "0123456789abcdef";
		var _g1 = 0;
		var _g = str.length;
		while(_g1 < _g) {
			var i = _g1++;
			chars.push(HxOverrides.cca(str,i));
		}
		var _g11 = 0;
		var _g2 = this.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			var c = this.b[i1];
			s_b += String.fromCharCode(chars[c >> 4]);
			s_b += String.fromCharCode(chars[c & 15]);
		}
		return s_b;
	}
	,getData: function() {
		return this.b.bufferValue;
	}
	,__class__: haxe_io_Bytes
};
var haxe_io_Eof = function() { };
$hxClasses["haxe.io.Eof"] = haxe_io_Eof;
haxe_io_Eof.__name__ = ["haxe","io","Eof"];
haxe_io_Eof.prototype = {
	toString: function() {
		return "Eof";
	}
	,__class__: haxe_io_Eof
};
var haxe_io_Error = $hxClasses["haxe.io.Error"] = { __ename__ : ["haxe","io","Error"], __constructs__ : ["Blocked","Overflow","OutsideBounds","Custom"] };
haxe_io_Error.Blocked = ["Blocked",0];
haxe_io_Error.Blocked.toString = $estr;
haxe_io_Error.Blocked.__enum__ = haxe_io_Error;
haxe_io_Error.Overflow = ["Overflow",1];
haxe_io_Error.Overflow.toString = $estr;
haxe_io_Error.Overflow.__enum__ = haxe_io_Error;
haxe_io_Error.OutsideBounds = ["OutsideBounds",2];
haxe_io_Error.OutsideBounds.toString = $estr;
haxe_io_Error.OutsideBounds.__enum__ = haxe_io_Error;
haxe_io_Error.Custom = function(e) { var $x = ["Custom",3,e]; $x.__enum__ = haxe_io_Error; $x.toString = $estr; return $x; };
var haxe_io_FPHelper = function() { };
$hxClasses["haxe.io.FPHelper"] = haxe_io_FPHelper;
haxe_io_FPHelper.__name__ = ["haxe","io","FPHelper"];
haxe_io_FPHelper.i32ToFloat = function(i) {
	var sign = 1 - (i >>> 31 << 1);
	var exp = i >>> 23 & 255;
	var sig = i & 8388607;
	if(sig == 0 && exp == 0) return 0.0;
	return sign * (1 + Math.pow(2,-23) * sig) * Math.pow(2,exp - 127);
};
haxe_io_FPHelper.floatToI32 = function(f) {
	if(f == 0) return 0;
	var af;
	if(f < 0) af = -f; else af = f;
	var exp = Math.floor(Math.log(af) / 0.6931471805599453);
	if(exp < -127) exp = -127; else if(exp > 128) exp = 128;
	var sig = Math.round((af / Math.pow(2,exp) - 1) * 8388608);
	if(sig == 8388608 && exp < 128) {
		sig = 0;
		exp++;
	}
	return (f < 0?-2147483648:0) | exp + 127 << 23 | sig;
};
haxe_io_FPHelper.i64ToDouble = function(low,high) {
	var sign = 1 - (high >>> 31 << 1);
	var exp = (high >> 20 & 2047) - 1023;
	var sig = (high & 1048575) * 4294967296. + (low >>> 31) * 2147483648. + (low & 2147483647);
	if(sig == 0 && exp == -1023) return 0.0;
	return sign * (1.0 + Math.pow(2,-52) * sig) * Math.pow(2,exp);
};
haxe_io_FPHelper.doubleToI64 = function(v) {
	var i64 = haxe_io_FPHelper.i64tmp;
	if(v == 0) {
		i64.low = 0;
		i64.high = 0;
	} else if(!isFinite(v)) {
		if(v > 0) {
			i64.low = 0;
			i64.high = 2146435072;
		} else {
			i64.low = 0;
			i64.high = -1048576;
		}
	} else {
		var av;
		if(v < 0) av = -v; else av = v;
		var exp = Math.floor(Math.log(av) / 0.6931471805599453);
		var sig;
		var v1 = (av / Math.pow(2,exp) - 1) * 4503599627370496.;
		sig = Math.round(v1);
		var sig_l = sig | 0;
		var sig_h = sig / 4294967296.0 | 0;
		i64.low = sig_l;
		i64.high = (v < 0?-2147483648:0) | exp + 1023 << 20 | sig_h;
	}
	return i64;
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	this.message = String(val);
	if(Error.captureStackTrace) Error.captureStackTrace(this,js__$Boot_HaxeError);
};
$hxClasses["js._Boot.HaxeError"] = js__$Boot_HaxeError;
js__$Boot_HaxeError.__name__ = ["js","_Boot","HaxeError"];
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	val: null
	,__class__: js__$Boot_HaxeError
});
var js_Browser = function() { };
$hxClasses["js.Browser"] = js_Browser;
js_Browser.__name__ = ["js","Browser"];
js_Browser.alert = function(v) {
	window.alert(js_Boot.__string_rec(v,""));
};
var js_html__$CanvasElement_CanvasUtil = function() { };
$hxClasses["js.html._CanvasElement.CanvasUtil"] = js_html__$CanvasElement_CanvasUtil;
js_html__$CanvasElement_CanvasUtil.__name__ = ["js","html","_CanvasElement","CanvasUtil"];
js_html__$CanvasElement_CanvasUtil.getContextWebGL = function(canvas,attribs) {
	var _g = 0;
	var _g1 = ["webgl","experimental-webgl"];
	while(_g < _g1.length) {
		var name = _g1[_g];
		++_g;
		var ctx = canvas.getContext(name,attribs);
		if(ctx != null) return ctx;
	}
	return null;
};
var js_html_compat_ArrayBuffer = function(a) {
	if((a instanceof Array) && a.__enum__ == null) {
		this.a = a;
		this.byteLength = a.length;
	} else {
		var len = a;
		this.a = [];
		var _g = 0;
		while(_g < len) {
			var i = _g++;
			this.a[i] = 0;
		}
		this.byteLength = len;
	}
};
$hxClasses["js.html.compat.ArrayBuffer"] = js_html_compat_ArrayBuffer;
js_html_compat_ArrayBuffer.__name__ = ["js","html","compat","ArrayBuffer"];
js_html_compat_ArrayBuffer.sliceImpl = function(begin,end) {
	var u = new Uint8Array(this,begin,end == null?null:end - begin);
	var result = new ArrayBuffer(u.byteLength);
	var resultArray = new Uint8Array(result);
	resultArray.set(u);
	return result;
};
js_html_compat_ArrayBuffer.prototype = {
	byteLength: null
	,a: null
	,slice: function(begin,end) {
		return new js_html_compat_ArrayBuffer(this.a.slice(begin,end));
	}
	,__class__: js_html_compat_ArrayBuffer
};
var js_html_compat_DataView = function(buffer,byteOffset,byteLength) {
	this.buf = buffer;
	if(byteOffset == null) this.offset = 0; else this.offset = byteOffset;
	if(byteLength == null) this.length = buffer.byteLength - this.offset; else this.length = byteLength;
	if(this.offset < 0 || this.length < 0 || this.offset + this.length > buffer.byteLength) throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
};
$hxClasses["js.html.compat.DataView"] = js_html_compat_DataView;
js_html_compat_DataView.__name__ = ["js","html","compat","DataView"];
js_html_compat_DataView.prototype = {
	buf: null
	,offset: null
	,length: null
	,getInt8: function(byteOffset) {
		var v = this.buf.a[this.offset + byteOffset];
		if(v >= 128) return v - 256; else return v;
	}
	,getUint8: function(byteOffset) {
		return this.buf.a[this.offset + byteOffset];
	}
	,getInt16: function(byteOffset,littleEndian) {
		var v = this.getUint16(byteOffset,littleEndian);
		if(v >= 32768) return v - 65536; else return v;
	}
	,getUint16: function(byteOffset,littleEndian) {
		if(littleEndian) return this.buf.a[this.offset + byteOffset] | this.buf.a[this.offset + byteOffset + 1] << 8; else return this.buf.a[this.offset + byteOffset] << 8 | this.buf.a[this.offset + byteOffset + 1];
	}
	,getInt32: function(byteOffset,littleEndian) {
		var p = this.offset + byteOffset;
		var a = this.buf.a[p++];
		var b = this.buf.a[p++];
		var c = this.buf.a[p++];
		var d = this.buf.a[p++];
		if(littleEndian) return a | b << 8 | c << 16 | d << 24; else return d | c << 8 | b << 16 | a << 24;
	}
	,getUint32: function(byteOffset,littleEndian) {
		var v = this.getInt32(byteOffset,littleEndian);
		if(v < 0) return v + 4294967296.; else return v;
	}
	,getFloat32: function(byteOffset,littleEndian) {
		return haxe_io_FPHelper.i32ToFloat(this.getInt32(byteOffset,littleEndian));
	}
	,getFloat64: function(byteOffset,littleEndian) {
		var a = this.getInt32(byteOffset,littleEndian);
		var b = this.getInt32(byteOffset + 4,littleEndian);
		return haxe_io_FPHelper.i64ToDouble(littleEndian?a:b,littleEndian?b:a);
	}
	,setInt8: function(byteOffset,value) {
		if(value < 0) this.buf.a[byteOffset + this.offset] = value + 128 & 255; else this.buf.a[byteOffset + this.offset] = value & 255;
	}
	,setUint8: function(byteOffset,value) {
		this.buf.a[byteOffset + this.offset] = value & 255;
	}
	,setInt16: function(byteOffset,value,littleEndian) {
		this.setUint16(byteOffset,value < 0?value + 65536:value,littleEndian);
	}
	,setUint16: function(byteOffset,value,littleEndian) {
		var p = byteOffset + this.offset;
		if(littleEndian) {
			this.buf.a[p] = value & 255;
			this.buf.a[p++] = value >> 8 & 255;
		} else {
			this.buf.a[p++] = value >> 8 & 255;
			this.buf.a[p] = value & 255;
		}
	}
	,setInt32: function(byteOffset,value,littleEndian) {
		this.setUint32(byteOffset,value,littleEndian);
	}
	,setUint32: function(byteOffset,value,littleEndian) {
		var p = byteOffset + this.offset;
		if(littleEndian) {
			this.buf.a[p++] = value & 255;
			this.buf.a[p++] = value >> 8 & 255;
			this.buf.a[p++] = value >> 16 & 255;
			this.buf.a[p++] = value >>> 24;
		} else {
			this.buf.a[p++] = value >>> 24;
			this.buf.a[p++] = value >> 16 & 255;
			this.buf.a[p++] = value >> 8 & 255;
			this.buf.a[p++] = value & 255;
		}
	}
	,setFloat32: function(byteOffset,value,littleEndian) {
		this.setUint32(byteOffset,haxe_io_FPHelper.floatToI32(value),littleEndian);
	}
	,setFloat64: function(byteOffset,value,littleEndian) {
		var i64 = haxe_io_FPHelper.doubleToI64(value);
		if(littleEndian) {
			this.setUint32(byteOffset,i64.low);
			this.setUint32(byteOffset,i64.high);
		} else {
			this.setUint32(byteOffset,i64.high);
			this.setUint32(byteOffset,i64.low);
		}
	}
	,__class__: js_html_compat_DataView
};
var js_html_compat_Uint8Array = function() { };
$hxClasses["js.html.compat.Uint8Array"] = js_html_compat_Uint8Array;
js_html_compat_Uint8Array.__name__ = ["js","html","compat","Uint8Array"];
js_html_compat_Uint8Array._new = function(arg1,offset,length) {
	var arr;
	if(typeof(arg1) == "number") {
		arr = [];
		var _g = 0;
		while(_g < arg1) {
			var i = _g++;
			arr[i] = 0;
		}
		arr.byteLength = arr.length;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(arr);
	} else if(js_Boot.__instanceof(arg1,js_html_compat_ArrayBuffer)) {
		var buffer = arg1;
		if(offset == null) offset = 0;
		if(length == null) length = buffer.byteLength - offset;
		if(offset == 0) arr = buffer.a; else arr = buffer.a.slice(offset,offset + length);
		arr.byteLength = arr.length;
		arr.byteOffset = offset;
		arr.buffer = buffer;
	} else if((arg1 instanceof Array) && arg1.__enum__ == null) {
		arr = arg1.slice();
		arr.byteLength = arr.length;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(arr);
	} else throw new js__$Boot_HaxeError("TODO " + Std.string(arg1));
	arr.subarray = js_html_compat_Uint8Array._subarray;
	arr.set = js_html_compat_Uint8Array._set;
	return arr;
};
js_html_compat_Uint8Array._set = function(arg,offset) {
	var t = this;
	if(js_Boot.__instanceof(arg.buffer,js_html_compat_ArrayBuffer)) {
		var a = arg;
		if(arg.byteLength + offset > t.byteLength) throw new js__$Boot_HaxeError("set() outside of range");
		var _g1 = 0;
		var _g = arg.byteLength;
		while(_g1 < _g) {
			var i = _g1++;
			t[i + offset] = a[i];
		}
	} else if((arg instanceof Array) && arg.__enum__ == null) {
		var a1 = arg;
		if(a1.length + offset > t.byteLength) throw new js__$Boot_HaxeError("set() outside of range");
		var _g11 = 0;
		var _g2 = a1.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			t[i1 + offset] = a1[i1];
		}
	} else throw new js__$Boot_HaxeError("TODO");
};
js_html_compat_Uint8Array._subarray = function(start,end) {
	var t = this;
	var a = js_html_compat_Uint8Array._new(t.slice(start,end));
	a.byteOffset = start;
	return a;
};
var lime__$backend_html5_HTML5Application = function(parent) {
	this.gameDeviceCache = new haxe_ds_IntMap();
	this.parent = parent;
	this.currentUpdate = 0;
	this.lastUpdate = 0;
	this.nextUpdate = 0;
	this.framePeriod = -1;
	lime_audio_AudioManager.init();
};
$hxClasses["lime._backend.html5.HTML5Application"] = lime__$backend_html5_HTML5Application;
lime__$backend_html5_HTML5Application.__name__ = ["lime","_backend","html5","HTML5Application"];
lime__$backend_html5_HTML5Application.prototype = {
	gameDeviceCache: null
	,currentUpdate: null
	,deltaTime: null
	,framePeriod: null
	,lastUpdate: null
	,nextUpdate: null
	,parent: null
	,convertKeyCode: function(keyCode) {
		if(keyCode >= 65 && keyCode <= 90) return keyCode + 32;
		switch(keyCode) {
		case 16:
			return 1073742049;
		case 17:
			return 1073742048;
		case 18:
			return 1073742050;
		case 20:
			return 1073741881;
		case 33:
			return 1073741899;
		case 34:
			return 1073741902;
		case 35:
			return 1073741901;
		case 36:
			return 1073741898;
		case 37:
			return 1073741904;
		case 38:
			return 1073741906;
		case 39:
			return 1073741903;
		case 40:
			return 1073741905;
		case 45:
			return 1073741897;
		case 46:
			return 127;
		case 96:
			return 1073741922;
		case 97:
			return 1073741913;
		case 98:
			return 1073741914;
		case 99:
			return 1073741915;
		case 100:
			return 1073741916;
		case 101:
			return 1073741917;
		case 102:
			return 1073741918;
		case 103:
			return 1073741919;
		case 104:
			return 1073741920;
		case 105:
			return 1073741921;
		case 106:
			return 1073741909;
		case 107:
			return 1073741911;
		case 109:
			return 1073741910;
		case 110:
			return 1073741923;
		case 111:
			return 1073741908;
		case 112:
			return 1073741882;
		case 113:
			return 1073741883;
		case 114:
			return 1073741884;
		case 115:
			return 1073741885;
		case 116:
			return 1073741886;
		case 117:
			return 1073741887;
		case 118:
			return 1073741888;
		case 119:
			return 1073741889;
		case 120:
			return 1073741890;
		case 121:
			return 1073741891;
		case 122:
			return 1073741892;
		case 123:
			return 1073741893;
		case 124:
			return 1073741928;
		case 125:
			return 1073741929;
		case 126:
			return 1073741930;
		case 144:
			return 1073741907;
		case 186:
			return 59;
		case 187:
			return 61;
		case 188:
			return 44;
		case 189:
			return 45;
		case 190:
			return 46;
		case 191:
			return 47;
		case 192:
			return 96;
		case 219:
			return 91;
		case 220:
			return 92;
		case 221:
			return 93;
		case 222:
			return 39;
		}
		return keyCode;
	}
	,create: function(config) {
	}
	,exec: function() {
		window.addEventListener("keydown",$bind(this,this.handleKeyEvent),false);
		window.addEventListener("keyup",$bind(this,this.handleKeyEvent),false);
		window.addEventListener("focus",$bind(this,this.handleWindowEvent),false);
		window.addEventListener("blur",$bind(this,this.handleWindowEvent),false);
		window.addEventListener("resize",$bind(this,this.handleWindowEvent),false);
		window.addEventListener("beforeunload",$bind(this,this.handleWindowEvent),false);
		
			if (!CanvasRenderingContext2D.prototype.isPointInStroke) {
				CanvasRenderingContext2D.prototype.isPointInStroke = function (path, x, y) {
					return false;
				};
			}
			
			var lastTime = 0;
			var vendors = ['ms', 'moz', 'webkit', 'o'];
			for (var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {
				window.requestAnimationFrame = window[vendors[x]+'RequestAnimationFrame'];
				window.cancelAnimationFrame = window[vendors[x]+'CancelAnimationFrame'] || window[vendors[x]+'CancelRequestAnimationFrame'];
			}
			
			if (!window.requestAnimationFrame)
				window.requestAnimationFrame = function(callback, element) {
					var currTime = new Date().getTime();
					var timeToCall = Math.max(0, 16 - (currTime - lastTime));
					var id = window.setTimeout(function() { callback(currTime + timeToCall); }, 
					  timeToCall);
					lastTime = currTime + timeToCall;
					return id;
				};
			
			if (!window.cancelAnimationFrame)
				window.cancelAnimationFrame = function(id) {
					clearTimeout(id);
				};
			
			window.requestAnimFrame = window.requestAnimationFrame;
		;
		this.lastUpdate = new Date().getTime();
		this.handleApplicationEvent();
		return 0;
	}
	,exit: function() {
	}
	,getFrameRate: function() {
		if(this.framePeriod < 0) return 60; else if(this.framePeriod == 1000) return 0; else return 1000 / this.framePeriod;
	}
	,handleApplicationEvent: function(__) {
		this.updateGameDevices();
		this.currentUpdate = new Date().getTime();
		if(this.currentUpdate >= this.nextUpdate) {
			this.deltaTime = this.currentUpdate - this.lastUpdate;
			this.parent.onUpdate.dispatch(this.deltaTime | 0);
			if(this.parent.__renderers[0] != null) {
				this.parent.__renderers[0].onRender.dispatch();
				this.parent.__renderers[0].flip();
			}
			if(this.framePeriod < 0) {
				this.nextUpdate = this.currentUpdate;
				this.nextUpdate = this.currentUpdate;
			} else this.nextUpdate = this.currentUpdate + this.framePeriod;
			this.lastUpdate = this.currentUpdate;
		}
		window.requestAnimationFrame($bind(this,this.handleApplicationEvent));
	}
	,handleKeyEvent: function(event) {
		if(this.parent.__windows[0] != null) {
			var keyCode = this.convertKeyCode(event.keyCode != null?event.keyCode:event.which);
			var modifier;
			modifier = (event.shiftKey?3:0) | (event.ctrlKey?192:0) | (event.altKey?768:0) | (event.metaKey?3072:0);
			if(event.type == "keydown") {
				this.parent.__windows[0].onKeyDown.dispatch(keyCode,modifier);
				if(this.parent.__windows[0].onKeyDown.canceled) event.preventDefault();
			} else {
				this.parent.__windows[0].onKeyUp.dispatch(keyCode,modifier);
				if(this.parent.__windows[0].onKeyUp.canceled) event.preventDefault();
			}
		}
	}
	,handleWindowEvent: function(event) {
		if(this.parent.__windows[0] != null) {
			var _g = event.type;
			switch(_g) {
			case "focus":
				this.parent.__windows[0].onFocusIn.dispatch();
				this.parent.__windows[0].onActivate.dispatch();
				break;
			case "blur":
				this.parent.__windows[0].onFocusOut.dispatch();
				this.parent.__windows[0].onDeactivate.dispatch();
				break;
			case "resize":
				var cacheWidth = this.parent.__windows[0].__width;
				var cacheHeight = this.parent.__windows[0].__height;
				this.parent.__windows[0].backend.handleResize();
				if(this.parent.__windows[0].__width != cacheWidth || this.parent.__windows[0].__height != cacheHeight) this.parent.__windows[0].onResize.dispatch(this.parent.__windows[0].__width,this.parent.__windows[0].__height);
				break;
			case "beforeunload":
				this.parent.__windows[0].onClose.dispatch();
				break;
			}
		}
	}
	,setFrameRate: function(value) {
		if(value >= 60) this.framePeriod = -1; else if(value > 0) this.framePeriod = 1000 / value; else this.framePeriod = 1000;
		return value;
	}
	,updateGameDevices: function() {
		var devices = lime_ui_Joystick.__getDeviceData();
		if(devices == null) return;
		var id;
		var gamepad;
		var joystick;
		var data;
		var cache;
		var _g1 = 0;
		var _g = devices.length;
		while(_g1 < _g) {
			var i = _g1++;
			id = i;
			data = devices[id];
			if(data == null) continue;
			if(!this.gameDeviceCache.h.hasOwnProperty(id)) {
				cache = new lime__$backend_html5_GameDeviceData();
				cache.id = id;
				cache.connected = data.connected;
				var _g3 = 0;
				var _g2 = data.buttons.length;
				while(_g3 < _g2) {
					var i1 = _g3++;
					cache.buttons.push(data.buttons[i1].value);
				}
				var _g31 = 0;
				var _g21 = data.axes.length;
				while(_g31 < _g21) {
					var i2 = _g31++;
					cache.axes.push(data.axes[i2]);
				}
				if(data.mapping == "standard") cache.isGamepad = true;
				this.gameDeviceCache.h[id] = cache;
				if(data.connected) {
					lime_ui_Joystick.__connect(id);
					if(cache.isGamepad) lime_ui_Gamepad.__connect(id);
				}
			}
			cache = this.gameDeviceCache.h[id];
			joystick = lime_ui_Joystick.devices.h[id];
			gamepad = lime_ui_Gamepad.devices.h[id];
			if(data.connected) {
				var button;
				var value;
				var _g32 = 0;
				var _g22 = data.buttons.length;
				while(_g32 < _g22) {
					var i3 = _g32++;
					value = data.buttons[i3].value;
					if(value != cache.buttons[i3]) {
						if(i3 == 6) {
							joystick.onAxisMove.dispatch(data.axes.length,value);
							if(gamepad != null) gamepad.onAxisMove.dispatch(4,value);
						} else if(i3 == 7) {
							joystick.onAxisMove.dispatch(data.axes.length + 1,value);
							if(gamepad != null) gamepad.onAxisMove.dispatch(5,value);
						} else {
							if(value > 0) joystick.onButtonDown.dispatch(i3); else joystick.onButtonUp.dispatch(i3);
							if(gamepad != null) {
								switch(i3) {
								case 0:
									button = 0;
									break;
								case 1:
									button = 1;
									break;
								case 2:
									button = 2;
									break;
								case 3:
									button = 3;
									break;
								case 4:
									button = 9;
									break;
								case 5:
									button = 10;
									break;
								case 8:
									button = 4;
									break;
								case 9:
									button = 6;
									break;
								case 10:
									button = 7;
									break;
								case 11:
									button = 8;
									break;
								case 12:
									button = 11;
									break;
								case 13:
									button = 12;
									break;
								case 14:
									button = 13;
									break;
								case 15:
									button = 14;
									break;
								case 16:
									button = 5;
									break;
								default:
									continue;
								}
								if(value > 0) gamepad.onButtonDown.dispatch(button); else gamepad.onButtonUp.dispatch(button);
							}
						}
						cache.buttons[i3] = value;
					}
				}
				var _g33 = 0;
				var _g23 = data.axes.length;
				while(_g33 < _g23) {
					var i4 = _g33++;
					if(data.axes[i4] != cache.axes[i4]) {
						joystick.onAxisMove.dispatch(i4,data.axes[i4]);
						if(gamepad != null) gamepad.onAxisMove.dispatch(i4,data.axes[i4]);
						cache.axes[i4] = data.axes[i4];
					}
				}
			} else if(cache.connected) {
				cache.connected = false;
				lime_ui_Joystick.__disconnect(id);
				lime_ui_Gamepad.__disconnect(id);
			}
		}
	}
	,__class__: lime__$backend_html5_HTML5Application
};
var lime__$backend_html5_GameDeviceData = function() {
	this.connected = true;
	this.buttons = [];
	this.axes = [];
};
$hxClasses["lime._backend.html5.GameDeviceData"] = lime__$backend_html5_GameDeviceData;
lime__$backend_html5_GameDeviceData.__name__ = ["lime","_backend","html5","GameDeviceData"];
lime__$backend_html5_GameDeviceData.prototype = {
	connected: null
	,id: null
	,isGamepad: null
	,buttons: null
	,axes: null
	,__class__: lime__$backend_html5_GameDeviceData
};
var lime__$backend_html5_HTML5AudioSource = function(parent) {
	this.parent = parent;
	this.gain = 1;
	this.position = new lime_math_Vector4();
};
$hxClasses["lime._backend.html5.HTML5AudioSource"] = lime__$backend_html5_HTML5AudioSource;
lime__$backend_html5_HTML5AudioSource.__name__ = ["lime","_backend","html5","HTML5AudioSource"];
lime__$backend_html5_HTML5AudioSource.prototype = {
	completed: null
	,gain: null
	,id: null
	,length: null
	,loops: null
	,parent: null
	,playing: null
	,position: null
	,dispose: function() {
	}
	,init: function() {
	}
	,play: function() {
		if(this.playing || this.parent.buffer == null) return;
		this.playing = true;
		var time = this.getCurrentTime();
		this.completed = false;
		this.id = this.parent.buffer.__srcHowl.play();
		this.setGain(this.parent.get_gain());
		this.setPosition(this.parent.get_position());
		this.parent.buffer.__srcHowl.on("end",$bind(this,this.howl_onEnd),this.id);
		this.setCurrentTime(time);
	}
	,pause: function() {
		this.playing = false;
		this.parent.buffer.__srcHowl.pause(this.id);
	}
	,stop: function() {
		this.playing = false;
		this.parent.buffer.__srcHowl.stop(this.id);
	}
	,howl_onEnd: function() {
		this.playing = false;
		if(this.loops > 0) {
			this.loops--;
			this.stop();
			this.play();
			return;
		} else this.parent.buffer.__srcHowl.stop(this.id);
		this.completed = true;
		this.parent.onComplete.dispatch();
	}
	,getCurrentTime: function() {
		if(this.completed) return this.getLength(); else {
			var time = Std["int"](this.parent.buffer.__srcHowl.seek(this.id) * 1000) - this.parent.offset;
			if(time < 0) return 0;
			return time;
		}
	}
	,setCurrentTime: function(value) {
		if(this.parent.buffer != null) {
			var pos = (value + this.parent.offset) / 1000;
			if(pos < 0) pos = 0;
			this.parent.buffer.__srcHowl.seek(pos,this.id);
		}
		return value;
	}
	,getGain: function() {
		return this.gain;
	}
	,setGain: function(value) {
		if(this.parent.buffer != null) this.parent.buffer.__srcHowl.volume(value,this.id);
		return this.gain = value;
	}
	,getLength: function() {
		if(this.length != 0) return this.length;
		return Std["int"](this.parent.buffer.__srcHowl.duration() * 1000);
	}
	,setLength: function(value) {
		return this.length = value;
	}
	,getLoops: function() {
		return this.loops;
	}
	,setLoops: function(value) {
		return this.loops = value;
	}
	,getPosition: function() {
		return this.position;
	}
	,setPosition: function(value) {
		this.position.x = value.x;
		this.position.y = value.y;
		this.position.z = value.z;
		this.position.w = value.w;
		return this.position;
	}
	,__class__: lime__$backend_html5_HTML5AudioSource
};
var lime__$backend_html5_HTML5HTTPRequest = function() {
};
$hxClasses["lime._backend.html5.HTML5HTTPRequest"] = lime__$backend_html5_HTML5HTTPRequest;
lime__$backend_html5_HTML5HTTPRequest.__name__ = ["lime","_backend","html5","HTML5HTTPRequest"];
lime__$backend_html5_HTML5HTTPRequest.prototype = {
	binary: null
	,parent: null
	,request: null
	,cancel: function() {
		if(this.request != null) this.request.abort();
	}
	,init: function(parent) {
		this.parent = parent;
	}
	,load: function(uri,progress,readyStateChange) {
		this.request = new XMLHttpRequest();
		this.request.addEventListener("progress",progress,false);
		this.request.onreadystatechange = readyStateChange;
		var query = "";
		if(this.parent.data == null) {
			var $it0 = this.parent.formData.keys();
			while( $it0.hasNext() ) {
				var key = $it0.next();
				if(query.length > 0) query += "&";
				query += encodeURIComponent(key) + "=" + StringTools.urlEncode(Std.string(this.parent.formData.get(key)));
			}
			if(this.parent.method == "GET" && query != "") {
				if(uri.indexOf("?") > -1) uri += "&" + query; else uri += "?" + query;
				query = "";
			}
		}
		this.request.open(Std.string(this.parent.method),uri,true);
		if(this.parent.timeout > 0) this.request.timeout = this.parent.timeout;
		if(this.binary) this.request.responseType = "arraybuffer";
		var hasContentType = false;
		var _g = 0;
		var _g1 = this.parent.headers;
		while(_g < _g1.length) {
			var header = _g1[_g];
			++_g;
			if(header.name == "Content-Type") hasContentType = true;
			this.request.setRequestHeader(header.name,header.value);
		}
		if(!hasContentType) this.request.setRequestHeader("Content-Type",this.parent.contentType);
		if(this.parent.data != null) this.request.send(this.parent.data.b.bufferValue); else this.request.send(query);
	}
	,loadData: function(uri) {
		var _g = this;
		var promise = new lime_app_Promise();
		var progress = function(event) {
			promise.progress(event.loaded,event.total);
		};
		var readyStateChange = function(event1) {
			if(_g.request.readyState != 4) return;
			if(_g.request.status != null && _g.request.status >= 200 && _g.request.status <= 400) {
				var bytes;
				if(_g.request.responseType == "") bytes = haxe_io_Bytes.ofString(_g.request.responseText); else bytes = haxe_io_Bytes.ofData(_g.request.response);
				_g.processResponse();
				promise.complete(bytes);
			} else {
				_g.processResponse();
				promise.error(_g.request.status);
			}
			_g.request = null;
		};
		this.binary = true;
		this.load(uri,progress,readyStateChange);
		return promise.future;
	}
	,loadText: function(uri) {
		var _g = this;
		var promise = new lime_app_Promise();
		var progress = function(event) {
			promise.progress(event.loaded,event.total);
		};
		var readyStateChange = function(event1) {
			if(_g.request.readyState != 4) return;
			if(_g.request.status != null && _g.request.status >= 200 && _g.request.status <= 400) {
				_g.processResponse();
				promise.complete(_g.request.responseText);
			} else {
				_g.processResponse();
				promise.error(_g.request.status);
			}
			_g.request = null;
		};
		this.binary = false;
		this.load(uri,progress,readyStateChange);
		return promise.future;
	}
	,processResponse: function() {
		if(this.parent.enableResponseHeaders) {
			this.parent.responseHeaders = [];
			var name;
			var value;
			var _g = 0;
			var _g1 = this.request.getAllResponseHeaders().split("\n");
			while(_g < _g1.length) {
				var line = _g1[_g];
				++_g;
				name = StringTools.trim((function($this) {
					var $r;
					var len = line.indexOf(":");
					$r = HxOverrides.substr(line,0,len);
					return $r;
				}(this)));
				value = StringTools.trim((function($this) {
					var $r;
					var pos = line.indexOf(":") + 1;
					$r = HxOverrides.substr(line,pos,null);
					return $r;
				}(this)));
				if(name != "") this.parent.responseHeaders.push(new lime_net_HTTPRequestHeader(name,value));
			}
		}
		this.parent.responseStatus = this.request.status;
	}
	,__class__: lime__$backend_html5_HTML5HTTPRequest
};
var lime__$backend_html5_HTML5Mouse = function() { };
$hxClasses["lime._backend.html5.HTML5Mouse"] = lime__$backend_html5_HTML5Mouse;
lime__$backend_html5_HTML5Mouse.__name__ = ["lime","_backend","html5","HTML5Mouse"];
lime__$backend_html5_HTML5Mouse.hide = function() {
	if(!lime__$backend_html5_HTML5Mouse.__hidden) {
		lime__$backend_html5_HTML5Mouse.__hidden = true;
		var _g = 0;
		var _g1 = lime_app_Application.current.__windows;
		while(_g < _g1.length) {
			var $window = _g1[_g];
			++_g;
			$window.backend.element.style.cursor = "none";
		}
	}
};
lime__$backend_html5_HTML5Mouse.show = function() {
	if(lime__$backend_html5_HTML5Mouse.__hidden) {
		lime__$backend_html5_HTML5Mouse.__hidden = false;
		var cacheValue = lime__$backend_html5_HTML5Mouse.__cursor;
		lime__$backend_html5_HTML5Mouse.__cursor = null;
		lime__$backend_html5_HTML5Mouse.set_cursor(cacheValue);
	}
};
lime__$backend_html5_HTML5Mouse.warp = function(x,y,window) {
};
lime__$backend_html5_HTML5Mouse.get_cursor = function() {
	if(lime__$backend_html5_HTML5Mouse.__cursor == null) return lime_ui_MouseCursor.DEFAULT;
	return lime__$backend_html5_HTML5Mouse.__cursor;
};
lime__$backend_html5_HTML5Mouse.set_cursor = function(value) {
	if(lime__$backend_html5_HTML5Mouse.__cursor != value) {
		if(!lime__$backend_html5_HTML5Mouse.__hidden) {
			var _g = 0;
			var _g1 = lime_app_Application.current.__windows;
			while(_g < _g1.length) {
				var $window = _g1[_g];
				++_g;
				switch(value[1]) {
				case 0:
					$window.backend.element.style.cursor = "default";
					break;
				case 1:
					$window.backend.element.style.cursor = "crosshair";
					break;
				case 3:
					$window.backend.element.style.cursor = "move";
					break;
				case 4:
					$window.backend.element.style.cursor = "pointer";
					break;
				case 5:
					$window.backend.element.style.cursor = "nesw-resize";
					break;
				case 6:
					$window.backend.element.style.cursor = "ns-resize";
					break;
				case 7:
					$window.backend.element.style.cursor = "nwse-resize";
					break;
				case 8:
					$window.backend.element.style.cursor = "ew-resize";
					break;
				case 9:
					$window.backend.element.style.cursor = "text";
					break;
				case 10:
					$window.backend.element.style.cursor = "wait";
					break;
				case 11:
					$window.backend.element.style.cursor = "wait";
					break;
				default:
					$window.backend.element.style.cursor = "auto";
				}
			}
		}
		lime__$backend_html5_HTML5Mouse.__cursor = value;
	}
	return lime__$backend_html5_HTML5Mouse.__cursor;
};
lime__$backend_html5_HTML5Mouse.get_lock = function() {
	return false;
};
lime__$backend_html5_HTML5Mouse.set_lock = function(value) {
	return value;
};
var lime__$backend_html5_HTML5Renderer = function(parent) {
	this.parent = parent;
};
$hxClasses["lime._backend.html5.HTML5Renderer"] = lime__$backend_html5_HTML5Renderer;
lime__$backend_html5_HTML5Renderer.__name__ = ["lime","_backend","html5","HTML5Renderer"];
lime__$backend_html5_HTML5Renderer.prototype = {
	parent: null
	,create: function() {
		this.createContext();
		{
			var _g = this.parent.context;
			switch(_g[1]) {
			case 0:
				this.parent.window.backend.canvas.addEventListener("webglcontextlost",$bind(this,this.handleEvent),false);
				this.parent.window.backend.canvas.addEventListener("webglcontextrestored",$bind(this,this.handleEvent),false);
				break;
			default:
			}
		}
	}
	,createContext: function() {
		if(this.parent.window.backend.div != null) {
			this.parent.context = lime_graphics_RenderContext.DOM(this.parent.window.backend.div);
			this.parent.type = lime_graphics_RendererType.DOM;
		} else if(this.parent.window.backend.canvas != null) {
			var webgl = null;
			var options = { alpha : Object.prototype.hasOwnProperty.call(this.parent.window.config,"background") && this.parent.window.config.background == null?true:false, antialias : Object.prototype.hasOwnProperty.call(this.parent.window.config,"antialiasing")?this.parent.window.config.antialiasing > 0:false, depth : Object.prototype.hasOwnProperty.call(this.parent.window.config,"depthBuffer")?this.parent.window.config.depthBuffer:true, premultipliedAlpha : true, stencil : Object.prototype.hasOwnProperty.call(this.parent.window.config,"stencilBuffer")?this.parent.window.config.stencilBuffer:false, preserveDrawingBuffer : false};
			var _g = 0;
			var _g1 = ["webgl2","webgl","experimental-webgl"];
			while(_g < _g1.length) {
				var name = _g1[_g];
				++_g;
				webgl = this.parent.window.backend.canvas.getContext(name,options);
				if(webgl != null) break;
			}
			if(webgl == null) {
				this.parent.context = lime_graphics_RenderContext.CANVAS(this.parent.window.backend.canvas.getContext("2d"));
				this.parent.type = lime_graphics_RendererType.CANVAS;
			} else {
				lime_graphics_opengl_GL.context = webgl;
				this.parent.context = lime_graphics_RenderContext.OPENGL(lime_graphics_opengl_GL.context);
				this.parent.type = lime_graphics_RendererType.OPENGL;
			}
		}
	}
	,flip: function() {
	}
	,handleEvent: function(event) {
		var _g = event.type;
		switch(_g) {
		case "webglcontextlost":
			event.preventDefault();
			this.parent.context = null;
			this.parent.onContextLost.dispatch();
			break;
		case "webglcontextrestored":
			this.createContext();
			this.parent.onContextRestored.dispatch(this.parent.context);
			break;
		default:
		}
	}
	,readPixels: function(rect) {
		if(this.parent.window.backend.canvas != null) {
			if(rect == null) rect = new lime_math_Rectangle(0,0,this.parent.window.backend.canvas.width,this.parent.window.backend.canvas.height); else rect.__contract(0,0,this.parent.window.backend.canvas.width,this.parent.window.backend.canvas.height);
			if(rect.width > 0 && rect.height > 0) {
				var canvas = window.document.createElement("canvas");
				canvas.width = rect.width | 0;
				canvas.height = rect.height | 0;
				var context = canvas.getContext("2d");
				context.drawImage(this.parent.window.backend.canvas,-rect.x,-rect.y);
				return lime_graphics_Image.fromCanvas(canvas);
			}
		}
		return null;
	}
	,render: function() {
	}
	,__class__: lime__$backend_html5_HTML5Renderer
};
var lime__$backend_html5_HTML5Window = function(parent) {
	this.unusedTouchesPool = new List();
	this.scale = 1.0;
	this.currentTouches = new haxe_ds_IntMap();
	this.parent = parent;
	if(parent.config != null && Object.prototype.hasOwnProperty.call(parent.config,"element")) this.element = parent.config.element;
	if(parent.config != null && Object.prototype.hasOwnProperty.call(parent.config,"allowHighDPI") && parent.config.allowHighDPI) this.scale = window.devicePixelRatio;
	parent.__scale = this.scale;
	this.cacheMouseX = 0;
	this.cacheMouseY = 0;
};
$hxClasses["lime._backend.html5.HTML5Window"] = lime__$backend_html5_HTML5Window;
lime__$backend_html5_HTML5Window.__name__ = ["lime","_backend","html5","HTML5Window"];
lime__$backend_html5_HTML5Window.prototype = {
	canvas: null
	,div: null
	,element: null
	,cacheMouseX: null
	,cacheMouseY: null
	,currentTouches: null
	,enableTextEvents: null
	,parent: null
	,primaryTouch: null
	,scale: null
	,setHeight: null
	,setWidth: null
	,unusedTouchesPool: null
	,alert: function(message,title) {
		if(message != null) js_Browser.alert(message);
	}
	,close: function() {
		this.parent.application.removeWindow(this.parent);
	}
	,create: function(application) {
		this.setWidth = this.parent.__width;
		this.setHeight = this.parent.__height;
		this.parent.id = lime__$backend_html5_HTML5Window.windowID++;
		if(js_Boot.__instanceof(this.element,HTMLCanvasElement)) this.canvas = this.element; else this.canvas = window.document.createElement("canvas");
		if(this.canvas != null) {
			var style = this.canvas.style;
			style.setProperty("-webkit-transform","translateZ(0)",null);
			style.setProperty("transform","translateZ(0)",null);
		} else if(this.div != null) {
			var style1 = this.div.style;
			style1.setProperty("-webkit-transform","translate3D(0,0,0)",null);
			style1.setProperty("transform","translate3D(0,0,0)",null);
			style1.position = "relative";
			style1.overflow = "hidden";
			style1.setProperty("-webkit-user-select","none",null);
			style1.setProperty("-moz-user-select","none",null);
			style1.setProperty("-ms-user-select","none",null);
			style1.setProperty("-o-user-select","none",null);
		}
		if(this.parent.__width == 0 && this.parent.__height == 0) {
			if(this.element != null) {
				this.parent.set_width(this.element.clientWidth);
				this.parent.set_height(this.element.clientHeight);
			} else {
				this.parent.set_width(window.innerWidth);
				this.parent.set_height(window.innerHeight);
			}
			this.parent.set_fullscreen(true);
		}
		if(this.canvas != null) {
			this.canvas.width = Math.round(this.parent.__width * this.scale);
			this.canvas.height = Math.round(this.parent.__height * this.scale);
			this.canvas.style.width = this.parent.__width + "px";
			this.canvas.style.height = this.parent.__height + "px";
		} else {
			this.div.style.width = this.parent.__width + "px";
			this.div.style.height = this.parent.__height + "px";
		}
		this.handleResize();
		if(this.element != null) {
			if(this.canvas != null) {
				if(this.element != this.canvas) this.element.appendChild(this.canvas);
			} else this.element.appendChild(this.div);
			var events = ["mousedown","mouseenter","mouseleave","mousemove","mouseup","wheel"];
			var _g = 0;
			while(_g < events.length) {
				var event = events[_g];
				++_g;
				this.element.addEventListener(event,$bind(this,this.handleMouseEvent),true);
			}
			window.document.addEventListener("dragstart",function(e) {
				if(e.target.nodeName.toLowerCase() == "img") {
					e.preventDefault();
					return false;
				}
				return true;
			},false);
			this.element.addEventListener("contextmenu",$bind(this,this.handleContextMenuEvent),true);
			this.element.addEventListener("touchstart",$bind(this,this.handleTouchEvent),true);
			this.element.addEventListener("touchmove",$bind(this,this.handleTouchEvent),true);
			this.element.addEventListener("touchend",$bind(this,this.handleTouchEvent),true);
			this.element.addEventListener("gamepadconnected",$bind(this,this.handleGamepadEvent),true);
			this.element.addEventListener("gamepaddisconnected",$bind(this,this.handleGamepadEvent),true);
		}
	}
	,focus: function() {
	}
	,getDisplay: function() {
		return lime_system_System.getDisplay(0);
	}
	,getEnableTextEvents: function() {
		return this.enableTextEvents;
	}
	,handleContextMenuEvent: function(event) {
		if(this.parent.onMouseUp.canceled) event.preventDefault();
	}
	,handleFocusEvent: function(event) {
		if(this.enableTextEvents) haxe_Timer.delay(function() {
			lime__$backend_html5_HTML5Window.textInput.focus();
		},20);
	}
	,handleGamepadEvent: function(event) {
		var _g = event.type;
		switch(_g) {
		case "gamepadconnected":
			lime_ui_Joystick.__connect(event.gamepad.index);
			if(event.gamepad.mapping == "standard") lime_ui_Gamepad.__connect(event.gamepad.index);
			break;
		case "gamepaddisconnected":
			lime_ui_Joystick.__disconnect(event.gamepad.index);
			lime_ui_Gamepad.__disconnect(event.gamepad.index);
			break;
		default:
		}
	}
	,handleCutOrCopyEvent: function(event) {
		event.clipboardData.setData("text/plain",lime_system_Clipboard.get_text());
		event.preventDefault();
	}
	,handlePasteEvent: function(event) {
		if(event.clipboardData.types.indexOf("text/plain") > -1) {
			var text = lime_system_Clipboard.set_text(event.clipboardData.getData("text/plain"));
			this.parent.onTextInput.dispatch(text);
			event.preventDefault();
		}
	}
	,handleInputEvent: function(event) {
		if(lime__$backend_html5_HTML5Window.textInput.value != lime__$backend_html5_HTML5Window.dummyCharacter) {
			if(lime__$backend_html5_HTML5Window.textInput.value.charAt(0) == lime__$backend_html5_HTML5Window.dummyCharacter) this.parent.onTextInput.dispatch(HxOverrides.substr(lime__$backend_html5_HTML5Window.textInput.value,1,null)); else this.parent.onTextInput.dispatch(lime__$backend_html5_HTML5Window.textInput.value);
			lime__$backend_html5_HTML5Window.textInput.value = lime__$backend_html5_HTML5Window.dummyCharacter;
		}
	}
	,handleMouseEvent: function(event) {
		var x = 0.0;
		var y = 0.0;
		if(event.type != "wheel") {
			if(this.element != null) {
				if(this.canvas != null) {
					var rect = this.canvas.getBoundingClientRect();
					x = (event.clientX - rect.left) * (this.parent.__width / rect.width);
					y = (event.clientY - rect.top) * (this.parent.__height / rect.height);
				} else if(this.div != null) {
					var rect1 = this.div.getBoundingClientRect();
					x = event.clientX - rect1.left;
					y = event.clientY - rect1.top;
				} else {
					var rect2 = this.element.getBoundingClientRect();
					x = (event.clientX - rect2.left) * (this.parent.__width / rect2.width);
					y = (event.clientY - rect2.top) * (this.parent.__height / rect2.height);
				}
			} else {
				x = event.clientX;
				y = event.clientY;
			}
			var _g = event.type;
			switch(_g) {
			case "mousedown":
				this.parent.onMouseDown.dispatch(x,y,event.button);
				if(this.parent.onMouseDown.canceled) event.preventDefault();
				break;
			case "mouseenter":
				if(event.target == this.element) {
					this.parent.onEnter.dispatch();
					if(this.parent.onEnter.canceled) event.preventDefault();
				}
				break;
			case "mouseleave":
				if(event.target == this.element) {
					this.parent.onLeave.dispatch();
					if(this.parent.onLeave.canceled) event.preventDefault();
				}
				break;
			case "mouseup":
				this.parent.onMouseUp.dispatch(x,y,event.button);
				if(this.parent.onMouseUp.canceled) event.preventDefault();
				break;
			case "mousemove":
				if(x != this.cacheMouseX || y != this.cacheMouseY) {
					this.parent.onMouseMove.dispatch(x,y);
					this.parent.onMouseMoveRelative.dispatch(x - this.cacheMouseX,y - this.cacheMouseY);
					if(this.parent.onMouseMove.canceled || this.parent.onMouseMoveRelative.canceled) event.preventDefault();
				}
				break;
			default:
			}
			this.cacheMouseX = x;
			this.cacheMouseY = y;
		} else {
			this.parent.onMouseWheel.dispatch(event.deltaX,-event.deltaY);
			if(this.parent.onMouseWheel.canceled) event.preventDefault();
		}
	}
	,handleResize: function() {
		this.primaryTouch = null;
		var stretch = this.parent.__fullscreen || this.setWidth == 0 && this.setHeight == 0;
		if(this.element != null && (this.div == null || this.div != null && stretch)) {
			if(stretch) {
				if(this.parent.__width != this.element.clientWidth || this.parent.__height != this.element.clientHeight) {
					this.parent.set_width(this.element.clientWidth);
					this.parent.set_height(this.element.clientHeight);
					if(this.canvas != null) {
						if(this.element != this.canvas) {
							this.canvas.width = Math.round(this.element.clientWidth * this.scale);
							this.canvas.height = Math.round(this.element.clientHeight * this.scale);
							this.canvas.style.width = this.element.clientWidth + "px";
							this.canvas.style.height = this.element.clientHeight + "px";
						}
					} else {
						this.div.style.width = this.element.clientWidth + "px";
						this.div.style.height = this.element.clientHeight + "px";
					}
				}
			} else {
				var scaleX;
				if(this.setWidth != 0) scaleX = this.element.clientWidth / this.setWidth; else scaleX = 1;
				var scaleY;
				if(this.setHeight != 0) scaleY = this.element.clientHeight / this.setHeight; else scaleY = 1;
				var targetWidth = this.element.clientWidth;
				var targetHeight = this.element.clientHeight;
				var marginLeft = 0;
				var marginTop = 0;
				if(scaleX < scaleY) {
					targetHeight = Math.floor(this.setHeight * scaleX);
					marginTop = Math.floor((this.element.clientHeight - targetHeight) / 2);
				} else {
					targetWidth = Math.floor(this.setWidth * scaleY);
					marginLeft = Math.floor((this.element.clientWidth - targetWidth) / 2);
				}
				if(this.canvas != null) {
					if(this.element != this.canvas) {
						this.canvas.style.width = targetWidth + "px";
						this.canvas.style.height = targetHeight + "px";
						this.canvas.style.marginLeft = marginLeft + "px";
						this.canvas.style.marginTop = marginTop + "px";
					}
				} else {
					this.div.style.width = targetWidth + "px";
					this.div.style.height = targetHeight + "px";
					this.div.style.marginLeft = marginLeft + "px";
					this.div.style.marginTop = marginTop + "px";
				}
			}
		}
	}
	,handleTouchEvent: function(event) {
		event.preventDefault();
		var rect = null;
		if(this.element != null) {
			if(this.canvas != null) rect = this.canvas.getBoundingClientRect(); else if(this.div != null) rect = this.div.getBoundingClientRect(); else rect = this.element.getBoundingClientRect();
		}
		var windowWidth = this.setWidth;
		var windowHeight = this.setHeight;
		if(windowWidth == 0 || windowHeight == 0) {
			if(rect != null) {
				windowWidth = rect.width;
				windowHeight = rect.height;
			} else {
				windowWidth = 1;
				windowHeight = 1;
			}
		}
		var _g = 0;
		var _g1 = event.changedTouches;
		while(_g < _g1.length) {
			var data = _g1[_g];
			++_g;
			var x = 0.0;
			var y = 0.0;
			if(rect != null) {
				x = (data.clientX - rect.left) * (windowWidth / rect.width);
				y = (data.clientY - rect.top) * (windowHeight / rect.height);
			} else {
				x = data.clientX;
				y = data.clientY;
			}
			var _g2 = event.type;
			switch(_g2) {
			case "touchstart":
				var touch = this.unusedTouchesPool.pop();
				if(touch == null) touch = new lime_ui_Touch(x / windowWidth,y / windowHeight,data.identifier,0,0,data.force,this.parent.id); else {
					touch.x = x / windowWidth;
					touch.y = y / windowHeight;
					touch.id = data.identifier;
					touch.dx = 0;
					touch.dy = 0;
					touch.pressure = data.force;
					touch.device = this.parent.id;
				}
				this.currentTouches.h[data.identifier] = touch;
				lime_ui_Touch.onStart.dispatch(touch);
				if(this.primaryTouch == null) this.primaryTouch = touch;
				if(touch == this.primaryTouch) this.parent.onMouseDown.dispatch(x,y,0);
				break;
			case "touchend":
				var touch1 = this.currentTouches.h[data.identifier];
				if(touch1 != null) {
					var cacheX = touch1.x;
					var cacheY = touch1.y;
					touch1.x = x / windowWidth;
					touch1.y = y / windowHeight;
					touch1.dx = touch1.x - cacheX;
					touch1.dy = touch1.y - cacheY;
					touch1.pressure = data.force;
					lime_ui_Touch.onEnd.dispatch(touch1);
					this.currentTouches.remove(data.identifier);
					this.unusedTouchesPool.add(touch1);
					if(touch1 == this.primaryTouch) {
						this.parent.onMouseUp.dispatch(x,y,0);
						this.primaryTouch = null;
					}
				}
				break;
			case "touchmove":
				var touch2 = this.currentTouches.h[data.identifier];
				if(touch2 != null) {
					var cacheX1 = touch2.x;
					var cacheY1 = touch2.y;
					touch2.x = x / windowWidth;
					touch2.y = y / windowHeight;
					touch2.dx = touch2.x - cacheX1;
					touch2.dy = touch2.y - cacheY1;
					touch2.pressure = data.force;
					lime_ui_Touch.onMove.dispatch(touch2);
					if(touch2 == this.primaryTouch) this.parent.onMouseMove.dispatch(x,y);
				}
				break;
			default:
			}
		}
	}
	,move: function(x,y) {
	}
	,resize: function(width,height) {
	}
	,setBorderless: function(value) {
		return value;
	}
	,setEnableTextEvents: function(value) {
		if(value) {
			if(lime__$backend_html5_HTML5Window.textInput == null) {
				lime__$backend_html5_HTML5Window.textInput = window.document.createElement("input");
				lime__$backend_html5_HTML5Window.textInput.type = "text";
				lime__$backend_html5_HTML5Window.textInput.style.position = "absolute";
				lime__$backend_html5_HTML5Window.textInput.style.opacity = "0";
				lime__$backend_html5_HTML5Window.textInput.style.color = "transparent";
				lime__$backend_html5_HTML5Window.textInput.value = lime__$backend_html5_HTML5Window.dummyCharacter;
				lime__$backend_html5_HTML5Window.textInput.autocapitalize = "off";
				lime__$backend_html5_HTML5Window.textInput.autocorrect = "off";
				lime__$backend_html5_HTML5Window.textInput.autocomplete = "off";
				lime__$backend_html5_HTML5Window.textInput.style.left = "0px";
				lime__$backend_html5_HTML5Window.textInput.style.top = "50%";
				if(new EReg("(iPad|iPhone|iPod).*OS 8_","gi").match(window.navigator.userAgent)) {
					lime__$backend_html5_HTML5Window.textInput.style.fontSize = "0px";
					lime__$backend_html5_HTML5Window.textInput.style.width = "0px";
					lime__$backend_html5_HTML5Window.textInput.style.height = "0px";
				} else {
					lime__$backend_html5_HTML5Window.textInput.style.width = "1px";
					lime__$backend_html5_HTML5Window.textInput.style.height = "1px";
				}
				lime__$backend_html5_HTML5Window.textInput.style.pointerEvents = "none";
				lime__$backend_html5_HTML5Window.textInput.style.zIndex = "-10000000";
				window.document.body.appendChild(lime__$backend_html5_HTML5Window.textInput);
			}
			if(!this.enableTextEvents) {
				lime__$backend_html5_HTML5Window.textInput.addEventListener("input",$bind(this,this.handleInputEvent),true);
				lime__$backend_html5_HTML5Window.textInput.addEventListener("blur",$bind(this,this.handleFocusEvent),true);
				lime__$backend_html5_HTML5Window.textInput.addEventListener("cut",$bind(this,this.handleCutOrCopyEvent),true);
				lime__$backend_html5_HTML5Window.textInput.addEventListener("copy",$bind(this,this.handleCutOrCopyEvent),true);
				lime__$backend_html5_HTML5Window.textInput.addEventListener("paste",$bind(this,this.handlePasteEvent),true);
			}
			lime__$backend_html5_HTML5Window.textInput.focus();
			lime__$backend_html5_HTML5Window.textInput.select();
		} else if(lime__$backend_html5_HTML5Window.textInput != null) {
			lime__$backend_html5_HTML5Window.textInput.removeEventListener("input",$bind(this,this.handleInputEvent),true);
			lime__$backend_html5_HTML5Window.textInput.removeEventListener("blur",$bind(this,this.handleFocusEvent),true);
			lime__$backend_html5_HTML5Window.textInput.removeEventListener("cut",$bind(this,this.handleCutOrCopyEvent),true);
			lime__$backend_html5_HTML5Window.textInput.removeEventListener("copy",$bind(this,this.handleCutOrCopyEvent),true);
			lime__$backend_html5_HTML5Window.textInput.removeEventListener("paste",$bind(this,this.handlePasteEvent),true);
			lime__$backend_html5_HTML5Window.textInput.blur();
		}
		return this.enableTextEvents = value;
	}
	,setFullscreen: function(value) {
		return false;
	}
	,setIcon: function(image) {
	}
	,setMaximized: function(value) {
		return false;
	}
	,setMinimized: function(value) {
		return false;
	}
	,setResizable: function(value) {
		return value;
	}
	,setTitle: function(value) {
		return value;
	}
	,__class__: lime__$backend_html5_HTML5Window
};
var lime__$macros_AssetsMacro = function() { };
$hxClasses["lime._macros.AssetsMacro"] = lime__$macros_AssetsMacro;
lime__$macros_AssetsMacro.__name__ = ["lime","_macros","AssetsMacro"];
var lime_app_IModule = function() { };
$hxClasses["lime.app.IModule"] = lime_app_IModule;
lime_app_IModule.__name__ = ["lime","app","IModule"];
lime_app_IModule.prototype = {
	addRenderer: null
	,addWindow: null
	,registerModule: null
	,removeRenderer: null
	,removeWindow: null
	,setPreloader: null
	,unregisterModule: null
	,__class__: lime_app_IModule
};
var lime_app_Module = function() {
	this.onExit = new lime_app__$Event_$Int_$Void();
	this.__renderers = [];
	this.__windows = [];
};
$hxClasses["lime.app.Module"] = lime_app_Module;
lime_app_Module.__name__ = ["lime","app","Module"];
lime_app_Module.__interfaces__ = [lime_app_IModule];
lime_app_Module.prototype = {
	onExit: null
	,__application: null
	,__preloader: null
	,__renderers: null
	,__windows: null
	,addRenderer: function(renderer) {
		renderer.onRender.add((function(f,a1) {
			return function() {
				f(a1);
			};
		})($bind(this,this.render),renderer));
		renderer.onContextLost.add((function(f1,a11) {
			return function() {
				f1(a11);
			};
		})($bind(this,this.onRenderContextLost),renderer));
		renderer.onContextRestored.add((function(f2,a12) {
			return function(a2) {
				f2(a12,a2);
			};
		})($bind(this,this.onRenderContextRestored),renderer));
		this.__renderers.push(renderer);
	}
	,addWindow: function(window) {
		window.onActivate.add((function(f,a1) {
			return function() {
				f(a1);
			};
		})($bind(this,this.onWindowActivate),window));
		window.onClose.add((function(f1,a11) {
			return function() {
				f1(a11);
			};
		})($bind(this,this.__onWindowClose),window));
		window.onCreate.add((function(f2,a12) {
			return function() {
				f2(a12);
			};
		})($bind(this,this.onWindowCreate),window));
		window.onDeactivate.add((function(f3,a13) {
			return function() {
				f3(a13);
			};
		})($bind(this,this.onWindowDeactivate),window));
		window.onDropFile.add((function(f4,a14) {
			return function(a2) {
				f4(a14,a2);
			};
		})($bind(this,this.onWindowDropFile),window));
		window.onEnter.add((function(f5,a15) {
			return function() {
				f5(a15);
			};
		})($bind(this,this.onWindowEnter),window));
		window.onFocusIn.add((function(f6,a16) {
			return function() {
				f6(a16);
			};
		})($bind(this,this.onWindowFocusIn),window));
		window.onFocusOut.add((function(f7,a17) {
			return function() {
				f7(a17);
			};
		})($bind(this,this.onWindowFocusOut),window));
		window.onFullscreen.add((function(f8,a18) {
			return function() {
				f8(a18);
			};
		})($bind(this,this.onWindowFullscreen),window));
		window.onKeyDown.add((function(f9,a19) {
			return function(a21,a3) {
				f9(a19,a21,a3);
			};
		})($bind(this,this.onKeyDown),window));
		window.onKeyUp.add((function(f10,a110) {
			return function(a22,a31) {
				f10(a110,a22,a31);
			};
		})($bind(this,this.onKeyUp),window));
		window.onLeave.add((function(f11,a111) {
			return function() {
				f11(a111);
			};
		})($bind(this,this.onWindowLeave),window));
		window.onMinimize.add((function(f12,a112) {
			return function() {
				f12(a112);
			};
		})($bind(this,this.onWindowMinimize),window));
		window.onMouseDown.add((function(f13,a113) {
			return function(x,y,a23) {
				f13(a113,x,y,a23);
			};
		})($bind(this,this.onMouseDown),window));
		window.onMouseMove.add((function(f14,a114) {
			return function(x1,y1) {
				f14(a114,x1,y1);
			};
		})($bind(this,this.onMouseMove),window));
		window.onMouseMoveRelative.add((function(f15,a115) {
			return function(x2,y2) {
				f15(a115,x2,y2);
			};
		})($bind(this,this.onMouseMoveRelative),window));
		window.onMouseUp.add((function(f16,a116) {
			return function(x3,y3,a24) {
				f16(a116,x3,y3,a24);
			};
		})($bind(this,this.onMouseUp),window));
		window.onMouseWheel.add((function(f17,a117) {
			return function(a25,a32) {
				f17(a117,a25,a32);
			};
		})($bind(this,this.onMouseWheel),window));
		window.onMove.add((function(f18,a118) {
			return function(x4,y4) {
				f18(a118,x4,y4);
			};
		})($bind(this,this.onWindowMove),window));
		window.onResize.add((function(f19,a119) {
			return function(a26,a33) {
				f19(a119,a26,a33);
			};
		})($bind(this,this.onWindowResize),window));
		window.onRestore.add((function(f20,a120) {
			return function() {
				f20(a120);
			};
		})($bind(this,this.onWindowRestore),window));
		window.onTextEdit.add((function(f21,a121) {
			return function(a27,a34,a4) {
				f21(a121,a27,a34,a4);
			};
		})($bind(this,this.onTextEdit),window));
		window.onTextInput.add((function(f22,a122) {
			return function(a28) {
				f22(a122,a28);
			};
		})($bind(this,this.onTextInput),window));
		if(window.id > -1) this.onWindowCreate(window);
		this.__windows.push(window);
	}
	,registerModule: function(application) {
		this.__application = application;
		application.onExit.add($bind(this,this.onModuleExit),false,0);
		application.onUpdate.add($bind(this,this.update));
		var $it0 = lime_ui_Gamepad.devices.iterator();
		while( $it0.hasNext() ) {
			var gamepad = $it0.next();
			this.__onGamepadConnect(gamepad);
		}
		lime_ui_Gamepad.onConnect.add($bind(this,this.__onGamepadConnect));
		var $it1 = lime_ui_Joystick.devices.iterator();
		while( $it1.hasNext() ) {
			var joystick = $it1.next();
			this.__onJoystickConnect(joystick);
		}
		lime_ui_Joystick.onConnect.add($bind(this,this.__onJoystickConnect));
		lime_ui_Touch.onStart.add($bind(this,this.onTouchStart));
		lime_ui_Touch.onMove.add($bind(this,this.onTouchMove));
		lime_ui_Touch.onEnd.add($bind(this,this.onTouchEnd));
	}
	,removeRenderer: function(renderer) {
		if(renderer != null && HxOverrides.indexOf(this.__renderers,renderer,0) > -1) HxOverrides.remove(this.__renderers,renderer);
	}
	,removeWindow: function(window) {
		if(window != null && HxOverrides.indexOf(this.__windows,window,0) > -1) HxOverrides.remove(this.__windows,window);
	}
	,setPreloader: function(preloader) {
		if(this.__preloader != null) {
			this.__preloader.onProgress.remove($bind(this,this.onPreloadProgress));
			this.__preloader.onComplete.remove($bind(this,this.onPreloadComplete));
		}
		this.__preloader = preloader;
		if(preloader == null || preloader.complete) this.onPreloadComplete(); else {
			preloader.onProgress.add($bind(this,this.onPreloadProgress));
			preloader.onComplete.add($bind(this,this.onPreloadComplete));
		}
	}
	,unregisterModule: function(application) {
		this.__application.onExit.remove($bind(this,this.onModuleExit));
		this.__application.onUpdate.remove($bind(this,this.update));
		lime_ui_Gamepad.onConnect.remove($bind(this,this.__onGamepadConnect));
		lime_ui_Joystick.onConnect.remove($bind(this,this.__onJoystickConnect));
		lime_ui_Touch.onStart.remove($bind(this,this.onTouchStart));
		lime_ui_Touch.onMove.remove($bind(this,this.onTouchMove));
		lime_ui_Touch.onEnd.remove($bind(this,this.onTouchEnd));
		this.onModuleExit(0);
	}
	,onGamepadAxisMove: function(gamepad,axis,value) {
	}
	,onGamepadButtonDown: function(gamepad,button) {
	}
	,onGamepadButtonUp: function(gamepad,button) {
	}
	,onGamepadConnect: function(gamepad) {
	}
	,onGamepadDisconnect: function(gamepad) {
	}
	,onJoystickAxisMove: function(joystick,axis,value) {
	}
	,onJoystickButtonDown: function(joystick,button) {
	}
	,onJoystickButtonUp: function(joystick,button) {
	}
	,onJoystickConnect: function(joystick) {
	}
	,onJoystickDisconnect: function(joystick) {
	}
	,onJoystickHatMove: function(joystick,hat,position) {
	}
	,onJoystickTrackballMove: function(joystick,trackball,value) {
	}
	,onKeyDown: function(window,keyCode,modifier) {
	}
	,onKeyUp: function(window,keyCode,modifier) {
	}
	,onModuleExit: function(code) {
	}
	,onMouseDown: function(window,x,y,button) {
	}
	,onMouseMove: function(window,x,y) {
	}
	,onMouseMoveRelative: function(window,x,y) {
	}
	,onMouseUp: function(window,x,y,button) {
	}
	,onMouseWheel: function(window,deltaX,deltaY) {
	}
	,onPreloadComplete: function() {
	}
	,onPreloadProgress: function(loaded,total) {
	}
	,onRenderContextLost: function(renderer) {
	}
	,onRenderContextRestored: function(renderer,context) {
	}
	,onTextEdit: function(window,text,start,length) {
	}
	,onTextInput: function(window,text) {
	}
	,onTouchEnd: function(touch) {
	}
	,onTouchMove: function(touch) {
	}
	,onTouchStart: function(touch) {
	}
	,onWindowActivate: function(window) {
	}
	,onWindowClose: function(window) {
	}
	,onWindowCreate: function(window) {
	}
	,onWindowDeactivate: function(window) {
	}
	,onWindowDropFile: function(window,file) {
	}
	,onWindowEnter: function(window) {
	}
	,onWindowFocusIn: function(window) {
	}
	,onWindowFocusOut: function(window) {
	}
	,onWindowFullscreen: function(window) {
	}
	,onWindowLeave: function(window) {
	}
	,onWindowMove: function(window,x,y) {
	}
	,onWindowMinimize: function(window) {
	}
	,onWindowResize: function(window,width,height) {
	}
	,onWindowRestore: function(window) {
	}
	,render: function(renderer) {
	}
	,update: function(deltaTime) {
	}
	,__onGamepadConnect: function(gamepad) {
		this.onGamepadConnect(gamepad);
		gamepad.onAxisMove.add((function(f,a1) {
			return function(a2,a3) {
				f(a1,a2,a3);
			};
		})($bind(this,this.onGamepadAxisMove),gamepad));
		gamepad.onButtonDown.add((function(f1,a11) {
			return function(a21) {
				f1(a11,a21);
			};
		})($bind(this,this.onGamepadButtonDown),gamepad));
		gamepad.onButtonUp.add((function(f2,a12) {
			return function(a22) {
				f2(a12,a22);
			};
		})($bind(this,this.onGamepadButtonUp),gamepad));
		gamepad.onDisconnect.add((function(f3,a13) {
			return function() {
				f3(a13);
			};
		})($bind(this,this.onGamepadDisconnect),gamepad));
	}
	,__onJoystickConnect: function(joystick) {
		this.onJoystickConnect(joystick);
		joystick.onAxisMove.add((function(f,a1) {
			return function(a2,a3) {
				f(a1,a2,a3);
			};
		})($bind(this,this.onJoystickAxisMove),joystick));
		joystick.onButtonDown.add((function(f1,a11) {
			return function(a21) {
				f1(a11,a21);
			};
		})($bind(this,this.onJoystickButtonDown),joystick));
		joystick.onButtonUp.add((function(f2,a12) {
			return function(a22) {
				f2(a12,a22);
			};
		})($bind(this,this.onJoystickButtonUp),joystick));
		joystick.onDisconnect.add((function(f3,a13) {
			return function() {
				f3(a13);
			};
		})($bind(this,this.onJoystickDisconnect),joystick));
		joystick.onHatMove.add((function(f4,a14) {
			return function(a23,a31) {
				f4(a14,a23,a31);
			};
		})($bind(this,this.onJoystickHatMove),joystick));
		joystick.onTrackballMove.add((function(f5,a15) {
			return function(a24,a32) {
				f5(a15,a24,a32);
			};
		})($bind(this,this.onJoystickTrackballMove),joystick));
	}
	,__onWindowClose: function(window) {
		this.onWindowClose(window);
		HxOverrides.remove(this.__windows,window);
	}
	,__class__: lime_app_Module
};
var lime_app_Application = function() {
	this.onUpdate = new lime_app__$Event_$Int_$Void();
	lime_app_Module.call(this);
	if(lime_app_Application.current == null) lime_app_Application.current = this;
	this.modules = [];
	this.windowByID = new haxe_ds_IntMap();
	this.backend = new lime__$backend_html5_HTML5Application(this);
	this.registerModule(this);
};
$hxClasses["lime.app.Application"] = lime_app_Application;
lime_app_Application.__name__ = ["lime","app","Application"];
lime_app_Application.__super__ = lime_app_Module;
lime_app_Application.prototype = $extend(lime_app_Module.prototype,{
	config: null
	,modules: null
	,preloader: null
	,onUpdate: null
	,renderer: null
	,renderers: null
	,window: null
	,windows: null
	,backend: null
	,windowByID: null
	,addModule: function(module) {
		module.registerModule(this);
		this.modules.push(module);
		if(this.__renderers.length > 0) {
			var _g = 0;
			var _g1 = this.__renderers;
			while(_g < _g1.length) {
				var renderer = _g1[_g];
				++_g;
				module.addRenderer(renderer);
			}
		}
		if(this.__windows.length > 0) {
			var _g2 = 0;
			var _g11 = this.__windows;
			while(_g2 < _g11.length) {
				var $window = _g11[_g2];
				++_g2;
				module.addWindow($window);
			}
		}
		module.setPreloader(this.__preloader);
	}
	,addRenderer: function(renderer) {
		lime_app_Module.prototype.addRenderer.call(this,renderer);
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.addRenderer(renderer);
		}
	}
	,create: function(config) {
		this.config = config;
		this.backend.create(config);
		if(config != null) {
			if(Object.prototype.hasOwnProperty.call(config,"fps")) this.backend.setFrameRate(config.fps);
			if(Object.prototype.hasOwnProperty.call(config,"windows")) {
				var _g = 0;
				var _g1 = config.windows;
				while(_g < _g1.length) {
					var windowConfig = _g1[_g];
					++_g;
					var $window = new lime_ui_Window(windowConfig);
					this.createWindow($window);
					break;
				}
			}
			if(this.__preloader == null || this.__preloader.complete) {
				this.setPreloader(this.__preloader);
				var _g2 = 0;
				var _g11 = this.modules;
				while(_g2 < _g11.length) {
					var module = _g11[_g2];
					++_g2;
					this.setPreloader(this.__preloader);
				}
			}
		}
	}
	,createWindow: function(window) {
		lime_app_Module.prototype.addWindow.call(this,window);
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.addWindow(window);
		}
		if(window.renderer == null) {
			var renderer = new lime_graphics_Renderer(window);
			this.addRenderer(renderer);
		}
		window.create(this);
		this.windowByID.h[window.id] = window;
		window.onCreate.dispatch();
	}
	,exec: function() {
		lime_app_Application.current = this;
		return this.backend.exec();
	}
	,onModuleExit: function(code) {
		this.backend.exit();
	}
	,onWindowClose: function(window) {
		this.removeWindow(window);
	}
	,removeModule: function(module) {
		if(module != null) {
			module.unregisterModule(this);
			HxOverrides.remove(this.modules,module);
		}
	}
	,removeWindow: function(window) {
		if(window != null && this.windowByID.h.hasOwnProperty(window.id)) {
			HxOverrides.remove(this.__windows,window);
			this.windowByID.remove(window.id);
			window.close();
			if(window.renderer != null) this.removeRenderer(window.renderer);
			if(this.__windows[0] == window) this.window = null;
		}
	}
	,setPreloader: function(preloader) {
		lime_app_Module.prototype.setPreloader.call(this,preloader);
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.setPreloader(preloader);
		}
	}
	,get_frameRate: function() {
		return this.backend.getFrameRate();
	}
	,set_frameRate: function(value) {
		return this.backend.setFrameRate(value);
	}
	,get_preloader: function() {
		return this.__preloader;
	}
	,get_renderer: function() {
		return this.__renderers[0];
	}
	,get_renderers: function() {
		return this.__renderers;
	}
	,get_window: function() {
		return this.__windows[0];
	}
	,get_windows: function() {
		return this.__windows;
	}
	,__class__: lime_app_Application
	,__properties__: {get_windows:"get_windows",get_window:"get_window",get_renderers:"get_renderers",get_renderer:"get_renderer",get_preloader:"get_preloader",set_frameRate:"set_frameRate",get_frameRate:"get_frameRate"}
});
var lime_app_Event = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app.Event"] = lime_app_Event;
lime_app_Event.__name__ = ["lime","app","Event"];
lime_app_Event.prototype = {
	canceled: null
	,__listeners: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,dispatch: null
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) return true;
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__class__: lime_app_Event
};
var lime_app_Future = function(work,async) {
	if(async == null) async = false;
	if(work != null) {
		if(async) {
			var promise = new lime_app_Promise();
			promise.future = this;
			lime_app__$Future_FutureWork.queue({ promise : promise, work : work});
		} else try {
			this.value = work();
			this.isComplete = true;
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.error = e;
			this.isError = true;
		}
	}
};
$hxClasses["lime.app.Future"] = lime_app_Future;
lime_app_Future.__name__ = ["lime","app","Future"];
lime_app_Future.ofEvents = function(onComplete,onError,onProgress) {
	var promise = new lime_app_Promise();
	onComplete.add(function(data) {
		promise.complete(data);
	},true);
	if(onError != null) onError.add(function(error) {
		promise.error(error);
	},true);
	if(onProgress != null) onProgress.add(function(progress,total) {
		promise.progress(progress,total);
	},true);
	return promise.future;
};
lime_app_Future.withError = function(error) {
	var future = new lime_app_Future();
	future.isError = true;
	future.error = error;
	return future;
};
lime_app_Future.withValue = function(value) {
	var future = new lime_app_Future();
	future.isComplete = true;
	future.value = value;
	return future;
};
lime_app_Future.prototype = {
	error: null
	,isComplete: null
	,isError: null
	,value: null
	,__completeListeners: null
	,__errorListeners: null
	,__progressListeners: null
	,onComplete: function(listener) {
		if(listener != null) {
			if(this.isComplete) listener(this.value); else if(!this.isError) {
				if(this.__completeListeners == null) this.__completeListeners = [];
				this.__completeListeners.push(listener);
			}
		}
		return this;
	}
	,onError: function(listener) {
		if(listener != null) {
			if(this.isError) listener(this.error); else if(!this.isComplete) {
				if(this.__errorListeners == null) this.__errorListeners = [];
				this.__errorListeners.push(listener);
			}
		}
		return this;
	}
	,onProgress: function(listener) {
		if(listener != null) {
			if(this.__progressListeners == null) this.__progressListeners = [];
			this.__progressListeners.push(listener);
		}
		return this;
	}
	,ready: function(waitTime) {
		if(waitTime == null) waitTime = -1;
		if(this.isComplete || this.isError) return this; else {
			lime_utils_Log.warn("Cannot block thread in JavaScript",{ fileName : "Future.hx", lineNumber : 157, className : "lime.app.Future", methodName : "ready"});
			return this;
		}
	}
	,result: function(waitTime) {
		if(waitTime == null) waitTime = -1;
		this.ready(waitTime);
		if(this.isComplete) return this.value; else return null;
	}
	,then: function(next) {
		if(this.isComplete) return next(this.value); else if(this.isError) {
			var future = new lime_app_Future();
			future.onError(this.error);
			return future;
		} else {
			var promise = new lime_app_Promise();
			this.onError($bind(promise,promise.error));
			this.onProgress($bind(promise,promise.progress));
			this.onComplete(function(val) {
				var future1 = next(val);
				future1.onError($bind(promise,promise.error));
				future1.onComplete($bind(promise,promise.complete));
			});
			return promise.future;
		}
	}
	,__class__: lime_app_Future
};
var lime_app__$Future_FutureWork = function() { };
$hxClasses["lime.app._Future.FutureWork"] = lime_app__$Future_FutureWork;
lime_app__$Future_FutureWork.__name__ = ["lime","app","_Future","FutureWork"];
lime_app__$Future_FutureWork.queue = function(state) {
	if(lime_app__$Future_FutureWork.threadPool == null) {
		lime_app__$Future_FutureWork.threadPool = new lime_system_ThreadPool();
		lime_app__$Future_FutureWork.threadPool.doWork.add(lime_app__$Future_FutureWork.threadPool_doWork);
		lime_app__$Future_FutureWork.threadPool.onComplete.add(lime_app__$Future_FutureWork.threadPool_onComplete);
		lime_app__$Future_FutureWork.threadPool.onError.add(lime_app__$Future_FutureWork.threadPool_onError);
	}
	lime_app__$Future_FutureWork.threadPool.queue(state);
};
lime_app__$Future_FutureWork.threadPool_doWork = function(state) {
	try {
		var result = state.work();
		lime_app__$Future_FutureWork.threadPool.sendComplete({ promise : state.promise, result : result});
	} catch( e ) {
		haxe_CallStack.lastException = e;
		if (e instanceof js__$Boot_HaxeError) e = e.val;
		lime_app__$Future_FutureWork.threadPool.sendError({ promise : state.promise, error : e});
	}
};
lime_app__$Future_FutureWork.threadPool_onComplete = function(state) {
	state.promise.complete(state.result);
};
lime_app__$Future_FutureWork.threadPool_onError = function(state) {
	state.promise.error(state.error);
};
var lime_app_Preloader = function() {
	this.onProgress = new lime_app__$Event_$Int_$Int_$Void();
	this.onComplete = new lime_app__$Event_$Void_$Void();
	this.libraries = [];
	this.onProgress.add($bind(this,this.update));
};
$hxClasses["lime.app.Preloader"] = lime_app_Preloader;
lime_app_Preloader.__name__ = ["lime","app","Preloader"];
lime_app_Preloader.prototype = {
	complete: null
	,onComplete: null
	,onProgress: null
	,libraries: null
	,loadedLibraries: null
	,loadedStage: null
	,addLibrary: function(library) {
		this.libraries.push(library);
	}
	,create: function(config) {
	}
	,load: function() {
		var _g2 = this;
		this.loadedLibraries = -1;
		var _g = 0;
		var _g1 = this.libraries;
		while(_g < _g1.length) {
			var library = _g1[_g];
			++_g;
			library.load().onComplete(function(_) {
				_g2.loadedLibraries++;
				_g2.updateProgress();
			});
		}
		this.loadedLibraries++;
		this.updateProgress();
	}
	,start: function() {
		this.complete = true;
		this.onComplete.dispatch();
	}
	,update: function(loaded,total) {
	}
	,updateProgress: function() {
		this.update(this.loadedLibraries,this.libraries.length);
		if(this.loadedLibraries == this.libraries.length) this.start();
	}
	,__class__: lime_app_Preloader
};
var lime_app_Promise = function() {
	this.future = new lime_app_Future();
};
$hxClasses["lime.app.Promise"] = lime_app_Promise;
lime_app_Promise.__name__ = ["lime","app","Promise"];
lime_app_Promise.prototype = {
	future: null
	,isComplete: null
	,isError: null
	,complete: function(data) {
		if(!this.future.isError) {
			this.future.isComplete = true;
			this.future.value = data;
			if(this.future.__completeListeners != null) {
				var _g = 0;
				var _g1 = this.future.__completeListeners;
				while(_g < _g1.length) {
					var listener = _g1[_g];
					++_g;
					listener(data);
				}
				this.future.__completeListeners = null;
			}
		}
		return this;
	}
	,completeWith: function(future) {
		future.onComplete($bind(this,this.complete));
		future.onError($bind(this,this.error));
		future.onProgress($bind(this,this.progress));
		return this;
	}
	,error: function(msg) {
		if(!this.future.isComplete) {
			this.future.isError = true;
			this.future.error = msg;
			if(this.future.__errorListeners != null) {
				var _g = 0;
				var _g1 = this.future.__errorListeners;
				while(_g < _g1.length) {
					var listener = _g1[_g];
					++_g;
					listener(msg);
				}
				this.future.__errorListeners = null;
			}
		}
		return this;
	}
	,progress: function(progress,total) {
		if(!this.future.isError && !this.future.isComplete) {
			if(this.future.__progressListeners != null) {
				var _g = 0;
				var _g1 = this.future.__progressListeners;
				while(_g < _g1.length) {
					var listener = _g1[_g];
					++_g;
					listener(progress,total);
				}
			}
		}
		return this;
	}
	,get_isComplete: function() {
		return this.future.isComplete;
	}
	,get_isError: function() {
		return this.future.isError;
	}
	,__class__: lime_app_Promise
	,__properties__: {get_isError:"get_isError",get_isComplete:"get_isComplete"}
};
var lime_app__$Event_$Dynamic_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Dynamic_Void"] = lime_app__$Event_$Dynamic_$Void;
lime_app__$Event_$Dynamic_$Void.__name__ = ["lime","app","_Event_Dynamic_Void"];
lime_app__$Event_$Dynamic_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) return true;
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) this.remove(listeners[i]); else i++;
			if(this.canceled) break;
		}
	}
	,__class__: lime_app__$Event_$Dynamic_$Void
};
var lime_app__$Event_$Float_$Float_$Int_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Float_Float_Int_Void"] = lime_app__$Event_$Float_$Float_$Int_$Void;
lime_app__$Event_$Float_$Float_$Int_$Void.__name__ = ["lime","app","_Event_Float_Float_Int_Void"];
lime_app__$Event_$Float_$Float_$Int_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) return true;
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a,a1,a2) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1,a2);
			if(!repeat[i]) this.remove(listeners[i]); else i++;
			if(this.canceled) break;
		}
	}
	,__class__: lime_app__$Event_$Float_$Float_$Int_$Void
};
var lime_app__$Event_$Float_$Float_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Float_Float_Void"] = lime_app__$Event_$Float_$Float_$Void;
lime_app__$Event_$Float_$Float_$Void.__name__ = ["lime","app","_Event_Float_Float_Void"];
lime_app__$Event_$Float_$Float_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) return true;
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a,a1) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) this.remove(listeners[i]); else i++;
			if(this.canceled) break;
		}
	}
	,__class__: lime_app__$Event_$Float_$Float_$Void
};
var lime_app__$Event_$Int_$Float_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Int_Float_Void"] = lime_app__$Event_$Int_$Float_$Void;
lime_app__$Event_$Int_$Float_$Void.__name__ = ["lime","app","_Event_Int_Float_Void"];
lime_app__$Event_$Int_$Float_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) return true;
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a,a1) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) this.remove(listeners[i]); else i++;
			if(this.canceled) break;
		}
	}
	,__class__: lime_app__$Event_$Int_$Float_$Void
};
var lime_app__$Event_$Int_$Int_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Int_Int_Void"] = lime_app__$Event_$Int_$Int_$Void;
lime_app__$Event_$Int_$Int_$Void.__name__ = ["lime","app","_Event_Int_Int_Void"];
lime_app__$Event_$Int_$Int_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) return true;
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a,a1) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) this.remove(listeners[i]); else i++;
			if(this.canceled) break;
		}
	}
	,__class__: lime_app__$Event_$Int_$Int_$Void
};
var lime_app__$Event_$Int_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Int_Void"] = lime_app__$Event_$Int_$Void;
lime_app__$Event_$Int_$Void.__name__ = ["lime","app","_Event_Int_Void"];
lime_app__$Event_$Int_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) return true;
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) this.remove(listeners[i]); else i++;
			if(this.canceled) break;
		}
	}
	,__class__: lime_app__$Event_$Int_$Void
};
var lime_app__$Event_$Int_$lime_$ui_$JoystickHatPosition_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Int_lime_ui_JoystickHatPosition_Void"] = lime_app__$Event_$Int_$lime_$ui_$JoystickHatPosition_$Void;
lime_app__$Event_$Int_$lime_$ui_$JoystickHatPosition_$Void.__name__ = ["lime","app","_Event_Int_lime_ui_JoystickHatPosition_Void"];
lime_app__$Event_$Int_$lime_$ui_$JoystickHatPosition_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) return true;
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a,a1) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) this.remove(listeners[i]); else i++;
			if(this.canceled) break;
		}
	}
	,__class__: lime_app__$Event_$Int_$lime_$ui_$JoystickHatPosition_$Void
};
var lime_app__$Event_$String_$Int_$Int_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_String_Int_Int_Void"] = lime_app__$Event_$String_$Int_$Int_$Void;
lime_app__$Event_$String_$Int_$Int_$Void.__name__ = ["lime","app","_Event_String_Int_Int_Void"];
lime_app__$Event_$String_$Int_$Int_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) return true;
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a,a1,a2) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1,a2);
			if(!repeat[i]) this.remove(listeners[i]); else i++;
			if(this.canceled) break;
		}
	}
	,__class__: lime_app__$Event_$String_$Int_$Int_$Void
};
var lime_app__$Event_$String_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_String_Void"] = lime_app__$Event_$String_$Void;
lime_app__$Event_$String_$Void.__name__ = ["lime","app","_Event_String_Void"];
lime_app__$Event_$String_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) return true;
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) this.remove(listeners[i]); else i++;
			if(this.canceled) break;
		}
	}
	,__class__: lime_app__$Event_$String_$Void
};
var lime_app__$Event_$Void_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Void_Void"] = lime_app__$Event_$Void_$Void;
lime_app__$Event_$Void_$Void.__name__ = ["lime","app","_Event_Void_Void"];
lime_app__$Event_$Void_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) return true;
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function() {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i]();
			if(!repeat[i]) this.remove(listeners[i]); else i++;
			if(this.canceled) break;
		}
	}
	,__class__: lime_app__$Event_$Void_$Void
};
var lime_app__$Event_$lime_$graphics_$RenderContext_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_graphics_RenderContext_Void"] = lime_app__$Event_$lime_$graphics_$RenderContext_$Void;
lime_app__$Event_$lime_$graphics_$RenderContext_$Void.__name__ = ["lime","app","_Event_lime_graphics_RenderContext_Void"];
lime_app__$Event_$lime_$graphics_$RenderContext_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) return true;
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) this.remove(listeners[i]); else i++;
			if(this.canceled) break;
		}
	}
	,__class__: lime_app__$Event_$lime_$graphics_$RenderContext_$Void
};
var lime_app__$Event_$lime_$ui_$GamepadAxis_$Float_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_ui_GamepadAxis_Float_Void"] = lime_app__$Event_$lime_$ui_$GamepadAxis_$Float_$Void;
lime_app__$Event_$lime_$ui_$GamepadAxis_$Float_$Void.__name__ = ["lime","app","_Event_lime_ui_GamepadAxis_Float_Void"];
lime_app__$Event_$lime_$ui_$GamepadAxis_$Float_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) return true;
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a,a1) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) this.remove(listeners[i]); else i++;
			if(this.canceled) break;
		}
	}
	,__class__: lime_app__$Event_$lime_$ui_$GamepadAxis_$Float_$Void
};
var lime_app__$Event_$lime_$ui_$GamepadButton_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_ui_GamepadButton_Void"] = lime_app__$Event_$lime_$ui_$GamepadButton_$Void;
lime_app__$Event_$lime_$ui_$GamepadButton_$Void.__name__ = ["lime","app","_Event_lime_ui_GamepadButton_Void"];
lime_app__$Event_$lime_$ui_$GamepadButton_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) return true;
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) this.remove(listeners[i]); else i++;
			if(this.canceled) break;
		}
	}
	,__class__: lime_app__$Event_$lime_$ui_$GamepadButton_$Void
};
var lime_app__$Event_$lime_$ui_$Gamepad_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_ui_Gamepad_Void"] = lime_app__$Event_$lime_$ui_$Gamepad_$Void;
lime_app__$Event_$lime_$ui_$Gamepad_$Void.__name__ = ["lime","app","_Event_lime_ui_Gamepad_Void"];
lime_app__$Event_$lime_$ui_$Gamepad_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) return true;
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) this.remove(listeners[i]); else i++;
			if(this.canceled) break;
		}
	}
	,__class__: lime_app__$Event_$lime_$ui_$Gamepad_$Void
};
var lime_app__$Event_$lime_$ui_$Joystick_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_ui_Joystick_Void"] = lime_app__$Event_$lime_$ui_$Joystick_$Void;
lime_app__$Event_$lime_$ui_$Joystick_$Void.__name__ = ["lime","app","_Event_lime_ui_Joystick_Void"];
lime_app__$Event_$lime_$ui_$Joystick_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) return true;
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) this.remove(listeners[i]); else i++;
			if(this.canceled) break;
		}
	}
	,__class__: lime_app__$Event_$lime_$ui_$Joystick_$Void
};
var lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_ui_KeyCode_lime_ui_KeyModifier_Void"] = lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void;
lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void.__name__ = ["lime","app","_Event_lime_ui_KeyCode_lime_ui_KeyModifier_Void"];
lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) return true;
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a,a1) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) this.remove(listeners[i]); else i++;
			if(this.canceled) break;
		}
	}
	,__class__: lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void
};
var lime_app__$Event_$lime_$ui_$Touch_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_ui_Touch_Void"] = lime_app__$Event_$lime_$ui_$Touch_$Void;
lime_app__$Event_$lime_$ui_$Touch_$Void.__name__ = ["lime","app","_Event_lime_ui_Touch_Void"];
lime_app__$Event_$lime_$ui_$Touch_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) return true;
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) this.remove(listeners[i]); else i++;
			if(this.canceled) break;
		}
	}
	,__class__: lime_app__$Event_$lime_$ui_$Touch_$Void
};
var lime_app__$Event_$ofEvents_$T_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_ofEvents_T_Void"] = lime_app__$Event_$ofEvents_$T_$Void;
lime_app__$Event_$ofEvents_$T_$Void.__name__ = ["lime","app","_Event_ofEvents_T_Void"];
lime_app__$Event_$ofEvents_$T_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) priority = 0;
		if(once == null) once = false;
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) return true;
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) this.remove(listeners[i]); else i++;
			if(this.canceled) break;
		}
	}
	,__class__: lime_app__$Event_$ofEvents_$T_$Void
};
var lime_audio_ALAudioContext = function() {
	this.EXPONENT_DISTANCE_CLAMPED = 53254;
	this.EXPONENT_DISTANCE = 53253;
	this.LINEAR_DISTANCE_CLAMPED = 53252;
	this.LINEAR_DISTANCE = 53251;
	this.INVERSE_DISTANCE_CLAMPED = 53250;
	this.INVERSE_DISTANCE = 53249;
	this.DISTANCE_MODEL = 53248;
	this.DOPPLER_VELOCITY = 49153;
	this.SPEED_OF_SOUND = 49155;
	this.DOPPLER_FACTOR = 49152;
	this.EXTENSIONS = 45060;
	this.RENDERER = 45059;
	this.VERSION = 45058;
	this.VENDOR = 45057;
	this.OUT_OF_MEMORY = 40965;
	this.INVALID_OPERATION = 40964;
	this.INVALID_VALUE = 40963;
	this.INVALID_ENUM = 40962;
	this.INVALID_NAME = 40961;
	this.NO_ERROR = 0;
	this.SIZE = 8196;
	this.CHANNELS = 8195;
	this.BITS = 8194;
	this.FREQUENCY = 8193;
	this.FORMAT_STEREO16 = 4355;
	this.FORMAT_STEREO8 = 4354;
	this.FORMAT_MONO16 = 4353;
	this.FORMAT_MONO8 = 4352;
	this.UNDETERMINED = 4144;
	this.STREAMING = 4137;
	this.STATIC = 4136;
	this.SOURCE_TYPE = 4135;
	this.BYTE_OFFSET = 4134;
	this.SAMPLE_OFFSET = 4133;
	this.SEC_OFFSET = 4132;
	this.MAX_DISTANCE = 4131;
	this.CONE_OUTER_GAIN = 4130;
	this.ROLLOFF_FACTOR = 4129;
	this.REFERENCE_DISTANCE = 4128;
	this.BUFFERS_PROCESSED = 4118;
	this.BUFFERS_QUEUED = 4117;
	this.STOPPED = 4116;
	this.PAUSED = 4115;
	this.PLAYING = 4114;
	this.INITIAL = 4113;
	this.SOURCE_STATE = 4112;
	this.ORIENTATION = 4111;
	this.MAX_GAIN = 4110;
	this.MIN_GAIN = 4109;
	this.GAIN = 4106;
	this.BUFFER = 4105;
	this.LOOPING = 4103;
	this.VELOCITY = 4102;
	this.DIRECTION = 4101;
	this.POSITION = 4100;
	this.PITCH = 4099;
	this.CONE_OUTER_ANGLE = 4098;
	this.CONE_INNER_ANGLE = 4097;
	this.SOURCE_RELATIVE = 514;
	this.TRUE = 1;
	this.FALSE = 0;
	this.NONE = 0;
};
$hxClasses["lime.audio.ALAudioContext"] = lime_audio_ALAudioContext;
lime_audio_ALAudioContext.__name__ = ["lime","audio","ALAudioContext"];
lime_audio_ALAudioContext.prototype = {
	NONE: null
	,FALSE: null
	,TRUE: null
	,SOURCE_RELATIVE: null
	,CONE_INNER_ANGLE: null
	,CONE_OUTER_ANGLE: null
	,PITCH: null
	,POSITION: null
	,DIRECTION: null
	,VELOCITY: null
	,LOOPING: null
	,BUFFER: null
	,GAIN: null
	,MIN_GAIN: null
	,MAX_GAIN: null
	,ORIENTATION: null
	,SOURCE_STATE: null
	,INITIAL: null
	,PLAYING: null
	,PAUSED: null
	,STOPPED: null
	,BUFFERS_QUEUED: null
	,BUFFERS_PROCESSED: null
	,REFERENCE_DISTANCE: null
	,ROLLOFF_FACTOR: null
	,CONE_OUTER_GAIN: null
	,MAX_DISTANCE: null
	,SEC_OFFSET: null
	,SAMPLE_OFFSET: null
	,BYTE_OFFSET: null
	,SOURCE_TYPE: null
	,STATIC: null
	,STREAMING: null
	,UNDETERMINED: null
	,FORMAT_MONO8: null
	,FORMAT_MONO16: null
	,FORMAT_STEREO8: null
	,FORMAT_STEREO16: null
	,FREQUENCY: null
	,BITS: null
	,CHANNELS: null
	,SIZE: null
	,NO_ERROR: null
	,INVALID_NAME: null
	,INVALID_ENUM: null
	,INVALID_VALUE: null
	,INVALID_OPERATION: null
	,OUT_OF_MEMORY: null
	,VENDOR: null
	,VERSION: null
	,RENDERER: null
	,EXTENSIONS: null
	,DOPPLER_FACTOR: null
	,SPEED_OF_SOUND: null
	,DOPPLER_VELOCITY: null
	,DISTANCE_MODEL: null
	,INVERSE_DISTANCE: null
	,INVERSE_DISTANCE_CLAMPED: null
	,LINEAR_DISTANCE: null
	,LINEAR_DISTANCE_CLAMPED: null
	,EXPONENT_DISTANCE: null
	,EXPONENT_DISTANCE_CLAMPED: null
	,bufferData: function(buffer,format,data,size,freq) {
		lime_audio_openal_AL.bufferData(buffer,format,data,size,freq);
	}
	,buffer3f: function(buffer,param,value1,value2,value3) {
		lime_audio_openal_AL.buffer3f(buffer,param,value1,value2,value3);
	}
	,buffer3i: function(buffer,param,value1,value2,value3) {
		lime_audio_openal_AL.buffer3i(buffer,param,value1,value2,value3);
	}
	,bufferf: function(buffer,param,value) {
		lime_audio_openal_AL.bufferf(buffer,param,value);
	}
	,bufferfv: function(buffer,param,values) {
		lime_audio_openal_AL.bufferfv(buffer,param,values);
	}
	,bufferi: function(buffer,param,value) {
		lime_audio_openal_AL.bufferi(buffer,param,value);
	}
	,bufferiv: function(buffer,param,values) {
		lime_audio_openal_AL.bufferiv(buffer,param,values);
	}
	,deleteBuffer: function(buffer) {
		lime_audio_openal_AL.deleteBuffer(buffer);
	}
	,deleteBuffers: function(buffers) {
		lime_audio_openal_AL.deleteBuffers(buffers);
	}
	,deleteSource: function(source) {
		lime_audio_openal_AL.deleteSource(source);
	}
	,deleteSources: function(sources) {
		lime_audio_openal_AL.deleteSources(sources);
	}
	,disable: function(capability) {
		lime_audio_openal_AL.disable(capability);
	}
	,distanceModel: function(distanceModel) {
		lime_audio_openal_AL.distanceModel(distanceModel);
	}
	,dopplerFactor: function(value) {
		lime_audio_openal_AL.dopplerFactor(value);
	}
	,dopplerVelocity: function(value) {
		lime_audio_openal_AL.dopplerVelocity(value);
	}
	,enable: function(capability) {
		lime_audio_openal_AL.enable(capability);
	}
	,genSource: function() {
		return lime_audio_openal_AL.genSource();
	}
	,genSources: function(n) {
		return lime_audio_openal_AL.genSources(n);
	}
	,genBuffer: function() {
		return lime_audio_openal_AL.genBuffer();
	}
	,genBuffers: function(n) {
		return lime_audio_openal_AL.genBuffers(n);
	}
	,getBoolean: function(param) {
		return lime_audio_openal_AL.getBoolean(param);
	}
	,getBooleanv: function(param,count) {
		if(count == null) count = 1;
		return lime_audio_openal_AL.getBooleanv(param,count);
	}
	,getBuffer3f: function(buffer,param) {
		return lime_audio_openal_AL.getBuffer3f(buffer,param);
	}
	,getBuffer3i: function(buffer,param) {
		return lime_audio_openal_AL.getBuffer3i(buffer,param);
	}
	,getBufferf: function(buffer,param) {
		return lime_audio_openal_AL.getBufferf(buffer,param);
	}
	,getBufferfv: function(buffer,param,count) {
		if(count == null) count = 1;
		return lime_audio_openal_AL.getBufferfv(buffer,param,count);
	}
	,getBufferi: function(buffer,param) {
		return lime_audio_openal_AL.getBufferi(buffer,param);
	}
	,getBufferiv: function(buffer,param,count) {
		if(count == null) count = 1;
		return lime_audio_openal_AL.getBufferiv(buffer,param,count);
	}
	,getDouble: function(param) {
		return lime_audio_openal_AL.getDouble(param);
	}
	,getDoublev: function(param,count) {
		if(count == null) count = 1;
		return lime_audio_openal_AL.getDoublev(param,count);
	}
	,getEnumValue: function(ename) {
		return lime_audio_openal_AL.getEnumValue(ename);
	}
	,getError: function() {
		return lime_audio_openal_AL.getError();
	}
	,getErrorString: function() {
		return lime_audio_openal_AL.getErrorString();
	}
	,getFloat: function(param) {
		return lime_audio_openal_AL.getFloat(param);
	}
	,getFloatv: function(param,count) {
		if(count == null) count = 1;
		return lime_audio_openal_AL.getFloatv(param,count);
	}
	,getInteger: function(param) {
		return lime_audio_openal_AL.getInteger(param);
	}
	,getIntegerv: function(param,count) {
		if(count == null) count = 1;
		return lime_audio_openal_AL.getIntegerv(param,count);
	}
	,getListener3f: function(param) {
		return lime_audio_openal_AL.getListener3f(param);
	}
	,getListener3i: function(param) {
		return lime_audio_openal_AL.getListener3i(param);
	}
	,getListenerf: function(param) {
		return lime_audio_openal_AL.getListenerf(param);
	}
	,getListenerfv: function(param,count) {
		if(count == null) count = 1;
		return lime_audio_openal_AL.getListenerfv(param,count);
	}
	,getListeneri: function(param) {
		return lime_audio_openal_AL.getListeneri(param);
	}
	,getListeneriv: function(param,count) {
		if(count == null) count = 1;
		return lime_audio_openal_AL.getListeneriv(param,count);
	}
	,getProcAddress: function(fname) {
		return lime_audio_openal_AL.getProcAddress(fname);
	}
	,getSource3f: function(source,param) {
		return lime_audio_openal_AL.getSource3f(source,param);
	}
	,getSourcef: function(source,param) {
		return lime_audio_openal_AL.getSourcef(source,param);
	}
	,getSource3i: function(source,param) {
		return lime_audio_openal_AL.getSource3i(source,param);
	}
	,getSourcefv: function(source,param,count) {
		if(count == null) count = 1;
		return lime_audio_openal_AL.getSourcefv(source,param);
	}
	,getSourcei: function(source,param) {
		return lime_audio_openal_AL.getSourcei(source,param);
	}
	,getSourceiv: function(source,param,count) {
		if(count == null) count = 1;
		return lime_audio_openal_AL.getSourceiv(source,param,count);
	}
	,getString: function(param) {
		return lime_audio_openal_AL.getString(param);
	}
	,isBuffer: function(buffer) {
		return lime_audio_openal_AL.isBuffer(buffer);
	}
	,isEnabled: function(capability) {
		return lime_audio_openal_AL.isEnabled(capability);
	}
	,isExtensionPresent: function(extname) {
		return lime_audio_openal_AL.isExtensionPresent(extname);
	}
	,isSource: function(source) {
		return lime_audio_openal_AL.isSource(source);
	}
	,listener3f: function(param,value1,value2,value3) {
		lime_audio_openal_AL.listener3f(param,value1,value2,value3);
	}
	,listener3i: function(param,value1,value2,value3) {
		lime_audio_openal_AL.listener3i(param,value1,value2,value3);
	}
	,listenerf: function(param,value) {
		lime_audio_openal_AL.listenerf(param,value);
	}
	,listenerfv: function(param,values) {
		lime_audio_openal_AL.listenerfv(param,values);
	}
	,listeneri: function(param,value) {
		lime_audio_openal_AL.listeneri(param,value);
	}
	,listeneriv: function(param,values) {
		lime_audio_openal_AL.listeneriv(param,values);
	}
	,source3f: function(source,param,value1,value2,value3) {
		lime_audio_openal_AL.source3f(source,param,value1,value2,value3);
	}
	,source3i: function(source,param,value1,value2,value3) {
		lime_audio_openal_AL.source3i(source,param,value1,value2,value3);
	}
	,sourcef: function(source,param,value) {
		lime_audio_openal_AL.sourcef(source,param,value);
	}
	,sourcefv: function(source,param,values) {
		lime_audio_openal_AL.sourcefv(source,param,values);
	}
	,sourcei: function(source,param,value) {
		lime_audio_openal_AL.sourcei(source,param,value);
	}
	,sourceiv: function(source,param,values) {
		lime_audio_openal_AL.sourceiv(source,param,values);
	}
	,sourcePlay: function(source) {
		lime_audio_openal_AL.sourcePlay(source);
	}
	,sourcePlayv: function(sources) {
		lime_audio_openal_AL.sourcePlayv(sources);
	}
	,sourceStop: function(source) {
		lime_audio_openal_AL.sourceStop(source);
	}
	,sourceStopv: function(sources) {
		lime_audio_openal_AL.sourceStopv(sources);
	}
	,sourceRewind: function(source) {
		lime_audio_openal_AL.sourceRewind(source);
	}
	,sourceRewindv: function(sources) {
		lime_audio_openal_AL.sourceRewindv(sources);
	}
	,sourcePause: function(source) {
		lime_audio_openal_AL.sourcePause(source);
	}
	,sourcePausev: function(sources) {
		lime_audio_openal_AL.sourcePausev(sources);
	}
	,sourceQueueBuffer: function(source,buffer) {
		lime_audio_openal_AL.sourceQueueBuffer(source,buffer);
	}
	,sourceQueueBuffers: function(source,nb,buffers) {
		lime_audio_openal_AL.sourceQueueBuffers(source,nb,buffers);
	}
	,sourceUnqueueBuffer: function(source) {
		return lime_audio_openal_AL.sourceUnqueueBuffer(source);
	}
	,sourceUnqueueBuffers: function(source,nb) {
		return lime_audio_openal_AL.sourceUnqueueBuffers(source,nb);
	}
	,speedOfSound: function(value) {
		lime_audio_openal_AL.speedOfSound(value);
	}
	,__class__: lime_audio_ALAudioContext
};
var lime_audio_ALCAudioContext = function() {
	this.ALL_DEVICES_SPECIFIER = 4115;
	this.DEFAULT_ALL_DEVICES_SPECIFIER = 4114;
	this.ENUMERATE_ALL_EXT = 1;
	this.EXTENSIONS = 4102;
	this.DEVICE_SPECIFIER = 4101;
	this.DEFAULT_DEVICE_SPECIFIER = 4100;
	this.ALL_ATTRIBUTES = 4099;
	this.ATTRIBUTES_SIZE = 4098;
	this.OUT_OF_MEMORY = 40965;
	this.INVALID_VALUE = 40964;
	this.INVALID_ENUM = 40963;
	this.INVALID_CONTEXT = 40962;
	this.INVALID_DEVICE = 40961;
	this.NO_ERROR = 0;
	this.STEREO_SOURCES = 4113;
	this.MONO_SOURCES = 4112;
	this.SYNC = 4105;
	this.REFRESH = 4104;
	this.FREQUENCY = 4103;
	this.TRUE = 1;
	this.FALSE = 0;
};
$hxClasses["lime.audio.ALCAudioContext"] = lime_audio_ALCAudioContext;
lime_audio_ALCAudioContext.__name__ = ["lime","audio","ALCAudioContext"];
lime_audio_ALCAudioContext.prototype = {
	FALSE: null
	,TRUE: null
	,FREQUENCY: null
	,REFRESH: null
	,SYNC: null
	,MONO_SOURCES: null
	,STEREO_SOURCES: null
	,NO_ERROR: null
	,INVALID_DEVICE: null
	,INVALID_CONTEXT: null
	,INVALID_ENUM: null
	,INVALID_VALUE: null
	,OUT_OF_MEMORY: null
	,ATTRIBUTES_SIZE: null
	,ALL_ATTRIBUTES: null
	,DEFAULT_DEVICE_SPECIFIER: null
	,DEVICE_SPECIFIER: null
	,EXTENSIONS: null
	,ENUMERATE_ALL_EXT: null
	,DEFAULT_ALL_DEVICES_SPECIFIER: null
	,ALL_DEVICES_SPECIFIER: null
	,closeDevice: function(device) {
		return lime_audio_openal_ALC.closeDevice(device);
	}
	,createContext: function(device,attrlist) {
		return lime_audio_openal_ALC.createContext(device,attrlist);
	}
	,destroyContext: function(context) {
		lime_audio_openal_ALC.destroyContext(context);
	}
	,getContextsDevice: function(context) {
		return lime_audio_openal_ALC.getContextsDevice(context);
	}
	,getCurrentContext: function() {
		return lime_audio_openal_ALC.getCurrentContext();
	}
	,getError: function(device) {
		return lime_audio_openal_ALC.getError(device);
	}
	,getErrorString: function(device) {
		return lime_audio_openal_ALC.getErrorString(device);
	}
	,getIntegerv: function(device,param,count) {
		if(count == null) count = 1;
		return lime_audio_openal_ALC.getIntegerv(device,param,count);
	}
	,getString: function(device,param) {
		return lime_audio_openal_ALC.getString(device,param);
	}
	,makeContextCurrent: function(context) {
		return lime_audio_openal_ALC.makeContextCurrent(context);
	}
	,openDevice: function(deviceName) {
		return lime_audio_openal_ALC.openDevice(deviceName);
	}
	,pauseDevice: function(device) {
		lime_audio_openal_ALC.pauseDevice(device);
	}
	,processContext: function(context) {
		lime_audio_openal_ALC.processContext(context);
	}
	,resumeDevice: function(device) {
		lime_audio_openal_ALC.resumeDevice(device);
	}
	,suspendContext: function(context) {
		lime_audio_openal_ALC.suspendContext(context);
	}
	,__class__: lime_audio_ALCAudioContext
};
var lime_audio_AudioBuffer = function() {
};
$hxClasses["lime.audio.AudioBuffer"] = lime_audio_AudioBuffer;
lime_audio_AudioBuffer.__name__ = ["lime","audio","AudioBuffer"];
lime_audio_AudioBuffer.fromBytes = function(bytes) {
	if(bytes == null) return null;
	return null;
};
lime_audio_AudioBuffer.fromFile = function(path) {
	if(path == null) return null;
	var audioBuffer = new lime_audio_AudioBuffer();
	audioBuffer.__srcHowl = new Howl({ src : [path]});
	return audioBuffer;
};
lime_audio_AudioBuffer.fromFiles = function(paths) {
	var audioBuffer = new lime_audio_AudioBuffer();
	audioBuffer.__srcHowl = new Howl({ src : paths});
	return audioBuffer;
};
lime_audio_AudioBuffer.fromURL = function(url,handler) {
	var audioBuffer = new lime_audio_AudioBuffer();
	audioBuffer.__srcHowl = new Howl({ src : [url]});
	audioBuffer.__srcHowl.on("load",function() {
		handler(audioBuffer);
	});
	audioBuffer.__srcHowl.on("loaderror",function() {
		handler(null);
	});
	audioBuffer.__srcHowl.load();
};
lime_audio_AudioBuffer.loadFromFile = function(path) {
	var promise = new lime_app_Promise();
	var audioBuffer = lime_audio_AudioBuffer.fromFile(path);
	if(audioBuffer != null) {
		if(audioBuffer != null) {
			audioBuffer.__srcHowl.on("load",function() {
				promise.complete(audioBuffer);
			});
			audioBuffer.__srcHowl.on("loaderror",function() {
				promise.error(null);
			});
			audioBuffer.__srcHowl.load();
		}
	} else promise.error(null);
	return promise.future;
};
lime_audio_AudioBuffer.loadFromFiles = function(paths) {
	var promise = new lime_app_Promise();
	var audioBuffer = lime_audio_AudioBuffer.fromFiles(paths);
	if(audioBuffer != null) {
		audioBuffer.__srcHowl.on("load",function() {
			promise.complete(audioBuffer);
		});
		audioBuffer.__srcHowl.on("loaderror",function() {
			promise.error(null);
		});
		audioBuffer.__srcHowl.load();
	} else promise.error(null);
	return promise.future;
};
lime_audio_AudioBuffer.prototype = {
	bitsPerSample: null
	,channels: null
	,data: null
	,sampleRate: null
	,__srcAudio: null
	,__srcBuffer: null
	,__srcCustom: null
	,__srcFMODSound: null
	,__srcHowl: null
	,__srcSound: null
	,dispose: function() {
		this.__srcHowl.unload();
	}
	,get_src: function() {
		return this.__srcHowl;
	}
	,set_src: function(value) {
		return this.__srcHowl = value;
	}
	,__class__: lime_audio_AudioBuffer
	,__properties__: {set_src:"set_src",get_src:"get_src"}
};
var lime_audio_AudioContext = $hxClasses["lime.audio.AudioContext"] = { __ename__ : ["lime","audio","AudioContext"], __constructs__ : ["OPENAL","HTML5","WEB","FLASH","CUSTOM"] };
lime_audio_AudioContext.OPENAL = function(alc,al) { var $x = ["OPENAL",0,alc,al]; $x.__enum__ = lime_audio_AudioContext; $x.toString = $estr; return $x; };
lime_audio_AudioContext.HTML5 = function(context) { var $x = ["HTML5",1,context]; $x.__enum__ = lime_audio_AudioContext; $x.toString = $estr; return $x; };
lime_audio_AudioContext.WEB = function(context) { var $x = ["WEB",2,context]; $x.__enum__ = lime_audio_AudioContext; $x.toString = $estr; return $x; };
lime_audio_AudioContext.FLASH = function(context) { var $x = ["FLASH",3,context]; $x.__enum__ = lime_audio_AudioContext; $x.toString = $estr; return $x; };
lime_audio_AudioContext.CUSTOM = function(data) { var $x = ["CUSTOM",4,data]; $x.__enum__ = lime_audio_AudioContext; $x.toString = $estr; return $x; };
var lime_audio_AudioManager = function() { };
$hxClasses["lime.audio.AudioManager"] = lime_audio_AudioManager;
lime_audio_AudioManager.__name__ = ["lime","audio","AudioManager"];
lime_audio_AudioManager.init = function(context) {
	if(lime_audio_AudioManager.context == null) {
		if(context == null) try {
			window.AudioContext = window.AudioContext || window.webkitAudioContext;;
			lime_audio_AudioManager.context = lime_audio_AudioContext.WEB(new AudioContext ());
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			lime_audio_AudioManager.context = lime_audio_AudioContext.HTML5(new lime_audio_HTML5AudioContext());
		} else lime_audio_AudioManager.context = context;
	}
};
lime_audio_AudioManager.resume = function() {
	if(lime_audio_AudioManager.context != null) {
		var _g = lime_audio_AudioManager.context;
		switch(_g[1]) {
		case 0:
			var al = _g[3];
			var alc = _g[2];
			var currentContext = alc.getCurrentContext();
			if(currentContext != null) {
				var device = alc.getContextsDevice(currentContext);
				alc.resumeDevice(device);
				alc.processContext(currentContext);
			}
			break;
		default:
		}
	}
};
lime_audio_AudioManager.shutdown = function() {
	if(lime_audio_AudioManager.context != null) {
		var _g = lime_audio_AudioManager.context;
		switch(_g[1]) {
		case 0:
			var al = _g[3];
			var alc = _g[2];
			var currentContext = alc.getCurrentContext();
			if(currentContext != null) {
				var device = alc.getContextsDevice(currentContext);
				alc.makeContextCurrent(null);
				alc.destroyContext(currentContext);
				alc.closeDevice(device);
			}
			break;
		default:
		}
	}
};
lime_audio_AudioManager.suspend = function() {
	if(lime_audio_AudioManager.context != null) {
		var _g = lime_audio_AudioManager.context;
		switch(_g[1]) {
		case 0:
			var al = _g[3];
			var alc = _g[2];
			var currentContext = alc.getCurrentContext();
			if(currentContext != null) {
				alc.suspendContext(currentContext);
				var device = alc.getContextsDevice(currentContext);
				alc.pauseDevice(device);
			}
			break;
		default:
		}
	}
};
var lime_audio_AudioSource = function(buffer,offset,length,loops) {
	if(loops == null) loops = 0;
	if(offset == null) offset = 0;
	this.onComplete = new lime_app__$Event_$Void_$Void();
	this.buffer = buffer;
	this.offset = offset;
	this.backend = new lime__$backend_html5_HTML5AudioSource(this);
	if(length != null && length != 0) this.set_length(length);
	this.set_loops(loops);
	if(buffer != null) this.init();
};
$hxClasses["lime.audio.AudioSource"] = lime_audio_AudioSource;
lime_audio_AudioSource.__name__ = ["lime","audio","AudioSource"];
lime_audio_AudioSource.prototype = {
	onComplete: null
	,buffer: null
	,offset: null
	,backend: null
	,dispose: function() {
		this.backend.dispose();
	}
	,init: function() {
		this.backend.init();
	}
	,play: function() {
		this.backend.play();
	}
	,pause: function() {
		this.backend.pause();
	}
	,stop: function() {
		this.backend.stop();
	}
	,get_currentTime: function() {
		return this.backend.getCurrentTime();
	}
	,set_currentTime: function(value) {
		return this.backend.setCurrentTime(value);
	}
	,get_gain: function() {
		return this.backend.getGain();
	}
	,set_gain: function(value) {
		return this.backend.setGain(value);
	}
	,get_length: function() {
		return this.backend.getLength();
	}
	,set_length: function(value) {
		return this.backend.setLength(value);
	}
	,get_loops: function() {
		return this.backend.getLoops();
	}
	,set_loops: function(value) {
		return this.backend.setLoops(value);
	}
	,get_position: function() {
		return this.backend.getPosition();
	}
	,set_position: function(value) {
		return this.backend.setPosition(value);
	}
	,__class__: lime_audio_AudioSource
	,__properties__: {set_position:"set_position",get_position:"get_position",set_loops:"set_loops",get_loops:"get_loops",set_length:"set_length",get_length:"get_length",set_gain:"set_gain",get_gain:"get_gain",set_currentTime:"set_currentTime",get_currentTime:"get_currentTime"}
};
var lime_audio_FlashAudioContext = function() {
};
$hxClasses["lime.audio.FlashAudioContext"] = lime_audio_FlashAudioContext;
lime_audio_FlashAudioContext.__name__ = ["lime","audio","FlashAudioContext"];
lime_audio_FlashAudioContext.prototype = {
	createBuffer: function(stream,context) {
		return null;
	}
	,getBytesLoaded: function(buffer) {
		return 0;
	}
	,getBytesTotal: function(buffer) {
		return 0;
	}
	,getID3: function(buffer) {
		return null;
	}
	,getIsBuffering: function(buffer) {
		return false;
	}
	,getIsURLInaccessible: function(buffer) {
		return false;
	}
	,getLength: function(buffer) {
		return 0;
	}
	,getURL: function(buffer) {
		return null;
	}
	,close: function(buffer) {
	}
	,extract: function(buffer,target,length,startPosition) {
		if(startPosition == null) startPosition = -1;
		return 0;
	}
	,load: function(buffer,stream,context) {
	}
	,loadCompressedDataFromByteArray: function(buffer,bytes,bytesLength) {
	}
	,loadPCMFromByteArray: function(buffer,bytes,samples,format,stereo,sampleRate) {
		if(sampleRate == null) sampleRate = 44100;
		if(stereo == null) stereo = true;
	}
	,play: function(buffer,startTime,loops,sndTransform) {
		if(loops == null) loops = 0;
		if(startTime == null) startTime = 0;
		return null;
	}
	,__class__: lime_audio_FlashAudioContext
};
var lime_audio_HTML5AudioContext = function() {
	this.NETWORK_NO_SOURCE = 3;
	this.NETWORK_LOADING = 2;
	this.NETWORK_IDLE = 1;
	this.NETWORK_EMPTY = 0;
	this.HAVE_NOTHING = 0;
	this.HAVE_METADATA = 1;
	this.HAVE_FUTURE_DATA = 3;
	this.HAVE_ENOUGH_DATA = 4;
	this.HAVE_CURRENT_DATA = 2;
};
$hxClasses["lime.audio.HTML5AudioContext"] = lime_audio_HTML5AudioContext;
lime_audio_HTML5AudioContext.__name__ = ["lime","audio","HTML5AudioContext"];
lime_audio_HTML5AudioContext.prototype = {
	HAVE_CURRENT_DATA: null
	,HAVE_ENOUGH_DATA: null
	,HAVE_FUTURE_DATA: null
	,HAVE_METADATA: null
	,HAVE_NOTHING: null
	,NETWORK_EMPTY: null
	,NETWORK_IDLE: null
	,NETWORK_LOADING: null
	,NETWORK_NO_SOURCE: null
	,canPlayType: function(buffer,type) {
		if(buffer.__srcAudio != null) return buffer.__srcAudio.canPlayType(type);
		return null;
	}
	,createBuffer: function(urlString) {
		var buffer = new lime_audio_AudioBuffer();
		buffer.__srcAudio = new Audio();
		buffer.__srcAudio.src = urlString;
		return buffer;
	}
	,getAutoplay: function(buffer) {
		if(buffer.__srcAudio != null) return buffer.__srcAudio.autoplay;
		return false;
	}
	,getBuffered: function(buffer) {
		if(buffer.__srcAudio != null) return buffer.__srcAudio.buffered;
		return null;
	}
	,getCurrentSrc: function(buffer) {
		if(buffer.__srcAudio != null) return buffer.__srcAudio.currentSrc;
		return null;
	}
	,getCurrentTime: function(buffer) {
		if(buffer.__srcAudio != null) return buffer.__srcAudio.currentTime;
		return 0;
	}
	,getDefaultPlaybackRate: function(buffer) {
		if(buffer.__srcAudio != null) return buffer.__srcAudio.defaultPlaybackRate;
		return 1;
	}
	,getDuration: function(buffer) {
		if(buffer.__srcAudio != null) return buffer.__srcAudio.duration;
		return 0;
	}
	,getEnded: function(buffer) {
		if(buffer.__srcAudio != null) return buffer.__srcAudio.ended;
		return false;
	}
	,getError: function(buffer) {
		if(buffer.__srcAudio != null) return buffer.__srcAudio.error;
		return null;
	}
	,getLoop: function(buffer) {
		if(buffer.__srcAudio != null) return buffer.__srcAudio.loop;
		return false;
	}
	,getMuted: function(buffer) {
		if(buffer.__srcAudio != null) return buffer.__srcAudio.muted;
		return false;
	}
	,getNetworkState: function(buffer) {
		if(buffer.__srcAudio != null) return buffer.__srcAudio.networkState;
		return 0;
	}
	,getPaused: function(buffer) {
		if(buffer.__srcAudio != null) return buffer.__srcAudio.paused;
		return false;
	}
	,getPlaybackRate: function(buffer) {
		if(buffer.__srcAudio != null) return buffer.__srcAudio.playbackRate;
		return 1;
	}
	,getPlayed: function(buffer) {
		if(buffer.__srcAudio != null) return buffer.__srcAudio.played;
		return null;
	}
	,getPreload: function(buffer) {
		if(buffer.__srcAudio != null) return buffer.__srcAudio.preload;
		return null;
	}
	,getReadyState: function(buffer) {
		if(buffer.__srcAudio != null) return buffer.__srcAudio.readyState;
		return 0;
	}
	,getSeekable: function(buffer) {
		if(buffer.__srcAudio != null) return buffer.__srcAudio.seekable;
		return null;
	}
	,getSeeking: function(buffer) {
		if(buffer.__srcAudio != null) return buffer.__srcAudio.seeking;
		return false;
	}
	,getSrc: function(buffer) {
		if(buffer.__srcAudio != null) return buffer.__srcAudio.src;
		return null;
	}
	,getStartTime: function(buffer) {
		if(buffer.__srcAudio != null) return buffer.__srcAudio.playbackRate;
		return 0;
	}
	,getVolume: function(buffer) {
		if(buffer.__srcAudio != null) return buffer.__srcAudio.volume;
		return 1;
	}
	,load: function(buffer) {
		if(buffer.__srcAudio != null) return buffer.__srcAudio.load();
	}
	,pause: function(buffer) {
		if(buffer.__srcAudio != null) return buffer.__srcAudio.pause();
	}
	,play: function(buffer) {
		if(buffer.__srcAudio != null) return buffer.__srcAudio.play();
	}
	,setAutoplay: function(buffer,value) {
		if(buffer.__srcAudio != null) buffer.__srcAudio.autoplay = value;
	}
	,setCurrentTime: function(buffer,value) {
		if(buffer.__srcAudio != null) buffer.__srcAudio.currentTime = value;
	}
	,setDefaultPlaybackRate: function(buffer,value) {
		if(buffer.__srcAudio != null) buffer.__srcAudio.defaultPlaybackRate = value;
	}
	,setLoop: function(buffer,value) {
		if(buffer.__srcAudio != null) buffer.__srcAudio.loop = value;
	}
	,setMuted: function(buffer,value) {
		if(buffer.__srcAudio != null) buffer.__srcAudio.muted = value;
	}
	,setPlaybackRate: function(buffer,value) {
		if(buffer.__srcAudio != null) buffer.__srcAudio.playbackRate = value;
	}
	,setPreload: function(buffer,value) {
		if(buffer.__srcAudio != null) buffer.__srcAudio.preload = value;
	}
	,setSrc: function(buffer,value) {
		if(buffer.__srcAudio != null) buffer.__srcAudio.src = value;
	}
	,setVolume: function(buffer,value) {
		if(buffer.__srcAudio != null) buffer.__srcAudio.volume = value;
	}
	,__class__: lime_audio_HTML5AudioContext
};
var lime_audio_openal_AL = function() { };
$hxClasses["lime.audio.openal.AL"] = lime_audio_openal_AL;
lime_audio_openal_AL.__name__ = ["lime","audio","openal","AL"];
lime_audio_openal_AL.bufferData = function(buffer,format,data,size,freq) {
};
lime_audio_openal_AL.buffer3f = function(buffer,param,value1,value2,value3) {
};
lime_audio_openal_AL.buffer3i = function(buffer,param,value1,value2,value3) {
};
lime_audio_openal_AL.bufferf = function(buffer,param,value) {
};
lime_audio_openal_AL.bufferfv = function(buffer,param,values) {
};
lime_audio_openal_AL.bufferi = function(buffer,param,value) {
};
lime_audio_openal_AL.bufferiv = function(buffer,param,values) {
};
lime_audio_openal_AL.deleteBuffer = function(buffer) {
};
lime_audio_openal_AL.deleteBuffers = function(buffers) {
};
lime_audio_openal_AL.deleteSource = function(source) {
};
lime_audio_openal_AL.deleteSources = function(sources) {
};
lime_audio_openal_AL.disable = function(capability) {
};
lime_audio_openal_AL.distanceModel = function(distanceModel) {
};
lime_audio_openal_AL.dopplerFactor = function(value) {
};
lime_audio_openal_AL.dopplerVelocity = function(value) {
};
lime_audio_openal_AL.enable = function(capability) {
};
lime_audio_openal_AL.genSource = function() {
	return null;
};
lime_audio_openal_AL.genSources = function(n) {
	return null;
};
lime_audio_openal_AL.genBuffer = function() {
	return null;
};
lime_audio_openal_AL.genBuffers = function(n) {
	return null;
};
lime_audio_openal_AL.getBoolean = function(param) {
	return false;
};
lime_audio_openal_AL.getBooleanv = function(param,count) {
	if(count == null) count = 1;
	return null;
};
lime_audio_openal_AL.getBuffer3f = function(buffer,param) {
	return null;
};
lime_audio_openal_AL.getBuffer3i = function(buffer,param) {
	return null;
};
lime_audio_openal_AL.getBufferf = function(buffer,param) {
	return 0;
};
lime_audio_openal_AL.getBufferfv = function(buffer,param,count) {
	if(count == null) count = 1;
	return null;
};
lime_audio_openal_AL.getBufferi = function(buffer,param) {
	return 0;
};
lime_audio_openal_AL.getBufferiv = function(buffer,param,count) {
	if(count == null) count = 1;
	return null;
};
lime_audio_openal_AL.getDouble = function(param) {
	return 0;
};
lime_audio_openal_AL.getDoublev = function(param,count) {
	if(count == null) count = 1;
	return null;
};
lime_audio_openal_AL.getEnumValue = function(ename) {
	return 0;
};
lime_audio_openal_AL.getError = function() {
	return 0;
};
lime_audio_openal_AL.getErrorString = function() {
	var _g = lime_audio_openal_AL.getError();
	switch(_g) {
	case 40961:
		return "INVALID_NAME: Invalid parameter name";
	case 40962:
		return "INVALID_ENUM: Invalid enum value";
	case 40963:
		return "INVALID_VALUE: Invalid parameter value";
	case 40964:
		return "INVALID_OPERATION: Illegal operation or call";
	case 40965:
		return "OUT_OF_MEMORY: OpenAL has run out of memory";
	default:
		return "";
	}
};
lime_audio_openal_AL.getFloat = function(param) {
	return 0;
};
lime_audio_openal_AL.getFloatv = function(param,count) {
	if(count == null) count = 1;
	return null;
};
lime_audio_openal_AL.getInteger = function(param) {
	return 0;
};
lime_audio_openal_AL.getIntegerv = function(param,count) {
	if(count == null) count = 1;
	return null;
};
lime_audio_openal_AL.getListener3f = function(param) {
	return null;
};
lime_audio_openal_AL.getListener3i = function(param) {
	return null;
};
lime_audio_openal_AL.getListenerf = function(param) {
	return 0;
};
lime_audio_openal_AL.getListenerfv = function(param,count) {
	if(count == null) count = 1;
	return null;
};
lime_audio_openal_AL.getListeneri = function(param) {
	return 0;
};
lime_audio_openal_AL.getListeneriv = function(param,count) {
	if(count == null) count = 1;
	return null;
};
lime_audio_openal_AL.getProcAddress = function(fname) {
	return null;
};
lime_audio_openal_AL.getSource3f = function(source,param) {
	return null;
};
lime_audio_openal_AL.getSourcef = function(source,param) {
	return 0;
};
lime_audio_openal_AL.getSource3i = function(source,param) {
	return null;
};
lime_audio_openal_AL.getSourcefv = function(source,param,count) {
	if(count == null) count = 1;
	return null;
};
lime_audio_openal_AL.getSourcei = function(source,param) {
	return 0;
};
lime_audio_openal_AL.getSourceiv = function(source,param,count) {
	if(count == null) count = 1;
	return null;
};
lime_audio_openal_AL.getString = function(param) {
	return null;
};
lime_audio_openal_AL.isBuffer = function(buffer) {
	return false;
};
lime_audio_openal_AL.isEnabled = function(capability) {
	return false;
};
lime_audio_openal_AL.isExtensionPresent = function(extname) {
	return false;
};
lime_audio_openal_AL.isSource = function(source) {
	return false;
};
lime_audio_openal_AL.listener3f = function(param,value1,value2,value3) {
};
lime_audio_openal_AL.listener3i = function(param,value1,value2,value3) {
};
lime_audio_openal_AL.listenerf = function(param,value) {
};
lime_audio_openal_AL.listenerfv = function(param,values) {
};
lime_audio_openal_AL.listeneri = function(param,value) {
};
lime_audio_openal_AL.listeneriv = function(param,values) {
};
lime_audio_openal_AL.source3f = function(source,param,value1,value2,value3) {
};
lime_audio_openal_AL.source3i = function(source,param,value1,value2,value3) {
};
lime_audio_openal_AL.sourcef = function(source,param,value) {
};
lime_audio_openal_AL.sourcefv = function(source,param,values) {
};
lime_audio_openal_AL.sourcei = function(source,param,value) {
};
lime_audio_openal_AL.sourceiv = function(source,param,values) {
};
lime_audio_openal_AL.sourcePlay = function(source) {
};
lime_audio_openal_AL.sourcePlayv = function(sources) {
};
lime_audio_openal_AL.sourceStop = function(source) {
};
lime_audio_openal_AL.sourceStopv = function(sources) {
};
lime_audio_openal_AL.sourceRewind = function(source) {
};
lime_audio_openal_AL.sourceRewindv = function(sources) {
};
lime_audio_openal_AL.sourcePause = function(source) {
};
lime_audio_openal_AL.sourcePausev = function(sources) {
};
lime_audio_openal_AL.sourceQueueBuffer = function(source,buffer) {
};
lime_audio_openal_AL.sourceQueueBuffers = function(source,nb,buffers) {
};
lime_audio_openal_AL.sourceUnqueueBuffer = function(source) {
	return 0;
};
lime_audio_openal_AL.sourceUnqueueBuffers = function(source,nb) {
	return null;
};
lime_audio_openal_AL.speedOfSound = function(value) {
};
var lime_audio_openal__$ALBuffer_ALBuffer_$Impl_$ = {};
$hxClasses["lime.audio.openal._ALBuffer.ALBuffer_Impl_"] = lime_audio_openal__$ALBuffer_ALBuffer_$Impl_$;
lime_audio_openal__$ALBuffer_ALBuffer_$Impl_$.__name__ = ["lime","audio","openal","_ALBuffer","ALBuffer_Impl_"];
lime_audio_openal__$ALBuffer_ALBuffer_$Impl_$._new = function(handle) {
	return handle;
};
var lime_audio_openal_ALC = function() { };
$hxClasses["lime.audio.openal.ALC"] = lime_audio_openal_ALC;
lime_audio_openal_ALC.__name__ = ["lime","audio","openal","ALC"];
lime_audio_openal_ALC.closeDevice = function(device) {
	return false;
};
lime_audio_openal_ALC.createContext = function(device,attrlist) {
	return null;
};
lime_audio_openal_ALC.destroyContext = function(context) {
};
lime_audio_openal_ALC.getContextsDevice = function(context) {
	return null;
};
lime_audio_openal_ALC.getCurrentContext = function() {
	return null;
};
lime_audio_openal_ALC.getError = function(device) {
	return 0;
};
lime_audio_openal_ALC.getErrorString = function(device) {
	var _g = lime_audio_openal_ALC.getError(device);
	switch(_g) {
	case 40961:
		return "INVALID_DEVICE: Invalid device (or no device?)";
	case 40962:
		return "INVALID_CONTEXT: Invalid context (or no context?)";
	case 40963:
		return "INVALID_ENUM: Invalid enum value";
	case 40964:
		return "INVALID_VALUE: Invalid param value";
	case 40965:
		return "OUT_OF_MEMORY: OpenAL has run out of memory";
	default:
		return "";
	}
};
lime_audio_openal_ALC.getIntegerv = function(device,param,size) {
	return null;
};
lime_audio_openal_ALC.getString = function(device,param) {
	return null;
};
lime_audio_openal_ALC.makeContextCurrent = function(context) {
	return false;
};
lime_audio_openal_ALC.openDevice = function(deviceName) {
	return null;
};
lime_audio_openal_ALC.pauseDevice = function(device) {
};
lime_audio_openal_ALC.processContext = function(context) {
};
lime_audio_openal_ALC.resumeDevice = function(device) {
};
lime_audio_openal_ALC.suspendContext = function(context) {
};
var lime_audio_openal__$ALContext_ALContext_$Impl_$ = {};
$hxClasses["lime.audio.openal._ALContext.ALContext_Impl_"] = lime_audio_openal__$ALContext_ALContext_$Impl_$;
lime_audio_openal__$ALContext_ALContext_$Impl_$.__name__ = ["lime","audio","openal","_ALContext","ALContext_Impl_"];
lime_audio_openal__$ALContext_ALContext_$Impl_$._new = function(handle) {
	return handle;
};
var lime_audio_openal__$ALDevice_ALDevice_$Impl_$ = {};
$hxClasses["lime.audio.openal._ALDevice.ALDevice_Impl_"] = lime_audio_openal__$ALDevice_ALDevice_$Impl_$;
lime_audio_openal__$ALDevice_ALDevice_$Impl_$.__name__ = ["lime","audio","openal","_ALDevice","ALDevice_Impl_"];
lime_audio_openal__$ALDevice_ALDevice_$Impl_$._new = function(handle) {
	return handle;
};
var lime_audio_openal__$ALSource_ALSource_$Impl_$ = {};
$hxClasses["lime.audio.openal._ALSource.ALSource_Impl_"] = lime_audio_openal__$ALSource_ALSource_$Impl_$;
lime_audio_openal__$ALSource_ALSource_$Impl_$.__name__ = ["lime","audio","openal","_ALSource","ALSource_Impl_"];
lime_audio_openal__$ALSource_ALSource_$Impl_$._new = function(handle) {
	return handle;
};
var lime_graphics_ConsoleRenderContext = function() {
};
$hxClasses["lime.graphics.ConsoleRenderContext"] = lime_graphics_ConsoleRenderContext;
lime_graphics_ConsoleRenderContext.__name__ = ["lime","graphics","ConsoleRenderContext"];
lime_graphics_ConsoleRenderContext.prototype = {
	createIndexBuffer: function(indices,count) {
		return new lime_graphics_console_IndexBuffer();
	}
	,createVertexBuffer: function(decl,count) {
		return new lime_graphics_console_VertexBuffer();
	}
	,lookupShader: function(name) {
		return new lime_graphics_console_Shader();
	}
	,clear: function(r,g,b,a,depth,stencil) {
		if(stencil == null) stencil = 0;
		if(depth == null) depth = 1.0;
	}
	,bindShader: function(shader) {
	}
	,setViewport: function(x,y,width,height,nearPlane,farPlane) {
		if(farPlane == null) farPlane = 1.0;
		if(nearPlane == null) nearPlane = 0.0;
	}
	,setVertexShaderConstantF: function(startRegister,vec4,vec4count) {
	}
	,setVertexSource: function(vb) {
	}
	,setIndexSource: function(ib) {
	}
	,draw: function(primitive,startVertex,primitiveCount) {
	}
	,drawIndexed: function(primitive,vertexCount,startIndex,primitiveCount) {
	}
	,get_width: function() {
		return 0;
	}
	,get_height: function() {
		return 0;
	}
	,__class__: lime_graphics_ConsoleRenderContext
	,__properties__: {get_height:"get_height",get_width:"get_width"}
};
var lime_graphics_FlashRenderContext = function() {
};
$hxClasses["lime.graphics.FlashRenderContext"] = lime_graphics_FlashRenderContext;
lime_graphics_FlashRenderContext.__name__ = ["lime","graphics","FlashRenderContext"];
lime_graphics_FlashRenderContext.prototype = {
	accessibilityImplementation: null
	,accessibilityProperties: null
	,alpha: null
	,blendMode: null
	,blendShader: null
	,buttonMode: null
	,cacheAsBitmap: null
	,contextMenu: null
	,doubleClickEnabled: null
	,dropTarget: null
	,filters: null
	,focusRect: null
	,graphics: null
	,height: null
	,hitArea: null
	,loaderInfo: null
	,mask: null
	,mouseChildren: null
	,mouseEnabled: null
	,mouseX: null
	,mouseY: null
	,name: null
	,needsSoftKeyboard: null
	,numChildren: null
	,opaqueBackground: null
	,parent: null
	,root: null
	,rotation: null
	,rotationX: null
	,rotationY: null
	,rotationZ: null
	,scale9Grid: null
	,scaleX: null
	,scaleY: null
	,scaleZ: null
	,scrollRect: null
	,softKeyboardInputAreaOfInterest: null
	,soundTransform: null
	,stage: null
	,tabChildren: null
	,tabEnabled: null
	,tabIndex: null
	,textSnapshot: null
	,transform: null
	,useHandCursor: null
	,visible: null
	,width: null
	,x: null
	,y: null
	,z: null
	,addChild: function(child) {
		return null;
	}
	,addChildAt: function(child,index) {
		return null;
	}
	,addEventListener: function(type,listener,useCapture,priority,useWeakReference) {
		if(useWeakReference == null) useWeakReference = false;
		if(priority == null) priority = 0;
		if(useCapture == null) useCapture = false;
	}
	,areInaccessibleObjectsUnderPoint: function(point) {
		return false;
	}
	,contains: function(child) {
		return false;
	}
	,dispatchEvent: function(event) {
		return false;
	}
	,getBounds: function(targetCoordinateSpace) {
		return null;
	}
	,getChildAt: function(index) {
		return null;
	}
	,getChildByName: function(name) {
		return null;
	}
	,getChildIndex: function(child) {
		return 0;
	}
	,getObjectsUnderPoint: function(point) {
		return null;
	}
	,getRect: function(targetCoordinateSpace) {
		return null;
	}
	,globalToLocal: function(point) {
		return null;
	}
	,globalToLocal3D: function(point) {
		return null;
	}
	,hasEventListener: function(type) {
		return false;
	}
	,hitTestObject: function(obj) {
		return false;
	}
	,hitTestPoint: function(x,y,shapeFlag) {
		if(shapeFlag == null) shapeFlag = false;
		return false;
	}
	,local3DToGlobal: function(point3d) {
		return null;
	}
	,localToGlobal: function(point) {
		return null;
	}
	,removeChild: function(child) {
		return null;
	}
	,removeChildAt: function(index) {
		return null;
	}
	,removeChildren: function(beginIndex,endIndex) {
		if(endIndex == null) endIndex = 2147483647;
		if(beginIndex == null) beginIndex = 0;
	}
	,removeEventListener: function(type,listener,useCapture) {
		if(useCapture == null) useCapture = false;
	}
	,requestSoftKeyboard: function() {
		return false;
	}
	,setChildIndex: function(child,index) {
	}
	,startDrag: function(lockCenter,bounds) {
		if(lockCenter == null) lockCenter = false;
	}
	,startTouchDrag: function(touchPointID,lockCenter,bounds) {
		if(lockCenter == null) lockCenter = false;
	}
	,stopAllMovieClips: function() {
	}
	,stopDrag: function() {
	}
	,stopTouchDrag: function(touchPointID) {
	}
	,swapChildren: function(child1,child2) {
	}
	,swapChildrenAt: function(index1,index2) {
	}
	,toString: function() {
		return null;
	}
	,willTrigger: function(type) {
		return false;
	}
	,__class__: lime_graphics_FlashRenderContext
};
var lime_graphics_Image = function(buffer,offsetX,offsetY,width,height,color,type) {
	if(height == null) height = -1;
	if(width == null) width = -1;
	if(offsetY == null) offsetY = 0;
	if(offsetX == null) offsetX = 0;
	this.offsetX = offsetX;
	this.offsetY = offsetY;
	this.width = width;
	this.height = height;
	this.version = 0;
	if(type == null) {
		if(lime_app_Application.current != null && lime_app_Application.current.__renderers[0] != null) {
			var _g = lime_app_Application.current.__renderers[0].context;
			switch(_g[1]) {
			case 2:case 1:
				this.type = lime_graphics_ImageType.CANVAS;
				break;
			case 3:
				this.type = lime_graphics_ImageType.FLASH;
				break;
			default:
				this.type = lime_graphics_ImageType.DATA;
			}
		} else this.type = lime_graphics_ImageType.DATA;
	} else this.type = type;
	if(buffer == null) {
		if(width > 0 && height > 0) {
			var _g1 = this.type;
			switch(_g1[1]) {
			case 0:
				this.buffer = new lime_graphics_ImageBuffer(null,width,height);
				lime_graphics_utils_ImageCanvasUtil.createCanvas(this,width,height);
				if(color != null) this.fillRect(new lime_math_Rectangle(0,0,width,height),color);
				break;
			case 1:
				this.buffer = new lime_graphics_ImageBuffer((function($this) {
					var $r;
					var elements = width * height * 4;
					var this1;
					if(elements != null) this1 = new Uint8Array(elements); else this1 = null;
					$r = this1;
					return $r;
				}(this)),width,height);
				if(color != null) this.fillRect(new lime_math_Rectangle(0,0,width,height),color);
				break;
			case 2:
				break;
			default:
			}
		}
	} else this.__fromImageBuffer(buffer);
};
$hxClasses["lime.graphics.Image"] = lime_graphics_Image;
lime_graphics_Image.__name__ = ["lime","graphics","Image"];
lime_graphics_Image.fromBase64 = function(base64,type,onload) {
	if(base64 == null) return null;
	var image = new lime_graphics_Image();
	image.__fromBase64(base64,type,onload);
	return image;
};
lime_graphics_Image.fromBitmapData = function(bitmapData) {
	if(bitmapData == null) return null;
	return bitmapData.image;
};
lime_graphics_Image.fromBytes = function(bytes,onload) {
	if(bytes == null) return null;
	var image = new lime_graphics_Image();
	image.__fromBytes(bytes,onload);
	return image;
};
lime_graphics_Image.fromCanvas = function(canvas) {
	if(canvas == null) return null;
	var buffer = new lime_graphics_ImageBuffer(null,canvas.width,canvas.height);
	buffer.set_src(canvas);
	var image = new lime_graphics_Image(buffer);
	image.type = lime_graphics_ImageType.CANVAS;
	return image;
};
lime_graphics_Image.fromFile = function(path,onload,onerror) {
	if(path == null) return null;
	var image = new lime_graphics_Image();
	image.__fromFile(path,onload,onerror);
	return image;
};
lime_graphics_Image.fromImageElement = function(image) {
	if(image == null) return null;
	var buffer = new lime_graphics_ImageBuffer(null,image.width,image.height);
	buffer.set_src(image);
	var _image = new lime_graphics_Image(buffer);
	_image.type = lime_graphics_ImageType.CANVAS;
	return _image;
};
lime_graphics_Image.loadFromBase64 = function(base64,type) {
	var promise = new lime_app_Promise();
	lime_graphics_Image.fromBase64(base64,type,function(image) {
		promise.complete(image);
	});
	return promise.future;
};
lime_graphics_Image.loadFromBytes = function(bytes) {
	var promise = new lime_app_Promise();
	lime_graphics_Image.fromBytes(bytes,function(image) {
		promise.complete(image);
	});
	return promise.future;
};
lime_graphics_Image.loadFromFile = function(path) {
	var promise = new lime_app_Promise();
	lime_graphics_Image.fromFile(path,function(image) {
		promise.complete(image);
	},function() {
		promise.error("");
	});
	return promise.future;
};
lime_graphics_Image.__base64Encode = function(bytes) {
	var extension;
	var _g = bytes.length % 3;
	switch(_g) {
	case 1:
		extension = "==";
		break;
	case 2:
		extension = "=";
		break;
	default:
		extension = "";
	}
	if(lime_graphics_Image.__base64Encoder == null) lime_graphics_Image.__base64Encoder = new haxe_crypto_BaseCode(haxe_io_Bytes.ofString(lime_graphics_Image.__base64Chars));
	return lime_graphics_Image.__base64Encoder.encodeBytes(bytes).toString() + extension;
};
lime_graphics_Image.__isJPG = function(bytes) {
	return bytes.b[0] == 255 && bytes.b[1] == 216;
};
lime_graphics_Image.__isPNG = function(bytes) {
	return bytes.b[0] == 137 && bytes.b[1] == 80 && bytes.b[2] == 78 && bytes.b[3] == 71 && bytes.b[4] == 13 && bytes.b[5] == 10 && bytes.b[6] == 26 && bytes.b[7] == 10;
};
lime_graphics_Image.__isGIF = function(bytes) {
	if(bytes.b[0] == 71 && bytes.b[1] == 73 && bytes.b[2] == 70 && bytes.b[3] == 56) {
		var b = bytes.b[4];
		return (b == 55 || b == 57) && bytes.b[5] == 97;
	}
	return false;
};
lime_graphics_Image.prototype = {
	buffer: null
	,dirty: null
	,height: null
	,offsetX: null
	,offsetY: null
	,rect: null
	,type: null
	,version: null
	,width: null
	,x: null
	,y: null
	,clone: function() {
		if(this.buffer != null) {
			if(this.type == lime_graphics_ImageType.CANVAS) lime_graphics_utils_ImageCanvasUtil.convertToCanvas(this); else lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			var image = new lime_graphics_Image(this.buffer.clone(),this.offsetX,this.offsetY,this.width,this.height,null,this.type);
			image.version = this.version;
			return image;
		} else return new lime_graphics_Image(null,this.offsetX,this.offsetY,this.width,this.height,null,this.type);
	}
	,colorTransform: function(rect,colorMatrix) {
		rect = this.__clipRect(rect);
		if(this.buffer == null || rect == null) return;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.colorTransform(this,rect,colorMatrix);
			break;
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			lime_graphics_utils_ImageDataUtil.colorTransform(this,rect,colorMatrix);
			break;
		case 2:
			rect.offset(this.offsetX,this.offsetY);
			this.buffer.__srcBitmapData.colorTransform(rect.__toFlashRectangle(),lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__toFlashColorTransform(colorMatrix));
			break;
		default:
		}
	}
	,copyChannel: function(sourceImage,sourceRect,destPoint,sourceChannel,destChannel) {
		sourceRect = this.__clipRect(sourceRect);
		if(this.buffer == null || sourceRect == null) return;
		if(destChannel == lime_graphics_ImageChannel.ALPHA && !this.get_transparent()) return;
		if(sourceRect.width <= 0 || sourceRect.height <= 0) return;
		if(sourceRect.x + sourceRect.width > sourceImage.width) sourceRect.width = sourceImage.width - sourceRect.x;
		if(sourceRect.y + sourceRect.height > sourceImage.height) sourceRect.height = sourceImage.height - sourceRect.y;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.copyChannel(this,sourceImage,sourceRect,destPoint,sourceChannel,destChannel);
			break;
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			lime_graphics_utils_ImageDataUtil.copyChannel(this,sourceImage,sourceRect,destPoint,sourceChannel,destChannel);
			break;
		case 2:
			var srcChannel;
			switch(sourceChannel[1]) {
			case 0:
				srcChannel = 1;
				break;
			case 1:
				srcChannel = 2;
				break;
			case 2:
				srcChannel = 4;
				break;
			case 3:
				srcChannel = 8;
				break;
			}
			var dstChannel;
			switch(destChannel[1]) {
			case 0:
				dstChannel = 1;
				break;
			case 1:
				dstChannel = 2;
				break;
			case 2:
				dstChannel = 4;
				break;
			case 3:
				dstChannel = 8;
				break;
			}
			sourceRect.offset(sourceImage.offsetX,sourceImage.offsetY);
			destPoint.offset(this.offsetX,this.offsetY);
			this.buffer.__srcBitmapData.copyChannel(sourceImage.buffer.get_src(),sourceRect.__toFlashRectangle(),destPoint.__toFlashPoint(),srcChannel,dstChannel);
			break;
		default:
		}
	}
	,copyPixels: function(sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha) {
		if(mergeAlpha == null) mergeAlpha = false;
		if(this.buffer == null || sourceImage == null) return;
		if(sourceRect.width <= 0 || sourceRect.height <= 0) return;
		if(this.width <= 0 || this.height <= 0) return;
		if(sourceRect.x + sourceRect.width > sourceImage.width) sourceRect.width = sourceImage.width - sourceRect.x;
		if(sourceRect.y + sourceRect.height > sourceImage.height) sourceRect.height = sourceImage.height - sourceRect.y;
		if(sourceRect.x < 0) {
			sourceRect.width += sourceRect.x;
			sourceRect.x = 0;
		}
		if(sourceRect.y < 0) {
			sourceRect.height += sourceRect.y;
			sourceRect.y = 0;
		}
		if(destPoint.x + sourceRect.width > this.width) sourceRect.width = this.width - destPoint.x;
		if(destPoint.y + sourceRect.height > this.height) sourceRect.height = this.height - destPoint.y;
		if(destPoint.x < 0) {
			sourceRect.width += destPoint.x;
			sourceRect.x -= destPoint.x;
			destPoint.x = 0;
		}
		if(destPoint.y < 0) {
			sourceRect.height += destPoint.y;
			sourceRect.y -= destPoint.y;
			destPoint.y = 0;
		}
		if(sourceImage == this) sourceImage = this.clone();
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.convertToCanvas(this);
			lime_graphics_utils_ImageCanvasUtil.copyPixels(this,sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha);
			break;
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			lime_graphics_utils_ImageCanvasUtil.convertToData(sourceImage);
			lime_graphics_utils_ImageDataUtil.copyPixels(this,sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha);
			break;
		case 2:
			sourceRect.offset(sourceImage.offsetX,sourceImage.offsetY);
			destPoint.offset(this.offsetX,this.offsetY);
			if(alphaImage != null && alphaPoint != null) alphaPoint.offset(alphaImage.offsetX,alphaImage.offsetY);
			this.buffer.__srcBitmapData.copyPixels(sourceImage.buffer.__srcBitmapData,sourceRect.__toFlashRectangle(),destPoint.__toFlashPoint(),alphaImage != null?alphaImage.buffer.get_src():null,alphaPoint != null?alphaPoint.__toFlashPoint():null,mergeAlpha);
			break;
		default:
		}
	}
	,encode: function(format,quality) {
		if(quality == null) quality = 90;
		if(format == null) format = "png";
		switch(format) {
		case "png":
			return lime_graphics_format_PNG.encode(this);
		case "jpg":case "jpeg":
			return lime_graphics_format_JPEG.encode(this,quality);
		case "bmp":
			return lime_graphics_format_BMP.encode(this);
		default:
		}
		return null;
	}
	,fillRect: function(rect,color,format) {
		rect = this.__clipRect(rect);
		if(this.buffer == null || rect == null) return;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.fillRect(this,rect,color,format);
			break;
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			if(this.buffer.data.length == 0) return;
			lime_graphics_utils_ImageDataUtil.fillRect(this,rect,color,format);
			break;
		case 2:
			rect.offset(this.offsetX,this.offsetY);
			var argb;
			if(format != null) switch(format) {
			case 1:
				argb = color;
				break;
			case 2:
				{
					var bgra = color;
					var argb1 = 0;
					argb1 = (bgra & 255 & 255) << 24 | (bgra >> 8 & 255 & 255) << 16 | (bgra >> 16 & 255 & 255) << 8 | bgra >> 24 & 255 & 255;
					argb = argb1;
				}
				break;
			default:
				{
					var rgba = color;
					var argb2 = 0;
					argb2 = (rgba & 255 & 255) << 24 | (rgba >> 24 & 255 & 255) << 16 | (rgba >> 16 & 255 & 255) << 8 | rgba >> 8 & 255 & 255;
					argb = argb2;
				}
			} else {
				var rgba1 = color;
				var argb3 = 0;
				argb3 = (rgba1 & 255 & 255) << 24 | (rgba1 >> 24 & 255 & 255) << 16 | (rgba1 >> 16 & 255 & 255) << 8 | rgba1 >> 8 & 255 & 255;
				argb = argb3;
			}
			this.buffer.__srcBitmapData.fillRect(rect.__toFlashRectangle(),argb);
			break;
		default:
		}
	}
	,floodFill: function(x,y,color,format) {
		if(this.buffer == null) return;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.floodFill(this,x,y,color,format);
			break;
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			lime_graphics_utils_ImageDataUtil.floodFill(this,x,y,color,format);
			break;
		case 2:
			var argb;
			if(format != null) switch(format) {
			case 1:
				argb = color;
				break;
			case 2:
				{
					var bgra = color;
					var argb1 = 0;
					argb1 = (bgra & 255 & 255) << 24 | (bgra >> 8 & 255 & 255) << 16 | (bgra >> 16 & 255 & 255) << 8 | bgra >> 24 & 255 & 255;
					argb = argb1;
				}
				break;
			default:
				{
					var rgba = color;
					var argb2 = 0;
					argb2 = (rgba & 255 & 255) << 24 | (rgba >> 24 & 255 & 255) << 16 | (rgba >> 16 & 255 & 255) << 8 | rgba >> 8 & 255 & 255;
					argb = argb2;
				}
			} else {
				var rgba1 = color;
				var argb3 = 0;
				argb3 = (rgba1 & 255 & 255) << 24 | (rgba1 >> 24 & 255 & 255) << 16 | (rgba1 >> 16 & 255 & 255) << 8 | rgba1 >> 8 & 255 & 255;
				argb = argb3;
			}
			this.buffer.__srcBitmapData.floodFill(x + this.offsetX,y + this.offsetY,argb);
			break;
		default:
		}
	}
	,getColorBoundsRect: function(mask,color,findColor,format) {
		if(findColor == null) findColor = true;
		if(this.buffer == null) return null;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			return lime_graphics_utils_ImageDataUtil.getColorBoundsRect(this,mask,color,findColor,format);
		case 1:
			return lime_graphics_utils_ImageDataUtil.getColorBoundsRect(this,mask,color,findColor,format);
		case 2:
			var rect = this.buffer.__srcBitmapData.getColorBoundsRect(mask,color,findColor);
			return new lime_math_Rectangle(rect.x,rect.y,rect.width,rect.height);
		default:
			return null;
		}
	}
	,getPixel: function(x,y,format) {
		if(this.buffer == null || x < 0 || y < 0 || x >= this.width || y >= this.height) return 0;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			return lime_graphics_utils_ImageCanvasUtil.getPixel(this,x,y,format);
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			return lime_graphics_utils_ImageDataUtil.getPixel(this,x,y,format);
		case 2:
			var color = this.buffer.__srcBitmapData.getPixel(x + this.offsetX,y + this.offsetY);
			if(format != null) switch(format) {
			case 1:
				return color;
			case 2:
				var bgra;
				{
					var bgra1 = 0;
					bgra1 = (color & 255 & 255) << 24 | (color >> 8 & 255 & 255) << 16 | (color >> 16 & 255 & 255) << 8 | color >> 24 & 255 & 255;
					bgra = bgra1;
				}
				return bgra;
			default:
				var rgba;
				{
					var rgba1 = 0;
					rgba1 = (color >> 16 & 255 & 255) << 24 | (color >> 8 & 255 & 255) << 16 | (color & 255 & 255) << 8 | color >> 24 & 255 & 255;
					rgba = rgba1;
				}
				return rgba;
			} else {
				var rgba2;
				{
					var rgba3 = 0;
					rgba3 = (color >> 16 & 255 & 255) << 24 | (color >> 8 & 255 & 255) << 16 | (color & 255 & 255) << 8 | color >> 24 & 255 & 255;
					rgba2 = rgba3;
				}
				return rgba2;
			}
			break;
		default:
			return 0;
		}
	}
	,getPixel32: function(x,y,format) {
		if(this.buffer == null || x < 0 || y < 0 || x >= this.width || y >= this.height) return 0;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			return lime_graphics_utils_ImageCanvasUtil.getPixel32(this,x,y,format);
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			return lime_graphics_utils_ImageDataUtil.getPixel32(this,x,y,format);
		case 2:
			var color = this.buffer.__srcBitmapData.getPixel32(x + this.offsetX,y + this.offsetY);
			if(format != null) switch(format) {
			case 1:
				return color;
			case 2:
				var bgra;
				{
					var bgra1 = 0;
					bgra1 = (color & 255 & 255) << 24 | (color >> 8 & 255 & 255) << 16 | (color >> 16 & 255 & 255) << 8 | color >> 24 & 255 & 255;
					bgra = bgra1;
				}
				return bgra;
			default:
				var rgba;
				{
					var rgba1 = 0;
					rgba1 = (color >> 16 & 255 & 255) << 24 | (color >> 8 & 255 & 255) << 16 | (color & 255 & 255) << 8 | color >> 24 & 255 & 255;
					rgba = rgba1;
				}
				return rgba;
			} else {
				var rgba2;
				{
					var rgba3 = 0;
					rgba3 = (color >> 16 & 255 & 255) << 24 | (color >> 8 & 255 & 255) << 16 | (color & 255 & 255) << 8 | color >> 24 & 255 & 255;
					rgba2 = rgba3;
				}
				return rgba2;
			}
			break;
		default:
			return 0;
		}
	}
	,getPixels: function(rect,format) {
		if(this.buffer == null) return null;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			return lime_graphics_utils_ImageCanvasUtil.getPixels(this,rect,format);
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			return lime_graphics_utils_ImageDataUtil.getPixels(this,rect,format);
		case 2:
			return null;
		default:
			return null;
		}
	}
	,merge: function(sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier) {
		if(this.buffer == null || sourceImage == null) return;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.convertToCanvas(this);
			lime_graphics_utils_ImageCanvasUtil.merge(this,sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
			break;
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			lime_graphics_utils_ImageCanvasUtil.convertToData(sourceImage);
			lime_graphics_utils_ImageDataUtil.merge(this,sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
			break;
		case 2:
			sourceRect.offset(this.offsetX,this.offsetY);
			this.buffer.__srcBitmapData.merge(sourceImage.buffer.__srcBitmapData,sourceRect.__toFlashRectangle(),destPoint.__toFlashPoint(),redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
			break;
		default:
			return;
		}
	}
	,resize: function(newWidth,newHeight) {
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.resize(this,newWidth,newHeight);
			break;
		case 1:
			lime_graphics_utils_ImageDataUtil.resize(this,newWidth,newHeight);
			break;
		case 2:
			break;
		default:
		}
		this.buffer.width = newWidth;
		this.buffer.height = newHeight;
		this.offsetX = 0;
		this.offsetY = 0;
		this.width = newWidth;
		this.height = newHeight;
	}
	,scroll: function(x,y) {
		if(this.buffer == null) return;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.scroll(this,x,y);
			break;
		case 1:
			this.copyPixels(this,this.get_rect(),new lime_math_Vector2(x,y));
			break;
		case 2:
			this.buffer.__srcBitmapData.scroll(x + this.offsetX,y + this.offsetX);
			break;
		default:
		}
	}
	,setPixel: function(x,y,color,format) {
		if(this.buffer == null || x < 0 || y < 0 || x >= this.width || y >= this.height) return;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.setPixel(this,x,y,color,format);
			break;
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			lime_graphics_utils_ImageDataUtil.setPixel(this,x,y,color,format);
			break;
		case 2:
			var argb;
			if(format != null) switch(format) {
			case 1:
				argb = color;
				break;
			case 2:
				{
					var bgra = color;
					var argb1 = 0;
					argb1 = (bgra & 255 & 255) << 24 | (bgra >> 8 & 255 & 255) << 16 | (bgra >> 16 & 255 & 255) << 8 | bgra >> 24 & 255 & 255;
					argb = argb1;
				}
				break;
			default:
				{
					var rgba = color;
					var argb2 = 0;
					argb2 = (rgba & 255 & 255) << 24 | (rgba >> 24 & 255 & 255) << 16 | (rgba >> 16 & 255 & 255) << 8 | rgba >> 8 & 255 & 255;
					argb = argb2;
				}
			} else {
				var rgba1 = color;
				var argb3 = 0;
				argb3 = (rgba1 & 255 & 255) << 24 | (rgba1 >> 24 & 255 & 255) << 16 | (rgba1 >> 16 & 255 & 255) << 8 | rgba1 >> 8 & 255 & 255;
				argb = argb3;
			}
			this.buffer.__srcBitmapData.setPixel(x + this.offsetX,y + this.offsetX,argb);
			break;
		default:
		}
	}
	,setPixel32: function(x,y,color,format) {
		if(this.buffer == null || x < 0 || y < 0 || x >= this.width || y >= this.height) return;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.setPixel32(this,x,y,color,format);
			break;
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			lime_graphics_utils_ImageDataUtil.setPixel32(this,x,y,color,format);
			break;
		case 2:
			var argb;
			if(format != null) switch(format) {
			case 1:
				argb = color;
				break;
			case 2:
				{
					var bgra = color;
					var argb1 = 0;
					argb1 = (bgra & 255 & 255) << 24 | (bgra >> 8 & 255 & 255) << 16 | (bgra >> 16 & 255 & 255) << 8 | bgra >> 24 & 255 & 255;
					argb = argb1;
				}
				break;
			default:
				{
					var rgba = color;
					var argb2 = 0;
					argb2 = (rgba & 255 & 255) << 24 | (rgba >> 24 & 255 & 255) << 16 | (rgba >> 16 & 255 & 255) << 8 | rgba >> 8 & 255 & 255;
					argb = argb2;
				}
			} else {
				var rgba1 = color;
				var argb3 = 0;
				argb3 = (rgba1 & 255 & 255) << 24 | (rgba1 >> 24 & 255 & 255) << 16 | (rgba1 >> 16 & 255 & 255) << 8 | rgba1 >> 8 & 255 & 255;
				argb = argb3;
			}
			this.buffer.__srcBitmapData.setPixel32(x + this.offsetX,y + this.offsetY,argb);
			break;
		default:
		}
	}
	,setPixels: function(rect,bytes,format) {
		rect = this.__clipRect(rect);
		if(this.buffer == null || rect == null) return;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.setPixels(this,rect,bytes,format);
			break;
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			lime_graphics_utils_ImageDataUtil.setPixels(this,rect,bytes,format);
			break;
		case 2:
			break;
		default:
		}
	}
	,threshold: function(sourceImage,sourceRect,destPoint,operation,threshold,color,mask,copySource,format) {
		if(copySource == null) copySource = false;
		if(mask == null) mask = -1;
		if(color == null) color = 0;
		if(this.buffer == null || sourceImage == null || sourceRect == null) return 0;
		var _g = this.type;
		switch(_g[1]) {
		case 0:case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			return lime_graphics_utils_ImageDataUtil.threshold(this,sourceImage,sourceRect,destPoint,operation,threshold,color,mask,copySource,format);
		case 2:
			var _color;
			if(format != null) switch(format) {
			case 1:
				_color = color;
				break;
			case 2:
				{
					var bgra = color;
					var argb = 0;
					argb = (bgra & 255 & 255) << 24 | (bgra >> 8 & 255 & 255) << 16 | (bgra >> 16 & 255 & 255) << 8 | bgra >> 24 & 255 & 255;
					_color = argb;
				}
				break;
			default:
				{
					var rgba = color;
					var argb1 = 0;
					argb1 = (rgba & 255 & 255) << 24 | (rgba >> 24 & 255 & 255) << 16 | (rgba >> 16 & 255 & 255) << 8 | rgba >> 8 & 255 & 255;
					_color = argb1;
				}
			} else {
				var rgba1 = color;
				var argb2 = 0;
				argb2 = (rgba1 & 255 & 255) << 24 | (rgba1 >> 24 & 255 & 255) << 16 | (rgba1 >> 16 & 255 & 255) << 8 | rgba1 >> 8 & 255 & 255;
				_color = argb2;
			}
			var _mask;
			if(format != null) switch(format) {
			case 1:
				_mask = mask;
				break;
			case 2:
				{
					var bgra1 = mask;
					var argb3 = 0;
					argb3 = (bgra1 & 255 & 255) << 24 | (bgra1 >> 8 & 255 & 255) << 16 | (bgra1 >> 16 & 255 & 255) << 8 | bgra1 >> 24 & 255 & 255;
					_mask = argb3;
				}
				break;
			default:
				{
					var rgba2 = mask;
					var argb4 = 0;
					argb4 = (rgba2 & 255 & 255) << 24 | (rgba2 >> 24 & 255 & 255) << 16 | (rgba2 >> 16 & 255 & 255) << 8 | rgba2 >> 8 & 255 & 255;
					_mask = argb4;
				}
			} else {
				var rgba3 = mask;
				var argb5 = 0;
				argb5 = (rgba3 & 255 & 255) << 24 | (rgba3 >> 24 & 255 & 255) << 16 | (rgba3 >> 16 & 255 & 255) << 8 | rgba3 >> 8 & 255 & 255;
				_mask = argb5;
			}
			sourceRect.offset(sourceImage.offsetX,sourceImage.offsetY);
			destPoint.offset(this.offsetX,this.offsetY);
			return this.buffer.__srcBitmapData.threshold(sourceImage.buffer.get_src(),sourceRect.__toFlashRectangle(),destPoint.__toFlashPoint(),operation,threshold,_color,_mask,copySource);
		default:
		}
		return 0;
	}
	,__clipRect: function(r) {
		if(r == null) return null;
		if(r.x < 0) {
			r.width -= -r.x;
			r.x = 0;
			if(r.x + r.width <= 0) return null;
		}
		if(r.y < 0) {
			r.height -= -r.y;
			r.y = 0;
			if(r.y + r.height <= 0) return null;
		}
		if(r.x + r.width >= this.width) {
			r.width -= r.x + r.width - this.width;
			if(r.width <= 0) return null;
		}
		if(r.y + r.height >= this.height) {
			r.height -= r.y + r.height - this.height;
			if(r.height <= 0) return null;
		}
		return r;
	}
	,__fromBase64: function(base64,type,onload) {
		var _g = this;
		var image = new Image();
		var image_onLoaded = function(event) {
			_g.buffer = new lime_graphics_ImageBuffer(null,image.width,image.height);
			_g.buffer.__srcImage = image;
			_g.offsetX = 0;
			_g.offsetY = 0;
			_g.width = _g.buffer.width;
			_g.height = _g.buffer.height;
			if(onload != null) onload(_g);
		};
		image.addEventListener("load",image_onLoaded,false);
		image.src = "data:" + type + ";base64," + base64;
	}
	,__fromBytes: function(bytes,onload) {
		var type = "";
		if(lime_graphics_Image.__isPNG(bytes)) type = "image/png"; else if(lime_graphics_Image.__isJPG(bytes)) type = "image/jpeg"; else if(lime_graphics_Image.__isGIF(bytes)) type = "image/gif"; else throw new js__$Boot_HaxeError("Image tried to read PNG/JPG Bytes, but found an invalid header.");
		this.__fromBase64(lime_graphics_Image.__base64Encode(bytes),type,onload);
	}
	,__fromFile: function(path,onload,onerror) {
		var _g = this;
		var image = new Image();
		image.crossOrigin = "Anonymous";
		image.onload = function(_) {
			_g.buffer = new lime_graphics_ImageBuffer(null,image.width,image.height);
			_g.buffer.__srcImage = image;
			_g.width = image.width;
			_g.height = image.height;
			if(onload != null) onload(_g);
		};
		image.onerror = function(_1) {
			if(onerror != null) onerror();
		};
		image.src = path;
		if(image.complete) {
		}
	}
	,__fromImageBuffer: function(buffer) {
		this.buffer = buffer;
		if(buffer != null) {
			if(this.width == -1) this.width = buffer.width;
			if(this.height == -1) this.height = buffer.height;
		}
	}
	,get_data: function() {
		if(this.buffer.data == null && this.buffer.width > 0 && this.buffer.height > 0) lime_graphics_utils_ImageCanvasUtil.convertToData(this);
		return this.buffer.data;
	}
	,set_data: function(value) {
		return this.buffer.data = value;
	}
	,get_format: function() {
		return this.buffer.format;
	}
	,set_format: function(value) {
		if(this.buffer.format != value) {
			var _g = this.type;
			switch(_g[1]) {
			case 1:
				lime_graphics_utils_ImageDataUtil.setFormat(this,value);
				break;
			default:
			}
		}
		return this.buffer.format = value;
	}
	,get_powerOfTwo: function() {
		return this.buffer.width != 0 && (this.buffer.width & ~this.buffer.width + 1) == this.buffer.width && (this.buffer.height != 0 && (this.buffer.height & ~this.buffer.height + 1) == this.buffer.height);
	}
	,set_powerOfTwo: function(value) {
		if(value != this.get_powerOfTwo()) {
			var newWidth = 1;
			var newHeight = 1;
			while(newWidth < this.buffer.width) newWidth <<= 1;
			while(newHeight < this.buffer.height) newHeight <<= 1;
			var _g = this.type;
			switch(_g[1]) {
			case 0:
				break;
			case 1:
				lime_graphics_utils_ImageDataUtil.resizeBuffer(this,newWidth,newHeight);
				break;
			case 2:
				break;
			default:
			}
		}
		return value;
	}
	,get_premultiplied: function() {
		return this.buffer.premultiplied;
	}
	,set_premultiplied: function(value) {
		if(value && !this.buffer.premultiplied) {
			var _g = this.type;
			switch(_g[1]) {
			case 0:case 1:
				lime_graphics_utils_ImageCanvasUtil.convertToData(this);
				lime_graphics_utils_ImageDataUtil.multiplyAlpha(this);
				break;
			default:
			}
		} else if(!value && this.buffer.premultiplied) {
			var _g1 = this.type;
			switch(_g1[1]) {
			case 1:
				lime_graphics_utils_ImageCanvasUtil.convertToData(this);
				lime_graphics_utils_ImageDataUtil.unmultiplyAlpha(this);
				break;
			default:
			}
		}
		return value;
	}
	,get_rect: function() {
		return new lime_math_Rectangle(0,0,this.width,this.height);
	}
	,get_src: function() {
		if(this.buffer.__srcCanvas == null) lime_graphics_utils_ImageCanvasUtil.convertToCanvas(this);
		return this.buffer.get_src();
	}
	,set_src: function(value) {
		return this.buffer.set_src(value);
	}
	,get_transparent: function() {
		if(this.buffer == null) return false;
		return this.buffer.transparent;
	}
	,set_transparent: function(value) {
		if(this.buffer == null) return false;
		return this.buffer.transparent = value;
	}
	,__class__: lime_graphics_Image
	,__properties__: {set_transparent:"set_transparent",get_transparent:"get_transparent",set_src:"set_src",get_src:"get_src",get_rect:"get_rect",set_premultiplied:"set_premultiplied",get_premultiplied:"get_premultiplied",set_powerOfTwo:"set_powerOfTwo",get_powerOfTwo:"get_powerOfTwo",set_format:"set_format",get_format:"get_format",set_data:"set_data",get_data:"get_data"}
};
var lime_graphics_ImageBuffer = function(data,width,height,bitsPerPixel,format) {
	if(bitsPerPixel == null) bitsPerPixel = 32;
	if(height == null) height = 0;
	if(width == null) width = 0;
	this.data = data;
	this.width = width;
	this.height = height;
	this.bitsPerPixel = bitsPerPixel;
	if(format == null) this.format = 0; else this.format = format;
	this.premultiplied = false;
	this.transparent = true;
};
$hxClasses["lime.graphics.ImageBuffer"] = lime_graphics_ImageBuffer;
lime_graphics_ImageBuffer.__name__ = ["lime","graphics","ImageBuffer"];
lime_graphics_ImageBuffer.prototype = {
	bitsPerPixel: null
	,data: null
	,format: null
	,height: null
	,premultiplied: null
	,transparent: null
	,width: null
	,__srcBitmapData: null
	,__srcCanvas: null
	,__srcContext: null
	,__srcCustom: null
	,__srcImage: null
	,__srcImageData: null
	,clone: function() {
		var buffer = new lime_graphics_ImageBuffer(this.data,this.width,this.height,this.bitsPerPixel);
		if(this.data != null) {
			var elements = this.data.byteLength;
			var this1;
			if(elements != null) this1 = new Uint8Array(elements); else this1 = null;
			buffer.data = this1;
			var copy;
			var view = this.data;
			var this2;
			if(view != null) this2 = new Uint8Array(view); else this2 = null;
			copy = this2;
			buffer.data.set(copy);
		} else if(this.__srcImageData != null) {
			buffer.__srcCanvas = window.document.createElement("canvas");
			buffer.__srcContext = buffer.__srcCanvas.getContext("2d");
			buffer.__srcCanvas.width = this.__srcImageData.width;
			buffer.__srcCanvas.height = this.__srcImageData.height;
			buffer.__srcImageData = buffer.__srcContext.createImageData(this.__srcImageData.width,this.__srcImageData.height);
			var copy1 = new Uint8ClampedArray(this.__srcImageData.data);
			buffer.__srcImageData.data.set(copy1);
		} else if(this.__srcCanvas != null) {
			buffer.__srcCanvas = window.document.createElement("canvas");
			buffer.__srcContext = buffer.__srcCanvas.getContext("2d");
			buffer.__srcCanvas.width = this.__srcCanvas.width;
			buffer.__srcCanvas.height = this.__srcCanvas.height;
			buffer.__srcContext.drawImage(this.__srcCanvas,0,0);
		} else buffer.__srcImage = this.__srcImage;
		buffer.bitsPerPixel = this.bitsPerPixel;
		buffer.format = this.format;
		buffer.premultiplied = this.premultiplied;
		buffer.transparent = this.transparent;
		return buffer;
	}
	,get_src: function() {
		if(this.__srcImage != null) return this.__srcImage;
		return this.__srcCanvas;
	}
	,set_src: function(value) {
		if(js_Boot.__instanceof(value,Image)) this.__srcImage = value; else if(js_Boot.__instanceof(value,HTMLCanvasElement)) {
			this.__srcCanvas = value;
			this.__srcContext = this.__srcCanvas.getContext("2d");
		}
		return value;
	}
	,get_stride: function() {
		return this.width * 4;
	}
	,__class__: lime_graphics_ImageBuffer
	,__properties__: {get_stride:"get_stride",set_src:"set_src",get_src:"get_src"}
};
var lime_graphics_ImageChannel = $hxClasses["lime.graphics.ImageChannel"] = { __ename__ : ["lime","graphics","ImageChannel"], __constructs__ : ["RED","GREEN","BLUE","ALPHA"] };
lime_graphics_ImageChannel.RED = ["RED",0];
lime_graphics_ImageChannel.RED.toString = $estr;
lime_graphics_ImageChannel.RED.__enum__ = lime_graphics_ImageChannel;
lime_graphics_ImageChannel.GREEN = ["GREEN",1];
lime_graphics_ImageChannel.GREEN.toString = $estr;
lime_graphics_ImageChannel.GREEN.__enum__ = lime_graphics_ImageChannel;
lime_graphics_ImageChannel.BLUE = ["BLUE",2];
lime_graphics_ImageChannel.BLUE.toString = $estr;
lime_graphics_ImageChannel.BLUE.__enum__ = lime_graphics_ImageChannel;
lime_graphics_ImageChannel.ALPHA = ["ALPHA",3];
lime_graphics_ImageChannel.ALPHA.toString = $estr;
lime_graphics_ImageChannel.ALPHA.__enum__ = lime_graphics_ImageChannel;
var lime_graphics_ImageType = $hxClasses["lime.graphics.ImageType"] = { __ename__ : ["lime","graphics","ImageType"], __constructs__ : ["CANVAS","DATA","FLASH","CUSTOM"] };
lime_graphics_ImageType.CANVAS = ["CANVAS",0];
lime_graphics_ImageType.CANVAS.toString = $estr;
lime_graphics_ImageType.CANVAS.__enum__ = lime_graphics_ImageType;
lime_graphics_ImageType.DATA = ["DATA",1];
lime_graphics_ImageType.DATA.toString = $estr;
lime_graphics_ImageType.DATA.__enum__ = lime_graphics_ImageType;
lime_graphics_ImageType.FLASH = ["FLASH",2];
lime_graphics_ImageType.FLASH.toString = $estr;
lime_graphics_ImageType.FLASH.__enum__ = lime_graphics_ImageType;
lime_graphics_ImageType.CUSTOM = ["CUSTOM",3];
lime_graphics_ImageType.CUSTOM.toString = $estr;
lime_graphics_ImageType.CUSTOM.__enum__ = lime_graphics_ImageType;
var lime_graphics_RenderContext = $hxClasses["lime.graphics.RenderContext"] = { __ename__ : ["lime","graphics","RenderContext"], __constructs__ : ["OPENGL","CANVAS","DOM","FLASH","CAIRO","CONSOLE","CUSTOM","NONE"] };
lime_graphics_RenderContext.OPENGL = function(gl) { var $x = ["OPENGL",0,gl]; $x.__enum__ = lime_graphics_RenderContext; $x.toString = $estr; return $x; };
lime_graphics_RenderContext.CANVAS = function(context) { var $x = ["CANVAS",1,context]; $x.__enum__ = lime_graphics_RenderContext; $x.toString = $estr; return $x; };
lime_graphics_RenderContext.DOM = function(element) { var $x = ["DOM",2,element]; $x.__enum__ = lime_graphics_RenderContext; $x.toString = $estr; return $x; };
lime_graphics_RenderContext.FLASH = function(stage) { var $x = ["FLASH",3,stage]; $x.__enum__ = lime_graphics_RenderContext; $x.toString = $estr; return $x; };
lime_graphics_RenderContext.CAIRO = function(cairo) { var $x = ["CAIRO",4,cairo]; $x.__enum__ = lime_graphics_RenderContext; $x.toString = $estr; return $x; };
lime_graphics_RenderContext.CONSOLE = function(context) { var $x = ["CONSOLE",5,context]; $x.__enum__ = lime_graphics_RenderContext; $x.toString = $estr; return $x; };
lime_graphics_RenderContext.CUSTOM = function(data) { var $x = ["CUSTOM",6,data]; $x.__enum__ = lime_graphics_RenderContext; $x.toString = $estr; return $x; };
lime_graphics_RenderContext.NONE = ["NONE",7];
lime_graphics_RenderContext.NONE.toString = $estr;
lime_graphics_RenderContext.NONE.__enum__ = lime_graphics_RenderContext;
var lime_graphics_Renderer = function(window) {
	this.onRender = new lime_app__$Event_$Void_$Void();
	this.onContextRestored = new lime_app__$Event_$lime_$graphics_$RenderContext_$Void();
	this.onContextLost = new lime_app__$Event_$Void_$Void();
	this.window = window;
	this.backend = new lime__$backend_html5_HTML5Renderer(this);
	this.window.renderer = this;
};
$hxClasses["lime.graphics.Renderer"] = lime_graphics_Renderer;
lime_graphics_Renderer.__name__ = ["lime","graphics","Renderer"];
lime_graphics_Renderer.prototype = {
	context: null
	,onContextLost: null
	,onContextRestored: null
	,onRender: null
	,type: null
	,window: null
	,backend: null
	,create: function() {
		this.backend.create();
	}
	,flip: function() {
		this.backend.flip();
	}
	,readPixels: function(rect) {
		return this.backend.readPixels(rect);
	}
	,render: function() {
		this.backend.render();
	}
	,__class__: lime_graphics_Renderer
};
var lime_graphics_RendererType = $hxClasses["lime.graphics.RendererType"] = { __ename__ : ["lime","graphics","RendererType"], __constructs__ : ["OPENGL","CANVAS","DOM","FLASH","CAIRO","CONSOLE","CUSTOM"] };
lime_graphics_RendererType.OPENGL = ["OPENGL",0];
lime_graphics_RendererType.OPENGL.toString = $estr;
lime_graphics_RendererType.OPENGL.__enum__ = lime_graphics_RendererType;
lime_graphics_RendererType.CANVAS = ["CANVAS",1];
lime_graphics_RendererType.CANVAS.toString = $estr;
lime_graphics_RendererType.CANVAS.__enum__ = lime_graphics_RendererType;
lime_graphics_RendererType.DOM = ["DOM",2];
lime_graphics_RendererType.DOM.toString = $estr;
lime_graphics_RendererType.DOM.__enum__ = lime_graphics_RendererType;
lime_graphics_RendererType.FLASH = ["FLASH",3];
lime_graphics_RendererType.FLASH.toString = $estr;
lime_graphics_RendererType.FLASH.__enum__ = lime_graphics_RendererType;
lime_graphics_RendererType.CAIRO = ["CAIRO",4];
lime_graphics_RendererType.CAIRO.toString = $estr;
lime_graphics_RendererType.CAIRO.__enum__ = lime_graphics_RendererType;
lime_graphics_RendererType.CONSOLE = ["CONSOLE",5];
lime_graphics_RendererType.CONSOLE.toString = $estr;
lime_graphics_RendererType.CONSOLE.__enum__ = lime_graphics_RendererType;
lime_graphics_RendererType.CUSTOM = ["CUSTOM",6];
lime_graphics_RendererType.CUSTOM.toString = $estr;
lime_graphics_RendererType.CUSTOM.__enum__ = lime_graphics_RendererType;
var lime_graphics_cairo_Cairo = function(surface) {
	if(surface != null) {
	}
};
$hxClasses["lime.graphics.cairo.Cairo"] = lime_graphics_cairo_Cairo;
lime_graphics_cairo_Cairo.__name__ = ["lime","graphics","cairo","Cairo"];
lime_graphics_cairo_Cairo.__properties__ = {get_versionString:"get_versionString",get_version:"get_version"}
lime_graphics_cairo_Cairo.get_version = function() {
	return 0;
};
lime_graphics_cairo_Cairo.get_versionString = function() {
	return "";
};
lime_graphics_cairo_Cairo.prototype = {
	target: null
	,userData: null
	,handle: null
	,arc: function(xc,yc,radius,angle1,angle2) {
	}
	,arcNegative: function(xc,yc,radius,angle1,angle2) {
	}
	,clip: function() {
	}
	,clipExtents: function(x1,y1,x2,y2) {
	}
	,clipPreserve: function() {
	}
	,closePath: function() {
	}
	,copyPage: function() {
	}
	,curveTo: function(x1,y1,x2,y2,x3,y3) {
	}
	,fill: function() {
	}
	,fillExtents: function(x1,y1,x2,y2) {
	}
	,fillPreserve: function() {
	}
	,identityMatrix: function() {
	}
	,inClip: function(x,y) {
		return false;
	}
	,inFill: function(x,y) {
		return false;
	}
	,inStroke: function(x,y) {
		return false;
	}
	,lineTo: function(x,y) {
	}
	,moveTo: function(x,y) {
	}
	,mask: function(pattern) {
	}
	,maskSurface: function(surface,x,y) {
	}
	,newPath: function() {
	}
	,paint: function() {
	}
	,paintWithAlpha: function(alpha) {
	}
	,popGroup: function() {
		return null;
	}
	,popGroupToSource: function() {
	}
	,pushGroup: function() {
	}
	,pushGroupWithContent: function(content) {
	}
	,recreate: function(surface) {
	}
	,rectangle: function(x,y,width,height) {
	}
	,relCurveTo: function(dx1,dy1,dx2,dy2,dx3,dy3) {
	}
	,relLineTo: function(dx,dy) {
	}
	,relMoveTo: function(dx,dy) {
	}
	,resetClip: function() {
	}
	,restore: function() {
	}
	,save: function() {
	}
	,setFontSize: function(size) {
	}
	,setSourceRGB: function(r,g,b) {
	}
	,setSourceRGBA: function(r,g,b,a) {
	}
	,setSourceSurface: function(surface,x,y) {
	}
	,showGlyphs: function(glyphs) {
	}
	,showPage: function() {
	}
	,showText: function(utf8) {
	}
	,status: function() {
		return 0;
	}
	,stroke: function() {
	}
	,strokeExtents: function(x1,y1,x2,y2) {
	}
	,strokePreserve: function() {
	}
	,transform: function(matrix) {
	}
	,rotate: function(amount) {
	}
	,scale: function(x,y) {
	}
	,translate: function(x,y) {
	}
	,get_antialias: function() {
		return 0;
	}
	,set_antialias: function(value) {
		return value;
	}
	,get_currentPoint: function() {
		return null;
	}
	,get_dash: function() {
		return [];
	}
	,set_dash: function(value) {
		return value;
	}
	,get_dashCount: function() {
		return 0;
	}
	,get_fillRule: function() {
		return 0;
	}
	,set_fillRule: function(value) {
		return value;
	}
	,get_fontFace: function() {
		return 0;
	}
	,set_fontFace: function(value) {
		return value;
	}
	,get_fontOptions: function() {
		return null;
	}
	,set_fontOptions: function(value) {
		return value;
	}
	,get_groupTarget: function() {
		return 0;
	}
	,get_hasCurrentPoint: function() {
		return false;
	}
	,get_lineCap: function() {
		return 0;
	}
	,set_lineCap: function(value) {
		return value;
	}
	,get_lineJoin: function() {
		return 0;
	}
	,set_lineJoin: function(value) {
		return value;
	}
	,get_lineWidth: function() {
		return 0;
	}
	,set_lineWidth: function(value) {
		return value;
	}
	,get_matrix: function() {
		return null;
	}
	,set_matrix: function(value) {
		return value;
	}
	,get_miterLimit: function() {
		return 0;
	}
	,set_miterLimit: function(value) {
		return value;
	}
	,get_operator: function() {
		return 0;
	}
	,set_operator: function(value) {
		return value;
	}
	,get_source: function() {
		return 0;
	}
	,set_source: function(value) {
		return value;
	}
	,get_target: function() {
		return 0;
	}
	,get_tolerance: function() {
		return 0;
	}
	,set_tolerance: function(value) {
		return value;
	}
	,__class__: lime_graphics_cairo_Cairo
	,__properties__: {set_tolerance:"set_tolerance",get_tolerance:"get_tolerance",get_target:"get_target",set_source:"set_source",get_source:"get_source",set_operator:"set_operator",get_operator:"get_operator",set_miterLimit:"set_miterLimit",get_miterLimit:"get_miterLimit",set_matrix:"set_matrix",get_matrix:"get_matrix",set_lineWidth:"set_lineWidth",get_lineWidth:"get_lineWidth",set_lineJoin:"set_lineJoin",get_lineJoin:"get_lineJoin",set_lineCap:"set_lineCap",get_lineCap:"get_lineCap",get_hasCurrentPoint:"get_hasCurrentPoint",get_groupTarget:"get_groupTarget",set_fontOptions:"set_fontOptions",get_fontOptions:"get_fontOptions",set_fontFace:"set_fontFace",get_fontFace:"get_fontFace",set_fillRule:"set_fillRule",get_fillRule:"get_fillRule",get_dashCount:"get_dashCount",set_dash:"set_dash",get_dash:"get_dash",get_currentPoint:"get_currentPoint",set_antialias:"set_antialias",get_antialias:"get_antialias"}
};
var lime_graphics_cairo__$CairoFTFontFace_CairoFTFontFace_$Impl_$ = {};
$hxClasses["lime.graphics.cairo._CairoFTFontFace.CairoFTFontFace_Impl_"] = lime_graphics_cairo__$CairoFTFontFace_CairoFTFontFace_$Impl_$;
lime_graphics_cairo__$CairoFTFontFace_CairoFTFontFace_$Impl_$.__name__ = ["lime","graphics","cairo","_CairoFTFontFace","CairoFTFontFace_Impl_"];
lime_graphics_cairo__$CairoFTFontFace_CairoFTFontFace_$Impl_$._new = function() {
	return 0;
};
lime_graphics_cairo__$CairoFTFontFace_CairoFTFontFace_$Impl_$.create = function(face,loadFlags) {
	return 0;
};
var lime_graphics_cairo__$CairoFontFace_CairoFontFace_$Impl_$ = {};
$hxClasses["lime.graphics.cairo._CairoFontFace.CairoFontFace_Impl_"] = lime_graphics_cairo__$CairoFontFace_CairoFontFace_$Impl_$;
lime_graphics_cairo__$CairoFontFace_CairoFontFace_$Impl_$.__name__ = ["lime","graphics","cairo","_CairoFontFace","CairoFontFace_Impl_"];
lime_graphics_cairo__$CairoFontFace_CairoFontFace_$Impl_$._new = function() {
	return null;
};
lime_graphics_cairo__$CairoFontFace_CairoFontFace_$Impl_$.status = function(this1) {
	return 0;
};
var lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$ = {};
$hxClasses["lime.graphics.cairo._CairoFontOptions.CairoFontOptions_Impl_"] = lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$;
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.__name__ = ["lime","graphics","cairo","_CairoFontOptions","CairoFontOptions_Impl_"];
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.__properties__ = {set_subpixelOrder:"set_subpixelOrder",get_subpixelOrder:"get_subpixelOrder",set_hintStyle:"set_hintStyle",get_hintStyle:"get_hintStyle",set_hintMetrics:"set_hintMetrics",get_hintMetrics:"get_hintMetrics",set_antialias:"set_antialias",get_antialias:"get_antialias"}
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$._new = function() {
	return null;
};
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.get_antialias = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.set_antialias = function(this1,value) {
	return value;
};
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.get_hintMetrics = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.set_hintMetrics = function(this1,value) {
	return value;
};
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.get_hintStyle = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.set_hintStyle = function(this1,value) {
	return value;
};
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.get_subpixelOrder = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.set_subpixelOrder = function(this1,value) {
	return value;
};
var lime_graphics_cairo_CairoGlyph = function(index,x,y) {
	if(y == null) y = 0;
	if(x == null) x = 0;
	this.index = index;
	this.x = x;
	this.y = y;
};
$hxClasses["lime.graphics.cairo.CairoGlyph"] = lime_graphics_cairo_CairoGlyph;
lime_graphics_cairo_CairoGlyph.__name__ = ["lime","graphics","cairo","CairoGlyph"];
lime_graphics_cairo_CairoGlyph.prototype = {
	index: null
	,x: null
	,y: null
	,__class__: lime_graphics_cairo_CairoGlyph
};
var lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$ = {};
$hxClasses["lime.graphics.cairo._CairoImageSurface.CairoImageSurface_Impl_"] = lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$;
lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.__name__ = ["lime","graphics","cairo","_CairoImageSurface","CairoImageSurface_Impl_"];
lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.__properties__ = {get_width:"get_width",get_stride:"get_stride",get_height:"get_height",get_format:"get_format",get_data:"get_data"}
lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$._new = function(format,width,height) {
	return 0;
};
lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.create = function(data,format,width,height,stride) {
	return 0;
};
lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.fromImage = function(image) {
	return null;
};
lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.get_data = function(this1) {
	return null;
};
lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.get_format = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.get_height = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.get_stride = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.get_width = function(this1) {
	return 0;
};
var lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$ = {};
$hxClasses["lime.graphics.cairo._CairoPattern.CairoPattern_Impl_"] = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$;
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.__name__ = ["lime","graphics","cairo","_CairoPattern","CairoPattern_Impl_"];
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.__properties__ = {set_matrix:"set_matrix",get_matrix:"get_matrix",set_filter:"set_filter",get_filter:"get_filter",set_extend:"set_extend",get_extend:"get_extend",get_colorStopCount:"get_colorStopCount"}
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$._new = function(handle) {
	return handle;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.addColorStopRGB = function(this1,offset,r,g,b) {
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.addColorStopRGBA = function(this1,offset,r,g,b,a) {
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createForSurface = function(surface) {
	return 0;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createLinear = function(x0,y0,x1,y1) {
	return 0;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createRadial = function(cx0,cy0,radius0,cx1,cy1,radius1) {
	return 0;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createRGB = function(r,g,b) {
	return 0;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createRGBA = function(r,g,b,a) {
	return 0;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.get_colorStopCount = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.get_extend = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_extend = function(this1,value) {
	return value;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.get_filter = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_filter = function(this1,value) {
	return value;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.get_matrix = function(this1) {
	return null;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_matrix = function(this1,value) {
	return value;
};
var lime_graphics_cairo__$CairoSurface_CairoSurface_$Impl_$ = {};
$hxClasses["lime.graphics.cairo._CairoSurface.CairoSurface_Impl_"] = lime_graphics_cairo__$CairoSurface_CairoSurface_$Impl_$;
lime_graphics_cairo__$CairoSurface_CairoSurface_$Impl_$.__name__ = ["lime","graphics","cairo","_CairoSurface","CairoSurface_Impl_"];
lime_graphics_cairo__$CairoSurface_CairoSurface_$Impl_$.flush = function(this1) {
};
var lime_graphics_console_IndexBuffer = function() {
};
$hxClasses["lime.graphics.console.IndexBuffer"] = lime_graphics_console_IndexBuffer;
lime_graphics_console_IndexBuffer.__name__ = ["lime","graphics","console","IndexBuffer"];
lime_graphics_console_IndexBuffer.prototype = {
	__class__: lime_graphics_console_IndexBuffer
};
var lime_graphics_console_Primitive = $hxClasses["lime.graphics.console.Primitive"] = { __ename__ : ["lime","graphics","console","Primitive"], __constructs__ : ["Point","Line","LineStrip","Triangle","TriangleStrip"] };
lime_graphics_console_Primitive.Point = ["Point",0];
lime_graphics_console_Primitive.Point.toString = $estr;
lime_graphics_console_Primitive.Point.__enum__ = lime_graphics_console_Primitive;
lime_graphics_console_Primitive.Line = ["Line",1];
lime_graphics_console_Primitive.Line.toString = $estr;
lime_graphics_console_Primitive.Line.__enum__ = lime_graphics_console_Primitive;
lime_graphics_console_Primitive.LineStrip = ["LineStrip",2];
lime_graphics_console_Primitive.LineStrip.toString = $estr;
lime_graphics_console_Primitive.LineStrip.__enum__ = lime_graphics_console_Primitive;
lime_graphics_console_Primitive.Triangle = ["Triangle",3];
lime_graphics_console_Primitive.Triangle.toString = $estr;
lime_graphics_console_Primitive.Triangle.__enum__ = lime_graphics_console_Primitive;
lime_graphics_console_Primitive.TriangleStrip = ["TriangleStrip",4];
lime_graphics_console_Primitive.TriangleStrip.toString = $estr;
lime_graphics_console_Primitive.TriangleStrip.__enum__ = lime_graphics_console_Primitive;
var lime_graphics_console_Shader = function() {
};
$hxClasses["lime.graphics.console.Shader"] = lime_graphics_console_Shader;
lime_graphics_console_Shader.__name__ = ["lime","graphics","console","Shader"];
lime_graphics_console_Shader.prototype = {
	__class__: lime_graphics_console_Shader
};
var lime_graphics_console_VertexBuffer = function() {
};
$hxClasses["lime.graphics.console.VertexBuffer"] = lime_graphics_console_VertexBuffer;
lime_graphics_console_VertexBuffer.__name__ = ["lime","graphics","console","VertexBuffer"];
lime_graphics_console_VertexBuffer.prototype = {
	lock: function() {
		return new lime_graphics_console_VertexOutput();
	}
	,unlock: function() {
	}
	,__class__: lime_graphics_console_VertexBuffer
};
var lime_graphics_console_VertexOutput = function() {
};
$hxClasses["lime.graphics.console.VertexOutput"] = lime_graphics_console_VertexOutput;
lime_graphics_console_VertexOutput.__name__ = ["lime","graphics","console","VertexOutput"];
lime_graphics_console_VertexOutput.prototype = {
	vec2: function(x,y) {
	}
	,vec3: function(x,y,z) {
	}
	,color: function(r,g,b,a) {
	}
	,__class__: lime_graphics_console_VertexOutput
};
var lime_graphics_format_BMP = function() { };
$hxClasses["lime.graphics.format.BMP"] = lime_graphics_format_BMP;
lime_graphics_format_BMP.__name__ = ["lime","graphics","format","BMP"];
lime_graphics_format_BMP.encode = function(image,type) {
	if(image.get_premultiplied() || image.get_format() != 0) {
		image = image.clone();
		image.set_premultiplied(false);
		image.set_format(0);
	}
	if(type == null) type = lime_graphics_format_BMPType.RGB;
	var fileHeaderLength = 14;
	var infoHeaderLength = 40;
	var pixelValuesLength = image.width * image.height * 4;
	if(type != null) switch(type[1]) {
	case 1:
		infoHeaderLength = 108;
		break;
	case 2:
		fileHeaderLength = 0;
		pixelValuesLength += image.width * image.height;
		break;
	case 0:
		pixelValuesLength = image.width * 3 + image.width * 3 % 4 + image.height * 3 + image.height * 3;
		break;
	default:
	} else {
	}
	var data = new haxe_io_Bytes(new ArrayBuffer(fileHeaderLength + infoHeaderLength + pixelValuesLength));
	var position = 0;
	if(fileHeaderLength > 0) {
		data.set(position++,66);
		data.set(position++,77);
		data.setInt32(position,data.length);
		position += 4;
		data.setUInt16(position,0);
		position += 2;
		data.setUInt16(position,0);
		position += 2;
		data.setInt32(position,fileHeaderLength + infoHeaderLength);
		position += 4;
	}
	data.setInt32(position,infoHeaderLength);
	position += 4;
	data.setInt32(position,image.width);
	position += 4;
	data.setInt32(position,type == lime_graphics_format_BMPType.ICO?image.height * 2:image.height);
	position += 4;
	data.setUInt16(position,1);
	position += 2;
	data.setUInt16(position,type == lime_graphics_format_BMPType.RGB?24:32);
	position += 2;
	data.setInt32(position,type == lime_graphics_format_BMPType.BITFIELD?3:0);
	position += 4;
	data.setInt32(position,pixelValuesLength);
	position += 4;
	data.setInt32(position,11824);
	position += 4;
	data.setInt32(position,11824);
	position += 4;
	data.setInt32(position,0);
	position += 4;
	data.setInt32(position,0);
	position += 4;
	if(type == lime_graphics_format_BMPType.BITFIELD) {
		data.setInt32(position,16711680);
		position += 4;
		data.setInt32(position,65280);
		position += 4;
		data.setInt32(position,255);
		position += 4;
		data.setInt32(position,-16777216);
		position += 4;
		data.set(position++,32);
		data.set(position++,110);
		data.set(position++,105);
		data.set(position++,87);
		var _g = 0;
		while(_g < 48) {
			var i = _g++;
			data.set(position++,0);
		}
	}
	var pixels = image.getPixels(new lime_math_Rectangle(0,0,image.width,image.height),1);
	var readPosition = 0;
	var a;
	var r;
	var g;
	var b;
	if(type != null) switch(type[1]) {
	case 1:
		var _g1 = 0;
		var _g2 = image.height;
		while(_g1 < _g2) {
			var y = _g1++;
			readPosition = (image.height - 1 - y) * 4 * image.width;
			var _g3 = 0;
			var _g21 = image.width;
			while(_g3 < _g21) {
				var x = _g3++;
				a = pixels.get(readPosition++);
				r = pixels.get(readPosition++);
				g = pixels.get(readPosition++);
				b = pixels.get(readPosition++);
				data.set(position++,b);
				data.set(position++,g);
				data.set(position++,r);
				data.set(position++,a);
			}
		}
		break;
	case 2:
		var andMask = new haxe_io_Bytes(new ArrayBuffer(image.width * image.height));
		var maskPosition = 0;
		var _g11 = 0;
		var _g4 = image.height;
		while(_g11 < _g4) {
			var y1 = _g11++;
			readPosition = (image.height - 1 - y1) * 4 * image.width;
			var _g31 = 0;
			var _g22 = image.width;
			while(_g31 < _g22) {
				var x1 = _g31++;
				a = pixels.get(readPosition++);
				r = pixels.get(readPosition++);
				g = pixels.get(readPosition++);
				b = pixels.get(readPosition++);
				data.set(position++,b);
				data.set(position++,g);
				data.set(position++,r);
				data.set(position++,a);
				andMask.set(maskPosition++,0);
			}
		}
		data.blit(position,andMask,0,image.width * image.height);
		break;
	case 0:
		var _g12 = 0;
		var _g5 = image.height;
		while(_g12 < _g5) {
			var y2 = _g12++;
			readPosition = (image.height - 1 - y2) * 4 * image.width;
			var _g32 = 0;
			var _g23 = image.width;
			while(_g32 < _g23) {
				var x2 = _g32++;
				a = pixels.get(readPosition++);
				r = pixels.get(readPosition++);
				g = pixels.get(readPosition++);
				b = pixels.get(readPosition++);
				data.set(position++,b);
				data.set(position++,g);
				data.set(position++,r);
			}
			var _g33 = 0;
			var _g24 = image.width * 3 % 4;
			while(_g33 < _g24) {
				var i1 = _g33++;
				data.set(position++,0);
			}
		}
		break;
	default:
	} else {
	}
	return data;
};
var lime_graphics_format_BMPType = $hxClasses["lime.graphics.format.BMPType"] = { __ename__ : ["lime","graphics","format","BMPType"], __constructs__ : ["RGB","BITFIELD","ICO"] };
lime_graphics_format_BMPType.RGB = ["RGB",0];
lime_graphics_format_BMPType.RGB.toString = $estr;
lime_graphics_format_BMPType.RGB.__enum__ = lime_graphics_format_BMPType;
lime_graphics_format_BMPType.BITFIELD = ["BITFIELD",1];
lime_graphics_format_BMPType.BITFIELD.toString = $estr;
lime_graphics_format_BMPType.BITFIELD.__enum__ = lime_graphics_format_BMPType;
lime_graphics_format_BMPType.ICO = ["ICO",2];
lime_graphics_format_BMPType.ICO.toString = $estr;
lime_graphics_format_BMPType.ICO.__enum__ = lime_graphics_format_BMPType;
var lime_graphics_format_JPEG = function() { };
$hxClasses["lime.graphics.format.JPEG"] = lime_graphics_format_JPEG;
lime_graphics_format_JPEG.__name__ = ["lime","graphics","format","JPEG"];
lime_graphics_format_JPEG.decodeBytes = function(bytes,decodeData) {
	if(decodeData == null) decodeData = true;
	return null;
};
lime_graphics_format_JPEG.decodeFile = function(path,decodeData) {
	if(decodeData == null) decodeData = true;
	return null;
};
lime_graphics_format_JPEG.encode = function(image,quality) {
	if(image.get_premultiplied() || image.get_format() != 0) {
		image = image.clone();
		image.set_premultiplied(false);
		image.set_format(0);
	}
	lime_graphics_utils_ImageCanvasUtil.sync(image,false);
	if(image.buffer.__srcCanvas != null) {
		var data = image.buffer.__srcCanvas.toDataURL("image/jpeg",quality / 100);
		var buffer = window.atob(data.split(";base64,")[1]);
		var bytes = new haxe_io_Bytes(new ArrayBuffer(buffer.length));
		var _g1 = 0;
		var _g = buffer.length;
		while(_g1 < _g) {
			var i = _g1++;
			bytes.set(i,HxOverrides.cca(buffer,i));
		}
		return bytes;
	}
	return null;
};
var lime_graphics_format_PNG = function() { };
$hxClasses["lime.graphics.format.PNG"] = lime_graphics_format_PNG;
lime_graphics_format_PNG.__name__ = ["lime","graphics","format","PNG"];
lime_graphics_format_PNG.decodeBytes = function(bytes,decodeData) {
	if(decodeData == null) decodeData = true;
	return null;
};
lime_graphics_format_PNG.decodeFile = function(path,decodeData) {
	if(decodeData == null) decodeData = true;
	return null;
};
lime_graphics_format_PNG.encode = function(image) {
	if(image.get_premultiplied() || image.get_format() != 0) {
		image = image.clone();
		image.set_premultiplied(false);
		image.set_format(0);
	}
	lime_graphics_utils_ImageCanvasUtil.sync(image,false);
	if(image.buffer.__srcCanvas != null) {
		var data = image.buffer.__srcCanvas.toDataURL("image/png");
		var buffer = window.atob(data.split(";base64,")[1]);
		var bytes = new haxe_io_Bytes(new ArrayBuffer(buffer.length));
		var _g1 = 0;
		var _g = buffer.length;
		while(_g1 < _g) {
			var i = _g1++;
			bytes.set(i,HxOverrides.cca(buffer,i));
		}
		return bytes;
	}
	return null;
};
var lime_graphics_opengl_ExtensionPackedDepthStencil = function() { };
$hxClasses["lime.graphics.opengl.ExtensionPackedDepthStencil"] = lime_graphics_opengl_ExtensionPackedDepthStencil;
lime_graphics_opengl_ExtensionPackedDepthStencil.__name__ = ["lime","graphics","opengl","ExtensionPackedDepthStencil"];
var lime_graphics_opengl_GL = function() { };
$hxClasses["lime.graphics.opengl.GL"] = lime_graphics_opengl_GL;
lime_graphics_opengl_GL.__name__ = ["lime","graphics","opengl","GL"];
lime_graphics_opengl_GL.__properties__ = {get_version:"get_version"}
lime_graphics_opengl_GL.activeTexture = function(texture) {
	lime_graphics_opengl_GL.context.activeTexture(texture);
};
lime_graphics_opengl_GL.attachShader = function(program,shader) {
	lime_graphics_opengl_GL.context.attachShader(program,shader);
};
lime_graphics_opengl_GL.bindAttribLocation = function(program,index,name) {
	lime_graphics_opengl_GL.context.bindAttribLocation(program,index,name);
};
lime_graphics_opengl_GL.bindBuffer = function(target,buffer) {
	lime_graphics_opengl_GL.context.bindBuffer(target,buffer);
};
lime_graphics_opengl_GL.bindFramebuffer = function(target,framebuffer) {
	lime_graphics_opengl_GL.context.bindFramebuffer(target,framebuffer);
};
lime_graphics_opengl_GL.bindRenderbuffer = function(target,renderbuffer) {
	lime_graphics_opengl_GL.context.bindRenderbuffer(target,renderbuffer);
};
lime_graphics_opengl_GL.bindTexture = function(target,texture) {
	lime_graphics_opengl_GL.context.bindTexture(target,texture);
};
lime_graphics_opengl_GL.blendColor = function(red,green,blue,alpha) {
	lime_graphics_opengl_GL.context.blendColor(red,green,blue,alpha);
};
lime_graphics_opengl_GL.blendEquation = function(mode) {
	lime_graphics_opengl_GL.context.blendEquation(mode);
};
lime_graphics_opengl_GL.blendEquationSeparate = function(modeRGB,modeAlpha) {
	lime_graphics_opengl_GL.context.blendEquationSeparate(modeRGB,modeAlpha);
};
lime_graphics_opengl_GL.blendFunc = function(sfactor,dfactor) {
	lime_graphics_opengl_GL.context.blendFunc(sfactor,dfactor);
};
lime_graphics_opengl_GL.blendFuncSeparate = function(srcRGB,dstRGB,srcAlpha,dstAlpha) {
	lime_graphics_opengl_GL.context.blendFuncSeparate(srcRGB,dstRGB,srcAlpha,dstAlpha);
};
lime_graphics_opengl_GL.bufferData = function(target,data,usage) {
	lime_graphics_opengl_GL.context.bufferData(target,data,usage);
};
lime_graphics_opengl_GL.bufferSubData = function(target,offset,data) {
	lime_graphics_opengl_GL.context.bufferSubData(target,offset,data);
};
lime_graphics_opengl_GL.checkFramebufferStatus = function(target) {
	return lime_graphics_opengl_GL.context.checkFramebufferStatus(target);
};
lime_graphics_opengl_GL.clear = function(mask) {
	lime_graphics_opengl_GL.context.clear(mask);
};
lime_graphics_opengl_GL.clearColor = function(red,green,blue,alpha) {
	lime_graphics_opengl_GL.context.clearColor(red,green,blue,alpha);
};
lime_graphics_opengl_GL.clearDepth = function(depth) {
	lime_graphics_opengl_GL.context.clearDepth(depth);
};
lime_graphics_opengl_GL.clearStencil = function(s) {
	lime_graphics_opengl_GL.context.clearStencil(s);
};
lime_graphics_opengl_GL.colorMask = function(red,green,blue,alpha) {
	lime_graphics_opengl_GL.context.colorMask(red,green,blue,alpha);
};
lime_graphics_opengl_GL.compileShader = function(shader) {
	lime_graphics_opengl_GL.context.compileShader(shader);
};
lime_graphics_opengl_GL.compressedTexImage2D = function(target,level,internalformat,width,height,border,data) {
	lime_graphics_opengl_GL.context.compressedTexImage2D(target,level,internalformat,width,height,border,data);
};
lime_graphics_opengl_GL.compressedTexSubImage2D = function(target,level,xoffset,yoffset,width,height,format,data) {
	lime_graphics_opengl_GL.context.compressedTexSubImage2D(target,level,xoffset,yoffset,width,height,format,data);
};
lime_graphics_opengl_GL.copyTexImage2D = function(target,level,internalformat,x,y,width,height,border) {
	lime_graphics_opengl_GL.context.copyTexImage2D(target,level,internalformat,x,y,width,height,border);
};
lime_graphics_opengl_GL.copyTexSubImage2D = function(target,level,xoffset,yoffset,x,y,width,height) {
	lime_graphics_opengl_GL.context.copyTexSubImage2D(target,level,xoffset,yoffset,x,y,width,height);
};
lime_graphics_opengl_GL.createBuffer = function() {
	return lime_graphics_opengl_GL.context.createBuffer();
};
lime_graphics_opengl_GL.createFramebuffer = function() {
	return lime_graphics_opengl_GL.context.createFramebuffer();
};
lime_graphics_opengl_GL.createProgram = function() {
	return lime_graphics_opengl_GL.context.createProgram();
};
lime_graphics_opengl_GL.createRenderbuffer = function() {
	return lime_graphics_opengl_GL.context.createRenderbuffer();
};
lime_graphics_opengl_GL.createShader = function(type) {
	return lime_graphics_opengl_GL.context.createShader(type);
};
lime_graphics_opengl_GL.createTexture = function() {
	return lime_graphics_opengl_GL.context.createTexture();
};
lime_graphics_opengl_GL.cullFace = function(mode) {
	lime_graphics_opengl_GL.context.cullFace(mode);
};
lime_graphics_opengl_GL.deleteBuffer = function(buffer) {
	lime_graphics_opengl_GL.context.deleteBuffer(buffer);
};
lime_graphics_opengl_GL.deleteFramebuffer = function(framebuffer) {
	lime_graphics_opengl_GL.context.deleteFramebuffer(framebuffer);
};
lime_graphics_opengl_GL.deleteProgram = function(program) {
	lime_graphics_opengl_GL.context.deleteProgram(program);
};
lime_graphics_opengl_GL.deleteRenderbuffer = function(renderbuffer) {
	lime_graphics_opengl_GL.context.deleteRenderbuffer(renderbuffer);
};
lime_graphics_opengl_GL.deleteShader = function(shader) {
	lime_graphics_opengl_GL.context.deleteShader(shader);
};
lime_graphics_opengl_GL.deleteTexture = function(texture) {
	lime_graphics_opengl_GL.context.deleteTexture(texture);
};
lime_graphics_opengl_GL.depthFunc = function(func) {
	lime_graphics_opengl_GL.context.depthFunc(func);
};
lime_graphics_opengl_GL.depthMask = function(flag) {
	lime_graphics_opengl_GL.context.depthMask(flag);
};
lime_graphics_opengl_GL.depthRange = function(zNear,zFar) {
	lime_graphics_opengl_GL.context.depthRange(zNear,zFar);
};
lime_graphics_opengl_GL.detachShader = function(program,shader) {
	lime_graphics_opengl_GL.context.detachShader(program,shader);
};
lime_graphics_opengl_GL.disable = function(cap) {
	lime_graphics_opengl_GL.context.disable(cap);
};
lime_graphics_opengl_GL.disableVertexAttribArray = function(index) {
	lime_graphics_opengl_GL.context.disableVertexAttribArray(index);
};
lime_graphics_opengl_GL.drawArrays = function(mode,first,count) {
	lime_graphics_opengl_GL.context.drawArrays(mode,first,count);
};
lime_graphics_opengl_GL.drawElements = function(mode,count,type,offset) {
	lime_graphics_opengl_GL.context.drawElements(mode,count,type,offset);
};
lime_graphics_opengl_GL.enable = function(cap) {
	lime_graphics_opengl_GL.context.enable(cap);
};
lime_graphics_opengl_GL.enableVertexAttribArray = function(index) {
	lime_graphics_opengl_GL.context.enableVertexAttribArray(index);
};
lime_graphics_opengl_GL.finish = function() {
	lime_graphics_opengl_GL.context.finish();
};
lime_graphics_opengl_GL.flush = function() {
	lime_graphics_opengl_GL.context.flush();
};
lime_graphics_opengl_GL.framebufferRenderbuffer = function(target,attachment,renderbuffertarget,renderbuffer) {
	lime_graphics_opengl_GL.context.framebufferRenderbuffer(target,attachment,renderbuffertarget,renderbuffer);
};
lime_graphics_opengl_GL.framebufferTexture2D = function(target,attachment,textarget,texture,level) {
	lime_graphics_opengl_GL.context.framebufferTexture2D(target,attachment,textarget,texture,level);
};
lime_graphics_opengl_GL.frontFace = function(mode) {
	lime_graphics_opengl_GL.context.frontFace(mode);
};
lime_graphics_opengl_GL.generateMipmap = function(target) {
	lime_graphics_opengl_GL.context.generateMipmap(target);
};
lime_graphics_opengl_GL.getActiveAttrib = function(program,index) {
	return lime_graphics_opengl_GL.context.getActiveAttrib(program,index);
};
lime_graphics_opengl_GL.getActiveUniform = function(program,index) {
	return lime_graphics_opengl_GL.context.getActiveUniform(program,index);
};
lime_graphics_opengl_GL.getAttachedShaders = function(program) {
	return lime_graphics_opengl_GL.context.getAttachedShaders(program);
};
lime_graphics_opengl_GL.getAttribLocation = function(program,name) {
	return lime_graphics_opengl_GL.context.getAttribLocation(program,name);
};
lime_graphics_opengl_GL.getBufferParameter = function(target,pname) {
	return lime_graphics_opengl_GL.context.getBufferParameter(target,pname);
};
lime_graphics_opengl_GL.getContextAttributes = function() {
	return lime_graphics_opengl_GL.context.getContextAttributes();
};
lime_graphics_opengl_GL.getError = function() {
	return lime_graphics_opengl_GL.context.getError();
};
lime_graphics_opengl_GL.getExtension = function(name) {
	return lime_graphics_opengl_GL.context.getExtension(name);
};
lime_graphics_opengl_GL.getFramebufferAttachmentParameter = function(target,attachment,pname) {
	return lime_graphics_opengl_GL.context.getFramebufferAttachmentParameter(target,attachment,pname);
};
lime_graphics_opengl_GL.getParameter = function(pname) {
	return lime_graphics_opengl_GL.context.getParameter(pname);
};
lime_graphics_opengl_GL.getProgramInfoLog = function(program) {
	return lime_graphics_opengl_GL.context.getProgramInfoLog(program);
};
lime_graphics_opengl_GL.getProgramParameter = function(program,pname) {
	return lime_graphics_opengl_GL.context.getProgramParameter(program,pname);
};
lime_graphics_opengl_GL.getRenderbufferParameter = function(target,pname) {
	return lime_graphics_opengl_GL.context.getRenderbufferParameter(target,pname);
};
lime_graphics_opengl_GL.getShaderInfoLog = function(shader) {
	return lime_graphics_opengl_GL.context.getShaderInfoLog(shader);
};
lime_graphics_opengl_GL.getShaderParameter = function(shader,pname) {
	return lime_graphics_opengl_GL.context.getShaderParameter(shader,pname);
};
lime_graphics_opengl_GL.getShaderPrecisionFormat = function(shadertype,precisiontype) {
	return lime_graphics_opengl_GL.context.getShaderPrecisionFormat(shadertype,precisiontype);
};
lime_graphics_opengl_GL.getShaderSource = function(shader) {
	return lime_graphics_opengl_GL.context.getShaderSource(shader);
};
lime_graphics_opengl_GL.getSupportedExtensions = function() {
	return lime_graphics_opengl_GL.context.getSupportedExtensions();
};
lime_graphics_opengl_GL.getTexParameter = function(target,pname) {
	return lime_graphics_opengl_GL.context.getTexParameter(target,pname);
};
lime_graphics_opengl_GL.getUniform = function(program,location) {
	return lime_graphics_opengl_GL.context.getUniform(program,location);
};
lime_graphics_opengl_GL.getUniformLocation = function(program,name) {
	return lime_graphics_opengl_GL.context.getUniformLocation(program,name);
};
lime_graphics_opengl_GL.getVertexAttrib = function(index,pname) {
	return lime_graphics_opengl_GL.context.getVertexAttrib(index,pname);
};
lime_graphics_opengl_GL.getVertexAttribOffset = function(index,pname) {
	return lime_graphics_opengl_GL.context.getVertexAttribOffset(index,pname);
};
lime_graphics_opengl_GL.hint = function(target,mode) {
	lime_graphics_opengl_GL.context.hint(target,mode);
};
lime_graphics_opengl_GL.isBuffer = function(buffer) {
	return lime_graphics_opengl_GL.context.isBuffer(buffer);
};
lime_graphics_opengl_GL.isContextLost = function() {
	return lime_graphics_opengl_GL.context.isContextLost();
};
lime_graphics_opengl_GL.isEnabled = function(cap) {
	return lime_graphics_opengl_GL.context.isEnabled(cap);
};
lime_graphics_opengl_GL.isFramebuffer = function(framebuffer) {
	return lime_graphics_opengl_GL.context.isFramebuffer(framebuffer);
};
lime_graphics_opengl_GL.isProgram = function(program) {
	return lime_graphics_opengl_GL.context.isProgram(program);
};
lime_graphics_opengl_GL.isRenderbuffer = function(renderbuffer) {
	return lime_graphics_opengl_GL.context.isRenderbuffer(renderbuffer);
};
lime_graphics_opengl_GL.isShader = function(shader) {
	return lime_graphics_opengl_GL.context.isShader(shader);
};
lime_graphics_opengl_GL.isTexture = function(texture) {
	return lime_graphics_opengl_GL.context.isTexture(texture);
};
lime_graphics_opengl_GL.lineWidth = function(width) {
	lime_graphics_opengl_GL.context.lineWidth(width);
};
lime_graphics_opengl_GL.linkProgram = function(program) {
	lime_graphics_opengl_GL.context.linkProgram(program);
};
lime_graphics_opengl_GL.pixelStorei = function(pname,param) {
	lime_graphics_opengl_GL.context.pixelStorei(pname,param);
};
lime_graphics_opengl_GL.polygonOffset = function(factor,units) {
	lime_graphics_opengl_GL.context.polygonOffset(factor,units);
};
lime_graphics_opengl_GL.readPixels = function(x,y,width,height,format,type,pixels) {
	lime_graphics_opengl_GL.context.readPixels(x,y,width,height,format,type,pixels);
};
lime_graphics_opengl_GL.renderbufferStorage = function(target,internalformat,width,height) {
	lime_graphics_opengl_GL.context.renderbufferStorage(target,internalformat,width,height);
};
lime_graphics_opengl_GL.sampleCoverage = function(value,invert) {
	lime_graphics_opengl_GL.context.sampleCoverage(value,invert);
};
lime_graphics_opengl_GL.scissor = function(x,y,width,height) {
	lime_graphics_opengl_GL.context.scissor(x,y,width,height);
};
lime_graphics_opengl_GL.shaderSource = function(shader,source) {
	lime_graphics_opengl_GL.context.shaderSource(shader,source);
};
lime_graphics_opengl_GL.stencilFunc = function(func,ref,mask) {
	lime_graphics_opengl_GL.context.stencilFunc(func,ref,mask);
};
lime_graphics_opengl_GL.stencilFuncSeparate = function(face,func,ref,mask) {
	lime_graphics_opengl_GL.context.stencilFuncSeparate(face,func,ref,mask);
};
lime_graphics_opengl_GL.stencilMask = function(mask) {
	lime_graphics_opengl_GL.context.stencilMask(mask);
};
lime_graphics_opengl_GL.stencilMaskSeparate = function(face,mask) {
	lime_graphics_opengl_GL.context.stencilMaskSeparate(face,mask);
};
lime_graphics_opengl_GL.stencilOp = function(fail,zfail,zpass) {
	lime_graphics_opengl_GL.context.stencilOp(fail,zfail,zpass);
};
lime_graphics_opengl_GL.stencilOpSeparate = function(face,fail,zfail,zpass) {
	lime_graphics_opengl_GL.context.stencilOpSeparate(face,fail,zfail,zpass);
};
lime_graphics_opengl_GL.texImage2D = function(target,level,internalformat,width,height,border,format,type,pixels) {
	lime_graphics_opengl_GL.context.texImage2D(target,level,internalformat,width,height,border,format,type,pixels);
};
lime_graphics_opengl_GL.texParameterf = function(target,pname,param) {
	lime_graphics_opengl_GL.context.texParameterf(target,pname,param);
};
lime_graphics_opengl_GL.texParameteri = function(target,pname,param) {
	lime_graphics_opengl_GL.context.texParameteri(target,pname,param);
};
lime_graphics_opengl_GL.texSubImage2D = function(target,level,xoffset,yoffset,width,height,format,type,pixels) {
	lime_graphics_opengl_GL.context.texSubImage2D(target,level,xoffset,yoffset,width,height,format,type,pixels);
};
lime_graphics_opengl_GL.uniform1f = function(location,x) {
	lime_graphics_opengl_GL.context.uniform1f(location,x);
};
lime_graphics_opengl_GL.uniform1fv = function(location,x) {
	lime_graphics_opengl_GL.context.uniform1fv(location,x);
};
lime_graphics_opengl_GL.uniform1i = function(location,x) {
	lime_graphics_opengl_GL.context.uniform1i(location,x);
};
lime_graphics_opengl_GL.uniform1iv = function(location,v) {
	lime_graphics_opengl_GL.context.uniform1iv(location,v);
};
lime_graphics_opengl_GL.uniform2f = function(location,x,y) {
	lime_graphics_opengl_GL.context.uniform2f(location,x,y);
};
lime_graphics_opengl_GL.uniform2fv = function(location,v) {
	lime_graphics_opengl_GL.context.uniform2fv(location,v);
};
lime_graphics_opengl_GL.uniform2i = function(location,x,y) {
	lime_graphics_opengl_GL.context.uniform2i(location,x,y);
};
lime_graphics_opengl_GL.uniform2iv = function(location,v) {
	lime_graphics_opengl_GL.context.uniform2iv(location,v);
};
lime_graphics_opengl_GL.uniform3f = function(location,x,y,z) {
	lime_graphics_opengl_GL.context.uniform3f(location,x,y,z);
};
lime_graphics_opengl_GL.uniform3fv = function(location,v) {
	lime_graphics_opengl_GL.context.uniform3fv(location,v);
};
lime_graphics_opengl_GL.uniform3i = function(location,x,y,z) {
	lime_graphics_opengl_GL.context.uniform3i(location,x,y,z);
};
lime_graphics_opengl_GL.uniform3iv = function(location,v) {
	lime_graphics_opengl_GL.context.uniform3iv(location,v);
};
lime_graphics_opengl_GL.uniform4f = function(location,x,y,z,w) {
	lime_graphics_opengl_GL.context.uniform4f(location,x,y,z,w);
};
lime_graphics_opengl_GL.uniform4fv = function(location,v) {
	lime_graphics_opengl_GL.context.uniform4fv(location,v);
};
lime_graphics_opengl_GL.uniform4i = function(location,x,y,z,w) {
	lime_graphics_opengl_GL.context.uniform4i(location,x,y,z,w);
};
lime_graphics_opengl_GL.uniform4iv = function(location,v) {
	lime_graphics_opengl_GL.context.uniform4iv(location,v);
};
lime_graphics_opengl_GL.uniformMatrix2fv = function(location,transpose,v) {
	lime_graphics_opengl_GL.context.uniformMatrix2fv(location,transpose,v);
};
lime_graphics_opengl_GL.uniformMatrix3fv = function(location,transpose,v) {
	lime_graphics_opengl_GL.context.uniformMatrix3fv(location,transpose,v);
};
lime_graphics_opengl_GL.uniformMatrix4fv = function(location,transpose,v) {
	lime_graphics_opengl_GL.context.uniformMatrix4fv(location,transpose,v);
};
lime_graphics_opengl_GL.useProgram = function(program) {
	lime_graphics_opengl_GL.__currentProgram = program;
	lime_graphics_opengl_GL.context.useProgram(program);
};
lime_graphics_opengl_GL.validateProgram = function(program) {
	lime_graphics_opengl_GL.context.validateProgram(program);
};
lime_graphics_opengl_GL.vertexAttrib1f = function(indx,x) {
	lime_graphics_opengl_GL.context.vertexAttrib1f(indx,x);
};
lime_graphics_opengl_GL.vertexAttrib1fv = function(indx,values) {
	lime_graphics_opengl_GL.context.vertexAttrib1fv(indx,values);
};
lime_graphics_opengl_GL.vertexAttrib2f = function(indx,x,y) {
	lime_graphics_opengl_GL.context.vertexAttrib2f(indx,x,y);
};
lime_graphics_opengl_GL.vertexAttrib2fv = function(indx,values) {
	lime_graphics_opengl_GL.context.vertexAttrib2fv(indx,values);
};
lime_graphics_opengl_GL.vertexAttrib3f = function(indx,x,y,z) {
	lime_graphics_opengl_GL.context.vertexAttrib3f(indx,x,y,z);
};
lime_graphics_opengl_GL.vertexAttrib3fv = function(indx,values) {
	lime_graphics_opengl_GL.context.vertexAttrib3fv(indx,values);
};
lime_graphics_opengl_GL.vertexAttrib4f = function(indx,x,y,z,w) {
	lime_graphics_opengl_GL.context.vertexAttrib4f(indx,x,y,z,w);
};
lime_graphics_opengl_GL.vertexAttrib4fv = function(indx,values) {
	lime_graphics_opengl_GL.context.vertexAttrib4fv(indx,values);
};
lime_graphics_opengl_GL.vertexAttribPointer = function(indx,size,type,normalized,stride,offset) {
	lime_graphics_opengl_GL.context.vertexAttribPointer(indx,size,type,normalized,stride,offset);
};
lime_graphics_opengl_GL.viewport = function(x,y,width,height) {
	lime_graphics_opengl_GL.context.viewport(x,y,width,height);
};
lime_graphics_opengl_GL.get_version = function() {
	return 2;
};
var lime_graphics_utils_ImageCanvasUtil = function() { };
$hxClasses["lime.graphics.utils.ImageCanvasUtil"] = lime_graphics_utils_ImageCanvasUtil;
lime_graphics_utils_ImageCanvasUtil.__name__ = ["lime","graphics","utils","ImageCanvasUtil"];
lime_graphics_utils_ImageCanvasUtil.colorTransform = function(image,rect,colorMatrix) {
	lime_graphics_utils_ImageCanvasUtil.convertToData(image);
	lime_graphics_utils_ImageDataUtil.colorTransform(image,rect,colorMatrix);
};
lime_graphics_utils_ImageCanvasUtil.convertToCanvas = function(image,clear) {
	if(clear == null) clear = false;
	var buffer = image.buffer;
	if(buffer.__srcImage != null) {
		if(buffer.__srcCanvas == null) {
			lime_graphics_utils_ImageCanvasUtil.createCanvas(image,buffer.__srcImage.width,buffer.__srcImage.height);
			buffer.__srcContext.drawImage(buffer.__srcImage,0,0);
		}
		buffer.__srcImage = null;
	} else if(buffer.__srcCanvas == null && buffer.data != null) {
		image.set_transparent(true);
		lime_graphics_utils_ImageCanvasUtil.createCanvas(image,buffer.width,buffer.height);
		lime_graphics_utils_ImageCanvasUtil.createImageData(image);
		buffer.__srcContext.putImageData(buffer.__srcImageData,0,0);
	} else if(image.type == lime_graphics_ImageType.DATA && buffer.__srcImageData != null && image.dirty) {
		buffer.__srcContext.putImageData(buffer.__srcImageData,0,0);
		image.dirty = false;
	}
	if(clear) {
		buffer.data = null;
		buffer.__srcImageData = null;
	} else if(buffer.data == null && buffer.__srcImageData != null) buffer.data = buffer.__srcImageData.data;
	image.type = lime_graphics_ImageType.CANVAS;
};
lime_graphics_utils_ImageCanvasUtil.convertToData = function(image,clear) {
	if(clear == null) clear = false;
	var buffer = image.buffer;
	if(buffer.__srcImage != null) lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
	if(buffer.__srcCanvas != null && buffer.data == null) {
		lime_graphics_utils_ImageCanvasUtil.createImageData(image);
		if(image.type == lime_graphics_ImageType.CANVAS) image.dirty = false;
	} else if(image.type == lime_graphics_ImageType.CANVAS && buffer.__srcCanvas != null && image.dirty) {
		if(buffer.__srcImageData == null) lime_graphics_utils_ImageCanvasUtil.createImageData(image); else {
			buffer.__srcImageData = buffer.__srcContext.getImageData(0,0,buffer.width,buffer.height);
			var elements = buffer.__srcImageData.data.buffer;
			var this1;
			if(elements != null) this1 = new Uint8Array(elements); else this1 = null;
			buffer.data = this1;
		}
		image.dirty = false;
	}
	if(clear) {
		image.buffer.__srcCanvas = null;
		image.buffer.__srcContext = null;
	}
	image.type = lime_graphics_ImageType.DATA;
};
lime_graphics_utils_ImageCanvasUtil.copyChannel = function(image,sourceImage,sourceRect,destPoint,sourceChannel,destChannel) {
	lime_graphics_utils_ImageCanvasUtil.convertToData(sourceImage);
	lime_graphics_utils_ImageCanvasUtil.convertToData(image);
	lime_graphics_utils_ImageDataUtil.copyChannel(image,sourceImage,sourceRect,destPoint,sourceChannel,destChannel);
};
lime_graphics_utils_ImageCanvasUtil.copyPixels = function(image,sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha) {
	if(mergeAlpha == null) mergeAlpha = false;
	if(destPoint == null || destPoint.x >= image.width || destPoint.y >= image.height || sourceRect == null || sourceRect.width < 1 || sourceRect.height < 1) return;
	if(alphaImage != null && alphaImage.get_transparent()) {
		if(alphaPoint == null) alphaPoint = new lime_math_Vector2();
		var tempData = image.clone();
		tempData.copyChannel(alphaImage,new lime_math_Rectangle(alphaPoint.x,alphaPoint.y,sourceRect.width,sourceRect.height),new lime_math_Vector2(sourceRect.x,sourceRect.y),lime_graphics_ImageChannel.ALPHA,lime_graphics_ImageChannel.ALPHA);
		sourceImage = tempData;
	}
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image,true);
	if(!mergeAlpha) {
		if(image.get_transparent() && sourceImage.get_transparent()) image.buffer.__srcContext.clearRect(destPoint.x + image.offsetX,destPoint.y + image.offsetY,sourceRect.width + image.offsetX,sourceRect.height + image.offsetY);
	}
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(sourceImage);
	if(sourceImage.buffer.get_src() != null) image.buffer.__srcContext.drawImage(sourceImage.buffer.get_src(),sourceRect.x + sourceImage.offsetX | 0,sourceRect.y + sourceImage.offsetY | 0,sourceRect.width | 0,sourceRect.height | 0,destPoint.x + image.offsetX | 0,destPoint.y + image.offsetY | 0,sourceRect.width | 0,sourceRect.height | 0);
	image.dirty = true;
	image.version++;
};
lime_graphics_utils_ImageCanvasUtil.createCanvas = function(image,width,height) {
	var buffer = image.buffer;
	if(buffer.__srcCanvas == null) {
		buffer.__srcCanvas = window.document.createElement("canvas");
		buffer.__srcCanvas.width = width;
		buffer.__srcCanvas.height = height;
		if(!image.get_transparent()) {
			if(!image.get_transparent()) buffer.__srcCanvas.setAttribute("moz-opaque","true");
			buffer.__srcContext = buffer.__srcCanvas.getContext ("2d", { alpha: false });
		} else buffer.__srcContext = buffer.__srcCanvas.getContext("2d");
		buffer.__srcContext.mozImageSmoothingEnabled = false;
		buffer.__srcContext.msImageSmoothingEnabled = false;
		buffer.__srcContext.imageSmoothingEnabled = false;
	}
};
lime_graphics_utils_ImageCanvasUtil.createImageData = function(image) {
	var buffer = image.buffer;
	if(buffer.__srcImageData == null) {
		if(buffer.data == null) buffer.__srcImageData = buffer.__srcContext.getImageData(0,0,buffer.width,buffer.height); else {
			buffer.__srcImageData = buffer.__srcContext.createImageData(buffer.width,buffer.height);
			buffer.__srcImageData.data.set(buffer.data);
		}
		var elements = buffer.__srcImageData.data.buffer;
		var this1;
		if(elements != null) this1 = new Uint8Array(elements); else this1 = null;
		buffer.data = this1;
	}
};
lime_graphics_utils_ImageCanvasUtil.fillRect = function(image,rect,color,format) {
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
	var r;
	var g;
	var b;
	var a;
	if(format == 1) {
		r = color >> 16 & 255;
		g = color >> 8 & 255;
		b = color & 255;
		if(image.get_transparent()) a = color >> 24 & 255; else a = 255;
	} else {
		r = color >> 24 & 255;
		g = color >> 16 & 255;
		b = color >> 8 & 255;
		if(image.get_transparent()) a = color & 255; else a = 255;
	}
	if(rect.x == 0 && rect.y == 0 && rect.width == image.width && rect.height == image.height) {
		if(image.get_transparent() && a == 0) {
			image.buffer.__srcCanvas.width = image.buffer.width;
			return;
		}
	}
	image.buffer.__srcContext.fillStyle = "rgba(" + r + ", " + g + ", " + b + ", " + a / 255 + ")";
	image.buffer.__srcContext.fillRect(rect.x + image.offsetX,rect.y + image.offsetY,rect.width + image.offsetX,rect.height + image.offsetY);
	image.dirty = true;
	image.version++;
};
lime_graphics_utils_ImageCanvasUtil.floodFill = function(image,x,y,color,format) {
	lime_graphics_utils_ImageCanvasUtil.convertToData(image);
	lime_graphics_utils_ImageDataUtil.floodFill(image,x,y,color,format);
};
lime_graphics_utils_ImageCanvasUtil.getPixel = function(image,x,y,format) {
	lime_graphics_utils_ImageCanvasUtil.convertToData(image);
	return lime_graphics_utils_ImageDataUtil.getPixel(image,x,y,format);
};
lime_graphics_utils_ImageCanvasUtil.getPixel32 = function(image,x,y,format) {
	lime_graphics_utils_ImageCanvasUtil.convertToData(image);
	return lime_graphics_utils_ImageDataUtil.getPixel32(image,x,y,format);
};
lime_graphics_utils_ImageCanvasUtil.getPixels = function(image,rect,format) {
	lime_graphics_utils_ImageCanvasUtil.convertToData(image);
	return lime_graphics_utils_ImageDataUtil.getPixels(image,rect,format);
};
lime_graphics_utils_ImageCanvasUtil.merge = function(image,sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier) {
	lime_graphics_utils_ImageCanvasUtil.convertToData(sourceImage);
	lime_graphics_utils_ImageCanvasUtil.convertToData(image);
	lime_graphics_utils_ImageDataUtil.merge(image,sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
};
lime_graphics_utils_ImageCanvasUtil.resize = function(image,newWidth,newHeight) {
	var buffer = image.buffer;
	if(buffer.__srcCanvas == null) {
		lime_graphics_utils_ImageCanvasUtil.createCanvas(image,newWidth,newHeight);
		buffer.__srcContext.drawImage(buffer.get_src(),0,0,newWidth,newHeight);
	} else {
		lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image,true);
		var sourceCanvas = buffer.__srcCanvas;
		buffer.__srcCanvas = null;
		lime_graphics_utils_ImageCanvasUtil.createCanvas(image,newWidth,newHeight);
		buffer.__srcContext.drawImage(sourceCanvas,0,0,newWidth,newHeight);
	}
	buffer.__srcImageData = null;
	buffer.data = null;
	image.dirty = true;
	image.version++;
};
lime_graphics_utils_ImageCanvasUtil.scroll = function(image,x,y) {
	if(x % image.width == 0 && y % image.height == 0) return;
	var copy = image.clone();
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image,true);
	image.buffer.__srcContext.clearRect(x,y,image.width,image.height);
	image.buffer.__srcContext.drawImage(copy.get_src(),x,y);
	image.dirty = true;
	image.version++;
};
lime_graphics_utils_ImageCanvasUtil.setPixel = function(image,x,y,color,format) {
	lime_graphics_utils_ImageCanvasUtil.convertToData(image);
	lime_graphics_utils_ImageDataUtil.setPixel(image,x,y,color,format);
};
lime_graphics_utils_ImageCanvasUtil.setPixel32 = function(image,x,y,color,format) {
	lime_graphics_utils_ImageCanvasUtil.convertToData(image);
	lime_graphics_utils_ImageDataUtil.setPixel32(image,x,y,color,format);
};
lime_graphics_utils_ImageCanvasUtil.setPixels = function(image,rect,bytes,format) {
	lime_graphics_utils_ImageCanvasUtil.convertToData(image);
	lime_graphics_utils_ImageDataUtil.setPixels(image,rect,bytes,format);
};
lime_graphics_utils_ImageCanvasUtil.sync = function(image,clear) {
	if(image == null) return;
	if(image.type == lime_graphics_ImageType.CANVAS) lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image,clear); else lime_graphics_utils_ImageCanvasUtil.convertToData(image,clear);
};
var lime_graphics_utils_ImageDataUtil = function() { };
$hxClasses["lime.graphics.utils.ImageDataUtil"] = lime_graphics_utils_ImageDataUtil;
lime_graphics_utils_ImageDataUtil.__name__ = ["lime","graphics","utils","ImageDataUtil"];
lime_graphics_utils_ImageDataUtil.colorTransform = function(image,rect,colorMatrix) {
	var data = image.buffer.data;
	if(data == null) return;
	var format = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	var dataView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(image,rect);
	var alphaTable = lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getAlphaTable(colorMatrix);
	var redTable = lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getRedTable(colorMatrix);
	var greenTable = lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getGreenTable(colorMatrix);
	var blueTable = lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getBlueTable(colorMatrix);
	var row;
	var offset;
	var pixel;
	var _g1 = 0;
	var _g = dataView.height;
	while(_g1 < _g) {
		var y = _g1++;
		row = dataView.offset + dataView.stride * y;
		var _g3 = 0;
		var _g2 = dataView.width;
		while(_g3 < _g2) {
			var x = _g3++;
			offset = row + x * 4;
			switch(format) {
			case 2:
				pixel = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
				break;
			case 0:
				pixel = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
				break;
			case 1:
				pixel = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
				break;
			}
			if(premultiplied) {
				if((pixel & 255) != 0 && (pixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (pixel & 255);
					var r;
					var idx = Math.round((pixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
					var g;
					var idx1 = Math.round((pixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
					var b;
					var idx2 = Math.round((pixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
					pixel = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | pixel & 255 & 255;
				}
			}
			pixel = (redTable[pixel >> 24 & 255] & 255) << 24 | (greenTable[pixel >> 16 & 255] & 255) << 16 | (blueTable[pixel >> 8 & 255] & 255) << 8 | alphaTable[pixel & 255] & 255;
			if(premultiplied) {
				if((pixel & 255) == 0) {
					if(pixel != 0) pixel = 0;
				} else if((pixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[pixel & 255];
					pixel = ((pixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((pixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((pixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | pixel & 255 & 255;
				}
			}
			switch(format) {
			case 2:
				data[offset] = pixel >> 8 & 255;
				data[offset + 1] = pixel >> 16 & 255;
				data[offset + 2] = pixel >> 24 & 255;
				data[offset + 3] = pixel & 255;
				break;
			case 0:
				data[offset] = pixel >> 24 & 255;
				data[offset + 1] = pixel >> 16 & 255;
				data[offset + 2] = pixel >> 8 & 255;
				data[offset + 3] = pixel & 255;
				break;
			case 1:
				data[offset] = pixel & 255;
				data[offset + 1] = pixel >> 24 & 255;
				data[offset + 2] = pixel >> 16 & 255;
				data[offset + 3] = pixel >> 8 & 255;
				break;
			}
		}
	}
	image.dirty = true;
	image.version++;
};
lime_graphics_utils_ImageDataUtil.copyChannel = function(image,sourceImage,sourceRect,destPoint,sourceChannel,destChannel) {
	var destIdx;
	switch(destChannel[1]) {
	case 0:
		destIdx = 0;
		break;
	case 1:
		destIdx = 1;
		break;
	case 2:
		destIdx = 2;
		break;
	case 3:
		destIdx = 3;
		break;
	}
	var srcIdx;
	switch(sourceChannel[1]) {
	case 0:
		srcIdx = 0;
		break;
	case 1:
		srcIdx = 1;
		break;
	case 2:
		srcIdx = 2;
		break;
	case 3:
		srcIdx = 3;
		break;
	}
	var srcData = sourceImage.buffer.data;
	var destData = image.buffer.data;
	if(srcData == null || destData == null) return;
	var srcView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(sourceImage,sourceRect);
	var destView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(image,new lime_math_Rectangle(destPoint.x,destPoint.y,srcView.width,srcView.height));
	var srcFormat = sourceImage.buffer.format;
	var destFormat = image.buffer.format;
	var srcPremultiplied = sourceImage.buffer.premultiplied;
	var destPremultiplied = image.buffer.premultiplied;
	var srcPosition;
	var destPosition;
	var srcPixel;
	var destPixel;
	var value = 0;
	var _g1 = 0;
	var _g = destView.height;
	while(_g1 < _g) {
		var y = _g1++;
		srcPosition = srcView.offset + srcView.stride * y;
		destPosition = destView.offset + destView.stride * y;
		var _g3 = 0;
		var _g2 = destView.width;
		while(_g3 < _g2) {
			var x = _g3++;
			switch(srcFormat) {
			case 2:
				srcPixel = (srcData[srcPosition + 2] & 255) << 24 | (srcData[srcPosition + 1] & 255) << 16 | (srcData[srcPosition] & 255) << 8 | srcData[srcPosition + 3] & 255;
				break;
			case 0:
				srcPixel = (srcData[srcPosition] & 255) << 24 | (srcData[srcPosition + 1] & 255) << 16 | (srcData[srcPosition + 2] & 255) << 8 | srcData[srcPosition + 3] & 255;
				break;
			case 1:
				srcPixel = (srcData[srcPosition + 1] & 255) << 24 | (srcData[srcPosition + 2] & 255) << 16 | (srcData[srcPosition + 3] & 255) << 8 | srcData[srcPosition] & 255;
				break;
			}
			if(srcPremultiplied) {
				if((srcPixel & 255) != 0 && (srcPixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (srcPixel & 255);
					var r;
					var idx = Math.round((srcPixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
					var g;
					var idx1 = Math.round((srcPixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
					var b;
					var idx2 = Math.round((srcPixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
					srcPixel = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | srcPixel & 255 & 255;
				}
			}
			switch(destFormat) {
			case 2:
				destPixel = (destData[destPosition + 2] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition] & 255) << 8 | destData[destPosition + 3] & 255;
				break;
			case 0:
				destPixel = (destData[destPosition] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition + 2] & 255) << 8 | destData[destPosition + 3] & 255;
				break;
			case 1:
				destPixel = (destData[destPosition + 1] & 255) << 24 | (destData[destPosition + 2] & 255) << 16 | (destData[destPosition + 3] & 255) << 8 | destData[destPosition] & 255;
				break;
			}
			if(destPremultiplied) {
				if((destPixel & 255) != 0 && (destPixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (destPixel & 255);
					var r1;
					var idx3 = Math.round((destPixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					r1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx3];
					var g1;
					var idx4 = Math.round((destPixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					g1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx4];
					var b1;
					var idx5 = Math.round((destPixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					b1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx5];
					destPixel = (r1 & 255) << 24 | (g1 & 255) << 16 | (b1 & 255) << 8 | destPixel & 255 & 255;
				}
			}
			switch(srcIdx) {
			case 0:
				value = srcPixel >> 24 & 255;
				break;
			case 1:
				value = srcPixel >> 16 & 255;
				break;
			case 2:
				value = srcPixel >> 8 & 255;
				break;
			case 3:
				value = srcPixel & 255;
				break;
			}
			switch(destIdx) {
			case 0:
				destPixel = (value & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
				value;
				break;
			case 1:
				destPixel = (destPixel >> 24 & 255 & 255) << 24 | (value & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
				value;
				break;
			case 2:
				destPixel = (destPixel >> 24 & 255 & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (value & 255) << 8 | destPixel & 255 & 255;
				value;
				break;
			case 3:
				destPixel = (destPixel >> 24 & 255 & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | value & 255;
				value;
				break;
			}
			if(destPremultiplied) {
				if((destPixel & 255) == 0) {
					if(destPixel != 0) destPixel = 0;
				} else if((destPixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[destPixel & 255];
					destPixel = ((destPixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((destPixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((destPixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | destPixel & 255 & 255;
				}
			}
			switch(destFormat) {
			case 2:
				destData[destPosition] = destPixel >> 8 & 255;
				destData[destPosition + 1] = destPixel >> 16 & 255;
				destData[destPosition + 2] = destPixel >> 24 & 255;
				destData[destPosition + 3] = destPixel & 255;
				break;
			case 0:
				destData[destPosition] = destPixel >> 24 & 255;
				destData[destPosition + 1] = destPixel >> 16 & 255;
				destData[destPosition + 2] = destPixel >> 8 & 255;
				destData[destPosition + 3] = destPixel & 255;
				break;
			case 1:
				destData[destPosition] = destPixel & 255;
				destData[destPosition + 1] = destPixel >> 24 & 255;
				destData[destPosition + 2] = destPixel >> 16 & 255;
				destData[destPosition + 3] = destPixel >> 8 & 255;
				break;
			}
			srcPosition += 4;
			destPosition += 4;
		}
	}
	image.dirty = true;
	image.version++;
};
lime_graphics_utils_ImageDataUtil.copyPixels = function(image,sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha) {
	if(mergeAlpha == null) mergeAlpha = false;
	var sourceData = sourceImage.buffer.data;
	var destData = image.buffer.data;
	if(sourceData == null || destData == null) return;
	var sourceView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(sourceImage,sourceRect);
	var destView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(image,new lime_math_Rectangle(destPoint.x,destPoint.y,sourceView.width,sourceView.height));
	var sourceFormat = sourceImage.buffer.format;
	var destFormat = image.buffer.format;
	var sourcePremultiplied = sourceImage.buffer.premultiplied;
	var destPremultiplied = image.buffer.premultiplied;
	var sourcePosition;
	var destPosition;
	var sourcePixel;
	if(!mergeAlpha || !sourceImage.get_transparent()) {
		var _g1 = 0;
		var _g = destView.height;
		while(_g1 < _g) {
			var y = _g1++;
			sourcePosition = sourceView.offset + sourceView.stride * y;
			destPosition = destView.offset + destView.stride * y;
			var _g3 = 0;
			var _g2 = destView.width;
			while(_g3 < _g2) {
				var x = _g3++;
				switch(sourceFormat) {
				case 2:
					sourcePixel = (sourceData[sourcePosition + 2] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
					break;
				case 0:
					sourcePixel = (sourceData[sourcePosition] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition + 2] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
					break;
				case 1:
					sourcePixel = (sourceData[sourcePosition + 1] & 255) << 24 | (sourceData[sourcePosition + 2] & 255) << 16 | (sourceData[sourcePosition + 3] & 255) << 8 | sourceData[sourcePosition] & 255;
					break;
				}
				if(sourcePremultiplied) {
					if((sourcePixel & 255) != 0 && (sourcePixel & 255) != 255) {
						lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (sourcePixel & 255);
						var r;
						var idx = Math.round((sourcePixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
						r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
						var g;
						var idx1 = Math.round((sourcePixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
						g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
						var b;
						var idx2 = Math.round((sourcePixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
						b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
						sourcePixel = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | sourcePixel & 255 & 255;
					}
				}
				if(destPremultiplied) {
					if((sourcePixel & 255) == 0) {
						if(sourcePixel != 0) sourcePixel = 0;
					} else if((sourcePixel & 255) != 255) {
						lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[sourcePixel & 255];
						sourcePixel = ((sourcePixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((sourcePixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((sourcePixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | sourcePixel & 255 & 255;
					}
				}
				switch(destFormat) {
				case 2:
					destData[destPosition] = sourcePixel >> 8 & 255;
					destData[destPosition + 1] = sourcePixel >> 16 & 255;
					destData[destPosition + 2] = sourcePixel >> 24 & 255;
					destData[destPosition + 3] = sourcePixel & 255;
					break;
				case 0:
					destData[destPosition] = sourcePixel >> 24 & 255;
					destData[destPosition + 1] = sourcePixel >> 16 & 255;
					destData[destPosition + 2] = sourcePixel >> 8 & 255;
					destData[destPosition + 3] = sourcePixel & 255;
					break;
				case 1:
					destData[destPosition] = sourcePixel & 255;
					destData[destPosition + 1] = sourcePixel >> 24 & 255;
					destData[destPosition + 2] = sourcePixel >> 16 & 255;
					destData[destPosition + 3] = sourcePixel >> 8 & 255;
					break;
				}
				sourcePosition += 4;
				destPosition += 4;
			}
		}
	} else {
		var sourceAlpha;
		var destAlpha;
		var oneMinusSourceAlpha;
		var blendAlpha;
		var destPixel;
		if(alphaImage == null) {
			var _g11 = 0;
			var _g4 = destView.height;
			while(_g11 < _g4) {
				var y1 = _g11++;
				sourcePosition = sourceView.offset + sourceView.stride * y1;
				destPosition = destView.offset + destView.stride * y1;
				var _g31 = 0;
				var _g21 = destView.width;
				while(_g31 < _g21) {
					var x1 = _g31++;
					switch(sourceFormat) {
					case 2:
						sourcePixel = (sourceData[sourcePosition + 2] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
						break;
					case 0:
						sourcePixel = (sourceData[sourcePosition] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition + 2] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
						break;
					case 1:
						sourcePixel = (sourceData[sourcePosition + 1] & 255) << 24 | (sourceData[sourcePosition + 2] & 255) << 16 | (sourceData[sourcePosition + 3] & 255) << 8 | sourceData[sourcePosition] & 255;
						break;
					}
					if(sourcePremultiplied) {
						if((sourcePixel & 255) != 0 && (sourcePixel & 255) != 255) {
							lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (sourcePixel & 255);
							var r1;
							var idx3 = Math.round((sourcePixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
							r1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx3];
							var g1;
							var idx4 = Math.round((sourcePixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
							g1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx4];
							var b1;
							var idx5 = Math.round((sourcePixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
							b1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx5];
							sourcePixel = (r1 & 255) << 24 | (g1 & 255) << 16 | (b1 & 255) << 8 | sourcePixel & 255 & 255;
						}
					}
					switch(destFormat) {
					case 2:
						destPixel = (destData[destPosition + 2] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition] & 255) << 8 | destData[destPosition + 3] & 255;
						break;
					case 0:
						destPixel = (destData[destPosition] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition + 2] & 255) << 8 | destData[destPosition + 3] & 255;
						break;
					case 1:
						destPixel = (destData[destPosition + 1] & 255) << 24 | (destData[destPosition + 2] & 255) << 16 | (destData[destPosition + 3] & 255) << 8 | destData[destPosition] & 255;
						break;
					}
					if(destPremultiplied) {
						if((destPixel & 255) != 0 && (destPixel & 255) != 255) {
							lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (destPixel & 255);
							var r2;
							var idx6 = Math.round((destPixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
							r2 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx6];
							var g2;
							var idx7 = Math.round((destPixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
							g2 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx7];
							var b2;
							var idx8 = Math.round((destPixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
							b2 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx8];
							destPixel = (r2 & 255) << 24 | (g2 & 255) << 16 | (b2 & 255) << 8 | destPixel & 255 & 255;
						}
					}
					sourceAlpha = (sourcePixel & 255) / 255.0;
					destAlpha = (destPixel & 255) / 255.0;
					oneMinusSourceAlpha = 1 - sourceAlpha;
					blendAlpha = sourceAlpha + destAlpha * oneMinusSourceAlpha;
					if(blendAlpha == 0) destPixel = 0; else {
						var value;
						var idx9 = Math.round(((sourcePixel >> 24 & 255) * sourceAlpha + (destPixel >> 24 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha);
						value = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx9];
						destPixel = (value & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
						value;
						var value1;
						var idx10 = Math.round(((sourcePixel >> 16 & 255) * sourceAlpha + (destPixel >> 16 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha);
						value1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx10];
						destPixel = (destPixel >> 24 & 255 & 255) << 24 | (value1 & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
						value1;
						var value2;
						var idx11 = Math.round(((sourcePixel >> 8 & 255) * sourceAlpha + (destPixel >> 8 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha);
						value2 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx11];
						destPixel = (destPixel >> 24 & 255 & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (value2 & 255) << 8 | destPixel & 255 & 255;
						value2;
						var value3;
						var idx12 = Math.round(blendAlpha * 255.0);
						value3 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx12];
						destPixel = (destPixel >> 24 & 255 & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | value3 & 255;
						value3;
					}
					if(destPremultiplied) {
						if((destPixel & 255) == 0) {
							if(destPixel != 0) destPixel = 0;
						} else if((destPixel & 255) != 255) {
							lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[destPixel & 255];
							destPixel = ((destPixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((destPixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((destPixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | destPixel & 255 & 255;
						}
					}
					switch(destFormat) {
					case 2:
						destData[destPosition] = destPixel >> 8 & 255;
						destData[destPosition + 1] = destPixel >> 16 & 255;
						destData[destPosition + 2] = destPixel >> 24 & 255;
						destData[destPosition + 3] = destPixel & 255;
						break;
					case 0:
						destData[destPosition] = destPixel >> 24 & 255;
						destData[destPosition + 1] = destPixel >> 16 & 255;
						destData[destPosition + 2] = destPixel >> 8 & 255;
						destData[destPosition + 3] = destPixel & 255;
						break;
					case 1:
						destData[destPosition] = destPixel & 255;
						destData[destPosition + 1] = destPixel >> 24 & 255;
						destData[destPosition + 2] = destPixel >> 16 & 255;
						destData[destPosition + 3] = destPixel >> 8 & 255;
						break;
					}
					sourcePosition += 4;
					destPosition += 4;
				}
			}
		} else {
			if(alphaPoint == null) alphaPoint = new lime_math_Vector2();
			var alphaData = alphaImage.buffer.data;
			var alphaFormat = alphaImage.buffer.format;
			var alphaPremultiplied = alphaImage.buffer.premultiplied;
			var alphaView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(alphaImage,new lime_math_Rectangle(alphaPoint.x,alphaPoint.y,destView.width,destView.height));
			var alphaPosition;
			var alphaPixel;
			var _g12 = 0;
			var _g5 = alphaView.height;
			while(_g12 < _g5) {
				var y2 = _g12++;
				sourcePosition = sourceView.offset + sourceView.stride * y2;
				destPosition = destView.offset + destView.stride * y2;
				alphaPosition = alphaView.offset + alphaView.stride * y2;
				var _g32 = 0;
				var _g22 = alphaView.width;
				while(_g32 < _g22) {
					var x2 = _g32++;
					switch(sourceFormat) {
					case 2:
						sourcePixel = (sourceData[sourcePosition + 2] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
						break;
					case 0:
						sourcePixel = (sourceData[sourcePosition] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition + 2] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
						break;
					case 1:
						sourcePixel = (sourceData[sourcePosition + 1] & 255) << 24 | (sourceData[sourcePosition + 2] & 255) << 16 | (sourceData[sourcePosition + 3] & 255) << 8 | sourceData[sourcePosition] & 255;
						break;
					}
					if(sourcePremultiplied) {
						if((sourcePixel & 255) != 0 && (sourcePixel & 255) != 255) {
							lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (sourcePixel & 255);
							var r3;
							var idx13 = Math.round((sourcePixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
							r3 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx13];
							var g3;
							var idx14 = Math.round((sourcePixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
							g3 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx14];
							var b3;
							var idx15 = Math.round((sourcePixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
							b3 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx15];
							sourcePixel = (r3 & 255) << 24 | (g3 & 255) << 16 | (b3 & 255) << 8 | sourcePixel & 255 & 255;
						}
					}
					switch(destFormat) {
					case 2:
						destPixel = (destData[destPosition + 2] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition] & 255) << 8 | destData[destPosition + 3] & 255;
						break;
					case 0:
						destPixel = (destData[destPosition] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition + 2] & 255) << 8 | destData[destPosition + 3] & 255;
						break;
					case 1:
						destPixel = (destData[destPosition + 1] & 255) << 24 | (destData[destPosition + 2] & 255) << 16 | (destData[destPosition + 3] & 255) << 8 | destData[destPosition] & 255;
						break;
					}
					if(destPremultiplied) {
						if((destPixel & 255) != 0 && (destPixel & 255) != 255) {
							lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (destPixel & 255);
							var r4;
							var idx16 = Math.round((destPixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
							r4 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx16];
							var g4;
							var idx17 = Math.round((destPixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
							g4 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx17];
							var b4;
							var idx18 = Math.round((destPixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
							b4 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx18];
							destPixel = (r4 & 255) << 24 | (g4 & 255) << 16 | (b4 & 255) << 8 | destPixel & 255 & 255;
						}
					}
					switch(alphaFormat) {
					case 2:
						alphaPixel = (alphaData[alphaPosition + 2] & 255) << 24 | (alphaData[alphaPosition + 1] & 255) << 16 | (alphaData[alphaPosition] & 255) << 8 | alphaData[alphaPosition + 3] & 255;
						break;
					case 0:
						alphaPixel = (alphaData[alphaPosition] & 255) << 24 | (alphaData[alphaPosition + 1] & 255) << 16 | (alphaData[alphaPosition + 2] & 255) << 8 | alphaData[alphaPosition + 3] & 255;
						break;
					case 1:
						alphaPixel = (alphaData[alphaPosition + 1] & 255) << 24 | (alphaData[alphaPosition + 2] & 255) << 16 | (alphaData[alphaPosition + 3] & 255) << 8 | alphaData[alphaPosition] & 255;
						break;
					}
					if(alphaPremultiplied) {
						if((alphaPixel & 255) != 0 && (alphaPixel & 255) != 255) {
							lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (alphaPixel & 255);
							var r5;
							var idx19 = Math.round((alphaPixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
							r5 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx19];
							var g5;
							var idx20 = Math.round((alphaPixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
							g5 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx20];
							var b5;
							var idx21 = Math.round((alphaPixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
							b5 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx21];
							alphaPixel = (r5 & 255) << 24 | (g5 & 255) << 16 | (b5 & 255) << 8 | alphaPixel & 255 & 255;
						}
					}
					sourceAlpha = (alphaPixel & 255) / 255;
					destAlpha = (destPixel & 255) / 255;
					oneMinusSourceAlpha = 1 - sourceAlpha;
					blendAlpha = sourceAlpha + destAlpha * oneMinusSourceAlpha;
					if(blendAlpha == 0) destPixel = 0; else {
						var value4;
						var idx22 = Math.round(((sourcePixel >> 24 & 255) * sourceAlpha + (destPixel >> 24 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha);
						value4 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx22];
						destPixel = (value4 & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
						value4;
						var value5;
						var idx23 = Math.round(((sourcePixel >> 16 & 255) * sourceAlpha + (destPixel >> 16 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha);
						value5 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx23];
						destPixel = (destPixel >> 24 & 255 & 255) << 24 | (value5 & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
						value5;
						var value6;
						var idx24 = Math.round(((sourcePixel >> 8 & 255) * sourceAlpha + (destPixel >> 8 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha);
						value6 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx24];
						destPixel = (destPixel >> 24 & 255 & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (value6 & 255) << 8 | destPixel & 255 & 255;
						value6;
						var value7;
						var idx25 = Math.round(blendAlpha * 255.0);
						value7 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx25];
						destPixel = (destPixel >> 24 & 255 & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | value7 & 255;
						value7;
					}
					if(destPremultiplied) {
						if((destPixel & 255) == 0) {
							if(destPixel != 0) destPixel = 0;
						} else if((destPixel & 255) != 255) {
							lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[destPixel & 255];
							destPixel = ((destPixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((destPixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((destPixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | destPixel & 255 & 255;
						}
					}
					switch(destFormat) {
					case 2:
						destData[destPosition] = destPixel >> 8 & 255;
						destData[destPosition + 1] = destPixel >> 16 & 255;
						destData[destPosition + 2] = destPixel >> 24 & 255;
						destData[destPosition + 3] = destPixel & 255;
						break;
					case 0:
						destData[destPosition] = destPixel >> 24 & 255;
						destData[destPosition + 1] = destPixel >> 16 & 255;
						destData[destPosition + 2] = destPixel >> 8 & 255;
						destData[destPosition + 3] = destPixel & 255;
						break;
					case 1:
						destData[destPosition] = destPixel & 255;
						destData[destPosition + 1] = destPixel >> 24 & 255;
						destData[destPosition + 2] = destPixel >> 16 & 255;
						destData[destPosition + 3] = destPixel >> 8 & 255;
						break;
					}
					sourcePosition += 4;
					destPosition += 4;
				}
			}
		}
	}
	image.dirty = true;
	image.version++;
};
lime_graphics_utils_ImageDataUtil.fillRect = function(image,rect,color,format) {
	var fillColor;
	switch(format) {
	case 1:
		{
			var argb = color;
			var rgba = 0;
			rgba = (argb >> 16 & 255 & 255) << 24 | (argb >> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >> 24 & 255 & 255;
			fillColor = rgba;
		}
		break;
	case 2:
		{
			var bgra = color;
			var rgba1 = 0;
			rgba1 = (bgra >> 8 & 255 & 255) << 24 | (bgra >> 16 & 255 & 255) << 16 | (bgra >> 24 & 255 & 255) << 8 | bgra & 255 & 255;
			fillColor = rgba1;
		}
		break;
	default:
		fillColor = color;
	}
	if(!image.get_transparent()) {
		fillColor = (fillColor >> 24 & 255 & 255) << 24 | (fillColor >> 16 & 255 & 255) << 16 | (fillColor >> 8 & 255 & 255) << 8 | 255;
		255;
	}
	var data = image.buffer.data;
	if(data == null) return;
	var format1 = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	if(premultiplied) {
		if((fillColor & 255) == 0) {
			if(fillColor != 0) fillColor = 0;
		} else if((fillColor & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[fillColor & 255];
			fillColor = ((fillColor >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((fillColor >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((fillColor >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | fillColor & 255 & 255;
		}
	}
	var dataView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(image,rect);
	var row;
	var _g1 = 0;
	var _g = dataView.height;
	while(_g1 < _g) {
		var y = _g1++;
		row = dataView.offset + dataView.stride * y;
		var _g3 = 0;
		var _g2 = dataView.width;
		while(_g3 < _g2) {
			var x = _g3++;
			var offset = row + x * 4;
			switch(format1) {
			case 2:
				data[offset] = fillColor >> 8 & 255;
				data[offset + 1] = fillColor >> 16 & 255;
				data[offset + 2] = fillColor >> 24 & 255;
				data[offset + 3] = fillColor & 255;
				break;
			case 0:
				data[offset] = fillColor >> 24 & 255;
				data[offset + 1] = fillColor >> 16 & 255;
				data[offset + 2] = fillColor >> 8 & 255;
				data[offset + 3] = fillColor & 255;
				break;
			case 1:
				data[offset] = fillColor & 255;
				data[offset + 1] = fillColor >> 24 & 255;
				data[offset + 2] = fillColor >> 16 & 255;
				data[offset + 3] = fillColor >> 8 & 255;
				break;
			}
		}
	}
	image.dirty = true;
	image.version++;
};
lime_graphics_utils_ImageDataUtil.floodFill = function(image,x,y,color,format) {
	var data = image.buffer.data;
	if(data == null) return;
	if(format == 1) color = (color & 16777215) << 8 | color >> 24 & 255;
	var format1 = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	var fillColor = color;
	var hitColor;
	var offset = (y + image.offsetY) * (image.buffer.width * 4) + (x + image.offsetX) * 4;
	switch(format1) {
	case 2:
		hitColor = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 0:
		hitColor = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 1:
		hitColor = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
		break;
	}
	if(premultiplied) {
		if((hitColor & 255) != 0 && (hitColor & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (hitColor & 255);
			var r;
			var idx = Math.round((hitColor >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
			var g;
			var idx1 = Math.round((hitColor >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
			var b;
			var idx2 = Math.round((hitColor >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
			hitColor = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | hitColor & 255 & 255;
		}
	}
	if(!image.get_transparent()) {
		fillColor = (fillColor >> 24 & 255 & 255) << 24 | (fillColor >> 16 & 255 & 255) << 16 | (fillColor >> 8 & 255 & 255) << 8 | 255;
		255;
		hitColor = (hitColor >> 24 & 255 & 255) << 24 | (hitColor >> 16 & 255 & 255) << 16 | (hitColor >> 8 & 255 & 255) << 8 | 255;
		255;
	}
	if(fillColor == hitColor) return;
	if(premultiplied) {
		if((fillColor & 255) == 0) {
			if(fillColor != 0) fillColor = 0;
		} else if((fillColor & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[fillColor & 255];
			fillColor = ((fillColor >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((fillColor >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((fillColor >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | fillColor & 255 & 255;
		}
	}
	var dx = [0,-1,1,0];
	var dy = [-1,0,0,1];
	var minX = -image.offsetX;
	var minY = -image.offsetY;
	var maxX = minX + image.width;
	var maxY = minY + image.height;
	var queue = [];
	queue.push(x);
	queue.push(y);
	var curPointX;
	var curPointY;
	var nextPointX;
	var nextPointY;
	var nextPointOffset;
	var readColor;
	while(queue.length > 0) {
		curPointY = queue.pop();
		curPointX = queue.pop();
		var _g = 0;
		while(_g < 4) {
			var i = _g++;
			nextPointX = curPointX + dx[i];
			nextPointY = curPointY + dy[i];
			if(nextPointX < minX || nextPointY < minY || nextPointX >= maxX || nextPointY >= maxY) continue;
			nextPointOffset = (nextPointY * image.width + nextPointX) * 4;
			switch(format1) {
			case 2:
				readColor = (data[nextPointOffset + 2] & 255) << 24 | (data[nextPointOffset + 1] & 255) << 16 | (data[nextPointOffset] & 255) << 8 | data[nextPointOffset + 3] & 255;
				break;
			case 0:
				readColor = (data[nextPointOffset] & 255) << 24 | (data[nextPointOffset + 1] & 255) << 16 | (data[nextPointOffset + 2] & 255) << 8 | data[nextPointOffset + 3] & 255;
				break;
			case 1:
				readColor = (data[nextPointOffset + 1] & 255) << 24 | (data[nextPointOffset + 2] & 255) << 16 | (data[nextPointOffset + 3] & 255) << 8 | data[nextPointOffset] & 255;
				break;
			}
			if(premultiplied) {
				if((readColor & 255) != 0 && (readColor & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (readColor & 255);
					var r1;
					var idx3 = Math.round((readColor >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					r1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx3];
					var g1;
					var idx4 = Math.round((readColor >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					g1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx4];
					var b1;
					var idx5 = Math.round((readColor >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					b1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx5];
					readColor = (r1 & 255) << 24 | (g1 & 255) << 16 | (b1 & 255) << 8 | readColor & 255 & 255;
				}
			}
			if(readColor == hitColor) {
				switch(format1) {
				case 2:
					data[nextPointOffset] = fillColor >> 8 & 255;
					data[nextPointOffset + 1] = fillColor >> 16 & 255;
					data[nextPointOffset + 2] = fillColor >> 24 & 255;
					data[nextPointOffset + 3] = fillColor & 255;
					break;
				case 0:
					data[nextPointOffset] = fillColor >> 24 & 255;
					data[nextPointOffset + 1] = fillColor >> 16 & 255;
					data[nextPointOffset + 2] = fillColor >> 8 & 255;
					data[nextPointOffset + 3] = fillColor & 255;
					break;
				case 1:
					data[nextPointOffset] = fillColor & 255;
					data[nextPointOffset + 1] = fillColor >> 24 & 255;
					data[nextPointOffset + 2] = fillColor >> 16 & 255;
					data[nextPointOffset + 3] = fillColor >> 8 & 255;
					break;
				}
				queue.push(nextPointX);
				queue.push(nextPointY);
			}
		}
	}
	image.dirty = true;
	image.version++;
};
lime_graphics_utils_ImageDataUtil.getColorBoundsRect = function(image,mask,color,findColor,format) {
	if(findColor == null) findColor = true;
	var left = image.width + 1;
	var right = 0;
	var top = image.height + 1;
	var bottom = 0;
	var _color;
	var _mask;
	switch(format) {
	case 1:
		{
			var argb = color;
			var rgba = 0;
			rgba = (argb >> 16 & 255 & 255) << 24 | (argb >> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >> 24 & 255 & 255;
			_color = rgba;
		}
		{
			var argb1 = mask;
			var rgba1 = 0;
			rgba1 = (argb1 >> 16 & 255 & 255) << 24 | (argb1 >> 8 & 255 & 255) << 16 | (argb1 & 255 & 255) << 8 | argb1 >> 24 & 255 & 255;
			_mask = rgba1;
		}
		break;
	case 2:
		{
			var bgra = color;
			var rgba2 = 0;
			rgba2 = (bgra >> 8 & 255 & 255) << 24 | (bgra >> 16 & 255 & 255) << 16 | (bgra >> 24 & 255 & 255) << 8 | bgra & 255 & 255;
			_color = rgba2;
		}
		{
			var bgra1 = mask;
			var rgba3 = 0;
			rgba3 = (bgra1 >> 8 & 255 & 255) << 24 | (bgra1 >> 16 & 255 & 255) << 16 | (bgra1 >> 24 & 255 & 255) << 8 | bgra1 & 255 & 255;
			_mask = rgba3;
		}
		break;
	default:
		_color = color;
		_mask = mask;
	}
	if(!image.get_transparent()) {
		_color = (_color >> 24 & 255 & 255) << 24 | (_color >> 16 & 255 & 255) << 16 | (_color >> 8 & 255 & 255) << 8 | 255;
		255;
		_mask = (_mask >> 24 & 255 & 255) << 24 | (_mask >> 16 & 255 & 255) << 16 | (_mask >> 8 & 255 & 255) << 8 | 255;
		255;
	}
	var pixel;
	var hit;
	var _g1 = 0;
	var _g = image.width;
	while(_g1 < _g) {
		var x = _g1++;
		hit = false;
		var _g3 = 0;
		var _g2 = image.height;
		while(_g3 < _g2) {
			var y = _g3++;
			pixel = image.getPixel32(x,y,0);
			if(findColor) hit = (pixel & _mask) == _color; else hit = (pixel & _mask) != _color;
			if(hit) {
				if(x < left) left = x;
				break;
			}
		}
		if(hit) break;
	}
	var ix;
	var _g11 = 0;
	var _g4 = image.width;
	while(_g11 < _g4) {
		var x1 = _g11++;
		ix = image.width - 1 - x1;
		hit = false;
		var _g31 = 0;
		var _g21 = image.height;
		while(_g31 < _g21) {
			var y1 = _g31++;
			pixel = image.getPixel32(ix,y1,0);
			if(findColor) hit = (pixel & _mask) == _color; else hit = (pixel & _mask) != _color;
			if(hit) {
				if(ix > right) right = ix;
				break;
			}
		}
		if(hit) break;
	}
	var _g12 = 0;
	var _g5 = image.height;
	while(_g12 < _g5) {
		var y2 = _g12++;
		hit = false;
		var _g32 = 0;
		var _g22 = image.width;
		while(_g32 < _g22) {
			var x2 = _g32++;
			pixel = image.getPixel32(x2,y2,0);
			if(findColor) hit = (pixel & _mask) == _color; else hit = (pixel & _mask) != _color;
			if(hit) {
				if(y2 < top) top = y2;
				break;
			}
		}
		if(hit) break;
	}
	var iy;
	var _g13 = 0;
	var _g6 = image.height;
	while(_g13 < _g6) {
		var y3 = _g13++;
		iy = image.height - 1 - y3;
		hit = false;
		var _g33 = 0;
		var _g23 = image.width;
		while(_g33 < _g23) {
			var x3 = _g33++;
			pixel = image.getPixel32(x3,iy,0);
			if(findColor) hit = (pixel & _mask) == _color; else hit = (pixel & _mask) != _color;
			if(hit) {
				if(iy > bottom) bottom = iy;
				break;
			}
		}
		if(hit) break;
	}
	var w = right - left;
	var h = bottom - top;
	if(w > 0) w++;
	if(h > 0) h++;
	if(w < 0) w = 0;
	if(h < 0) h = 0;
	if(left == right) w = 1;
	if(top == bottom) h = 1;
	if(left > image.width) left = 0;
	if(top > image.height) top = 0;
	return new lime_math_Rectangle(left,top,w,h);
};
lime_graphics_utils_ImageDataUtil.getPixel = function(image,x,y,format) {
	var pixel;
	var data = image.buffer.data;
	var offset = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
	switch(image.buffer.format) {
	case 2:
		pixel = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 0:
		pixel = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 1:
		pixel = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
		break;
	}
	if(image.buffer.premultiplied) {
		if((pixel & 255) != 0 && (pixel & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (pixel & 255);
			var r;
			var idx = Math.round((pixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
			var g;
			var idx1 = Math.round((pixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
			var b;
			var idx2 = Math.round((pixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
			pixel = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | pixel & 255 & 255;
		}
	}
	pixel = (pixel >> 24 & 255 & 255) << 24 | (pixel >> 16 & 255 & 255) << 16 | (pixel >> 8 & 255 & 255) << 8 | 0;
	0;
	switch(format) {
	case 1:
		return (function($this) {
			var $r;
			var argb = 0;
			argb = (pixel & 255 & 255) << 24 | (pixel >> 24 & 255 & 255) << 16 | (pixel >> 16 & 255 & 255) << 8 | pixel >> 8 & 255 & 255;
			$r = argb;
			return $r;
		}(this));
	case 2:
		return (function($this) {
			var $r;
			var bgra = 0;
			bgra = (pixel >> 8 & 255 & 255) << 24 | (pixel >> 16 & 255 & 255) << 16 | (pixel >> 24 & 255 & 255) << 8 | pixel & 255 & 255;
			$r = bgra;
			return $r;
		}(this));
	default:
		return pixel;
	}
};
lime_graphics_utils_ImageDataUtil.getPixel32 = function(image,x,y,format) {
	var pixel;
	var data = image.buffer.data;
	var offset = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
	switch(image.buffer.format) {
	case 2:
		pixel = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 0:
		pixel = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 1:
		pixel = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
		break;
	}
	if(image.buffer.premultiplied) {
		if((pixel & 255) != 0 && (pixel & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (pixel & 255);
			var r;
			var idx = Math.round((pixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
			var g;
			var idx1 = Math.round((pixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
			var b;
			var idx2 = Math.round((pixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
			pixel = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | pixel & 255 & 255;
		}
	}
	switch(format) {
	case 1:
		return (function($this) {
			var $r;
			var argb = 0;
			argb = (pixel & 255 & 255) << 24 | (pixel >> 24 & 255 & 255) << 16 | (pixel >> 16 & 255 & 255) << 8 | pixel >> 8 & 255 & 255;
			$r = argb;
			return $r;
		}(this));
	case 2:
		return (function($this) {
			var $r;
			var bgra = 0;
			bgra = (pixel >> 8 & 255 & 255) << 24 | (pixel >> 16 & 255 & 255) << 16 | (pixel >> 24 & 255 & 255) << 8 | pixel & 255 & 255;
			$r = bgra;
			return $r;
		}(this));
	default:
		return pixel;
	}
};
lime_graphics_utils_ImageDataUtil.getPixels = function(image,rect,format) {
	if(image.buffer.data == null) return null;
	var length = rect.width * rect.height | 0;
	var bytes = new haxe_io_Bytes(new ArrayBuffer(length * 4));
	var data = image.buffer.data;
	var sourceFormat = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	var dataView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(image,rect);
	var position;
	var argb;
	var bgra;
	var pixel;
	var destPosition = 0;
	var _g1 = 0;
	var _g = dataView.height;
	while(_g1 < _g) {
		var y = _g1++;
		position = dataView.offset + dataView.stride * y;
		var _g3 = 0;
		var _g2 = dataView.width;
		while(_g3 < _g2) {
			var x = _g3++;
			switch(sourceFormat) {
			case 2:
				pixel = (data[position + 2] & 255) << 24 | (data[position + 1] & 255) << 16 | (data[position] & 255) << 8 | data[position + 3] & 255;
				break;
			case 0:
				pixel = (data[position] & 255) << 24 | (data[position + 1] & 255) << 16 | (data[position + 2] & 255) << 8 | data[position + 3] & 255;
				break;
			case 1:
				pixel = (data[position + 1] & 255) << 24 | (data[position + 2] & 255) << 16 | (data[position + 3] & 255) << 8 | data[position] & 255;
				break;
			}
			if(premultiplied) {
				if((pixel & 255) != 0 && (pixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (pixel & 255);
					var r;
					var idx = Math.round((pixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
					var g;
					var idx1 = Math.round((pixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
					var b;
					var idx2 = Math.round((pixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
					pixel = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | pixel & 255 & 255;
				}
			}
			switch(format) {
			case 1:
				{
					var argb1 = 0;
					argb1 = (pixel & 255 & 255) << 24 | (pixel >> 24 & 255 & 255) << 16 | (pixel >> 16 & 255 & 255) << 8 | pixel >> 8 & 255 & 255;
					argb = argb1;
				}
				pixel = argb;
				break;
			case 2:
				{
					var bgra1 = 0;
					bgra1 = (pixel >> 8 & 255 & 255) << 24 | (pixel >> 16 & 255 & 255) << 16 | (pixel >> 24 & 255 & 255) << 8 | pixel & 255 & 255;
					bgra = bgra1;
				}
				pixel = bgra;
				break;
			default:
			}
			bytes.set(destPosition++,pixel >> 24 & 255);
			bytes.set(destPosition++,pixel >> 16 & 255);
			bytes.set(destPosition++,pixel >> 8 & 255);
			bytes.set(destPosition++,pixel & 255);
			position += 4;
		}
	}
	return bytes;
};
lime_graphics_utils_ImageDataUtil.merge = function(image,sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier) {
	if(image.buffer.data == null || sourceImage.buffer.data == null) return;
	var sourceView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(sourceImage,sourceRect);
	var destView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(image,new lime_math_Rectangle(destPoint.x,destPoint.y,sourceView.width,sourceView.height));
	var sourceData = sourceImage.buffer.data;
	var destData = image.buffer.data;
	var sourceFormat = sourceImage.buffer.format;
	var destFormat = image.buffer.format;
	var sourcePremultiplied = sourceImage.buffer.premultiplied;
	var destPremultiplied = image.buffer.premultiplied;
	var sourcePosition;
	var destPosition;
	var sourcePixel;
	var destPixel;
	var _g1 = 0;
	var _g = destView.height;
	while(_g1 < _g) {
		var y = _g1++;
		sourcePosition = sourceView.offset + sourceView.stride * y;
		destPosition = destView.offset + destView.stride * y;
		var _g3 = 0;
		var _g2 = destView.width;
		while(_g3 < _g2) {
			var x = _g3++;
			switch(sourceFormat) {
			case 2:
				sourcePixel = (sourceData[sourcePosition + 2] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
				break;
			case 0:
				sourcePixel = (sourceData[sourcePosition] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition + 2] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
				break;
			case 1:
				sourcePixel = (sourceData[sourcePosition + 1] & 255) << 24 | (sourceData[sourcePosition + 2] & 255) << 16 | (sourceData[sourcePosition + 3] & 255) << 8 | sourceData[sourcePosition] & 255;
				break;
			}
			if(sourcePremultiplied) {
				if((sourcePixel & 255) != 0 && (sourcePixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (sourcePixel & 255);
					var r;
					var idx = Math.round((sourcePixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
					var g;
					var idx1 = Math.round((sourcePixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
					var b;
					var idx2 = Math.round((sourcePixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
					sourcePixel = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | sourcePixel & 255 & 255;
				}
			}
			switch(destFormat) {
			case 2:
				destPixel = (destData[destPosition + 2] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition] & 255) << 8 | destData[destPosition + 3] & 255;
				break;
			case 0:
				destPixel = (destData[destPosition] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition + 2] & 255) << 8 | destData[destPosition + 3] & 255;
				break;
			case 1:
				destPixel = (destData[destPosition + 1] & 255) << 24 | (destData[destPosition + 2] & 255) << 16 | (destData[destPosition + 3] & 255) << 8 | destData[destPosition] & 255;
				break;
			}
			if(destPremultiplied) {
				if((destPixel & 255) != 0 && (destPixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (destPixel & 255);
					var r1;
					var idx3 = Math.round((destPixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					r1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx3];
					var g1;
					var idx4 = Math.round((destPixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					g1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx4];
					var b1;
					var idx5 = Math.round((destPixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					b1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx5];
					destPixel = (r1 & 255) << 24 | (g1 & 255) << 16 | (b1 & 255) << 8 | destPixel & 255 & 255;
				}
			}
			var value = ((sourcePixel >> 24 & 255) * redMultiplier + (destPixel >> 24 & 255) * (256 - redMultiplier)) / 256 | 0;
			destPixel = (value & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
			value;
			var value1 = ((sourcePixel >> 16 & 255) * greenMultiplier + (destPixel >> 16 & 255) * (256 - greenMultiplier)) / 256 | 0;
			destPixel = (destPixel >> 24 & 255 & 255) << 24 | (value1 & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
			value1;
			var value2 = ((sourcePixel >> 8 & 255) * blueMultiplier + (destPixel >> 8 & 255) * (256 - blueMultiplier)) / 256 | 0;
			destPixel = (destPixel >> 24 & 255 & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (value2 & 255) << 8 | destPixel & 255 & 255;
			value2;
			var value3 = ((sourcePixel & 255) * alphaMultiplier + (destPixel & 255) * (256 - alphaMultiplier)) / 256 | 0;
			destPixel = (destPixel >> 24 & 255 & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | value3 & 255;
			value3;
			if(destPremultiplied) {
				if((destPixel & 255) == 0) {
					if(destPixel != 0) destPixel = 0;
				} else if((destPixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[destPixel & 255];
					destPixel = ((destPixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((destPixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((destPixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | destPixel & 255 & 255;
				}
			}
			switch(destFormat) {
			case 2:
				destData[destPosition] = destPixel >> 8 & 255;
				destData[destPosition + 1] = destPixel >> 16 & 255;
				destData[destPosition + 2] = destPixel >> 24 & 255;
				destData[destPosition + 3] = destPixel & 255;
				break;
			case 0:
				destData[destPosition] = destPixel >> 24 & 255;
				destData[destPosition + 1] = destPixel >> 16 & 255;
				destData[destPosition + 2] = destPixel >> 8 & 255;
				destData[destPosition + 3] = destPixel & 255;
				break;
			case 1:
				destData[destPosition] = destPixel & 255;
				destData[destPosition + 1] = destPixel >> 24 & 255;
				destData[destPosition + 2] = destPixel >> 16 & 255;
				destData[destPosition + 3] = destPixel >> 8 & 255;
				break;
			}
			sourcePosition += 4;
			destPosition += 4;
		}
	}
	image.dirty = true;
	image.version++;
};
lime_graphics_utils_ImageDataUtil.multiplyAlpha = function(image) {
	var data = image.buffer.data;
	if(data == null || !image.buffer.transparent) return;
	var format = image.buffer.format;
	var length = data.length / 4 | 0;
	var pixel;
	var _g = 0;
	while(_g < length) {
		var i = _g++;
		var offset = i * 4;
		switch(format) {
		case 2:
			pixel = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
			break;
		case 0:
			pixel = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
			break;
		case 1:
			pixel = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
			break;
		}
		var offset1 = i * 4;
		if((pixel & 255) == 0) {
			if(pixel != 0) pixel = 0;
		} else if((pixel & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[pixel & 255];
			pixel = ((pixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((pixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((pixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | pixel & 255 & 255;
		}
		switch(format) {
		case 2:
			data[offset1] = pixel >> 8 & 255;
			data[offset1 + 1] = pixel >> 16 & 255;
			data[offset1 + 2] = pixel >> 24 & 255;
			data[offset1 + 3] = pixel & 255;
			break;
		case 0:
			data[offset1] = pixel >> 24 & 255;
			data[offset1 + 1] = pixel >> 16 & 255;
			data[offset1 + 2] = pixel >> 8 & 255;
			data[offset1 + 3] = pixel & 255;
			break;
		case 1:
			data[offset1] = pixel & 255;
			data[offset1 + 1] = pixel >> 24 & 255;
			data[offset1 + 2] = pixel >> 16 & 255;
			data[offset1 + 3] = pixel >> 8 & 255;
			break;
		}
	}
	image.buffer.premultiplied = true;
	image.dirty = true;
	image.version++;
};
lime_graphics_utils_ImageDataUtil.resize = function(image,newWidth,newHeight) {
	var buffer = image.buffer;
	if(buffer.width == newWidth && buffer.height == newHeight) return;
	var newBuffer = new lime_graphics_ImageBuffer((function($this) {
		var $r;
		var elements = newWidth * newHeight * 4;
		var this1;
		if(elements != null) this1 = new Uint8Array(elements); else this1 = null;
		$r = this1;
		return $r;
	}(this)),newWidth,newHeight);
	var imageWidth = image.width;
	var imageHeight = image.height;
	var data = image.get_data();
	var newData = newBuffer.data;
	var sourceIndex;
	var sourceIndexX;
	var sourceIndexY;
	var sourceIndexXY;
	var index;
	var sourceX;
	var sourceY;
	var u;
	var v;
	var uRatio;
	var vRatio;
	var uOpposite;
	var vOpposite;
	var _g = 0;
	while(_g < newHeight) {
		var y = _g++;
		var _g1 = 0;
		while(_g1 < newWidth) {
			var x = _g1++;
			u = (x + 0.5) / newWidth * imageWidth - 0.5;
			v = (y + 0.5) / newHeight * imageHeight - 0.5;
			sourceX = u | 0;
			sourceY = v | 0;
			sourceIndex = (sourceY * imageWidth + sourceX) * 4;
			if(sourceX < imageWidth - 1) sourceIndexX = sourceIndex + 4; else sourceIndexX = sourceIndex;
			if(sourceY < imageHeight - 1) sourceIndexY = sourceIndex + imageWidth * 4; else sourceIndexY = sourceIndex;
			if(sourceIndexX != sourceIndex) sourceIndexXY = sourceIndexY + 4; else sourceIndexXY = sourceIndexY;
			index = (y * newWidth + x) * 4;
			uRatio = u - sourceX;
			vRatio = v - sourceY;
			uOpposite = 1 - uRatio;
			vOpposite = 1 - vRatio;
			var val = Std["int"]((_$UInt_UInt_$Impl_$.toFloat(data[sourceIndex]) * uOpposite + _$UInt_UInt_$Impl_$.toFloat(data[sourceIndexX]) * uRatio) * vOpposite + (_$UInt_UInt_$Impl_$.toFloat(data[sourceIndexY]) * uOpposite + _$UInt_UInt_$Impl_$.toFloat(data[sourceIndexXY]) * uRatio) * vRatio);
			newData[index] = val;
			var val1 = Std["int"]((_$UInt_UInt_$Impl_$.toFloat(data[sourceIndex + 1]) * uOpposite + _$UInt_UInt_$Impl_$.toFloat(data[sourceIndexX + 1]) * uRatio) * vOpposite + (_$UInt_UInt_$Impl_$.toFloat(data[sourceIndexY + 1]) * uOpposite + _$UInt_UInt_$Impl_$.toFloat(data[sourceIndexXY + 1]) * uRatio) * vRatio);
			newData[index + 1] = val1;
			var val2 = Std["int"]((_$UInt_UInt_$Impl_$.toFloat(data[sourceIndex + 2]) * uOpposite + _$UInt_UInt_$Impl_$.toFloat(data[sourceIndexX + 2]) * uRatio) * vOpposite + (_$UInt_UInt_$Impl_$.toFloat(data[sourceIndexY + 2]) * uOpposite + _$UInt_UInt_$Impl_$.toFloat(data[sourceIndexXY + 2]) * uRatio) * vRatio);
			newData[index + 2] = val2;
			if(data[sourceIndexX + 3] == 0 || data[sourceIndexY + 3] == 0 || data[sourceIndexXY + 3] == 0) newData[index + 3] = 0; else newData[index + 3] = data[sourceIndex + 3];
		}
	}
	buffer.data = newBuffer.data;
	buffer.width = newWidth;
	buffer.height = newHeight;
	buffer.__srcImage = null;
	buffer.__srcImageData = null;
	buffer.__srcCanvas = null;
	buffer.__srcContext = null;
	image.dirty = true;
	image.version++;
};
lime_graphics_utils_ImageDataUtil.resizeBuffer = function(image,newWidth,newHeight) {
	var buffer = image.buffer;
	var data = image.get_data();
	var newData;
	var elements = newWidth * newHeight * 4;
	var this1;
	if(elements != null) this1 = new Uint8Array(elements); else this1 = null;
	newData = this1;
	var sourceIndex;
	var index;
	var _g1 = 0;
	var _g = buffer.height;
	while(_g1 < _g) {
		var y = _g1++;
		var _g3 = 0;
		var _g2 = buffer.width;
		while(_g3 < _g2) {
			var x = _g3++;
			sourceIndex = (y * buffer.width + x) * 4;
			index = (y * newWidth + x) * 4;
			newData[index] = data[sourceIndex];
			newData[index + 1] = data[sourceIndex + 1];
			newData[index + 2] = data[sourceIndex + 2];
			newData[index + 3] = data[sourceIndex + 3];
		}
	}
	buffer.data = newData;
	buffer.width = newWidth;
	buffer.height = newHeight;
};
lime_graphics_utils_ImageDataUtil.setFormat = function(image,format) {
	var data = image.buffer.data;
	if(data == null) return;
	var index;
	var a16;
	var length = data.length / 4 | 0;
	var r1;
	var g1;
	var b1;
	var a1;
	var r2;
	var g2;
	var b2;
	var a2;
	var r;
	var g;
	var b;
	var a;
	var _g = image.get_format();
	switch(_g) {
	case 0:
		r1 = 0;
		g1 = 1;
		b1 = 2;
		a1 = 3;
		break;
	case 1:
		r1 = 1;
		g1 = 2;
		b1 = 3;
		a1 = 0;
		break;
	case 2:
		r1 = 2;
		g1 = 1;
		b1 = 0;
		a1 = 3;
		break;
	}
	switch(format) {
	case 0:
		r2 = 0;
		g2 = 1;
		b2 = 2;
		a2 = 3;
		break;
	case 1:
		r2 = 1;
		g2 = 2;
		b2 = 3;
		a2 = 0;
		break;
	case 2:
		r2 = 2;
		g2 = 1;
		b2 = 0;
		a2 = 3;
		break;
	}
	var _g1 = 0;
	while(_g1 < length) {
		var i = _g1++;
		index = i * 4;
		r = data[index + r1];
		g = data[index + g1];
		b = data[index + b1];
		a = data[index + a1];
		data[index + r2] = r;
		data[index + g2] = g;
		data[index + b2] = b;
		data[index + a2] = a;
	}
	image.buffer.format = format;
	image.dirty = true;
	image.version++;
};
lime_graphics_utils_ImageDataUtil.setPixel = function(image,x,y,color,format) {
	var pixel;
	switch(format) {
	case 1:
		{
			var argb = color;
			var rgba = 0;
			rgba = (argb >> 16 & 255 & 255) << 24 | (argb >> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >> 24 & 255 & 255;
			pixel = rgba;
		}
		break;
	case 2:
		{
			var bgra = color;
			var rgba1 = 0;
			rgba1 = (bgra >> 8 & 255 & 255) << 24 | (bgra >> 16 & 255 & 255) << 16 | (bgra >> 24 & 255 & 255) << 8 | bgra & 255 & 255;
			pixel = rgba1;
		}
		break;
	default:
		pixel = color;
	}
	var source = 0;
	var data = image.buffer.data;
	var offset = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
	switch(image.buffer.format) {
	case 2:
		source = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 0:
		source = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 1:
		source = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
		break;
	}
	if(image.buffer.premultiplied) {
		if((source & 255) != 0 && (source & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (source & 255);
			var r;
			var idx = Math.round((source >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
			var g;
			var idx1 = Math.round((source >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
			var b;
			var idx2 = Math.round((source >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
			source = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | source & 255 & 255;
		}
	}
	var value = source & 255;
	pixel = (pixel >> 24 & 255 & 255) << 24 | (pixel >> 16 & 255 & 255) << 16 | (pixel >> 8 & 255 & 255) << 8 | value & 255;
	value;
	var data1 = image.buffer.data;
	var offset1 = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
	if(image.buffer.premultiplied) {
		if((pixel & 255) == 0) {
			if(pixel != 0) pixel = 0;
		} else if((pixel & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[pixel & 255];
			pixel = ((pixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((pixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((pixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | pixel & 255 & 255;
		}
	}
	switch(image.buffer.format) {
	case 2:
		data1[offset1] = pixel >> 8 & 255;
		data1[offset1 + 1] = pixel >> 16 & 255;
		data1[offset1 + 2] = pixel >> 24 & 255;
		data1[offset1 + 3] = pixel & 255;
		break;
	case 0:
		data1[offset1] = pixel >> 24 & 255;
		data1[offset1 + 1] = pixel >> 16 & 255;
		data1[offset1 + 2] = pixel >> 8 & 255;
		data1[offset1 + 3] = pixel & 255;
		break;
	case 1:
		data1[offset1] = pixel & 255;
		data1[offset1 + 1] = pixel >> 24 & 255;
		data1[offset1 + 2] = pixel >> 16 & 255;
		data1[offset1 + 3] = pixel >> 8 & 255;
		break;
	}
	image.dirty = true;
	image.version++;
};
lime_graphics_utils_ImageDataUtil.setPixel32 = function(image,x,y,color,format) {
	var pixel;
	switch(format) {
	case 1:
		{
			var argb = color;
			var rgba = 0;
			rgba = (argb >> 16 & 255 & 255) << 24 | (argb >> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >> 24 & 255 & 255;
			pixel = rgba;
		}
		break;
	case 2:
		{
			var bgra = color;
			var rgba1 = 0;
			rgba1 = (bgra >> 8 & 255 & 255) << 24 | (bgra >> 16 & 255 & 255) << 16 | (bgra >> 24 & 255 & 255) << 8 | bgra & 255 & 255;
			pixel = rgba1;
		}
		break;
	default:
		pixel = color;
	}
	if(!image.get_transparent()) {
		pixel = (pixel >> 24 & 255 & 255) << 24 | (pixel >> 16 & 255 & 255) << 16 | (pixel >> 8 & 255 & 255) << 8 | 255;
		255;
	}
	var data = image.buffer.data;
	var offset = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
	if(image.buffer.premultiplied) {
		if((pixel & 255) == 0) {
			if(pixel != 0) pixel = 0;
		} else if((pixel & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[pixel & 255];
			pixel = ((pixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((pixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((pixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | pixel & 255 & 255;
		}
	}
	switch(image.buffer.format) {
	case 2:
		data[offset] = pixel >> 8 & 255;
		data[offset + 1] = pixel >> 16 & 255;
		data[offset + 2] = pixel >> 24 & 255;
		data[offset + 3] = pixel & 255;
		break;
	case 0:
		data[offset] = pixel >> 24 & 255;
		data[offset + 1] = pixel >> 16 & 255;
		data[offset + 2] = pixel >> 8 & 255;
		data[offset + 3] = pixel & 255;
		break;
	case 1:
		data[offset] = pixel & 255;
		data[offset + 1] = pixel >> 24 & 255;
		data[offset + 2] = pixel >> 16 & 255;
		data[offset + 3] = pixel >> 8 & 255;
		break;
	}
	image.dirty = true;
	image.version++;
};
lime_graphics_utils_ImageDataUtil.setPixels = function(image,rect,bytes,format) {
	if(image.buffer.data == null) return;
	var data = image.buffer.data;
	var sourceFormat = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	var dataView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(image,rect);
	var row;
	var color;
	var pixel;
	var transparent = image.get_transparent();
	var dataPosition = 0;
	var _g1 = 0;
	var _g = dataView.height;
	while(_g1 < _g) {
		var y = _g1++;
		row = dataView.offset + dataView.stride * y;
		var _g3 = 0;
		var _g2 = dataView.width;
		while(_g3 < _g2) {
			var x = _g3++;
			color = bytes.b[dataPosition + 3] | bytes.b[dataPosition + 2] << 8 | bytes.b[dataPosition + 1] << 16 | bytes.b[dataPosition] << 24;
			dataPosition += 4;
			switch(format) {
			case 1:
				{
					var argb = color;
					var rgba = 0;
					rgba = (argb >> 16 & 255 & 255) << 24 | (argb >> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >> 24 & 255 & 255;
					pixel = rgba;
				}
				break;
			case 2:
				{
					var bgra = color;
					var rgba1 = 0;
					rgba1 = (bgra >> 8 & 255 & 255) << 24 | (bgra >> 16 & 255 & 255) << 16 | (bgra >> 24 & 255 & 255) << 8 | bgra & 255 & 255;
					pixel = rgba1;
				}
				break;
			default:
				pixel = color;
			}
			if(!transparent) {
				pixel = (pixel >> 24 & 255 & 255) << 24 | (pixel >> 16 & 255 & 255) << 16 | (pixel >> 8 & 255 & 255) << 8 | 255;
				255;
			}
			var offset = row + x * 4;
			if(premultiplied) {
				if((pixel & 255) == 0) {
					if(pixel != 0) pixel = 0;
				} else if((pixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[pixel & 255];
					pixel = ((pixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((pixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((pixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | pixel & 255 & 255;
				}
			}
			switch(sourceFormat) {
			case 2:
				data[offset] = pixel >> 8 & 255;
				data[offset + 1] = pixel >> 16 & 255;
				data[offset + 2] = pixel >> 24 & 255;
				data[offset + 3] = pixel & 255;
				break;
			case 0:
				data[offset] = pixel >> 24 & 255;
				data[offset + 1] = pixel >> 16 & 255;
				data[offset + 2] = pixel >> 8 & 255;
				data[offset + 3] = pixel & 255;
				break;
			case 1:
				data[offset] = pixel & 255;
				data[offset + 1] = pixel >> 24 & 255;
				data[offset + 2] = pixel >> 16 & 255;
				data[offset + 3] = pixel >> 8 & 255;
				break;
			}
		}
	}
	image.dirty = true;
	image.version++;
};
lime_graphics_utils_ImageDataUtil.threshold = function(image,sourceImage,sourceRect,destPoint,operation,threshold,color,mask,copySource,format) {
	var _color;
	var _mask;
	var _threshold;
	switch(format) {
	case 1:
		{
			var argb = color;
			var rgba = 0;
			rgba = (argb >> 16 & 255 & 255) << 24 | (argb >> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >> 24 & 255 & 255;
			_color = rgba;
		}
		{
			var argb1 = mask;
			var rgba1 = 0;
			rgba1 = (argb1 >> 16 & 255 & 255) << 24 | (argb1 >> 8 & 255 & 255) << 16 | (argb1 & 255 & 255) << 8 | argb1 >> 24 & 255 & 255;
			_mask = rgba1;
		}
		{
			var argb2 = threshold;
			var rgba2 = 0;
			rgba2 = (argb2 >> 16 & 255 & 255) << 24 | (argb2 >> 8 & 255 & 255) << 16 | (argb2 & 255 & 255) << 8 | argb2 >> 24 & 255 & 255;
			_threshold = rgba2;
		}
		break;
	case 2:
		{
			var bgra = color;
			var rgba3 = 0;
			rgba3 = (bgra >> 8 & 255 & 255) << 24 | (bgra >> 16 & 255 & 255) << 16 | (bgra >> 24 & 255 & 255) << 8 | bgra & 255 & 255;
			_color = rgba3;
		}
		{
			var bgra1 = mask;
			var rgba4 = 0;
			rgba4 = (bgra1 >> 8 & 255 & 255) << 24 | (bgra1 >> 16 & 255 & 255) << 16 | (bgra1 >> 24 & 255 & 255) << 8 | bgra1 & 255 & 255;
			_mask = rgba4;
		}
		{
			var bgra2 = threshold;
			var rgba5 = 0;
			rgba5 = (bgra2 >> 8 & 255 & 255) << 24 | (bgra2 >> 16 & 255 & 255) << 16 | (bgra2 >> 24 & 255 & 255) << 8 | bgra2 & 255 & 255;
			_threshold = rgba5;
		}
		break;
	default:
		_color = color;
		_mask = mask;
		_threshold = threshold;
	}
	var _operation;
	switch(operation) {
	case "!=":
		_operation = 0;
		break;
	case "==":
		_operation = 1;
		break;
	case "<":
		_operation = 2;
		break;
	case "<=":
		_operation = 3;
		break;
	case ">":
		_operation = 4;
		break;
	case ">=":
		_operation = 5;
		break;
	default:
		_operation = -1;
	}
	if(_operation == -1) return 0;
	var srcData = sourceImage.buffer.data;
	var destData = image.buffer.data;
	if(srcData == null || destData == null) return 0;
	var hits = 0;
	var srcView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(sourceImage,sourceRect);
	var destView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(image,new lime_math_Rectangle(destPoint.x,destPoint.y,srcView.width,srcView.height));
	var srcFormat = sourceImage.buffer.format;
	var destFormat = image.buffer.format;
	var srcPremultiplied = sourceImage.buffer.premultiplied;
	var destPremultiplied = image.buffer.premultiplied;
	var srcPosition;
	var destPosition;
	var srcPixel;
	var destPixel;
	var pixelMask;
	var test;
	var value;
	var _g1 = 0;
	var _g = destView.height;
	while(_g1 < _g) {
		var y = _g1++;
		srcPosition = srcView.offset + srcView.stride * y;
		destPosition = destView.offset + destView.stride * y;
		var _g3 = 0;
		var _g2 = destView.width;
		while(_g3 < _g2) {
			var x = _g3++;
			switch(srcFormat) {
			case 2:
				srcPixel = (srcData[srcPosition + 2] & 255) << 24 | (srcData[srcPosition + 1] & 255) << 16 | (srcData[srcPosition] & 255) << 8 | srcData[srcPosition + 3] & 255;
				break;
			case 0:
				srcPixel = (srcData[srcPosition] & 255) << 24 | (srcData[srcPosition + 1] & 255) << 16 | (srcData[srcPosition + 2] & 255) << 8 | srcData[srcPosition + 3] & 255;
				break;
			case 1:
				srcPixel = (srcData[srcPosition + 1] & 255) << 24 | (srcData[srcPosition + 2] & 255) << 16 | (srcData[srcPosition + 3] & 255) << 8 | srcData[srcPosition] & 255;
				break;
			}
			if(srcPremultiplied) {
				if((srcPixel & 255) != 0 && (srcPixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (srcPixel & 255);
					var r;
					var idx = Math.round((srcPixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
					var g;
					var idx1 = Math.round((srcPixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
					var b;
					var idx2 = Math.round((srcPixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
					b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
					srcPixel = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | srcPixel & 255 & 255;
				}
			}
			pixelMask = srcPixel & _mask;
			value = lime_graphics_utils_ImageDataUtil.__pixelCompare(pixelMask,_threshold);
			switch(_operation) {
			case 0:
				test = value != 0;
				break;
			case 1:
				test = value == 0;
				break;
			case 2:
				test = value == -1;
				break;
			case 3:
				test = value == 0 || value == -1;
				break;
			case 4:
				test = value == 1;
				break;
			case 5:
				test = value == 0 || value == 1;
				break;
			default:
				test = false;
			}
			if(test) {
				if(destPremultiplied) {
					if((_color & 255) == 0) {
						if(_color != 0) _color = 0;
					} else if((_color & 255) != 255) {
						lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[_color & 255];
						_color = ((_color >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((_color >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((_color >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | _color & 255 & 255;
					}
				}
				switch(destFormat) {
				case 2:
					destData[destPosition] = _color >> 8 & 255;
					destData[destPosition + 1] = _color >> 16 & 255;
					destData[destPosition + 2] = _color >> 24 & 255;
					destData[destPosition + 3] = _color & 255;
					break;
				case 0:
					destData[destPosition] = _color >> 24 & 255;
					destData[destPosition + 1] = _color >> 16 & 255;
					destData[destPosition + 2] = _color >> 8 & 255;
					destData[destPosition + 3] = _color & 255;
					break;
				case 1:
					destData[destPosition] = _color & 255;
					destData[destPosition + 1] = _color >> 24 & 255;
					destData[destPosition + 2] = _color >> 16 & 255;
					destData[destPosition + 3] = _color >> 8 & 255;
					break;
				}
				hits++;
			} else if(copySource) {
				if(destPremultiplied) {
					if((srcPixel & 255) == 0) {
						if(srcPixel != 0) srcPixel = 0;
					} else if((srcPixel & 255) != 255) {
						lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[srcPixel & 255];
						srcPixel = ((srcPixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((srcPixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((srcPixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | srcPixel & 255 & 255;
					}
				}
				switch(destFormat) {
				case 2:
					destData[destPosition] = srcPixel >> 8 & 255;
					destData[destPosition + 1] = srcPixel >> 16 & 255;
					destData[destPosition + 2] = srcPixel >> 24 & 255;
					destData[destPosition + 3] = srcPixel & 255;
					break;
				case 0:
					destData[destPosition] = srcPixel >> 24 & 255;
					destData[destPosition + 1] = srcPixel >> 16 & 255;
					destData[destPosition + 2] = srcPixel >> 8 & 255;
					destData[destPosition + 3] = srcPixel & 255;
					break;
				case 1:
					destData[destPosition] = srcPixel & 255;
					destData[destPosition + 1] = srcPixel >> 24 & 255;
					destData[destPosition + 2] = srcPixel >> 16 & 255;
					destData[destPosition + 3] = srcPixel >> 8 & 255;
					break;
				}
			}
			srcPosition += 4;
			destPosition += 4;
		}
	}
	if(hits > 0) {
		image.dirty = true;
		image.version++;
	}
	return hits;
};
lime_graphics_utils_ImageDataUtil.unmultiplyAlpha = function(image) {
	var data = image.buffer.data;
	if(data == null) return;
	var format = image.buffer.format;
	var length = data.length / 4 | 0;
	var pixel;
	var _g = 0;
	while(_g < length) {
		var i = _g++;
		var offset = i * 4;
		switch(format) {
		case 2:
			pixel = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
			break;
		case 0:
			pixel = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
			break;
		case 1:
			pixel = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
			break;
		}
		if((pixel & 255) != 0 && (pixel & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (pixel & 255);
			var r;
			var idx = Math.round((pixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
			var g;
			var idx1 = Math.round((pixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
			var b;
			var idx2 = Math.round((pixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
			pixel = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | pixel & 255 & 255;
		}
		var offset1 = i * 4;
		switch(format) {
		case 2:
			data[offset1] = pixel >> 8 & 255;
			data[offset1 + 1] = pixel >> 16 & 255;
			data[offset1 + 2] = pixel >> 24 & 255;
			data[offset1 + 3] = pixel & 255;
			break;
		case 0:
			data[offset1] = pixel >> 24 & 255;
			data[offset1 + 1] = pixel >> 16 & 255;
			data[offset1 + 2] = pixel >> 8 & 255;
			data[offset1 + 3] = pixel & 255;
			break;
		case 1:
			data[offset1] = pixel & 255;
			data[offset1 + 1] = pixel >> 24 & 255;
			data[offset1 + 2] = pixel >> 16 & 255;
			data[offset1 + 3] = pixel >> 8 & 255;
			break;
		}
	}
	image.buffer.premultiplied = false;
	image.dirty = true;
	image.version++;
};
lime_graphics_utils_ImageDataUtil.__pixelCompare = function(n1,n2) {
	var tmp1;
	var tmp2;
	tmp1 = n1 >> 24 & 255;
	tmp2 = n2 >> 24 & 255;
	if(tmp1 != tmp2) if(_$UInt_UInt_$Impl_$.gt(tmp1,tmp2)) return 1; else return -1; else {
		tmp1 = n1 >> 16 & 255;
		tmp2 = n2 >> 16 & 255;
		if(tmp1 != tmp2) if(_$UInt_UInt_$Impl_$.gt(tmp1,tmp2)) return 1; else return -1; else {
			tmp1 = n1 >> 8 & 255;
			tmp2 = n2 >> 8 & 255;
			if(tmp1 != tmp2) if(_$UInt_UInt_$Impl_$.gt(tmp1,tmp2)) return 1; else return -1; else {
				tmp1 = n1 & 255;
				tmp2 = n2 & 255;
				if(tmp1 != tmp2) if(_$UInt_UInt_$Impl_$.gt(tmp1,tmp2)) return 1; else return -1; else return 0;
			}
		}
	}
};
var lime_graphics_utils__$ImageDataUtil_ImageDataView = function(image,rect) {
	this.image = image;
	if(rect == null) this.rect = image.get_rect(); else {
		if(rect.x < 0) rect.x = 0;
		if(rect.y < 0) rect.y = 0;
		if(rect.x + rect.width > image.width) rect.width = image.width - rect.x;
		if(rect.y + rect.height > image.height) rect.height = image.height - rect.y;
		if(rect.width < 0) rect.width = 0;
		if(rect.height < 0) rect.height = 0;
		this.rect = rect;
	}
	this.stride = image.buffer.get_stride();
	this.x = Math.ceil(this.rect.x);
	this.y = Math.ceil(this.rect.y);
	this.width = Math.floor(this.rect.width);
	this.height = Math.floor(this.rect.height);
	this.offset = this.stride * (this.y + image.offsetY) + (this.x + image.offsetX) * 4;
};
$hxClasses["lime.graphics.utils._ImageDataUtil.ImageDataView"] = lime_graphics_utils__$ImageDataUtil_ImageDataView;
lime_graphics_utils__$ImageDataUtil_ImageDataView.__name__ = ["lime","graphics","utils","_ImageDataUtil","ImageDataView"];
lime_graphics_utils__$ImageDataUtil_ImageDataView.prototype = {
	x: null
	,y: null
	,height: null
	,width: null
	,image: null
	,offset: null
	,rect: null
	,stride: null
	,clip: function(x,y,width,height) {
		this.rect.__contract(x,y,width,height);
		this.x = Math.ceil(this.rect.x);
		this.y = Math.ceil(this.rect.y);
		this.width = Math.floor(this.rect.width);
		this.height = Math.floor(this.rect.height);
		this.offset = this.stride * (this.y + this.image.offsetY) + (this.x + this.image.offsetX) * 4;
	}
	,row: function(y) {
		return this.offset + this.stride * y;
	}
	,__class__: lime_graphics_utils__$ImageDataUtil_ImageDataView
};
var lime_math__$ColorMatrix_ColorMatrix_$Impl_$ = {};
$hxClasses["lime.math._ColorMatrix.ColorMatrix_Impl_"] = lime_math__$ColorMatrix_ColorMatrix_$Impl_$;
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__name__ = ["lime","math","_ColorMatrix","ColorMatrix_Impl_"];
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__properties__ = {set_redOffset:"set_redOffset",get_redOffset:"get_redOffset",set_redMultiplier:"set_redMultiplier",get_redMultiplier:"get_redMultiplier",set_greenOffset:"set_greenOffset",get_greenOffset:"get_greenOffset",set_greenMultiplier:"set_greenMultiplier",get_greenMultiplier:"get_greenMultiplier",set_color:"set_color",get_color:"get_color",set_blueOffset:"set_blueOffset",get_blueOffset:"get_blueOffset",set_blueMultiplier:"set_blueMultiplier",get_blueMultiplier:"get_blueMultiplier",set_alphaOffset:"set_alphaOffset",get_alphaOffset:"get_alphaOffset",set_alphaMultiplier:"set_alphaMultiplier",get_alphaMultiplier:"get_alphaMultiplier"}
lime_math__$ColorMatrix_ColorMatrix_$Impl_$._new = function(data) {
	var this1;
	if(data != null && data.length == 20) this1 = data; else {
		var array = lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__identity;
		var this2;
		if(array != null) this2 = new Float32Array(array); else this2 = null;
		this1 = this2;
	}
	return this1;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.clone = function(this1) {
	return lime_math__$ColorMatrix_ColorMatrix_$Impl_$._new((function($this) {
		var $r;
		var this2;
		if(this1 != null) this2 = new Float32Array(this1); else this2 = null;
		$r = this2;
		return $r;
	}(this)));
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.concat = function(this1,second) {
	var _g = this1;
	_g[0] = _g[0] + second[0];
	var _g1 = this1;
	_g1[6] = _g1[6] + second[6];
	var _g2 = this1;
	_g2[12] = _g2[12] + second[12];
	var _g3 = this1;
	_g3[18] = _g3[18] + second[18];
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.copyFrom = function(this1,other) {
	this1.set(other);
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.identity = function(this1) {
	this1[0] = 1;
	this1[1] = 0;
	this1[2] = 0;
	this1[3] = 0;
	this1[4] = 0;
	this1[5] = 0;
	this1[6] = 1;
	this1[7] = 0;
	this1[8] = 0;
	this1[9] = 0;
	this1[10] = 0;
	this1[11] = 0;
	this1[12] = 1;
	this1[13] = 0;
	this1[14] = 0;
	this1[15] = 0;
	this1[16] = 0;
	this1[17] = 0;
	this1[18] = 1;
	this1[19] = 0;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getAlphaTable = function(this1) {
	if(lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__alphaTable == null) {
		var this2;
		this2 = new Uint8Array(256);
		lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__alphaTable = this2;
	}
	var value;
	lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__alphaTable[0] = 0;
	var _g = 1;
	while(_g < 256) {
		var i = _g++;
		value = Math.floor(i * this1[18] + this1[19] * 255);
		if(value > 255) value = 255;
		if(value < 0) value = 0;
		lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__alphaTable[i] = value;
	}
	return lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__alphaTable;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getBlueTable = function(this1) {
	if(lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__blueTable == null) {
		var this2;
		this2 = new Uint8Array(256);
		lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__blueTable = this2;
	}
	var value;
	var _g = 0;
	while(_g < 256) {
		var i = _g++;
		value = Math.floor(i * this1[12] + this1[14] * 255);
		if(value > 255) value = 255;
		if(value < 0) value = 0;
		lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__blueTable[i] = value;
	}
	return lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__blueTable;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getGreenTable = function(this1) {
	if(lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__greenTable == null) {
		var this2;
		this2 = new Uint8Array(256);
		lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__greenTable = this2;
	}
	var value;
	var _g = 0;
	while(_g < 256) {
		var i = _g++;
		value = Math.floor(i * this1[6] + this1[9] * 255);
		if(value > 255) value = 255;
		if(value < 0) value = 0;
		lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__greenTable[i] = value;
	}
	return lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__greenTable;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getRedTable = function(this1) {
	if(lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__redTable == null) {
		var this2;
		this2 = new Uint8Array(256);
		lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__redTable = this2;
	}
	var value;
	var _g = 0;
	while(_g < 256) {
		var i = _g++;
		value = Math.floor(i * this1[0] + this1[4] * 255);
		if(value > 255) value = 255;
		if(value < 0) value = 0;
		lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__redTable[i] = value;
	}
	return lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__redTable;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__toFlashColorTransform = function(this1) {
	return null;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_alphaMultiplier = function(this1) {
	return this1[18];
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_alphaMultiplier = function(this1,value) {
	return this1[18] = value;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_alphaOffset = function(this1) {
	return this1[19] * 255;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_alphaOffset = function(this1,value) {
	return this1[19] = value / 255;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_blueMultiplier = function(this1) {
	return this1[12];
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_blueMultiplier = function(this1,value) {
	return this1[12] = value;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_blueOffset = function(this1) {
	return this1[14] * 255;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_blueOffset = function(this1,value) {
	return this1[14] = value / 255;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_color = function(this1) {
	return (this1[4] * 255 | 0) << 16 | (this1[9] * 255 | 0) << 8 | (this1[14] * 255 | 0);
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_color = function(this1,value) {
	this1[4] = (value >> 16 & 255) / 255;
	this1[9] = (value >> 8 & 255) / 255;
	this1[14] = (value & 255) / 255;
	this1[0] = 0;
	this1[6] = 0;
	this1[12] = 0;
	return lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_color(this1);
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_greenMultiplier = function(this1) {
	return this1[6];
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_greenMultiplier = function(this1,value) {
	return this1[6] = value;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_greenOffset = function(this1) {
	return this1[9] * 255;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_greenOffset = function(this1,value) {
	return this1[9] = value / 255;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_redMultiplier = function(this1) {
	return this1[0];
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_redMultiplier = function(this1,value) {
	return this1[0] = value;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_redOffset = function(this1) {
	return this1[4] * 255;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_redOffset = function(this1,value) {
	return this1[4] = value / 255;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get = function(this1,index) {
	return this1[index];
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set = function(this1,index,value) {
	return this1[index] = value;
};
var lime_math__$Matrix4_Matrix4_$Impl_$ = {};
$hxClasses["lime.math._Matrix4.Matrix4_Impl_"] = lime_math__$Matrix4_Matrix4_$Impl_$;
lime_math__$Matrix4_Matrix4_$Impl_$.__name__ = ["lime","math","_Matrix4","Matrix4_Impl_"];
lime_math__$Matrix4_Matrix4_$Impl_$.__properties__ = {set_position:"set_position",get_position:"get_position",get_determinant:"get_determinant"}
lime_math__$Matrix4_Matrix4_$Impl_$._new = function(data) {
	var this1;
	if(data != null && data.length == 16) this1 = data; else {
		var array = lime_math__$Matrix4_Matrix4_$Impl_$.__identity;
		var this2;
		if(array != null) this2 = new Float32Array(array); else this2 = null;
		this1 = this2;
	}
	return this1;
};
lime_math__$Matrix4_Matrix4_$Impl_$.append = function(this1,lhs) {
	var m111 = this1[0];
	var m121 = this1[4];
	var m131 = this1[8];
	var m141 = this1[12];
	var m112 = this1[1];
	var m122 = this1[5];
	var m132 = this1[9];
	var m142 = this1[13];
	var m113 = this1[2];
	var m123 = this1[6];
	var m133 = this1[10];
	var m143 = this1[14];
	var m114 = this1[3];
	var m124 = this1[7];
	var m134 = this1[11];
	var m144 = this1[15];
	var m211 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,0);
	var m221 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,4);
	var m231 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,8);
	var m241 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,12);
	var m212 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,1);
	var m222 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,5);
	var m232 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,9);
	var m242 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,13);
	var m213 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,2);
	var m223 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,6);
	var m233 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,10);
	var m243 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,14);
	var m214 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,3);
	var m224 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,7);
	var m234 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,11);
	var m244 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,15);
	this1[0] = m111 * m211 + m112 * m221 + m113 * m231 + m114 * m241;
	this1[1] = m111 * m212 + m112 * m222 + m113 * m232 + m114 * m242;
	this1[2] = m111 * m213 + m112 * m223 + m113 * m233 + m114 * m243;
	this1[3] = m111 * m214 + m112 * m224 + m113 * m234 + m114 * m244;
	this1[4] = m121 * m211 + m122 * m221 + m123 * m231 + m124 * m241;
	this1[5] = m121 * m212 + m122 * m222 + m123 * m232 + m124 * m242;
	this1[6] = m121 * m213 + m122 * m223 + m123 * m233 + m124 * m243;
	this1[7] = m121 * m214 + m122 * m224 + m123 * m234 + m124 * m244;
	this1[8] = m131 * m211 + m132 * m221 + m133 * m231 + m134 * m241;
	this1[9] = m131 * m212 + m132 * m222 + m133 * m232 + m134 * m242;
	this1[10] = m131 * m213 + m132 * m223 + m133 * m233 + m134 * m243;
	this1[11] = m131 * m214 + m132 * m224 + m133 * m234 + m134 * m244;
	this1[12] = m141 * m211 + m142 * m221 + m143 * m231 + m144 * m241;
	this1[13] = m141 * m212 + m142 * m222 + m143 * m232 + m144 * m242;
	this1[14] = m141 * m213 + m142 * m223 + m143 * m233 + m144 * m243;
	this1[15] = m141 * m214 + m142 * m224 + m143 * m234 + m144 * m244;
};
lime_math__$Matrix4_Matrix4_$Impl_$.appendRotation = function(this1,degrees,axis,pivotPoint) {
	var m = lime_math__$Matrix4_Matrix4_$Impl_$.getAxisRotation(axis.x,axis.y,axis.z,degrees);
	if(pivotPoint != null) {
		var p = pivotPoint;
		lime_math__$Matrix4_Matrix4_$Impl_$.appendTranslation(m,p.x,p.y,p.z);
	}
	lime_math__$Matrix4_Matrix4_$Impl_$.append(this1,m);
};
lime_math__$Matrix4_Matrix4_$Impl_$.appendScale = function(this1,xScale,yScale,zScale) {
	lime_math__$Matrix4_Matrix4_$Impl_$.append(this1,lime_math__$Matrix4_Matrix4_$Impl_$._new((function($this) {
		var $r;
		var array = [xScale,0.0,0.0,0.0,0.0,yScale,0.0,0.0,0.0,0.0,zScale,0.0,0.0,0.0,0.0,1.0];
		var this2;
		if(array != null) this2 = new Float32Array(array); else this2 = null;
		$r = this2;
		return $r;
	}(this))));
};
lime_math__$Matrix4_Matrix4_$Impl_$.appendTranslation = function(this1,x,y,z) {
	this1[12] = this1[12] + x;
	this1[13] = this1[13] + y;
	this1[14] = this1[14] + z;
};
lime_math__$Matrix4_Matrix4_$Impl_$.clone = function(this1) {
	return lime_math__$Matrix4_Matrix4_$Impl_$._new((function($this) {
		var $r;
		var this2;
		if(this1 != null) this2 = new Float32Array(this1); else this2 = null;
		$r = this2;
		return $r;
	}(this)));
};
lime_math__$Matrix4_Matrix4_$Impl_$.copyColumnFrom = function(this1,column,vector) {
	switch(column) {
	case 0:
		this1[0] = vector.x;
		this1[1] = vector.y;
		this1[2] = vector.z;
		this1[3] = vector.w;
		break;
	case 1:
		this1[4] = vector.x;
		this1[5] = vector.y;
		this1[6] = vector.z;
		this1[7] = vector.w;
		break;
	case 2:
		this1[8] = vector.x;
		this1[9] = vector.y;
		this1[10] = vector.z;
		this1[11] = vector.w;
		break;
	case 3:
		this1[12] = vector.x;
		this1[13] = vector.y;
		this1[14] = vector.z;
		this1[15] = vector.w;
		break;
	default:
		throw new js__$Boot_HaxeError("Error, Column " + column + " out of bounds [0, ..., 3]");
	}
};
lime_math__$Matrix4_Matrix4_$Impl_$.copyColumnTo = function(this1,column,vector) {
	switch(column) {
	case 0:
		vector.x = this1[0];
		vector.y = this1[1];
		vector.z = this1[2];
		vector.w = this1[3];
		break;
	case 1:
		vector.x = this1[4];
		vector.y = this1[5];
		vector.z = this1[6];
		vector.w = this1[7];
		break;
	case 2:
		vector.x = this1[8];
		vector.y = this1[9];
		vector.z = this1[10];
		vector.w = this1[11];
		break;
	case 3:
		vector.x = this1[12];
		vector.y = this1[13];
		vector.z = this1[14];
		vector.w = this1[15];
		break;
	default:
		throw new js__$Boot_HaxeError("Error, Column " + column + " out of bounds [0, ..., 3]");
	}
};
lime_math__$Matrix4_Matrix4_$Impl_$.copyFrom = function(this1,other) {
	this1.set(other);
};
lime_math__$Matrix4_Matrix4_$Impl_$.copythisFrom = function(this1,array,index,transposeValues) {
	if(transposeValues == null) transposeValues = false;
	if(index == null) index = 0;
	if(transposeValues) lime_math__$Matrix4_Matrix4_$Impl_$.transpose(this1);
	var l = array.length - index;
	var _g = 0;
	while(_g < l) {
		var c = _g++;
		this1[c] = array[c + index];
	}
	if(transposeValues) lime_math__$Matrix4_Matrix4_$Impl_$.transpose(this1);
};
lime_math__$Matrix4_Matrix4_$Impl_$.copythisTo = function(this1,array,index,transposeValues) {
	if(transposeValues == null) transposeValues = false;
	if(index == null) index = 0;
	if(transposeValues) lime_math__$Matrix4_Matrix4_$Impl_$.transpose(this1);
	var l = this1.length;
	var _g = 0;
	while(_g < l) {
		var c = _g++;
		array[c + index] = this1[c];
	}
	if(transposeValues) lime_math__$Matrix4_Matrix4_$Impl_$.transpose(this1);
};
lime_math__$Matrix4_Matrix4_$Impl_$.copyRowFrom = function(this1,row,vector) {
	switch(row) {
	case 0:
		this1[0] = vector.x;
		this1[4] = vector.y;
		this1[8] = vector.z;
		this1[12] = vector.w;
		break;
	case 1:
		this1[1] = vector.x;
		this1[5] = vector.y;
		this1[9] = vector.z;
		this1[13] = vector.w;
		break;
	case 2:
		this1[2] = vector.x;
		this1[6] = vector.y;
		this1[10] = vector.z;
		this1[14] = vector.w;
		break;
	case 3:
		this1[3] = vector.x;
		this1[7] = vector.y;
		this1[11] = vector.z;
		this1[15] = vector.w;
		break;
	default:
		throw new js__$Boot_HaxeError("Error, Row " + row + " out of bounds [0, ..., 3]");
	}
};
lime_math__$Matrix4_Matrix4_$Impl_$.create2D = function(x,y,scale,rotation) {
	if(rotation == null) rotation = 0;
	if(scale == null) scale = 1;
	var theta = rotation * Math.PI / 180.0;
	var c = Math.cos(theta);
	var s = Math.sin(theta);
	return lime_math__$Matrix4_Matrix4_$Impl_$._new((function($this) {
		var $r;
		var array = [c * scale,-s * scale,0,0,s * scale,c * scale,0,0,0,0,1,0,x,y,0,1];
		var this1;
		if(array != null) this1 = new Float32Array(array); else this1 = null;
		$r = this1;
		return $r;
	}(this)));
};
lime_math__$Matrix4_Matrix4_$Impl_$.createABCD = function(a,b,c,d,tx,ty) {
	return lime_math__$Matrix4_Matrix4_$Impl_$._new((function($this) {
		var $r;
		var array = [a,b,0,0,c,d,0,0,0,0,1,0,tx,ty,0,1];
		var this1;
		if(array != null) this1 = new Float32Array(array); else this1 = null;
		$r = this1;
		return $r;
	}(this)));
};
lime_math__$Matrix4_Matrix4_$Impl_$.createOrtho = function(x0,x1,y0,y1,zNear,zFar) {
	var sx = 1.0 / (x1 - x0);
	var sy = 1.0 / (y1 - y0);
	var sz = 1.0 / (zFar - zNear);
	return lime_math__$Matrix4_Matrix4_$Impl_$._new((function($this) {
		var $r;
		var array = [2.0 * sx,0,0,0,0,2.0 * sy,0,0,0,0,-2. * sz,0,-(x0 + x1) * sx,-(y0 + y1) * sy,-(zNear + zFar) * sz,1];
		var this1;
		if(array != null) this1 = new Float32Array(array); else this1 = null;
		$r = this1;
		return $r;
	}(this)));
};
lime_math__$Matrix4_Matrix4_$Impl_$.copyRowTo = function(this1,row,vector) {
	switch(row) {
	case 0:
		vector.x = this1[0];
		vector.y = this1[4];
		vector.z = this1[8];
		vector.w = this1[12];
		break;
	case 1:
		vector.x = this1[1];
		vector.y = this1[5];
		vector.z = this1[9];
		vector.w = this1[13];
		break;
	case 2:
		vector.x = this1[2];
		vector.y = this1[6];
		vector.z = this1[10];
		vector.w = this1[14];
		break;
	case 3:
		vector.x = this1[3];
		vector.y = this1[7];
		vector.z = this1[11];
		vector.w = this1[15];
		break;
	default:
		throw new js__$Boot_HaxeError("Error, Row " + row + " out of bounds [0, ..., 3]");
	}
};
lime_math__$Matrix4_Matrix4_$Impl_$.copyToMatrix4 = function(this1,other) {
	(js_Boot.__cast(other , Float32Array)).set(this1);
};
lime_math__$Matrix4_Matrix4_$Impl_$.deltaTransformVector = function(this1,v) {
	var x = v.x;
	var y = v.y;
	var z = v.z;
	return new lime_math_Vector4(x * this1[0] + y * this1[4] + z * this1[8] + this1[3],x * this1[1] + y * this1[5] + z * this1[9] + this1[7],x * this1[2] + y * this1[6] + z * this1[10] + this1[11],0);
};
lime_math__$Matrix4_Matrix4_$Impl_$.identity = function(this1) {
	this1[0] = 1;
	this1[1] = 0;
	this1[2] = 0;
	this1[3] = 0;
	this1[4] = 0;
	this1[5] = 1;
	this1[6] = 0;
	this1[7] = 0;
	this1[8] = 0;
	this1[9] = 0;
	this1[10] = 1;
	this1[11] = 0;
	this1[12] = 0;
	this1[13] = 0;
	this1[14] = 0;
	this1[15] = 1;
};
lime_math__$Matrix4_Matrix4_$Impl_$.interpolate = function(thisMat,toMat,percent) {
	var m = lime_math__$Matrix4_Matrix4_$Impl_$._new();
	var _g = 0;
	while(_g < 16) {
		var i = _g++;
		lime_math__$Matrix4_Matrix4_$Impl_$.set(m,i,lime_math__$Matrix4_Matrix4_$Impl_$.get(thisMat,i) + (lime_math__$Matrix4_Matrix4_$Impl_$.get(toMat,i) - lime_math__$Matrix4_Matrix4_$Impl_$.get(thisMat,i)) * percent);
	}
	return m;
};
lime_math__$Matrix4_Matrix4_$Impl_$.interpolateTo = function(this1,toMat,percent) {
	var _g = 0;
	while(_g < 16) {
		var i = _g++;
		var val = this1[i] + (lime_math__$Matrix4_Matrix4_$Impl_$.get(toMat,i) - this1[i]) * percent;
		this1[i] = val;
	}
};
lime_math__$Matrix4_Matrix4_$Impl_$.invert = function(this1) {
	var d = lime_math__$Matrix4_Matrix4_$Impl_$.get_determinant(this1);
	var invertable = Math.abs(d) > 0.00000000001;
	if(invertable) {
		d = 1 / d;
		var m11 = this1[0];
		var m21 = this1[4];
		var m31 = this1[8];
		var m41 = this1[12];
		var m12 = this1[1];
		var m22 = this1[5];
		var m32 = this1[9];
		var m42 = this1[13];
		var m13 = this1[2];
		var m23 = this1[6];
		var m33 = this1[10];
		var m43 = this1[14];
		var m14 = this1[3];
		var m24 = this1[7];
		var m34 = this1[11];
		var m44 = this1[15];
		this1[0] = d * (m22 * (m33 * m44 - m43 * m34) - m32 * (m23 * m44 - m43 * m24) + m42 * (m23 * m34 - m33 * m24));
		this1[1] = -d * (m12 * (m33 * m44 - m43 * m34) - m32 * (m13 * m44 - m43 * m14) + m42 * (m13 * m34 - m33 * m14));
		this1[2] = d * (m12 * (m23 * m44 - m43 * m24) - m22 * (m13 * m44 - m43 * m14) + m42 * (m13 * m24 - m23 * m14));
		this1[3] = -d * (m12 * (m23 * m34 - m33 * m24) - m22 * (m13 * m34 - m33 * m14) + m32 * (m13 * m24 - m23 * m14));
		this1[4] = -d * (m21 * (m33 * m44 - m43 * m34) - m31 * (m23 * m44 - m43 * m24) + m41 * (m23 * m34 - m33 * m24));
		this1[5] = d * (m11 * (m33 * m44 - m43 * m34) - m31 * (m13 * m44 - m43 * m14) + m41 * (m13 * m34 - m33 * m14));
		this1[6] = -d * (m11 * (m23 * m44 - m43 * m24) - m21 * (m13 * m44 - m43 * m14) + m41 * (m13 * m24 - m23 * m14));
		this1[7] = d * (m11 * (m23 * m34 - m33 * m24) - m21 * (m13 * m34 - m33 * m14) + m31 * (m13 * m24 - m23 * m14));
		this1[8] = d * (m21 * (m32 * m44 - m42 * m34) - m31 * (m22 * m44 - m42 * m24) + m41 * (m22 * m34 - m32 * m24));
		this1[9] = -d * (m11 * (m32 * m44 - m42 * m34) - m31 * (m12 * m44 - m42 * m14) + m41 * (m12 * m34 - m32 * m14));
		this1[10] = d * (m11 * (m22 * m44 - m42 * m24) - m21 * (m12 * m44 - m42 * m14) + m41 * (m12 * m24 - m22 * m14));
		this1[11] = -d * (m11 * (m22 * m34 - m32 * m24) - m21 * (m12 * m34 - m32 * m14) + m31 * (m12 * m24 - m22 * m14));
		this1[12] = -d * (m21 * (m32 * m43 - m42 * m33) - m31 * (m22 * m43 - m42 * m23) + m41 * (m22 * m33 - m32 * m23));
		this1[13] = d * (m11 * (m32 * m43 - m42 * m33) - m31 * (m12 * m43 - m42 * m13) + m41 * (m12 * m33 - m32 * m13));
		this1[14] = -d * (m11 * (m22 * m43 - m42 * m23) - m21 * (m12 * m43 - m42 * m13) + m41 * (m12 * m23 - m22 * m13));
		this1[15] = d * (m11 * (m22 * m33 - m32 * m23) - m21 * (m12 * m33 - m32 * m13) + m31 * (m12 * m23 - m22 * m13));
	}
	return invertable;
};
lime_math__$Matrix4_Matrix4_$Impl_$.pointAt = function(this1,pos,at,up) {
	if(at == null) at = new lime_math_Vector4(0,0,-1);
	if(up == null) up = new lime_math_Vector4(0,-1,0);
	var dir = new lime_math_Vector4(at.x - pos.x,at.y - pos.y,at.z - pos.z);
	var vup = new lime_math_Vector4(up.x,up.y,up.z,up.w);
	var right;
	dir.normalize();
	vup.normalize();
	var dir2 = new lime_math_Vector4(dir.x,dir.y,dir.z,dir.w);
	dir2.scaleBy(vup.x * dir.x + vup.y * dir.y + vup.z * dir.z);
	vup = new lime_math_Vector4(vup.x - dir2.x,vup.y - dir2.y,vup.z - dir2.z);
	if(Math.sqrt(vup.x * vup.x + vup.y * vup.y + vup.z * vup.z) > 0) vup.normalize(); else if(dir.x != 0) vup = new lime_math_Vector4(-dir.y,dir.x,0); else vup = new lime_math_Vector4(1,0,0);
	right = new lime_math_Vector4(vup.y * dir.z - vup.z * dir.y,vup.z * dir.x - vup.x * dir.z,vup.x * dir.y - vup.y * dir.x,1);
	right.normalize();
	this1[0] = right.x;
	this1[4] = right.y;
	this1[8] = right.z;
	this1[12] = 0.0;
	this1[1] = vup.x;
	this1[5] = vup.y;
	this1[9] = vup.z;
	this1[13] = 0.0;
	this1[2] = dir.x;
	this1[6] = dir.y;
	this1[10] = dir.z;
	this1[14] = 0.0;
	this1[3] = pos.x;
	this1[7] = pos.y;
	this1[11] = pos.z;
	this1[15] = 1.0;
};
lime_math__$Matrix4_Matrix4_$Impl_$.prepend = function(this1,rhs) {
	var m111 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,0);
	var m121 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,4);
	var m131 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,8);
	var m141 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,12);
	var m112 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,1);
	var m122 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,5);
	var m132 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,9);
	var m142 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,13);
	var m113 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,2);
	var m123 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,6);
	var m133 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,10);
	var m143 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,14);
	var m114 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,3);
	var m124 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,7);
	var m134 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,11);
	var m144 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,15);
	var m211 = this1[0];
	var m221 = this1[4];
	var m231 = this1[8];
	var m241 = this1[12];
	var m212 = this1[1];
	var m222 = this1[5];
	var m232 = this1[9];
	var m242 = this1[13];
	var m213 = this1[2];
	var m223 = this1[6];
	var m233 = this1[10];
	var m243 = this1[14];
	var m214 = this1[3];
	var m224 = this1[7];
	var m234 = this1[11];
	var m244 = this1[15];
	this1[0] = m111 * m211 + m112 * m221 + m113 * m231 + m114 * m241;
	this1[1] = m111 * m212 + m112 * m222 + m113 * m232 + m114 * m242;
	this1[2] = m111 * m213 + m112 * m223 + m113 * m233 + m114 * m243;
	this1[3] = m111 * m214 + m112 * m224 + m113 * m234 + m114 * m244;
	this1[4] = m121 * m211 + m122 * m221 + m123 * m231 + m124 * m241;
	this1[5] = m121 * m212 + m122 * m222 + m123 * m232 + m124 * m242;
	this1[6] = m121 * m213 + m122 * m223 + m123 * m233 + m124 * m243;
	this1[7] = m121 * m214 + m122 * m224 + m123 * m234 + m124 * m244;
	this1[8] = m131 * m211 + m132 * m221 + m133 * m231 + m134 * m241;
	this1[9] = m131 * m212 + m132 * m222 + m133 * m232 + m134 * m242;
	this1[10] = m131 * m213 + m132 * m223 + m133 * m233 + m134 * m243;
	this1[11] = m131 * m214 + m132 * m224 + m133 * m234 + m134 * m244;
	this1[12] = m141 * m211 + m142 * m221 + m143 * m231 + m144 * m241;
	this1[13] = m141 * m212 + m142 * m222 + m143 * m232 + m144 * m242;
	this1[14] = m141 * m213 + m142 * m223 + m143 * m233 + m144 * m243;
	this1[15] = m141 * m214 + m142 * m224 + m143 * m234 + m144 * m244;
};
lime_math__$Matrix4_Matrix4_$Impl_$.prependRotation = function(this1,degrees,axis,pivotPoint) {
	var m = lime_math__$Matrix4_Matrix4_$Impl_$.getAxisRotation(axis.x,axis.y,axis.z,degrees);
	if(pivotPoint != null) {
		var p = pivotPoint;
		lime_math__$Matrix4_Matrix4_$Impl_$.appendTranslation(m,p.x,p.y,p.z);
	}
	lime_math__$Matrix4_Matrix4_$Impl_$.prepend(this1,m);
};
lime_math__$Matrix4_Matrix4_$Impl_$.prependScale = function(this1,xScale,yScale,zScale) {
	lime_math__$Matrix4_Matrix4_$Impl_$.prepend(this1,lime_math__$Matrix4_Matrix4_$Impl_$._new((function($this) {
		var $r;
		var array = [xScale,0.0,0.0,0.0,0.0,yScale,0.0,0.0,0.0,0.0,zScale,0.0,0.0,0.0,0.0,1.0];
		var this2;
		if(array != null) this2 = new Float32Array(array); else this2 = null;
		$r = this2;
		return $r;
	}(this))));
};
lime_math__$Matrix4_Matrix4_$Impl_$.prependTranslation = function(this1,x,y,z) {
	var m = lime_math__$Matrix4_Matrix4_$Impl_$._new();
	lime_math__$Matrix4_Matrix4_$Impl_$.set_position(m,new lime_math_Vector4(x,y,z));
	lime_math__$Matrix4_Matrix4_$Impl_$.prepend(this1,m);
};
lime_math__$Matrix4_Matrix4_$Impl_$.transformVector = function(this1,v) {
	var x = v.x;
	var y = v.y;
	var z = v.z;
	return new lime_math_Vector4(x * this1[0] + y * this1[4] + z * this1[8] + this1[12],x * this1[1] + y * this1[5] + z * this1[9] + this1[13],x * this1[2] + y * this1[6] + z * this1[10] + this1[14],x * this1[3] + y * this1[7] + z * this1[11] + this1[15]);
};
lime_math__$Matrix4_Matrix4_$Impl_$.transformVectors = function(this1,ain,aout) {
	var i = 0;
	while(i + 3 <= ain.length) {
		var x = ain[i];
		var y = ain[i + 1];
		var z = ain[i + 2];
		aout[i] = x * this1[0] + y * this1[4] + z * this1[8] + this1[12];
		aout[i + 1] = x * this1[1] + y * this1[5] + z * this1[9] + this1[13];
		aout[i + 2] = x * this1[2] + y * this1[6] + z * this1[10] + this1[14];
		i += 3;
	}
};
lime_math__$Matrix4_Matrix4_$Impl_$.transpose = function(this1) {
	var othis;
	var this2;
	if(this1 != null) this2 = new Float32Array(this1); else this2 = null;
	othis = this2;
	this1[1] = othis[4];
	this1[2] = othis[8];
	this1[3] = othis[12];
	this1[4] = othis[1];
	this1[6] = othis[9];
	this1[7] = othis[13];
	this1[8] = othis[2];
	this1[9] = othis[6];
	this1[11] = othis[14];
	this1[12] = othis[3];
	this1[13] = othis[7];
	this1[14] = othis[11];
};
lime_math__$Matrix4_Matrix4_$Impl_$.getAxisRotation = function(x,y,z,degrees) {
	var m = lime_math__$Matrix4_Matrix4_$Impl_$._new();
	var a1 = new lime_math_Vector4(x,y,z);
	var rad = -degrees * (Math.PI / 180);
	var c = Math.cos(rad);
	var s = Math.sin(rad);
	var t = 1.0 - c;
	lime_math__$Matrix4_Matrix4_$Impl_$.set(m,0,c + a1.x * a1.x * t);
	lime_math__$Matrix4_Matrix4_$Impl_$.set(m,5,c + a1.y * a1.y * t);
	lime_math__$Matrix4_Matrix4_$Impl_$.set(m,10,c + a1.z * a1.z * t);
	var tmp1 = a1.x * a1.y * t;
	var tmp2 = a1.z * s;
	lime_math__$Matrix4_Matrix4_$Impl_$.set(m,4,tmp1 + tmp2);
	lime_math__$Matrix4_Matrix4_$Impl_$.set(m,1,tmp1 - tmp2);
	tmp1 = a1.x * a1.z * t;
	tmp2 = a1.y * s;
	lime_math__$Matrix4_Matrix4_$Impl_$.set(m,8,tmp1 - tmp2);
	lime_math__$Matrix4_Matrix4_$Impl_$.set(m,2,tmp1 + tmp2);
	tmp1 = a1.y * a1.z * t;
	tmp2 = a1.x * s;
	lime_math__$Matrix4_Matrix4_$Impl_$.set(m,9,tmp1 + tmp2);
	lime_math__$Matrix4_Matrix4_$Impl_$.set(m,6,tmp1 - tmp2);
	return m;
};
lime_math__$Matrix4_Matrix4_$Impl_$.get_determinant = function(this1) {
	return (this1[0] * this1[5] - this1[4] * this1[1]) * (this1[10] * this1[15] - this1[14] * this1[11]) - (this1[0] * this1[9] - this1[8] * this1[1]) * (this1[6] * this1[15] - this1[14] * this1[7]) + (this1[0] * this1[13] - this1[12] * this1[1]) * (this1[6] * this1[11] - this1[10] * this1[7]) + (this1[4] * this1[9] - this1[8] * this1[5]) * (this1[2] * this1[15] - this1[14] * this1[3]) - (this1[4] * this1[13] - this1[12] * this1[5]) * (this1[2] * this1[11] - this1[10] * this1[3]) + (this1[8] * this1[13] - this1[12] * this1[9]) * (this1[2] * this1[7] - this1[6] * this1[3]);
};
lime_math__$Matrix4_Matrix4_$Impl_$.get_position = function(this1) {
	return new lime_math_Vector4(this1[12],this1[13],this1[14]);
};
lime_math__$Matrix4_Matrix4_$Impl_$.set_position = function(this1,val) {
	this1[12] = val.x;
	this1[13] = val.y;
	this1[14] = val.z;
	return val;
};
lime_math__$Matrix4_Matrix4_$Impl_$.get = function(this1,index) {
	return this1[index];
};
lime_math__$Matrix4_Matrix4_$Impl_$.set = function(this1,index,value) {
	this1[index] = value;
	return value;
};
var lime_math_Rectangle = function(x,y,width,height) {
	if(height == null) height = 0;
	if(width == null) width = 0;
	if(y == null) y = 0;
	if(x == null) x = 0;
	this.x = x;
	this.y = y;
	this.width = width;
	this.height = height;
};
$hxClasses["lime.math.Rectangle"] = lime_math_Rectangle;
lime_math_Rectangle.__name__ = ["lime","math","Rectangle"];
lime_math_Rectangle.prototype = {
	height: null
	,width: null
	,x: null
	,y: null
	,clone: function() {
		return new lime_math_Rectangle(this.x,this.y,this.width,this.height);
	}
	,contains: function(x,y) {
		return x >= this.x && y >= this.y && x < this.get_right() && y < this.get_bottom();
	}
	,containsPoint: function(point) {
		return this.contains(point.x,point.y);
	}
	,containsRect: function(rect) {
		if(rect.width <= 0 || rect.height <= 0) return rect.x > this.x && rect.y > this.y && rect.get_right() < this.get_right() && rect.get_bottom() < this.get_bottom(); else return rect.x >= this.x && rect.y >= this.y && rect.get_right() <= this.get_right() && rect.get_bottom() <= this.get_bottom();
	}
	,copyFrom: function(sourceRect) {
		this.x = sourceRect.x;
		this.y = sourceRect.y;
		this.width = sourceRect.width;
		this.height = sourceRect.height;
	}
	,equals: function(toCompare) {
		return toCompare != null && this.x == toCompare.x && this.y == toCompare.y && this.width == toCompare.width && this.height == toCompare.height;
	}
	,inflate: function(dx,dy) {
		this.x -= dx;
		this.width += dx * 2;
		this.y -= dy;
		this.height += dy * 2;
	}
	,inflatePoint: function(point) {
		this.inflate(point.x,point.y);
	}
	,intersection: function(toIntersect) {
		var x0;
		if(this.x < toIntersect.x) x0 = toIntersect.x; else x0 = this.x;
		var x1;
		if(this.get_right() > toIntersect.get_right()) x1 = toIntersect.get_right(); else x1 = this.get_right();
		if(x1 <= x0) return new lime_math_Rectangle();
		var y0;
		if(this.y < toIntersect.y) y0 = toIntersect.y; else y0 = this.y;
		var y1;
		if(this.get_bottom() > toIntersect.get_bottom()) y1 = toIntersect.get_bottom(); else y1 = this.get_bottom();
		if(y1 <= y0) return new lime_math_Rectangle();
		return new lime_math_Rectangle(x0,y0,x1 - x0,y1 - y0);
	}
	,intersects: function(toIntersect) {
		var x0;
		if(this.x < toIntersect.x) x0 = toIntersect.x; else x0 = this.x;
		var x1;
		if(this.get_right() > toIntersect.get_right()) x1 = toIntersect.get_right(); else x1 = this.get_right();
		if(x1 <= x0) return false;
		var y0;
		if(this.y < toIntersect.y) y0 = toIntersect.y; else y0 = this.y;
		var y1;
		if(this.get_bottom() > toIntersect.get_bottom()) y1 = toIntersect.get_bottom(); else y1 = this.get_bottom();
		return y1 > y0;
	}
	,isEmpty: function() {
		return this.width <= 0 || this.height <= 0;
	}
	,offset: function(dx,dy) {
		this.x += dx;
		this.y += dy;
	}
	,offsetPoint: function(point) {
		this.x += point.x;
		this.y += point.y;
	}
	,setEmpty: function() {
		this.x = this.y = this.width = this.height = 0;
	}
	,setTo: function(xa,ya,widtha,heighta) {
		this.x = xa;
		this.y = ya;
		this.width = widtha;
		this.height = heighta;
	}
	,transform: function(m) {
		var tx0 = m.a * this.x + m.c * this.y;
		var tx1 = tx0;
		var ty0 = m.b * this.x + m.d * this.y;
		var ty1 = ty0;
		var tx = m.a * (this.x + this.width) + m.c * this.y;
		var ty = m.b * (this.x + this.width) + m.d * this.y;
		if(tx < tx0) tx0 = tx;
		if(ty < ty0) ty0 = ty;
		if(tx > tx1) tx1 = tx;
		if(ty > ty1) ty1 = ty;
		tx = m.a * (this.x + this.width) + m.c * (this.y + this.height);
		ty = m.b * (this.x + this.width) + m.d * (this.y + this.height);
		if(tx < tx0) tx0 = tx;
		if(ty < ty0) ty0 = ty;
		if(tx > tx1) tx1 = tx;
		if(ty > ty1) ty1 = ty;
		tx = m.a * this.x + m.c * (this.y + this.height);
		ty = m.b * this.x + m.d * (this.y + this.height);
		if(tx < tx0) tx0 = tx;
		if(ty < ty0) ty0 = ty;
		if(tx > tx1) tx1 = tx;
		if(ty > ty1) ty1 = ty;
		return new lime_math_Rectangle(tx0 + m.tx,ty0 + m.ty,tx1 - tx0,ty1 - ty0);
	}
	,union: function(toUnion) {
		if(this.width == 0 || this.height == 0) return toUnion.clone(); else if(toUnion.width == 0 || toUnion.height == 0) return this.clone();
		var x0;
		if(this.x > toUnion.x) x0 = toUnion.x; else x0 = this.x;
		var x1;
		if(this.get_right() < toUnion.get_right()) x1 = toUnion.get_right(); else x1 = this.get_right();
		var y0;
		if(this.y > toUnion.y) y0 = toUnion.y; else y0 = this.y;
		var y1;
		if(this.get_bottom() < toUnion.get_bottom()) y1 = toUnion.get_bottom(); else y1 = this.get_bottom();
		return new lime_math_Rectangle(x0,y0,x1 - x0,y1 - y0);
	}
	,__contract: function(x,y,width,height) {
		if(this.width == 0 && this.height == 0) return;
		if(this.x < x) this.x = x;
		if(this.y < y) this.y = y;
		if(this.get_right() > x + width) this.width = x + width - this.x;
		if(this.get_bottom() > y + height) this.height = y + height - this.y;
	}
	,__expand: function(x,y,width,height) {
		if(this.width == 0 && this.height == 0) {
			this.x = x;
			this.y = y;
			this.width = width;
			this.height = height;
			return;
		}
		var cacheRight = this.get_right();
		var cacheBottom = this.get_bottom();
		if(this.x > x) this.x = x;
		if(this.y > y) this.y = y;
		if(cacheRight < x + width) this.width = x + width - this.x;
		if(cacheBottom < y + height) this.height = y + height - this.y;
	}
	,__toFlashRectangle: function() {
		return null;
	}
	,get_bottom: function() {
		return this.y + this.height;
	}
	,set_bottom: function(b) {
		this.height = b - this.y;
		return b;
	}
	,get_bottomRight: function() {
		return new lime_math_Vector2(this.x + this.width,this.y + this.height);
	}
	,set_bottomRight: function(p) {
		this.width = p.x - this.x;
		this.height = p.y - this.y;
		return p.clone();
	}
	,get_left: function() {
		return this.x;
	}
	,set_left: function(l) {
		this.width -= l - this.x;
		this.x = l;
		return l;
	}
	,get_right: function() {
		return this.x + this.width;
	}
	,set_right: function(r) {
		this.width = r - this.x;
		return r;
	}
	,get_size: function() {
		return new lime_math_Vector2(this.width,this.height);
	}
	,set_size: function(p) {
		this.width = p.x;
		this.height = p.y;
		return p.clone();
	}
	,get_top: function() {
		return this.y;
	}
	,set_top: function(t) {
		this.height -= t - this.y;
		this.y = t;
		return t;
	}
	,get_topLeft: function() {
		return new lime_math_Vector2(this.x,this.y);
	}
	,set_topLeft: function(p) {
		this.x = p.x;
		this.y = p.y;
		return p.clone();
	}
	,__class__: lime_math_Rectangle
	,__properties__: {set_topLeft:"set_topLeft",get_topLeft:"get_topLeft",set_top:"set_top",get_top:"get_top",set_size:"set_size",get_size:"get_size",set_right:"set_right",get_right:"get_right",set_left:"set_left",get_left:"get_left",set_bottomRight:"set_bottomRight",get_bottomRight:"get_bottomRight",set_bottom:"set_bottom",get_bottom:"get_bottom"}
};
var lime_math_Vector2 = function(x,y) {
	if(y == null) y = 0;
	if(x == null) x = 0;
	this.x = x;
	this.y = y;
};
$hxClasses["lime.math.Vector2"] = lime_math_Vector2;
lime_math_Vector2.__name__ = ["lime","math","Vector2"];
lime_math_Vector2.distance = function(pt1,pt2) {
	var dx = pt1.x - pt2.x;
	var dy = pt1.y - pt2.y;
	return Math.sqrt(dx * dx + dy * dy);
};
lime_math_Vector2.interpolate = function(pt1,pt2,f) {
	return new lime_math_Vector2(pt2.x + f * (pt1.x - pt2.x),pt2.y + f * (pt1.y - pt2.y));
};
lime_math_Vector2.polar = function(len,angle) {
	return new lime_math_Vector2(len * Math.cos(angle),len * Math.sin(angle));
};
lime_math_Vector2.prototype = {
	length: null
	,x: null
	,y: null
	,add: function(v) {
		return new lime_math_Vector2(v.x + this.x,v.y + this.y);
	}
	,clone: function() {
		return new lime_math_Vector2(this.x,this.y);
	}
	,equals: function(toCompare) {
		return toCompare != null && toCompare.x == this.x && toCompare.y == this.y;
	}
	,normalize: function(thickness) {
		if(this.x == 0 && this.y == 0) return; else {
			var norm = thickness / Math.sqrt(this.x * this.x + this.y * this.y);
			this.x *= norm;
			this.y *= norm;
		}
	}
	,offset: function(dx,dy) {
		this.x += dx;
		this.y += dy;
	}
	,setTo: function(xa,ya) {
		this.x = xa;
		this.y = ya;
	}
	,subtract: function(v) {
		return new lime_math_Vector2(this.x - v.x,this.y - v.y);
	}
	,__toFlashPoint: function() {
		return null;
	}
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y);
	}
	,__class__: lime_math_Vector2
	,__properties__: {get_length:"get_length"}
};
var lime_math_Vector4 = function(x,y,z,w) {
	if(w == null) w = 0.;
	if(z == null) z = 0.;
	if(y == null) y = 0.;
	if(x == null) x = 0.;
	this.w = w;
	this.x = x;
	this.y = y;
	this.z = z;
};
$hxClasses["lime.math.Vector4"] = lime_math_Vector4;
lime_math_Vector4.__name__ = ["lime","math","Vector4"];
lime_math_Vector4.__properties__ = {get_Z_AXIS:"get_Z_AXIS",get_Y_AXIS:"get_Y_AXIS",get_X_AXIS:"get_X_AXIS"}
lime_math_Vector4.angleBetween = function(a,b) {
	var a0 = new lime_math_Vector4(a.x,a.y,a.z,a.w);
	a0.normalize();
	var b0 = new lime_math_Vector4(b.x,b.y,b.z,b.w);
	b0.normalize();
	return Math.acos(a0.x * b0.x + a0.y * b0.y + a0.z * b0.z);
};
lime_math_Vector4.distance = function(pt1,pt2) {
	var x = pt2.x - pt1.x;
	var y = pt2.y - pt1.y;
	var z = pt2.z - pt1.z;
	return Math.sqrt(x * x + y * y + z * z);
};
lime_math_Vector4.get_X_AXIS = function() {
	return new lime_math_Vector4(1,0,0);
};
lime_math_Vector4.get_Y_AXIS = function() {
	return new lime_math_Vector4(0,1,0);
};
lime_math_Vector4.get_Z_AXIS = function() {
	return new lime_math_Vector4(0,0,1);
};
lime_math_Vector4.prototype = {
	length: null
	,lengthSquared: null
	,w: null
	,x: null
	,y: null
	,z: null
	,add: function(a) {
		return new lime_math_Vector4(this.x + a.x,this.y + a.y,this.z + a.z);
	}
	,clone: function() {
		return new lime_math_Vector4(this.x,this.y,this.z,this.w);
	}
	,copyFrom: function(sourceVector4) {
		this.x = sourceVector4.x;
		this.y = sourceVector4.y;
		this.z = sourceVector4.z;
	}
	,crossProduct: function(a) {
		return new lime_math_Vector4(this.y * a.z - this.z * a.y,this.z * a.x - this.x * a.z,this.x * a.y - this.y * a.x,1);
	}
	,decrementBy: function(a) {
		this.x -= a.x;
		this.y -= a.y;
		this.z -= a.z;
	}
	,dotProduct: function(a) {
		return this.x * a.x + this.y * a.y + this.z * a.z;
	}
	,equals: function(toCompare,allFour) {
		if(allFour == null) allFour = false;
		return this.x == toCompare.x && this.y == toCompare.y && this.z == toCompare.z && (!allFour || this.w == toCompare.w);
	}
	,incrementBy: function(a) {
		this.x += a.x;
		this.y += a.y;
		this.z += a.z;
	}
	,nearEquals: function(toCompare,tolerance,allFour) {
		if(allFour == null) allFour = false;
		return Math.abs(this.x - toCompare.x) < tolerance && Math.abs(this.y - toCompare.y) < tolerance && Math.abs(this.z - toCompare.z) < tolerance && (!allFour || Math.abs(this.w - toCompare.w) < tolerance);
	}
	,negate: function() {
		this.x *= -1;
		this.y *= -1;
		this.z *= -1;
	}
	,normalize: function() {
		var l = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
		if(l != 0) {
			this.x /= l;
			this.y /= l;
			this.z /= l;
		}
		return l;
	}
	,project: function() {
		this.x /= this.w;
		this.y /= this.w;
		this.z /= this.w;
	}
	,scaleBy: function(s) {
		this.x *= s;
		this.y *= s;
		this.z *= s;
	}
	,setTo: function(xa,ya,za) {
		this.x = xa;
		this.y = ya;
		this.z = za;
	}
	,subtract: function(a) {
		return new lime_math_Vector4(this.x - a.x,this.y - a.y,this.z - a.z);
	}
	,toString: function() {
		return "Vector4(" + this.x + ", " + this.y + ", " + this.z + ")";
	}
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
	}
	,get_lengthSquared: function() {
		return this.x * this.x + this.y * this.y + this.z * this.z;
	}
	,__class__: lime_math_Vector4
	,__properties__: {get_lengthSquared:"get_lengthSquared",get_length:"get_length"}
};
var lime_math_color__$ARGB_ARGB_$Impl_$ = {};
$hxClasses["lime.math.color._ARGB.ARGB_Impl_"] = lime_math_color__$ARGB_ARGB_$Impl_$;
lime_math_color__$ARGB_ARGB_$Impl_$.__name__ = ["lime","math","color","_ARGB","ARGB_Impl_"];
lime_math_color__$ARGB_ARGB_$Impl_$.__properties__ = {set_r:"set_r",get_r:"get_r",set_g:"set_g",get_g:"get_g",set_b:"set_b",get_b:"get_b",set_a:"set_a",get_a:"get_a"}
lime_math_color__$ARGB_ARGB_$Impl_$._new = function(argb) {
	if(argb == null) argb = 0;
	return argb;
};
lime_math_color__$ARGB_ARGB_$Impl_$.create = function(a,r,g,b) {
	var argb = 0;
	argb = (a & 255) << 24 | (r & 255) << 16 | (g & 255) << 8 | b & 255;
	return argb;
};
lime_math_color__$ARGB_ARGB_$Impl_$.multiplyAlpha = function(this1) {
	if((this1 >> 24 & 255) == 0) this1 = 0; else if((this1 >> 24 & 255) != 255) {
		lime_math_color__$ARGB_ARGB_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[this1 >> 24 & 255];
		this1 = (this1 >> 24 & 255 & 255) << 24 | ((this1 >> 16 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.a16 >> 16 & 255) << 16 | ((this1 >> 8 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.a16 >> 16 & 255) << 8 | (this1 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.a16 >> 16 & 255;
	}
};
lime_math_color__$ARGB_ARGB_$Impl_$.readUInt8 = function(this1,data,offset,format,premultiplied) {
	if(premultiplied == null) premultiplied = false;
	if(format == null) format = 0;
	switch(format) {
	case 2:
		this1 = (data[offset + 1] & 255) << 24 | (data[offset] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset + 2] & 255;
		break;
	case 0:
		this1 = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
		break;
	case 1:
		this1 = (data[offset + 2] & 255) << 24 | (data[offset + 3] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 1] & 255;
		break;
	}
	if(premultiplied) {
		if((this1 >> 24 & 255) != 0 && (this1 >> 24 & 255) != 255) {
			lime_math_color__$ARGB_ARGB_$Impl_$.unmult = 255.0 / (this1 >> 24 & 255);
			var r;
			var idx = Math.floor((this1 >> 16 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.unmult);
			r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
			var g;
			var idx1 = Math.floor((this1 >> 8 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.unmult);
			g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
			var b;
			var idx2 = Math.floor((this1 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.unmult);
			b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
			this1 = (this1 >> 24 & 255 & 255) << 24 | (r & 255) << 16 | (g & 255) << 8 | b & 255;
		}
	}
};
lime_math_color__$ARGB_ARGB_$Impl_$.set = function(this1,a,r,g,b) {
	this1 = (a & 255) << 24 | (r & 255) << 16 | (g & 255) << 8 | b & 255;
};
lime_math_color__$ARGB_ARGB_$Impl_$.unmultiplyAlpha = function(this1) {
	if((this1 >> 24 & 255) != 0 && (this1 >> 24 & 255) != 255) {
		lime_math_color__$ARGB_ARGB_$Impl_$.unmult = 255.0 / (this1 >> 24 & 255);
		var r;
		var idx = Math.floor((this1 >> 16 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.unmult);
		r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
		var g;
		var idx1 = Math.floor((this1 >> 8 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.unmult);
		g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
		var b;
		var idx2 = Math.floor((this1 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.unmult);
		b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
		this1 = (this1 >> 24 & 255 & 255) << 24 | (r & 255) << 16 | (g & 255) << 8 | b & 255;
	}
};
lime_math_color__$ARGB_ARGB_$Impl_$.writeUInt8 = function(this1,data,offset,format,premultiplied) {
	if(premultiplied == null) premultiplied = false;
	if(format == null) format = 0;
	if(premultiplied) {
		if((this1 >> 24 & 255) == 0) this1 = 0; else if((this1 >> 24 & 255) != 255) {
			lime_math_color__$ARGB_ARGB_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[this1 >> 24 & 255];
			this1 = (this1 >> 24 & 255 & 255) << 24 | ((this1 >> 16 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.a16 >> 16 & 255) << 16 | ((this1 >> 8 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.a16 >> 16 & 255) << 8 | (this1 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.a16 >> 16 & 255;
		}
	}
	switch(format) {
	case 2:
		data[offset] = this1 & 255;
		data[offset + 1] = this1 >> 8 & 255;
		data[offset + 2] = this1 >> 16 & 255;
		data[offset + 3] = this1 >> 24 & 255;
		break;
	case 0:
		data[offset] = this1 >> 16 & 255;
		data[offset + 1] = this1 >> 8 & 255;
		data[offset + 2] = this1 & 255;
		data[offset + 3] = this1 >> 24 & 255;
		break;
	case 1:
		data[offset] = this1 >> 24 & 255;
		data[offset + 1] = this1 >> 16 & 255;
		data[offset + 2] = this1 >> 8 & 255;
		data[offset + 3] = this1 & 255;
		break;
	}
};
lime_math_color__$ARGB_ARGB_$Impl_$.__fromBGRA = function(bgra) {
	var argb = 0;
	argb = (bgra & 255 & 255) << 24 | (bgra >> 8 & 255 & 255) << 16 | (bgra >> 16 & 255 & 255) << 8 | bgra >> 24 & 255 & 255;
	return argb;
};
lime_math_color__$ARGB_ARGB_$Impl_$.__fromRGBA = function(rgba) {
	var argb = 0;
	argb = (rgba & 255 & 255) << 24 | (rgba >> 24 & 255 & 255) << 16 | (rgba >> 16 & 255 & 255) << 8 | rgba >> 8 & 255 & 255;
	return argb;
};
lime_math_color__$ARGB_ARGB_$Impl_$.get_a = function(this1) {
	return this1 >> 24 & 255;
};
lime_math_color__$ARGB_ARGB_$Impl_$.set_a = function(this1,value) {
	this1 = (value & 255) << 24 | (this1 >> 16 & 255 & 255) << 16 | (this1 >> 8 & 255 & 255) << 8 | this1 & 255 & 255;
	return value;
};
lime_math_color__$ARGB_ARGB_$Impl_$.get_b = function(this1) {
	return this1 & 255;
};
lime_math_color__$ARGB_ARGB_$Impl_$.set_b = function(this1,value) {
	this1 = (this1 >> 24 & 255 & 255) << 24 | (this1 >> 16 & 255 & 255) << 16 | (this1 >> 8 & 255 & 255) << 8 | value & 255;
	return value;
};
lime_math_color__$ARGB_ARGB_$Impl_$.get_g = function(this1) {
	return this1 >> 8 & 255;
};
lime_math_color__$ARGB_ARGB_$Impl_$.set_g = function(this1,value) {
	this1 = (this1 >> 24 & 255 & 255) << 24 | (this1 >> 16 & 255 & 255) << 16 | (value & 255) << 8 | this1 & 255 & 255;
	return value;
};
lime_math_color__$ARGB_ARGB_$Impl_$.get_r = function(this1) {
	return this1 >> 16 & 255;
};
lime_math_color__$ARGB_ARGB_$Impl_$.set_r = function(this1,value) {
	this1 = (this1 >> 24 & 255 & 255) << 24 | (value & 255) << 16 | (this1 >> 8 & 255 & 255) << 8 | this1 & 255 & 255;
	return value;
};
var lime_math_color__$BGRA_BGRA_$Impl_$ = {};
$hxClasses["lime.math.color._BGRA.BGRA_Impl_"] = lime_math_color__$BGRA_BGRA_$Impl_$;
lime_math_color__$BGRA_BGRA_$Impl_$.__name__ = ["lime","math","color","_BGRA","BGRA_Impl_"];
lime_math_color__$BGRA_BGRA_$Impl_$.__properties__ = {set_r:"set_r",get_r:"get_r",set_g:"set_g",get_g:"get_g",set_b:"set_b",get_b:"get_b",set_a:"set_a",get_a:"get_a"}
lime_math_color__$BGRA_BGRA_$Impl_$._new = function(bgra) {
	if(bgra == null) bgra = 0;
	return bgra;
};
lime_math_color__$BGRA_BGRA_$Impl_$.create = function(b,g,r,a) {
	var bgra = 0;
	bgra = (b & 255) << 24 | (g & 255) << 16 | (r & 255) << 8 | a & 255;
	return bgra;
};
lime_math_color__$BGRA_BGRA_$Impl_$.multiplyAlpha = function(this1) {
	if((this1 & 255) == 0) this1 = 0; else if((this1 & 255) != 255) {
		lime_math_color__$BGRA_BGRA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[this1 & 255];
		this1 = ((this1 >> 24 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.a16 >> 16 & 255) << 24 | ((this1 >> 16 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.a16 >> 16 & 255) << 16 | ((this1 >> 8 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.a16 >> 16 & 255) << 8 | this1 & 255 & 255;
	}
};
lime_math_color__$BGRA_BGRA_$Impl_$.readUInt8 = function(this1,data,offset,format,premultiplied) {
	if(premultiplied == null) premultiplied = false;
	if(format == null) format = 0;
	switch(format) {
	case 2:
		this1 = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 0:
		this1 = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 1:
		this1 = (data[offset + 3] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 1] & 255) << 8 | data[offset] & 255;
		break;
	}
	if(premultiplied) {
		if((this1 & 255) != 0 && (this1 & 255) != 255) {
			lime_math_color__$BGRA_BGRA_$Impl_$.unmult = 255.0 / (this1 & 255);
			var b;
			var idx = Math.floor((this1 >> 24 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.unmult);
			b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
			var g;
			var idx1 = Math.floor((this1 >> 16 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.unmult);
			g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
			var r;
			var idx2 = Math.floor((this1 >> 8 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.unmult);
			r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
			this1 = (b & 255) << 24 | (g & 255) << 16 | (r & 255) << 8 | this1 & 255 & 255;
		}
	}
};
lime_math_color__$BGRA_BGRA_$Impl_$.set = function(this1,b,g,r,a) {
	this1 = (b & 255) << 24 | (g & 255) << 16 | (r & 255) << 8 | a & 255;
};
lime_math_color__$BGRA_BGRA_$Impl_$.unmultiplyAlpha = function(this1) {
	if((this1 & 255) != 0 && (this1 & 255) != 255) {
		lime_math_color__$BGRA_BGRA_$Impl_$.unmult = 255.0 / (this1 & 255);
		var b;
		var idx = Math.floor((this1 >> 24 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.unmult);
		b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
		var g;
		var idx1 = Math.floor((this1 >> 16 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.unmult);
		g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
		var r;
		var idx2 = Math.floor((this1 >> 8 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.unmult);
		r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
		this1 = (b & 255) << 24 | (g & 255) << 16 | (r & 255) << 8 | this1 & 255 & 255;
	}
};
lime_math_color__$BGRA_BGRA_$Impl_$.writeUInt8 = function(this1,data,offset,format,premultiplied) {
	if(premultiplied == null) premultiplied = false;
	if(format == null) format = 0;
	if(premultiplied) {
		if((this1 & 255) == 0) this1 = 0; else if((this1 & 255) != 255) {
			lime_math_color__$BGRA_BGRA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[this1 & 255];
			this1 = ((this1 >> 24 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.a16 >> 16 & 255) << 24 | ((this1 >> 16 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.a16 >> 16 & 255) << 16 | ((this1 >> 8 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.a16 >> 16 & 255) << 8 | this1 & 255 & 255;
		}
	}
	switch(format) {
	case 2:
		data[offset] = this1 >> 24 & 255;
		data[offset + 1] = this1 >> 16 & 255;
		data[offset + 2] = this1 >> 8 & 255;
		data[offset + 3] = this1 & 255;
		break;
	case 0:
		data[offset] = this1 >> 8 & 255;
		data[offset + 1] = this1 >> 16 & 255;
		data[offset + 2] = this1 >> 24 & 255;
		data[offset + 3] = this1 & 255;
		break;
	case 1:
		data[offset] = this1 & 255;
		data[offset + 1] = this1 >> 8 & 255;
		data[offset + 2] = this1 >> 16 & 255;
		data[offset + 3] = this1 >> 24 & 255;
		break;
	}
};
lime_math_color__$BGRA_BGRA_$Impl_$.__fromARGB = function(argb) {
	var bgra = 0;
	bgra = (argb & 255 & 255) << 24 | (argb >> 8 & 255 & 255) << 16 | (argb >> 16 & 255 & 255) << 8 | argb >> 24 & 255 & 255;
	return bgra;
};
lime_math_color__$BGRA_BGRA_$Impl_$.__fromRGBA = function(rgba) {
	var bgra = 0;
	bgra = (rgba >> 8 & 255 & 255) << 24 | (rgba >> 16 & 255 & 255) << 16 | (rgba >> 24 & 255 & 255) << 8 | rgba & 255 & 255;
	return bgra;
};
lime_math_color__$BGRA_BGRA_$Impl_$.get_a = function(this1) {
	return this1 & 255;
};
lime_math_color__$BGRA_BGRA_$Impl_$.set_a = function(this1,value) {
	this1 = (this1 >> 24 & 255 & 255) << 24 | (this1 >> 16 & 255 & 255) << 16 | (this1 >> 8 & 255 & 255) << 8 | value & 255;
	return value;
};
lime_math_color__$BGRA_BGRA_$Impl_$.get_b = function(this1) {
	return this1 >> 24 & 255;
};
lime_math_color__$BGRA_BGRA_$Impl_$.set_b = function(this1,value) {
	this1 = (value & 255) << 24 | (this1 >> 16 & 255 & 255) << 16 | (this1 >> 8 & 255 & 255) << 8 | this1 & 255 & 255;
	return value;
};
lime_math_color__$BGRA_BGRA_$Impl_$.get_g = function(this1) {
	return this1 >> 16 & 255;
};
lime_math_color__$BGRA_BGRA_$Impl_$.set_g = function(this1,value) {
	this1 = (this1 >> 24 & 255 & 255) << 24 | (value & 255) << 16 | (this1 >> 8 & 255 & 255) << 8 | this1 & 255 & 255;
	return value;
};
lime_math_color__$BGRA_BGRA_$Impl_$.get_r = function(this1) {
	return this1 >> 8 & 255;
};
lime_math_color__$BGRA_BGRA_$Impl_$.set_r = function(this1,value) {
	this1 = (this1 >> 24 & 255 & 255) << 24 | (this1 >> 16 & 255 & 255) << 16 | (value & 255) << 8 | this1 & 255 & 255;
	return value;
};
var lime_math_color__$RGBA_RGBA_$Impl_$ = {};
$hxClasses["lime.math.color._RGBA.RGBA_Impl_"] = lime_math_color__$RGBA_RGBA_$Impl_$;
lime_math_color__$RGBA_RGBA_$Impl_$.__name__ = ["lime","math","color","_RGBA","RGBA_Impl_"];
lime_math_color__$RGBA_RGBA_$Impl_$.__properties__ = {set_r:"set_r",get_r:"get_r",set_g:"set_g",get_g:"get_g",set_b:"set_b",get_b:"get_b",set_a:"set_a",get_a:"get_a"}
lime_math_color__$RGBA_RGBA_$Impl_$._new = function(rgba) {
	if(rgba == null) rgba = 0;
	return rgba;
};
lime_math_color__$RGBA_RGBA_$Impl_$.create = function(r,g,b,a) {
	var rgba = 0;
	rgba = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | a & 255;
	return rgba;
};
lime_math_color__$RGBA_RGBA_$Impl_$.multiplyAlpha = function(this1) {
	if((this1 & 255) == 0) {
		if(this1 != 0) this1 = 0;
	} else if((this1 & 255) != 255) {
		lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[this1 & 255];
		this1 = ((this1 >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((this1 >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((this1 >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | this1 & 255 & 255;
	}
};
lime_math_color__$RGBA_RGBA_$Impl_$.readUInt8 = function(this1,data,offset,format,premultiplied) {
	if(premultiplied == null) premultiplied = false;
	if(format == null) format = 0;
	switch(format) {
	case 2:
		this1 = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 0:
		this1 = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 1:
		this1 = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
		break;
	}
	if(premultiplied) {
		if((this1 & 255) != 0 && (this1 & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (this1 & 255);
			var r;
			var idx = Math.round((this1 >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
			var g;
			var idx1 = Math.round((this1 >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
			var b;
			var idx2 = Math.round((this1 >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
			b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
			this1 = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | this1 & 255 & 255;
		}
	}
};
lime_math_color__$RGBA_RGBA_$Impl_$.set = function(this1,r,g,b,a) {
	this1 = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | a & 255;
};
lime_math_color__$RGBA_RGBA_$Impl_$.unmultiplyAlpha = function(this1) {
	if((this1 & 255) != 0 && (this1 & 255) != 255) {
		lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (this1 & 255);
		var r;
		var idx = Math.round((this1 >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
		r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
		var g;
		var idx1 = Math.round((this1 >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
		g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
		var b;
		var idx2 = Math.round((this1 >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
		b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
		this1 = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | this1 & 255 & 255;
	}
};
lime_math_color__$RGBA_RGBA_$Impl_$.writeUInt8 = function(this1,data,offset,format,premultiplied) {
	if(premultiplied == null) premultiplied = false;
	if(format == null) format = 0;
	if(premultiplied) {
		if((this1 & 255) == 0) {
			if(this1 != 0) this1 = 0;
		} else if((this1 & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[this1 & 255];
			this1 = ((this1 >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((this1 >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((this1 >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | this1 & 255 & 255;
		}
	}
	switch(format) {
	case 2:
		data[offset] = this1 >> 8 & 255;
		data[offset + 1] = this1 >> 16 & 255;
		data[offset + 2] = this1 >> 24 & 255;
		data[offset + 3] = this1 & 255;
		break;
	case 0:
		data[offset] = this1 >> 24 & 255;
		data[offset + 1] = this1 >> 16 & 255;
		data[offset + 2] = this1 >> 8 & 255;
		data[offset + 3] = this1 & 255;
		break;
	case 1:
		data[offset] = this1 & 255;
		data[offset + 1] = this1 >> 24 & 255;
		data[offset + 2] = this1 >> 16 & 255;
		data[offset + 3] = this1 >> 8 & 255;
		break;
	}
};
lime_math_color__$RGBA_RGBA_$Impl_$.__fromARGB = function(argb) {
	var rgba = 0;
	rgba = (argb >> 16 & 255 & 255) << 24 | (argb >> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >> 24 & 255 & 255;
	return rgba;
};
lime_math_color__$RGBA_RGBA_$Impl_$.__fromBGRA = function(bgra) {
	var rgba = 0;
	rgba = (bgra >> 8 & 255 & 255) << 24 | (bgra >> 16 & 255 & 255) << 16 | (bgra >> 24 & 255 & 255) << 8 | bgra & 255 & 255;
	return rgba;
};
lime_math_color__$RGBA_RGBA_$Impl_$.get_a = function(this1) {
	return this1 & 255;
};
lime_math_color__$RGBA_RGBA_$Impl_$.set_a = function(this1,value) {
	this1 = (this1 >> 24 & 255 & 255) << 24 | (this1 >> 16 & 255 & 255) << 16 | (this1 >> 8 & 255 & 255) << 8 | value & 255;
	return value;
};
lime_math_color__$RGBA_RGBA_$Impl_$.get_b = function(this1) {
	return this1 >> 8 & 255;
};
lime_math_color__$RGBA_RGBA_$Impl_$.set_b = function(this1,value) {
	this1 = (this1 >> 24 & 255 & 255) << 24 | (this1 >> 16 & 255 & 255) << 16 | (value & 255) << 8 | this1 & 255 & 255;
	return value;
};
lime_math_color__$RGBA_RGBA_$Impl_$.get_g = function(this1) {
	return this1 >> 16 & 255;
};
lime_math_color__$RGBA_RGBA_$Impl_$.set_g = function(this1,value) {
	this1 = (this1 >> 24 & 255 & 255) << 24 | (value & 255) << 16 | (this1 >> 8 & 255 & 255) << 8 | this1 & 255 & 255;
	return value;
};
lime_math_color__$RGBA_RGBA_$Impl_$.get_r = function(this1) {
	return this1 >> 24 & 255;
};
lime_math_color__$RGBA_RGBA_$Impl_$.set_r = function(this1,value) {
	this1 = (value & 255) << 24 | (this1 >> 16 & 255 & 255) << 16 | (this1 >> 8 & 255 & 255) << 8 | this1 & 255 & 255;
	return value;
};
var lime_net__$IHTTPRequest = function() { };
$hxClasses["lime.net._IHTTPRequest"] = lime_net__$IHTTPRequest;
lime_net__$IHTTPRequest.__name__ = ["lime","net","_IHTTPRequest"];
lime_net__$IHTTPRequest.prototype = {
	contentType: null
	,data: null
	,enableResponseHeaders: null
	,followRedirects: null
	,formData: null
	,headers: null
	,method: null
	,responseHeaders: null
	,responseStatus: null
	,timeout: null
	,uri: null
	,userAgent: null
	,cancel: null
	,__class__: lime_net__$IHTTPRequest
};
var lime_net__$HTTPRequest_AbstractHTTPRequest = function(uri) {
	this.uri = uri;
	this.contentType = "application/x-www-form-urlencoded";
	this.followRedirects = true;
	this.formData = new haxe_ds_StringMap();
	this.headers = [];
	this.method = "GET";
	this.timeout = 30000;
	this.backend = new lime__$backend_html5_HTML5HTTPRequest();
	this.backend.init(this);
};
$hxClasses["lime.net._HTTPRequest.AbstractHTTPRequest"] = lime_net__$HTTPRequest_AbstractHTTPRequest;
lime_net__$HTTPRequest_AbstractHTTPRequest.__name__ = ["lime","net","_HTTPRequest","AbstractHTTPRequest"];
lime_net__$HTTPRequest_AbstractHTTPRequest.__interfaces__ = [lime_net__$IHTTPRequest];
lime_net__$HTTPRequest_AbstractHTTPRequest.prototype = {
	contentType: null
	,data: null
	,enableResponseHeaders: null
	,followRedirects: null
	,formData: null
	,headers: null
	,method: null
	,responseData: null
	,responseHeaders: null
	,responseStatus: null
	,timeout: null
	,uri: null
	,userAgent: null
	,backend: null
	,cancel: function() {
		this.backend.cancel();
	}
	,load: function(uri) {
		return null;
	}
	,__class__: lime_net__$HTTPRequest_AbstractHTTPRequest
};
var lime_net_HTTPRequest = function(uri) {
	lime_net__$HTTPRequest_AbstractHTTPRequest.call(this,uri);
};
$hxClasses["lime.net.HTTPRequest"] = lime_net_HTTPRequest;
lime_net_HTTPRequest.__name__ = ["lime","net","HTTPRequest"];
lime_net_HTTPRequest.__super__ = lime_net__$HTTPRequest_AbstractHTTPRequest;
lime_net_HTTPRequest.prototype = $extend(lime_net__$HTTPRequest_AbstractHTTPRequest.prototype,{
	__class__: lime_net_HTTPRequest
});
var lime_net__$HTTPRequest_$Bytes = function(uri) {
	lime_net__$HTTPRequest_AbstractHTTPRequest.call(this,uri);
};
$hxClasses["lime.net._HTTPRequest_Bytes"] = lime_net__$HTTPRequest_$Bytes;
lime_net__$HTTPRequest_$Bytes.__name__ = ["lime","net","_HTTPRequest_Bytes"];
lime_net__$HTTPRequest_$Bytes.__super__ = lime_net__$HTTPRequest_AbstractHTTPRequest;
lime_net__$HTTPRequest_$Bytes.prototype = $extend(lime_net__$HTTPRequest_AbstractHTTPRequest.prototype,{
	fromBytes: function(bytes) {
		return bytes;
	}
	,load: function(uri) {
		var _g = this;
		if(uri != null) this.uri = uri;
		var promise = new lime_app_Promise();
		var future = this.backend.loadData(this.uri);
		future.onProgress($bind(promise,promise.progress));
		future.onError($bind(promise,promise.error));
		future.onComplete(function(bytes) {
			_g.responseData = _g.fromBytes(bytes);
			promise.complete(_g.responseData);
		});
		return promise.future;
	}
	,__class__: lime_net__$HTTPRequest_$Bytes
});
var lime_net__$HTTPRequest_$String = function(uri) {
	lime_net__$HTTPRequest_AbstractHTTPRequest.call(this,uri);
};
$hxClasses["lime.net._HTTPRequest_String"] = lime_net__$HTTPRequest_$String;
lime_net__$HTTPRequest_$String.__name__ = ["lime","net","_HTTPRequest_String"];
lime_net__$HTTPRequest_$String.__super__ = lime_net__$HTTPRequest_AbstractHTTPRequest;
lime_net__$HTTPRequest_$String.prototype = $extend(lime_net__$HTTPRequest_AbstractHTTPRequest.prototype,{
	load: function(uri) {
		var _g = this;
		if(uri != null) this.uri = uri;
		var promise = new lime_app_Promise();
		var future = this.backend.loadText(this.uri);
		future.onProgress($bind(promise,promise.progress));
		future.onError($bind(promise,promise.error));
		future.onComplete(function(text) {
			_g.responseData = text;
			promise.complete(_g.responseData);
		});
		return promise.future;
	}
	,__class__: lime_net__$HTTPRequest_$String
});
var lime_net_HTTPRequestHeader = function(name,value) {
	if(value == null) value = "";
	this.name = name;
	this.value = value;
};
$hxClasses["lime.net.HTTPRequestHeader"] = lime_net_HTTPRequestHeader;
lime_net_HTTPRequestHeader.__name__ = ["lime","net","HTTPRequestHeader"];
lime_net_HTTPRequestHeader.prototype = {
	name: null
	,value: null
	,__class__: lime_net_HTTPRequestHeader
};
var lime_net__$HTTPRequest_$lime_$utils_$Bytes = function(uri) {
	lime_net__$HTTPRequest_$Bytes.call(this,uri);
};
$hxClasses["lime.net._HTTPRequest_lime_utils_Bytes"] = lime_net__$HTTPRequest_$lime_$utils_$Bytes;
lime_net__$HTTPRequest_$lime_$utils_$Bytes.__name__ = ["lime","net","_HTTPRequest_lime_utils_Bytes"];
lime_net__$HTTPRequest_$lime_$utils_$Bytes.__super__ = lime_net__$HTTPRequest_$Bytes;
lime_net__$HTTPRequest_$lime_$utils_$Bytes.prototype = $extend(lime_net__$HTTPRequest_$Bytes.prototype,{
	fromBytes: function(bytes) {
		return lime_utils__$Bytes_Bytes_$Impl_$.fromBytes(bytes);
	}
	,__class__: lime_net__$HTTPRequest_$lime_$utils_$Bytes
});
var lime_net__$HTTPRequest_$openfl_$utils_$ByteArray = function(uri) {
	lime_net__$HTTPRequest_$Bytes.call(this,uri);
};
$hxClasses["lime.net._HTTPRequest_openfl_utils_ByteArray"] = lime_net__$HTTPRequest_$openfl_$utils_$ByteArray;
lime_net__$HTTPRequest_$openfl_$utils_$ByteArray.__name__ = ["lime","net","_HTTPRequest_openfl_utils_ByteArray"];
lime_net__$HTTPRequest_$openfl_$utils_$ByteArray.__super__ = lime_net__$HTTPRequest_$Bytes;
lime_net__$HTTPRequest_$openfl_$utils_$ByteArray.prototype = $extend(lime_net__$HTTPRequest_$Bytes.prototype,{
	fromBytes: function(bytes) {
		return openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(bytes);
	}
	,__class__: lime_net__$HTTPRequest_$openfl_$utils_$ByteArray
});
var lime_system_BackgroundWorker = function() {
	this.onProgress = new lime_app__$Event_$Dynamic_$Void();
	this.onError = new lime_app__$Event_$Dynamic_$Void();
	this.onComplete = new lime_app__$Event_$Dynamic_$Void();
	this.doWork = new lime_app__$Event_$Dynamic_$Void();
};
$hxClasses["lime.system.BackgroundWorker"] = lime_system_BackgroundWorker;
lime_system_BackgroundWorker.__name__ = ["lime","system","BackgroundWorker"];
lime_system_BackgroundWorker.prototype = {
	canceled: null
	,completed: null
	,doWork: null
	,onComplete: null
	,onError: null
	,onProgress: null
	,__runMessage: null
	,cancel: function() {
		this.canceled = true;
	}
	,run: function(message) {
		this.canceled = false;
		this.completed = false;
		this.__runMessage = message;
		this.__doWork();
	}
	,sendComplete: function(message) {
		this.completed = true;
		if(!this.canceled) {
			this.canceled = true;
			this.onComplete.dispatch(message);
		}
	}
	,sendError: function(message) {
		if(!this.canceled) {
			this.canceled = true;
			this.onError.dispatch(message);
		}
	}
	,sendProgress: function(message) {
		if(!this.canceled) this.onProgress.dispatch(message);
	}
	,__doWork: function() {
		this.doWork.dispatch(this.__runMessage);
	}
	,__update: function(deltaTime) {
	}
	,__class__: lime_system_BackgroundWorker
};
var lime_system_CFFI = function() { };
$hxClasses["lime.system.CFFI"] = lime_system_CFFI;
lime_system_CFFI.__name__ = ["lime","system","CFFI"];
lime_system_CFFI.load = function(library,method,args,lazy) {
	if(lazy == null) lazy = false;
	if(args == null) args = 0;
	if(!lime_system_CFFI.enabled) return Reflect.makeVarArgs(function(__) {
		return { };
	});
	var result = null;
	return result;
};
lime_system_CFFI.__findHaxelib = function(library) {
	return "";
};
lime_system_CFFI.__loaderTrace = function(message) {
};
lime_system_CFFI.__sysName = function() {
	return null;
};
lime_system_CFFI.__tryLoad = function(name,library,func,args) {
	return null;
};
var lime_system__$CFFIPointer_CFFIPointer_$Impl_$ = {};
$hxClasses["lime.system._CFFIPointer.CFFIPointer_Impl_"] = lime_system__$CFFIPointer_CFFIPointer_$Impl_$;
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.__name__ = ["lime","system","_CFFIPointer","CFFIPointer_Impl_"];
lime_system__$CFFIPointer_CFFIPointer_$Impl_$._new = function(handle) {
	return handle;
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get = function(this1) {
	if(this1 != null) {
	}
	return 0;
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.equals = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) == b;
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.equalsPointer = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) == lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(b);
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.greaterThan = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) > b;
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.greaterThanPointer = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) > lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(b);
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.greaterThanOrEqual = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) >= b;
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.greaterThanOrEqualPointer = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) >= lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(b);
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.lessThan = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) < b;
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.lessThanPointer = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) < lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(b);
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.lessThanOrEqual = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) <= b;
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.lessThanOrEqualPointer = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) <= lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(b);
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.notEquals = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) != b;
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.notEqualsPointer = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) != lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(b);
};
var lime_system_Clipboard = function() { };
$hxClasses["lime.system.Clipboard"] = lime_system_Clipboard;
lime_system_Clipboard.__name__ = ["lime","system","Clipboard"];
lime_system_Clipboard.__properties__ = {set_text:"set_text",get_text:"get_text"}
lime_system_Clipboard.get_text = function() {
	return lime_system_Clipboard._text;
	return null;
};
lime_system_Clipboard.set_text = function(value) {
	lime_system_Clipboard._text = value;
	if(window.document.queryCommandEnabled("copy")) window.document.execCommand("copy");
	return value;
	return null;
};
var lime_system_Display = function() {
};
$hxClasses["lime.system.Display"] = lime_system_Display;
lime_system_Display.__name__ = ["lime","system","Display"];
lime_system_Display.prototype = {
	bounds: null
	,currentMode: null
	,id: null
	,dpi: null
	,name: null
	,supportedModes: null
	,__class__: lime_system_Display
};
var lime_system_DisplayMode = function(width,height,refreshRate,pixelFormat) {
	this.width = width;
	this.height = height;
	this.refreshRate = refreshRate;
	this.pixelFormat = pixelFormat;
};
$hxClasses["lime.system.DisplayMode"] = lime_system_DisplayMode;
lime_system_DisplayMode.__name__ = ["lime","system","DisplayMode"];
lime_system_DisplayMode.prototype = {
	height: null
	,pixelFormat: null
	,refreshRate: null
	,width: null
	,__class__: lime_system_DisplayMode
};
var lime_system_Endian = $hxClasses["lime.system.Endian"] = { __ename__ : ["lime","system","Endian"], __constructs__ : ["LITTLE_ENDIAN","BIG_ENDIAN"] };
lime_system_Endian.LITTLE_ENDIAN = ["LITTLE_ENDIAN",0];
lime_system_Endian.LITTLE_ENDIAN.toString = $estr;
lime_system_Endian.LITTLE_ENDIAN.__enum__ = lime_system_Endian;
lime_system_Endian.BIG_ENDIAN = ["BIG_ENDIAN",1];
lime_system_Endian.BIG_ENDIAN.toString = $estr;
lime_system_Endian.BIG_ENDIAN.__enum__ = lime_system_Endian;
var lime_system_System = function() { };
$hxClasses["lime.system.System"] = lime_system_System;
lime_system_System.__name__ = ["lime","system","System"];
lime_system_System.__properties__ = {get_userDirectory:"get_userDirectory",get_numDisplays:"get_numDisplays",get_fontsDirectory:"get_fontsDirectory",get_endianness:"get_endianness",get_documentsDirectory:"get_documentsDirectory",get_desktopDirectory:"get_desktopDirectory",get_applicationStorageDirectory:"get_applicationStorageDirectory",get_applicationDirectory:"get_applicationDirectory",set_allowScreenTimeout:"set_allowScreenTimeout",get_allowScreenTimeout:"get_allowScreenTimeout"}
lime_system_System.exit = function(code) {
};
lime_system_System.getDisplay = function(id) {
	if(id == 0) {
		var display = new lime_system_Display();
		display.id = 0;
		display.name = "Generic Display";
		display.dpi = 96;
		display.currentMode = new lime_system_DisplayMode(window.screen.width,window.screen.height,60,1);
		display.supportedModes = [display.currentMode];
		display.bounds = new lime_math_Rectangle(0,0,display.currentMode.width,display.currentMode.height);
		return display;
	}
	return null;
};
lime_system_System.getTimer = function() {
	return new Date().getTime();
};
lime_system_System.load = function(library,method,args,lazy) {
	if(lazy == null) lazy = false;
	if(args == null) args = 0;
	return lime_system_CFFI.load(library,method,args,lazy);
};
lime_system_System.openFile = function(path) {
	if(path != null) window.open(path,"_blank");
};
lime_system_System.openURL = function(url,target) {
	if(target == null) target = "_blank";
	if(url != null) window.open(url,target);
};
lime_system_System.__getDirectory = function(type) {
	return null;
};
lime_system_System.get_allowScreenTimeout = function() {
	return true;
};
lime_system_System.set_allowScreenTimeout = function(value) {
	return true;
};
lime_system_System.get_applicationDirectory = function() {
	return lime_system_System.__getDirectory(0);
};
lime_system_System.get_applicationStorageDirectory = function() {
	return lime_system_System.__getDirectory(1);
};
lime_system_System.get_desktopDirectory = function() {
	return lime_system_System.__getDirectory(2);
};
lime_system_System.get_documentsDirectory = function() {
	return lime_system_System.__getDirectory(3);
};
lime_system_System.get_fontsDirectory = function() {
	return lime_system_System.__getDirectory(4);
};
lime_system_System.get_numDisplays = function() {
	return 1;
};
lime_system_System.get_userDirectory = function() {
	return lime_system_System.__getDirectory(5);
};
lime_system_System.get_endianness = function() {
	return lime_system_Endian.LITTLE_ENDIAN;
};
var lime_system_ThreadPool = function(minThreads,maxThreads) {
	if(maxThreads == null) maxThreads = 1;
	if(minThreads == null) minThreads = 0;
	this.onProgress = new lime_app__$Event_$Dynamic_$Void();
	this.onError = new lime_app__$Event_$Dynamic_$Void();
	this.onComplete = new lime_app__$Event_$Dynamic_$Void();
	this.doWork = new lime_app__$Event_$Dynamic_$Void();
	this.minThreads = minThreads;
	this.maxThreads = maxThreads;
	this.currentThreads = 0;
};
$hxClasses["lime.system.ThreadPool"] = lime_system_ThreadPool;
lime_system_ThreadPool.__name__ = ["lime","system","ThreadPool"];
lime_system_ThreadPool.prototype = {
	currentThreads: null
	,doWork: null
	,maxThreads: null
	,minThreads: null
	,onComplete: null
	,onError: null
	,onProgress: null
	,queue: function(state) {
		this.doWork.dispatch(state);
	}
	,sendComplete: function(state) {
		this.onComplete.dispatch(state);
	}
	,sendError: function(state) {
		this.onError.dispatch(state);
	}
	,sendProgress: function(state) {
		this.onProgress.dispatch(state);
	}
	,__class__: lime_system_ThreadPool
};
var lime_system__$ThreadPool_ThreadPoolMessageType = $hxClasses["lime.system._ThreadPool.ThreadPoolMessageType"] = { __ename__ : ["lime","system","_ThreadPool","ThreadPoolMessageType"], __constructs__ : ["COMPLETE","ERROR","EXIT","PROGRESS","WORK"] };
lime_system__$ThreadPool_ThreadPoolMessageType.COMPLETE = ["COMPLETE",0];
lime_system__$ThreadPool_ThreadPoolMessageType.COMPLETE.toString = $estr;
lime_system__$ThreadPool_ThreadPoolMessageType.COMPLETE.__enum__ = lime_system__$ThreadPool_ThreadPoolMessageType;
lime_system__$ThreadPool_ThreadPoolMessageType.ERROR = ["ERROR",1];
lime_system__$ThreadPool_ThreadPoolMessageType.ERROR.toString = $estr;
lime_system__$ThreadPool_ThreadPoolMessageType.ERROR.__enum__ = lime_system__$ThreadPool_ThreadPoolMessageType;
lime_system__$ThreadPool_ThreadPoolMessageType.EXIT = ["EXIT",2];
lime_system__$ThreadPool_ThreadPoolMessageType.EXIT.toString = $estr;
lime_system__$ThreadPool_ThreadPoolMessageType.EXIT.__enum__ = lime_system__$ThreadPool_ThreadPoolMessageType;
lime_system__$ThreadPool_ThreadPoolMessageType.PROGRESS = ["PROGRESS",3];
lime_system__$ThreadPool_ThreadPoolMessageType.PROGRESS.toString = $estr;
lime_system__$ThreadPool_ThreadPoolMessageType.PROGRESS.__enum__ = lime_system__$ThreadPool_ThreadPoolMessageType;
lime_system__$ThreadPool_ThreadPoolMessageType.WORK = ["WORK",4];
lime_system__$ThreadPool_ThreadPoolMessageType.WORK.toString = $estr;
lime_system__$ThreadPool_ThreadPoolMessageType.WORK.__enum__ = lime_system__$ThreadPool_ThreadPoolMessageType;
var lime_system__$ThreadPool_ThreadPoolMessage = function(type,state) {
	this.type = type;
	this.state = state;
};
$hxClasses["lime.system._ThreadPool.ThreadPoolMessage"] = lime_system__$ThreadPool_ThreadPoolMessage;
lime_system__$ThreadPool_ThreadPoolMessage.__name__ = ["lime","system","_ThreadPool","ThreadPoolMessage"];
lime_system__$ThreadPool_ThreadPoolMessage.prototype = {
	state: null
	,type: null
	,__class__: lime_system__$ThreadPool_ThreadPoolMessage
};
var lime_text__$Glyph_Glyph_$Impl_$ = {};
$hxClasses["lime.text._Glyph.Glyph_Impl_"] = lime_text__$Glyph_Glyph_$Impl_$;
lime_text__$Glyph_Glyph_$Impl_$.__name__ = ["lime","text","_Glyph","Glyph_Impl_"];
lime_text__$Glyph_Glyph_$Impl_$._new = function(i) {
	return i;
};
var lime_text_GlyphMetrics = function() {
};
$hxClasses["lime.text.GlyphMetrics"] = lime_text_GlyphMetrics;
lime_text_GlyphMetrics.__name__ = ["lime","text","GlyphMetrics"];
lime_text_GlyphMetrics.prototype = {
	advance: null
	,height: null
	,horizontalBearing: null
	,verticalBearing: null
	,__class__: lime_text_GlyphMetrics
};
var lime_text_GlyphPosition = function(glyph,advance,offset) {
	this.glyph = glyph;
	this.advance = advance;
	if(offset != null) this.offset = offset; else this.offset = new lime_math_Vector2();
};
$hxClasses["lime.text.GlyphPosition"] = lime_text_GlyphPosition;
lime_text_GlyphPosition.__name__ = ["lime","text","GlyphPosition"];
lime_text_GlyphPosition.prototype = {
	advance: null
	,glyph: null
	,offset: null
	,__class__: lime_text_GlyphPosition
};
var lime_text__$TextDirection_TextDirection_$Impl_$ = {};
$hxClasses["lime.text._TextDirection.TextDirection_Impl_"] = lime_text__$TextDirection_TextDirection_$Impl_$;
lime_text__$TextDirection_TextDirection_$Impl_$.__name__ = ["lime","text","_TextDirection","TextDirection_Impl_"];
lime_text__$TextDirection_TextDirection_$Impl_$.__properties__ = {get_vertical:"get_vertical",get_horizontal:"get_horizontal",get_forward:"get_forward",get_backward:"get_backward"}
lime_text__$TextDirection_TextDirection_$Impl_$.reverse = function(this1) {
	this1 = this1 ^ 1;
};
lime_text__$TextDirection_TextDirection_$Impl_$.toString = function(this1) {
	switch(this1) {
	case 4:
		return "leftToRight";
	case 5:
		return "rightToLeft";
	case 6:
		return "topToBottom";
	case 7:
		return "bottomToTop";
	default:
		return "";
	}
};
lime_text__$TextDirection_TextDirection_$Impl_$.get_backward = function(this1) {
	return (this1 & -3) == 5;
};
lime_text__$TextDirection_TextDirection_$Impl_$.get_forward = function(this1) {
	return (this1 & -3) == 4;
};
lime_text__$TextDirection_TextDirection_$Impl_$.get_horizontal = function(this1) {
	return (this1 & -2) == 4;
};
lime_text__$TextDirection_TextDirection_$Impl_$.get_vertical = function(this1) {
	return (this1 & -2) == 6;
};
var lime_text_TextLayout = function(text,font,size,direction,script,language) {
	if(language == null) language = "en";
	if(script == null) script = "Zyyy";
	if(direction == null) direction = 4;
	if(size == null) size = 12;
	if(text == null) text = "";
	this.set_text(text);
	this.set_font(font);
	this.set_size(size);
	this.__direction = direction;
	this.__script = script;
	this.__language = language;
	this.positions = [];
	this.__dirty = true;
};
$hxClasses["lime.text.TextLayout"] = lime_text_TextLayout;
lime_text_TextLayout.__name__ = ["lime","text","TextLayout"];
lime_text_TextLayout.prototype = {
	font: null
	,glyphs: null
	,positions: null
	,size: null
	,text: null
	,__dirty: null
	,__buffer: null
	,__direction: null
	,__handle: null
	,__language: null
	,__script: null
	,__position: function() {
		this.positions = [];
	}
	,get_positions: function() {
		if(this.__dirty) {
			this.__dirty = false;
			this.__position();
		}
		return this.positions;
	}
	,get_direction: function() {
		return this.__direction;
	}
	,set_direction: function(value) {
		if(value == this.__direction) return value;
		this.__direction = value;
		this.__dirty = true;
		return value;
	}
	,set_font: function(value) {
		if(value == this.font) return value;
		this.font = value;
		this.__dirty = true;
		return value;
	}
	,get_glyphs: function() {
		var glyphs = [];
		var _g = 0;
		var _g1 = this.get_positions();
		while(_g < _g1.length) {
			var position = _g1[_g];
			++_g;
			glyphs.push(position.glyph);
		}
		return glyphs;
	}
	,get_language: function() {
		return this.__language;
	}
	,set_language: function(value) {
		if(value == this.__language) return value;
		this.__language = value;
		this.__dirty = true;
		return value;
	}
	,get_script: function() {
		return this.__script;
	}
	,set_script: function(value) {
		if(value == this.__script) return value;
		this.__script = value;
		this.__dirty = true;
		return value;
	}
	,set_size: function(value) {
		if(value == this.size) return value;
		this.size = value;
		this.__dirty = true;
		return value;
	}
	,set_text: function(value) {
		if(value == this.text) return value;
		this.text = value;
		this.__dirty = true;
		return value;
	}
	,__class__: lime_text_TextLayout
	,__properties__: {set_text:"set_text",set_size:"set_size",set_script:"set_script",get_script:"get_script",get_positions:"get_positions",set_language:"set_language",get_language:"get_language",get_glyphs:"get_glyphs",set_font:"set_font",set_direction:"set_direction",get_direction:"get_direction"}
};
var lime_text__$TextScript_TextScript_$Impl_$ = {};
$hxClasses["lime.text._TextScript.TextScript_Impl_"] = lime_text__$TextScript_TextScript_$Impl_$;
lime_text__$TextScript_TextScript_$Impl_$.__name__ = ["lime","text","_TextScript","TextScript_Impl_"];
lime_text__$TextScript_TextScript_$Impl_$.__properties__ = {get_rightToLeft:"get_rightToLeft"}
lime_text__$TextScript_TextScript_$Impl_$.get_rightToLeft = function(this1) {
	switch(this1) {
	case "Hebr":case "Arab":case "Syrc":case "Thaa":case "Nkoo":case "Samr":case "Mand":case "Armi":case "Phnx":case "Lydi":case "Cprt":case "Khar":case "Sarb":case "Avst":case "Phli":case "Phlp":case "Orkh":
		return true;
	default:
		return false;
	}
};
var lime_ui_Gamepad = function(id) {
	this.onDisconnect = new lime_app__$Event_$Void_$Void();
	this.onButtonUp = new lime_app__$Event_$lime_$ui_$GamepadButton_$Void();
	this.onButtonDown = new lime_app__$Event_$lime_$ui_$GamepadButton_$Void();
	this.onAxisMove = new lime_app__$Event_$lime_$ui_$GamepadAxis_$Float_$Void();
	this.id = id;
	this.connected = true;
};
$hxClasses["lime.ui.Gamepad"] = lime_ui_Gamepad;
lime_ui_Gamepad.__name__ = ["lime","ui","Gamepad"];
lime_ui_Gamepad.addMappings = function(mappings) {
};
lime_ui_Gamepad.__connect = function(id) {
	if(!lime_ui_Gamepad.devices.h.hasOwnProperty(id)) {
		var gamepad = new lime_ui_Gamepad(id);
		lime_ui_Gamepad.devices.h[id] = gamepad;
		lime_ui_Gamepad.onConnect.dispatch(gamepad);
	}
};
lime_ui_Gamepad.__disconnect = function(id) {
	var gamepad = lime_ui_Gamepad.devices.h[id];
	if(gamepad != null) gamepad.connected = false;
	lime_ui_Gamepad.devices.remove(id);
	if(gamepad != null) gamepad.onDisconnect.dispatch();
};
lime_ui_Gamepad.prototype = {
	connected: null
	,id: null
	,onAxisMove: null
	,onButtonDown: null
	,onButtonUp: null
	,onDisconnect: null
	,get_guid: function() {
		var devices = lime_ui_Joystick.__getDeviceData();
		return devices[this.id].id;
	}
	,get_name: function() {
		var devices = lime_ui_Joystick.__getDeviceData();
		return devices[this.id].id;
	}
	,__class__: lime_ui_Gamepad
	,__properties__: {get_name:"get_name",get_guid:"get_guid"}
};
var lime_ui__$GamepadAxis_GamepadAxis_$Impl_$ = {};
$hxClasses["lime.ui._GamepadAxis.GamepadAxis_Impl_"] = lime_ui__$GamepadAxis_GamepadAxis_$Impl_$;
lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.__name__ = ["lime","ui","_GamepadAxis","GamepadAxis_Impl_"];
lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.toString = function(this1) {
	switch(this1) {
	case 0:
		return "LEFT_X";
	case 1:
		return "LEFT_Y";
	case 2:
		return "RIGHT_X";
	case 3:
		return "RIGHT_Y";
	case 4:
		return "TRIGGER_LEFT";
	case 5:
		return "TRIGGER_RIGHT";
	default:
		return "UNKNOWN (" + this1 + ")";
	}
};
var lime_ui__$GamepadButton_GamepadButton_$Impl_$ = {};
$hxClasses["lime.ui._GamepadButton.GamepadButton_Impl_"] = lime_ui__$GamepadButton_GamepadButton_$Impl_$;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.__name__ = ["lime","ui","_GamepadButton","GamepadButton_Impl_"];
lime_ui__$GamepadButton_GamepadButton_$Impl_$.toString = function(this1) {
	switch(this1) {
	case 0:
		return "A";
	case 1:
		return "B";
	case 2:
		return "X";
	case 3:
		return "Y";
	case 4:
		return "BACK";
	case 5:
		return "GUIDE";
	case 6:
		return "START";
	case 7:
		return "LEFT_STICK";
	case 8:
		return "RIGHT_STICK";
	case 9:
		return "LEFT_SHOULDER";
	case 10:
		return "RIGHT_SHOULDER";
	case 11:
		return "DPAD_UP";
	case 12:
		return "DPAD_DOWN";
	case 13:
		return "DPAD_LEFT";
	case 14:
		return "DPAD_RIGHT";
	default:
		return "UNKNOWN (" + this1 + ")";
	}
};
var lime_ui_Joystick = function(id) {
	this.onTrackballMove = new lime_app__$Event_$Int_$Float_$Void();
	this.onHatMove = new lime_app__$Event_$Int_$lime_$ui_$JoystickHatPosition_$Void();
	this.onDisconnect = new lime_app__$Event_$Void_$Void();
	this.onButtonUp = new lime_app__$Event_$Int_$Void();
	this.onButtonDown = new lime_app__$Event_$Int_$Void();
	this.onAxisMove = new lime_app__$Event_$Int_$Float_$Void();
	this.id = id;
	this.connected = true;
};
$hxClasses["lime.ui.Joystick"] = lime_ui_Joystick;
lime_ui_Joystick.__name__ = ["lime","ui","Joystick"];
lime_ui_Joystick.__connect = function(id) {
	if(!lime_ui_Joystick.devices.h.hasOwnProperty(id)) {
		var joystick = new lime_ui_Joystick(id);
		lime_ui_Joystick.devices.h[id] = joystick;
		lime_ui_Joystick.onConnect.dispatch(joystick);
	}
};
lime_ui_Joystick.__disconnect = function(id) {
	var joystick = lime_ui_Joystick.devices.h[id];
	if(joystick != null) joystick.connected = false;
	lime_ui_Joystick.devices.remove(id);
	if(joystick != null) joystick.onDisconnect.dispatch();
};
lime_ui_Joystick.__getDeviceData = function() {
	if(navigator.getGamepads) return navigator.getGamepads(); else if(navigator.webkitGetGamepads) return navigator.webkitGetGamepads(); else return null;
};
lime_ui_Joystick.prototype = {
	connected: null
	,id: null
	,onAxisMove: null
	,onButtonDown: null
	,onButtonUp: null
	,onDisconnect: null
	,onHatMove: null
	,onTrackballMove: null
	,get_guid: function() {
		var devices = lime_ui_Joystick.__getDeviceData();
		return devices[this.id].id;
	}
	,get_name: function() {
		var devices = lime_ui_Joystick.__getDeviceData();
		return devices[this.id].id;
	}
	,get_numAxes: function() {
		var devices = lime_ui_Joystick.__getDeviceData();
		return devices[this.id].axes.length;
	}
	,get_numButtons: function() {
		var devices = lime_ui_Joystick.__getDeviceData();
		return devices[this.id].buttons.length;
	}
	,get_numHats: function() {
		return 0;
	}
	,get_numTrackballs: function() {
		return 0;
	}
	,__class__: lime_ui_Joystick
	,__properties__: {get_numTrackballs:"get_numTrackballs",get_numHats:"get_numHats",get_numButtons:"get_numButtons",get_numAxes:"get_numAxes",get_name:"get_name",get_guid:"get_guid"}
};
var lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$ = {};
$hxClasses["lime.ui._JoystickHatPosition.JoystickHatPosition_Impl_"] = lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$;
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.__name__ = ["lime","ui","_JoystickHatPosition","JoystickHatPosition_Impl_"];
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.__properties__ = {set_up:"set_up",get_up:"get_up",set_right:"set_right",get_right:"get_right",set_left:"set_left",get_left:"get_left",set_down:"set_down",get_down:"get_down",set_center:"set_center",get_center:"get_center"}
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$._new = function(value) {
	return value;
};
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.get_center = function(this1) {
	return this1 == 0;
};
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.set_center = function(this1,value) {
	if(value) this1 = 0;
	return value;
};
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.get_down = function(this1) {
	return (this1 & 4) > 0;
};
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.set_down = function(this1,value) {
	if(value) this1 |= 4; else this1 &= 268435455 - 4;
	return value;
};
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.get_left = function(this1) {
	return (this1 & 8) > 0;
};
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.set_left = function(this1,value) {
	if(value) this1 |= 8; else this1 &= 268435455 - 8;
	return value;
};
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.get_right = function(this1) {
	return (this1 & 2) > 0;
};
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.set_right = function(this1,value) {
	if(value) this1 |= 2; else this1 &= 268435455 - 2;
	return value;
};
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.get_up = function(this1) {
	return (this1 & 1) > 0;
};
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.set_up = function(this1,value) {
	if(value) this1 |= 1; else this1 &= 268435455 - 1;
	return value;
};
var lime_ui__$KeyCode_KeyCode_$Impl_$ = {};
$hxClasses["lime.ui._KeyCode.KeyCode_Impl_"] = lime_ui__$KeyCode_KeyCode_$Impl_$;
lime_ui__$KeyCode_KeyCode_$Impl_$.__name__ = ["lime","ui","_KeyCode","KeyCode_Impl_"];
lime_ui__$KeyCode_KeyCode_$Impl_$.gt = function(a,b) {
	return a > b;
};
lime_ui__$KeyCode_KeyCode_$Impl_$.gte = function(a,b) {
	return a >= b;
};
lime_ui__$KeyCode_KeyCode_$Impl_$.lt = function(a,b) {
	return a < b;
};
lime_ui__$KeyCode_KeyCode_$Impl_$.lte = function(a,b) {
	return a <= b;
};
lime_ui__$KeyCode_KeyCode_$Impl_$.plus = function(a,b) {
	return a + b;
};
var lime_ui__$KeyModifier_KeyModifier_$Impl_$ = {};
$hxClasses["lime.ui._KeyModifier.KeyModifier_Impl_"] = lime_ui__$KeyModifier_KeyModifier_$Impl_$;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.__name__ = ["lime","ui","_KeyModifier","KeyModifier_Impl_"];
lime_ui__$KeyModifier_KeyModifier_$Impl_$.__properties__ = {set_shiftKey:"set_shiftKey",get_shiftKey:"get_shiftKey",set_numLock:"set_numLock",get_numLock:"get_numLock",set_metaKey:"set_metaKey",get_metaKey:"get_metaKey",set_ctrlKey:"set_ctrlKey",get_ctrlKey:"get_ctrlKey",set_capsLock:"set_capsLock",get_capsLock:"get_capsLock",set_altKey:"set_altKey",get_altKey:"get_altKey"}
lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_altKey = function(this1) {
	return (this1 & 256) > 0 || (this1 & 512) > 0;
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.set_altKey = function(this1,value) {
	if(value) this1 |= 768; else this1 &= 268435455 - 768;
	return value;
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_capsLock = function(this1) {
	return (this1 & 8192) > 0 || (this1 & 8192) > 0;
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.set_capsLock = function(this1,value) {
	if(value) this1 |= 8192; else this1 &= 268435455 - 8192;
	return value;
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_ctrlKey = function(this1) {
	return (this1 & 64) > 0 || (this1 & 128) > 0;
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.set_ctrlKey = function(this1,value) {
	if(value) this1 |= 192; else this1 &= 268435455 - 192;
	return value;
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_metaKey = function(this1) {
	return (this1 & 1024) > 0 || (this1 & 2048) > 0;
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.set_metaKey = function(this1,value) {
	if(value) this1 |= 3072; else this1 &= 268435455 - 3072;
	return value;
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_numLock = function(this1) {
	return (this1 & 4096) > 0 || (this1 & 4096) > 0;
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.set_numLock = function(this1,value) {
	if(value) this1 |= 4096; else this1 &= 268435455 - 4096;
	return value;
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey = function(this1) {
	return (this1 & 1) > 0 || (this1 & 2) > 0;
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.set_shiftKey = function(this1,value) {
	if(value) this1 |= 3; else this1 &= 268435455 - 3;
	return value;
};
var lime_ui_Mouse = function() { };
$hxClasses["lime.ui.Mouse"] = lime_ui_Mouse;
lime_ui_Mouse.__name__ = ["lime","ui","Mouse"];
lime_ui_Mouse.__properties__ = {set_lock:"set_lock",get_lock:"get_lock",set_cursor:"set_cursor",get_cursor:"get_cursor"}
lime_ui_Mouse.hide = function() {
	lime__$backend_html5_HTML5Mouse.hide();
};
lime_ui_Mouse.show = function() {
	lime__$backend_html5_HTML5Mouse.show();
};
lime_ui_Mouse.warp = function(x,y,window) {
	lime__$backend_html5_HTML5Mouse.warp(x,y,window);
};
lime_ui_Mouse.get_cursor = function() {
	return lime__$backend_html5_HTML5Mouse.get_cursor();
};
lime_ui_Mouse.set_cursor = function(value) {
	return lime__$backend_html5_HTML5Mouse.set_cursor(value);
};
lime_ui_Mouse.get_lock = function() {
	return lime__$backend_html5_HTML5Mouse.get_lock();
};
lime_ui_Mouse.set_lock = function(value) {
	return lime__$backend_html5_HTML5Mouse.set_lock(value);
};
var lime_ui_MouseCursor = $hxClasses["lime.ui.MouseCursor"] = { __ename__ : ["lime","ui","MouseCursor"], __constructs__ : ["ARROW","CROSSHAIR","DEFAULT","MOVE","POINTER","RESIZE_NESW","RESIZE_NS","RESIZE_NWSE","RESIZE_WE","TEXT","WAIT","WAIT_ARROW","CUSTOM"] };
lime_ui_MouseCursor.ARROW = ["ARROW",0];
lime_ui_MouseCursor.ARROW.toString = $estr;
lime_ui_MouseCursor.ARROW.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.CROSSHAIR = ["CROSSHAIR",1];
lime_ui_MouseCursor.CROSSHAIR.toString = $estr;
lime_ui_MouseCursor.CROSSHAIR.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.DEFAULT = ["DEFAULT",2];
lime_ui_MouseCursor.DEFAULT.toString = $estr;
lime_ui_MouseCursor.DEFAULT.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.MOVE = ["MOVE",3];
lime_ui_MouseCursor.MOVE.toString = $estr;
lime_ui_MouseCursor.MOVE.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.POINTER = ["POINTER",4];
lime_ui_MouseCursor.POINTER.toString = $estr;
lime_ui_MouseCursor.POINTER.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.RESIZE_NESW = ["RESIZE_NESW",5];
lime_ui_MouseCursor.RESIZE_NESW.toString = $estr;
lime_ui_MouseCursor.RESIZE_NESW.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.RESIZE_NS = ["RESIZE_NS",6];
lime_ui_MouseCursor.RESIZE_NS.toString = $estr;
lime_ui_MouseCursor.RESIZE_NS.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.RESIZE_NWSE = ["RESIZE_NWSE",7];
lime_ui_MouseCursor.RESIZE_NWSE.toString = $estr;
lime_ui_MouseCursor.RESIZE_NWSE.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.RESIZE_WE = ["RESIZE_WE",8];
lime_ui_MouseCursor.RESIZE_WE.toString = $estr;
lime_ui_MouseCursor.RESIZE_WE.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.TEXT = ["TEXT",9];
lime_ui_MouseCursor.TEXT.toString = $estr;
lime_ui_MouseCursor.TEXT.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.WAIT = ["WAIT",10];
lime_ui_MouseCursor.WAIT.toString = $estr;
lime_ui_MouseCursor.WAIT.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.WAIT_ARROW = ["WAIT_ARROW",11];
lime_ui_MouseCursor.WAIT_ARROW.toString = $estr;
lime_ui_MouseCursor.WAIT_ARROW.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.CUSTOM = ["CUSTOM",12];
lime_ui_MouseCursor.CUSTOM.toString = $estr;
lime_ui_MouseCursor.CUSTOM.__enum__ = lime_ui_MouseCursor;
var lime_ui_Touch = function(x,y,id,dx,dy,pressure,device) {
	this.x = x;
	this.y = y;
	this.id = id;
	this.dx = dx;
	this.dy = dy;
	this.pressure = pressure;
	this.device = device;
};
$hxClasses["lime.ui.Touch"] = lime_ui_Touch;
lime_ui_Touch.__name__ = ["lime","ui","Touch"];
lime_ui_Touch.prototype = {
	device: null
	,dx: null
	,dy: null
	,id: null
	,pressure: null
	,x: null
	,y: null
	,__class__: lime_ui_Touch
};
var lime_ui_Window = function(config) {
	this.onTextInput = new lime_app__$Event_$String_$Void();
	this.onTextEdit = new lime_app__$Event_$String_$Int_$Int_$Void();
	this.onRestore = new lime_app__$Event_$Void_$Void();
	this.onResize = new lime_app__$Event_$Int_$Int_$Void();
	this.onMove = new lime_app__$Event_$Float_$Float_$Void();
	this.onMouseWheel = new lime_app__$Event_$Float_$Float_$Void();
	this.onMouseUp = new lime_app__$Event_$Float_$Float_$Int_$Void();
	this.onMouseMoveRelative = new lime_app__$Event_$Float_$Float_$Void();
	this.onMouseMove = new lime_app__$Event_$Float_$Float_$Void();
	this.onMouseDown = new lime_app__$Event_$Float_$Float_$Int_$Void();
	this.onMinimize = new lime_app__$Event_$Void_$Void();
	this.onLeave = new lime_app__$Event_$Void_$Void();
	this.onKeyUp = new lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void();
	this.onKeyDown = new lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void();
	this.onFullscreen = new lime_app__$Event_$Void_$Void();
	this.onFocusOut = new lime_app__$Event_$Void_$Void();
	this.onFocusIn = new lime_app__$Event_$Void_$Void();
	this.onEnter = new lime_app__$Event_$Void_$Void();
	this.onDropFile = new lime_app__$Event_$String_$Void();
	this.onDeactivate = new lime_app__$Event_$Void_$Void();
	this.onCreate = new lime_app__$Event_$Void_$Void();
	this.onClose = new lime_app__$Event_$Void_$Void();
	this.onActivate = new lime_app__$Event_$Void_$Void();
	this.config = config;
	this.__width = 0;
	this.__height = 0;
	this.__fullscreen = false;
	this.__scale = 1;
	this.__x = 0;
	this.__y = 0;
	this.__title = "";
	this.id = -1;
	if(config != null) {
		if(Object.prototype.hasOwnProperty.call(config,"width")) this.__width = config.width;
		if(Object.prototype.hasOwnProperty.call(config,"height")) this.__height = config.height;
		if(Object.prototype.hasOwnProperty.call(config,"x")) this.__x = config.x;
		if(Object.prototype.hasOwnProperty.call(config,"y")) this.__y = config.y;
		if(Object.prototype.hasOwnProperty.call(config,"fullscreen")) this.__fullscreen = config.fullscreen;
		if(Object.prototype.hasOwnProperty.call(config,"borderless")) this.__borderless = config.borderless;
		if(Object.prototype.hasOwnProperty.call(config,"resizable")) this.__resizable = config.resizable;
		if(Object.prototype.hasOwnProperty.call(config,"title")) this.__title = config.title;
	}
	this.backend = new lime__$backend_html5_HTML5Window(this);
};
$hxClasses["lime.ui.Window"] = lime_ui_Window;
lime_ui_Window.__name__ = ["lime","ui","Window"];
lime_ui_Window.prototype = {
	application: null
	,config: null
	,display: null
	,id: null
	,onActivate: null
	,onClose: null
	,onCreate: null
	,onDeactivate: null
	,onDropFile: null
	,onEnter: null
	,onFocusIn: null
	,onFocusOut: null
	,onFullscreen: null
	,onKeyDown: null
	,onKeyUp: null
	,onLeave: null
	,onMinimize: null
	,onMouseDown: null
	,onMouseMove: null
	,onMouseMoveRelative: null
	,onMouseUp: null
	,onMouseWheel: null
	,onMove: null
	,onResize: null
	,onRestore: null
	,onTextEdit: null
	,onTextInput: null
	,renderer: null
	,scale: null
	,stage: null
	,backend: null
	,__borderless: null
	,__fullscreen: null
	,__height: null
	,__maximized: null
	,__minimized: null
	,__resizable: null
	,__scale: null
	,__title: null
	,__width: null
	,__x: null
	,__y: null
	,alert: function(message,title) {
		this.backend.alert(message,title);
	}
	,close: function() {
		this.backend.close();
	}
	,create: function(application) {
		this.application = application;
		this.backend.create(application);
		if(this.renderer != null) this.renderer.create();
	}
	,focus: function() {
		this.backend.focus();
	}
	,move: function(x,y) {
		this.backend.move(x,y);
		this.__x = x;
		this.__y = y;
	}
	,resize: function(width,height) {
		this.backend.resize(width,height);
		this.__width = width;
		this.__height = height;
	}
	,setIcon: function(image) {
		if(image == null) return;
		this.backend.setIcon(image);
	}
	,toString: function() {
		return "[object Window]";
	}
	,get_display: function() {
		return this.backend.getDisplay();
	}
	,get_borderless: function() {
		return this.__borderless;
	}
	,set_borderless: function(value) {
		return this.__borderless = this.backend.setBorderless(value);
	}
	,get_enableTextEvents: function() {
		return this.backend.getEnableTextEvents();
	}
	,set_enableTextEvents: function(value) {
		return this.backend.setEnableTextEvents(value);
	}
	,get_fullscreen: function() {
		return this.__fullscreen;
	}
	,set_fullscreen: function(value) {
		return this.__fullscreen = this.backend.setFullscreen(value);
	}
	,get_height: function() {
		return this.__height;
	}
	,set_height: function(value) {
		this.resize(this.__width,value);
		return this.__height;
	}
	,get_maximized: function() {
		return this.__maximized;
	}
	,set_maximized: function(value) {
		this.__minimized = false;
		return this.__maximized = this.backend.setMaximized(value);
	}
	,get_minimized: function() {
		return this.__minimized;
	}
	,set_minimized: function(value) {
		this.__maximized = false;
		return this.__minimized = this.backend.setMinimized(value);
	}
	,get_resizable: function() {
		return this.__resizable;
	}
	,set_resizable: function(value) {
		this.__resizable = this.backend.setResizable(value);
		return this.__resizable;
	}
	,get_scale: function() {
		return this.__scale;
	}
	,get_title: function() {
		return this.__title;
	}
	,set_title: function(value) {
		return this.__title = this.backend.setTitle(value);
	}
	,get_width: function() {
		return this.__width;
	}
	,set_width: function(value) {
		this.resize(value,this.__height);
		return this.__width;
	}
	,get_x: function() {
		return this.__x;
	}
	,set_x: function(value) {
		this.move(value,this.__y);
		return this.__x;
	}
	,get_y: function() {
		return this.__y;
	}
	,set_y: function(value) {
		this.move(this.__x,value);
		return this.__y;
	}
	,__class__: lime_ui_Window
	,__properties__: {set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x",set_width:"set_width",get_width:"get_width",set_title:"set_title",get_title:"get_title",get_scale:"get_scale",set_resizable:"set_resizable",get_resizable:"get_resizable",set_minimized:"set_minimized",get_minimized:"get_minimized",set_maximized:"set_maximized",get_maximized:"get_maximized",set_height:"set_height",get_height:"get_height",set_fullscreen:"set_fullscreen",get_fullscreen:"get_fullscreen",set_enableTextEvents:"set_enableTextEvents",get_enableTextEvents:"get_enableTextEvents",get_display:"get_display",set_borderless:"set_borderless",get_borderless:"get_borderless"}
};
var lime_utils_TAError = $hxClasses["lime.utils.TAError"] = { __ename__ : ["lime","utils","TAError"], __constructs__ : ["RangeError"] };
lime_utils_TAError.RangeError = ["RangeError",0];
lime_utils_TAError.RangeError.toString = $estr;
lime_utils_TAError.RangeError.__enum__ = lime_utils_TAError;
var lime_utils_AssetCache = function() {
	this.enabled = true;
	this.audio = new haxe_ds_StringMap();
	this.font = new haxe_ds_StringMap();
	this.image = new haxe_ds_StringMap();
	this.version = 656369;
};
$hxClasses["lime.utils.AssetCache"] = lime_utils_AssetCache;
lime_utils_AssetCache.__name__ = ["lime","utils","AssetCache"];
lime_utils_AssetCache.prototype = {
	audio: null
	,enabled: null
	,image: null
	,font: null
	,version: null
	,exists: function(id,type) {
		if(type == "IMAGE" || type == null) {
			if(this.image.exists(id)) return true;
		}
		if(type == "FONT" || type == null) {
			if(this.font.exists(id)) return true;
		}
		if(type == "SOUND" || type == "MUSIC" || type == null) {
			if(this.audio.exists(id)) return true;
		}
		return false;
	}
	,set: function(id,type,asset) {
		switch(type) {
		case "FONT":
			var value = asset;
			this.font.set(id,value);
			break;
		case "IMAGE":
			if(!js_Boot.__instanceof(asset,lime_graphics_Image)) throw new js__$Boot_HaxeError("Cannot cache non-Image asset: " + Std.string(asset) + " as Image");
			var value1 = asset;
			this.image.set(id,value1);
			break;
		case "SOUND":case "MUSIC":
			if(!js_Boot.__instanceof(asset,lime_audio_AudioBuffer)) throw new js__$Boot_HaxeError("Cannot cache non-AudioBuffer asset: " + Std.string(asset) + " as AudioBuffer");
			var value2 = asset;
			this.audio.set(id,value2);
			break;
		default:
			throw new js__$Boot_HaxeError(type + " assets are not cachable");
		}
	}
	,clear: function(prefix) {
		if(prefix == null) {
			this.audio = new haxe_ds_StringMap();
			this.font = new haxe_ds_StringMap();
			this.image = new haxe_ds_StringMap();
		} else {
			var keys = this.audio.keys();
			while( keys.hasNext() ) {
				var key = keys.next();
				if(StringTools.startsWith(key,prefix)) this.audio.remove(key);
			}
			var keys1 = this.font.keys();
			while( keys1.hasNext() ) {
				var key1 = keys1.next();
				if(StringTools.startsWith(key1,prefix)) this.font.remove(key1);
			}
			var keys2 = this.image.keys();
			while( keys2.hasNext() ) {
				var key2 = keys2.next();
				if(StringTools.startsWith(key2,prefix)) this.image.remove(key2);
			}
		}
	}
	,__class__: lime_utils_AssetCache
};
var lime_utils_AssetManifest = function() {
	this.assets = [];
	this.libraryArgs = [];
	this.version = 1;
};
$hxClasses["lime.utils.AssetManifest"] = lime_utils_AssetManifest;
lime_utils_AssetManifest.__name__ = ["lime","utils","AssetManifest"];
lime_utils_AssetManifest.fromBytes = function(bytes) {
	if(bytes != null) return lime_utils_AssetManifest.parse(bytes.getString(0,bytes.length)); else return null;
};
lime_utils_AssetManifest.fromFile = function(path) {
	return lime_utils_AssetManifest.fromBytes(lime_utils__$Bytes_Bytes_$Impl_$.fromFile(path));
};
lime_utils_AssetManifest.loadFromBytes = function(bytes) {
	return lime_app_Future.withValue(lime_utils_AssetManifest.fromBytes(bytes));
};
lime_utils_AssetManifest.loadFromFile = function(path) {
	return lime_utils__$Bytes_Bytes_$Impl_$.loadFromFile(path).then(function(bytes) {
		return lime_app_Future.withValue(lime_utils_AssetManifest.fromBytes(bytes));
	});
};
lime_utils_AssetManifest.parse = function(data) {
	var manifestData = JSON.parse(data);
	var manifest = new lime_utils_AssetManifest();
	if(manifestData.version == 1) {
		manifest.name = manifestData.name;
		manifest.libraryType = manifestData.libraryType;
		manifest.libraryArgs = manifestData.libraryArgs;
		manifest.assets = haxe_Unserializer.run(manifestData.assets);
	}
	return manifest;
};
lime_utils_AssetManifest.prototype = {
	assets: null
	,libraryArgs: null
	,libraryType: null
	,name: null
	,version: null
	,serialize: function() {
		var manifestData = { };
		manifestData.version = this.version;
		manifestData.libraryType = this.libraryType;
		manifestData.libraryArgs = this.libraryArgs;
		manifestData.name = this.name;
		manifestData.assets = haxe_Serializer.run(this.assets);
		return JSON.stringify(manifestData);
	}
	,__class__: lime_utils_AssetManifest
};
var lime_utils_Assets = function() { };
$hxClasses["lime.utils.Assets"] = lime_utils_Assets;
lime_utils_Assets.__name__ = ["lime","utils","Assets"];
lime_utils_Assets.exists = function(id,type) {
	if(type == null) type = "BINARY";
	var symbol = new lime_utils__$Assets_LibrarySymbol(id);
	if(symbol.library != null) return symbol.library.exists(symbol.symbolName,type);
	return false;
};
lime_utils_Assets.getAsset = function(id,type,useCache) {
	if(useCache && lime_utils_Assets.cache.enabled) switch(type) {
	case "BINARY":case "TEXT":
		useCache = false;
		break;
	case "FONT":
		var font = lime_utils_Assets.cache.font.get(id);
		if(font != null) return font;
		break;
	case "IMAGE":
		var image = lime_utils_Assets.cache.image.get(id);
		if(lime_utils_Assets.isValidImage(image)) return image;
		break;
	case "MUSIC":case "SOUND":
		var audio = lime_utils_Assets.cache.audio.get(id);
		if(lime_utils_Assets.isValidAudio(audio)) return audio;
		break;
	case "TEMPLATE":
		throw new js__$Boot_HaxeError("Not sure how to get template: " + id);
		break;
	}
	var symbol = new lime_utils__$Assets_LibrarySymbol(id);
	if(symbol.library != null) {
		if(symbol.library.exists(symbol.symbolName,type)) {
			if(symbol.library.isLocal(symbol.symbolName,type)) {
				var asset = symbol.library.getAsset(symbol.symbolName,type);
				if(useCache && lime_utils_Assets.cache.enabled) lime_utils_Assets.cache.set(id,type,asset);
				return asset;
			} else lime_utils_Log.info(type + " asset \"" + id + "\" exists, but only asynchronously",{ fileName : "Assets.hx", lineNumber : 145, className : "lime.utils.Assets", methodName : "getAsset"});
		} else lime_utils_Log.info("There is no " + type + " asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 151, className : "lime.utils.Assets", methodName : "getAsset"});
	} else lime_utils_Log.info("There is no asset library named \"" + symbol.libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 157, className : "lime.utils.Assets", methodName : "getAsset"});
	return null;
};
lime_utils_Assets.getAudioBuffer = function(id,useCache) {
	if(useCache == null) useCache = true;
	return lime_utils_Assets.getAsset(id,"SOUND",useCache);
};
lime_utils_Assets.getBytes = function(id) {
	return lime_utils_Assets.getAsset(id,"BINARY",false);
};
lime_utils_Assets.getFont = function(id,useCache) {
	if(useCache == null) useCache = true;
	return lime_utils_Assets.getAsset(id,"FONT",useCache);
};
lime_utils_Assets.getImage = function(id,useCache) {
	if(useCache == null) useCache = true;
	return lime_utils_Assets.getAsset(id,"IMAGE",useCache);
};
lime_utils_Assets.getLibrary = function(name) {
	if(name == null || name == "") name = "default";
	return lime_utils_Assets.libraries.get(name);
};
lime_utils_Assets.getPath = function(id) {
	var symbol = new lime_utils__$Assets_LibrarySymbol(id);
	if(symbol.library != null) {
		if(symbol.library.exists(symbol.symbolName,null)) return symbol.library.getPath(symbol.symbolName); else lime_utils_Log.info("There is no asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 253, className : "lime.utils.Assets", methodName : "getPath"});
	} else lime_utils_Log.info("There is no asset library named \"" + symbol.libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 259, className : "lime.utils.Assets", methodName : "getPath"});
	return null;
};
lime_utils_Assets.getText = function(id) {
	return lime_utils_Assets.getAsset(id,"TEXT",false);
};
lime_utils_Assets.isLocal = function(id,type,useCache) {
	if(useCache == null) useCache = true;
	if(useCache && lime_utils_Assets.cache.enabled) {
		if(lime_utils_Assets.cache.exists(id,type)) return true;
	}
	var symbol = new lime_utils__$Assets_LibrarySymbol(id);
	return symbol.library != null && symbol.library.isLocal(symbol.symbolName,type);
};
lime_utils_Assets.isValidAudio = function(buffer) {
	return buffer != null;
};
lime_utils_Assets.isValidImage = function(buffer) {
	return buffer != null;
};
lime_utils_Assets.list = function(type) {
	var items = [];
	var $it0 = lime_utils_Assets.libraries.iterator();
	while( $it0.hasNext() ) {
		var library = $it0.next();
		var libraryItems = library.list(type);
		if(libraryItems != null) items = items.concat(libraryItems);
	}
	return items;
};
lime_utils_Assets.loadAsset = function(id,type,useCache) {
	if(useCache && lime_utils_Assets.cache.enabled) switch(type) {
	case "BINARY":case "TEXT":
		useCache = false;
		break;
	case "FONT":
		var font = lime_utils_Assets.cache.font.get(id);
		if(font != null) return lime_app_Future.withValue(font);
		break;
	case "IMAGE":
		var image = lime_utils_Assets.cache.image.get(id);
		if(lime_utils_Assets.isValidImage(image)) return lime_app_Future.withValue(image);
		break;
	case "MUSIC":case "SOUND":
		var audio = lime_utils_Assets.cache.audio.get(id);
		if(lime_utils_Assets.isValidAudio(audio)) return lime_app_Future.withValue(audio);
		break;
	case "TEMPLATE":
		throw new js__$Boot_HaxeError("Not sure how to get template: " + id);
		break;
	}
	var symbol = new lime_utils__$Assets_LibrarySymbol(id);
	if(symbol.library != null) {
		if(symbol.library.exists(symbol.symbolName,type)) {
			var future = symbol.library.loadAsset(symbol.symbolName,type);
			if(useCache && lime_utils_Assets.cache.enabled) future.onComplete(function(asset) {
				lime_utils_Assets.cache.set(id,type,asset);
			});
			return future;
		} else return lime_app_Future.withError("[Assets] There is no " + type + " asset with an ID of \"" + id + "\"");
	} else return lime_app_Future.withError("[Assets] There is no asset library named \"" + symbol.libraryName + "\"");
};
lime_utils_Assets.loadAudioBuffer = function(id,useCache) {
	if(useCache == null) useCache = true;
	return lime_utils_Assets.loadAsset(id,"SOUND",useCache);
};
lime_utils_Assets.loadBytes = function(id) {
	return lime_utils_Assets.loadAsset(id,"BINARY",false);
};
lime_utils_Assets.loadFont = function(id,useCache) {
	if(useCache == null) useCache = true;
	return lime_utils_Assets.loadAsset(id,"FONT",useCache);
};
lime_utils_Assets.loadImage = function(id,useCache) {
	if(useCache == null) useCache = true;
	return lime_utils_Assets.loadAsset(id,"IMAGE",useCache);
};
lime_utils_Assets.loadLibrary = function(name) {
	var promise = new lime_app_Promise();
	var data = lime_utils_Assets.getText("libraries/" + name + ".json");
	if(data != null && data != "") {
		var library = lime_utils_AssetLibrary.fromManifest(lime_utils_AssetManifest.parse(data));
		lime_utils_Assets.libraries.set(name,library);
		library.onChange.add(($_=lime_utils_Assets.onChange,$bind($_,$_.dispatch)));
		promise.completeWith(library.load());
	} else promise.error("[Assets] There is no asset library named \"" + name + "\"");
	return promise.future;
};
lime_utils_Assets.loadText = function(id) {
	var promise = new lime_app_Promise();
	var symbol = new lime_utils__$Assets_LibrarySymbol(id);
	if(symbol.library != null) {
		if(symbol.library.exists(symbol.symbolName,"TEXT")) promise.completeWith(symbol.library.loadText(symbol.symbolName)); else promise.error("[Assets] There is no String asset with an ID of \"" + id + "\"");
	} else promise.error("[Assets] There is no asset library named \"" + symbol.libraryName + "\"");
	return promise.future;
};
lime_utils_Assets.registerLibrary = function(name,library) {
	if(lime_utils_Assets.libraries.exists(name)) {
		if(lime_utils_Assets.libraries.get(name) == library) return; else lime_utils_Assets.unloadLibrary(name);
	}
	if(library != null) library.onChange.add(lime_utils_Assets.library_onChange);
	lime_utils_Assets.libraries.set(name,library);
};
lime_utils_Assets.unloadLibrary = function(name) {
	var library = lime_utils_Assets.libraries.get(name);
	if(library != null) {
		lime_utils_Assets.cache.clear(name + ":");
		library.onChange.remove(lime_utils_Assets.library_onChange);
		library.unload();
	}
	lime_utils_Assets.libraries.remove(name);
};
lime_utils_Assets.library_onChange = function() {
	lime_utils_Assets.cache.clear();
	lime_utils_Assets.onChange.dispatch();
};
var lime_utils__$Assets_LibrarySymbol = function(id) {
	var colonIndex = id.indexOf(":");
	this.libraryName = id.substring(0,colonIndex);
	this.symbolName = id.substring(colonIndex + 1);
	this.library = lime_utils_Assets.getLibrary(this.libraryName);
};
$hxClasses["lime.utils._Assets.LibrarySymbol"] = lime_utils__$Assets_LibrarySymbol;
lime_utils__$Assets_LibrarySymbol.__name__ = ["lime","utils","_Assets","LibrarySymbol"];
lime_utils__$Assets_LibrarySymbol.prototype = {
	libraryName: null
	,symbolName: null
	,library: null
	,isLocal: function(type) {
		return this.library.isLocal(this.symbolName,type);
	}
	,exists: function(type) {
		return this.library.exists(this.symbolName,type);
	}
	,__class__: lime_utils__$Assets_LibrarySymbol
};
var lime_utils__$Bytes_Bytes_$Impl_$ = {};
$hxClasses["lime.utils._Bytes.Bytes_Impl_"] = lime_utils__$Bytes_Bytes_$Impl_$;
lime_utils__$Bytes_Bytes_$Impl_$.__name__ = ["lime","utils","_Bytes","Bytes_Impl_"];
lime_utils__$Bytes_Bytes_$Impl_$._new = function(length,bytesData) {
	return new haxe_io_Bytes(bytesData);
};
lime_utils__$Bytes_Bytes_$Impl_$.alloc = function(length) {
	var bytes = new haxe_io_Bytes(new ArrayBuffer(length));
	return lime_utils__$Bytes_Bytes_$Impl_$._new(bytes.length,bytes.b.bufferValue);
};
lime_utils__$Bytes_Bytes_$Impl_$.fastGet = function(b,pos) {
	return b.bytes[pos];
};
lime_utils__$Bytes_Bytes_$Impl_$.fromBytes = function(bytes) {
	return lime_utils__$Bytes_Bytes_$Impl_$._new(bytes.length,bytes.b.bufferValue);
};
lime_utils__$Bytes_Bytes_$Impl_$.fromFile = function(path) {
	return null;
};
lime_utils__$Bytes_Bytes_$Impl_$.loadFromBytes = function(bytes) {
	return lime_app_Future.withValue(lime_utils__$Bytes_Bytes_$Impl_$.fromBytes(bytes));
};
lime_utils__$Bytes_Bytes_$Impl_$.loadFromFile = function(path) {
	var request = new lime_net__$HTTPRequest_$lime_$utils_$Bytes();
	return request.load(path);
};
lime_utils__$Bytes_Bytes_$Impl_$.ofData = function(b) {
	var bytes = haxe_io_Bytes.ofData(b);
	return lime_utils__$Bytes_Bytes_$Impl_$._new(bytes.length,bytes.b.bufferValue);
};
lime_utils__$Bytes_Bytes_$Impl_$.ofString = function(s) {
	var bytes = haxe_io_Bytes.ofString(s);
	return lime_utils__$Bytes_Bytes_$Impl_$._new(bytes.length,bytes.b.bufferValue);
};
lime_utils__$Bytes_Bytes_$Impl_$.lime_bytes_from_data_pointer = function(data,length) {
	return lime_utils__$Bytes_Bytes_$Impl_$.cffi_lime_bytes_from_data_pointer(data,length);
};
lime_utils__$Bytes_Bytes_$Impl_$.lime_bytes_get_data_pointer = function(data) {
	return lime_utils__$Bytes_Bytes_$Impl_$.cffi_lime_bytes_get_data_pointer(data);
};
lime_utils__$Bytes_Bytes_$Impl_$.lime_bytes_read_file = function(path,bytes) {
	return lime_utils__$Bytes_Bytes_$Impl_$.cffi_lime_bytes_read_file(path,bytes);
};
var lime_utils__$Float32Array_Float32Array_$Impl_$ = {};
$hxClasses["lime.utils._Float32Array.Float32Array_Impl_"] = lime_utils__$Float32Array_Float32Array_$Impl_$;
lime_utils__$Float32Array_Float32Array_$Impl_$.__name__ = ["lime","utils","_Float32Array","Float32Array_Impl_"];
lime_utils__$Float32Array_Float32Array_$Impl_$.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) byteOffset = 0;
	if(byteOffset == null) return new Float32Array(bytes.b.bufferValue);
	if(len == null) return new Float32Array(bytes.b.bufferValue,byteOffset);
	return new Float32Array(bytes.b.bufferValue,byteOffset,len);
};
lime_utils__$Float32Array_Float32Array_$Impl_$.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
lime_utils__$Float32Array_Float32Array_$Impl_$.toString = function(this1) {
	if(this1 != null) return "Float32Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]"; else return null;
};
var lime_utils_GLUtils = function() { };
$hxClasses["lime.utils.GLUtils"] = lime_utils_GLUtils;
lime_utils_GLUtils.__name__ = ["lime","utils","GLUtils"];
lime_utils_GLUtils.compileShader = function(source,type) {
	var shader = lime_graphics_opengl_GL.context.createShader(type);
	lime_graphics_opengl_GL.context.shaderSource(shader,source);
	lime_graphics_opengl_GL.context.compileShader(shader);
	if(lime_graphics_opengl_GL.context.getShaderParameter(shader,35713) == 0) {
		var message;
		switch(type) {
		case 35633:
			message = "Error compiling vertex shader";
			break;
		case 35632:
			message = "Error compiling fragment shader";
			break;
		default:
			message = "Error compiling unknown shader type";
		}
		message += "\n" + lime_graphics_opengl_GL.context.getShaderInfoLog(shader);
		lime_utils_Log.error(message,{ fileName : "GLUtils.hx", lineNumber : 35, className : "lime.utils.GLUtils", methodName : "compileShader"});
	}
	return shader;
};
lime_utils_GLUtils.createProgram = function(vertexSource,fragmentSource) {
	var vertexShader = lime_utils_GLUtils.compileShader(vertexSource,35633);
	var fragmentShader = lime_utils_GLUtils.compileShader(fragmentSource,35632);
	var program = lime_graphics_opengl_GL.context.createProgram();
	lime_graphics_opengl_GL.context.attachShader(program,vertexShader);
	lime_graphics_opengl_GL.context.attachShader(program,fragmentShader);
	lime_graphics_opengl_GL.context.linkProgram(program);
	if(lime_graphics_opengl_GL.context.getProgramParameter(program,35714) == 0) lime_utils_Log.error("Unable to initialize the shader program",{ fileName : "GLUtils.hx", lineNumber : 56, className : "lime.utils.GLUtils", methodName : "createProgram"});
	return program;
};
var lime_utils__$Int16Array_Int16Array_$Impl_$ = {};
$hxClasses["lime.utils._Int16Array.Int16Array_Impl_"] = lime_utils__$Int16Array_Int16Array_$Impl_$;
lime_utils__$Int16Array_Int16Array_$Impl_$.__name__ = ["lime","utils","_Int16Array","Int16Array_Impl_"];
lime_utils__$Int16Array_Int16Array_$Impl_$.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) byteOffset = 0;
	if(byteOffset == null) return new Int16Array(bytes.b.bufferValue);
	if(len == null) return new Int16Array(bytes.b.bufferValue,byteOffset);
	return new Int16Array(bytes.b.bufferValue,byteOffset,len);
};
lime_utils__$Int16Array_Int16Array_$Impl_$.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
lime_utils__$Int16Array_Int16Array_$Impl_$.toString = function(this1) {
	if(this1 != null) return "Int16Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]"; else return null;
};
var lime_utils__$Int32Array_Int32Array_$Impl_$ = {};
$hxClasses["lime.utils._Int32Array.Int32Array_Impl_"] = lime_utils__$Int32Array_Int32Array_$Impl_$;
lime_utils__$Int32Array_Int32Array_$Impl_$.__name__ = ["lime","utils","_Int32Array","Int32Array_Impl_"];
lime_utils__$Int32Array_Int32Array_$Impl_$.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) byteOffset = 0;
	if(byteOffset == null) return new Int32Array(bytes.b.bufferValue);
	if(len == null) return new Int32Array(bytes.b.bufferValue,byteOffset);
	return new Int32Array(bytes.b.bufferValue,byteOffset,len);
};
lime_utils__$Int32Array_Int32Array_$Impl_$.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
lime_utils__$Int32Array_Int32Array_$Impl_$.toString = function(this1) {
	if(this1 != null) return "Int32Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]"; else return null;
};
var lime_utils_Log = function() { };
$hxClasses["lime.utils.Log"] = lime_utils_Log;
lime_utils_Log.__name__ = ["lime","utils","Log"];
lime_utils_Log.debug = function(message,info) {
	if(lime_utils_Log.level >= 4) console.log("[" + info.className + "] " + message);
};
lime_utils_Log.error = function(message,info) {
	if(lime_utils_Log.level >= 1) console.log("[" + info.className + "] ERROR: " + message);
};
lime_utils_Log.info = function(message,info) {
	if(lime_utils_Log.level >= 3) console.log("[" + info.className + "] " + message);
};
lime_utils_Log.print = function(message) {
	console.log(message);
};
lime_utils_Log.println = function(message) {
	console.log(message);
};
lime_utils_Log.verbose = function(message,info) {
	if(lime_utils_Log.level >= 5) console.log("[" + info.className + "] " + message);
};
lime_utils_Log.warn = function(message,info) {
	if(lime_utils_Log.level >= 2) console.log("[" + info.className + "] WARNING: " + message);
};
var lime_utils__$Log_LogLevel_$Impl_$ = {};
$hxClasses["lime.utils._Log.LogLevel_Impl_"] = lime_utils__$Log_LogLevel_$Impl_$;
lime_utils__$Log_LogLevel_$Impl_$.__name__ = ["lime","utils","_Log","LogLevel_Impl_"];
lime_utils__$Log_LogLevel_$Impl_$.gt = function(a,b) {
	return a > b;
};
lime_utils__$Log_LogLevel_$Impl_$.gte = function(a,b) {
	return a >= b;
};
lime_utils__$Log_LogLevel_$Impl_$.lt = function(a,b) {
	return a < b;
};
lime_utils__$Log_LogLevel_$Impl_$.lte = function(a,b) {
	return a <= b;
};
var lime_utils__$UInt32Array_UInt32Array_$Impl_$ = {};
$hxClasses["lime.utils._UInt32Array.UInt32Array_Impl_"] = lime_utils__$UInt32Array_UInt32Array_$Impl_$;
lime_utils__$UInt32Array_UInt32Array_$Impl_$.__name__ = ["lime","utils","_UInt32Array","UInt32Array_Impl_"];
lime_utils__$UInt32Array_UInt32Array_$Impl_$.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) byteOffset = 0;
	if(byteOffset == null) return new Uint32Array(bytes.b.bufferValue);
	if(len == null) return new Uint32Array(bytes.b.bufferValue,byteOffset);
	return new Uint32Array(bytes.b.bufferValue,byteOffset,len);
};
lime_utils__$UInt32Array_UInt32Array_$Impl_$.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
lime_utils__$UInt32Array_UInt32Array_$Impl_$.toString = function(this1) {
	if(this1 != null) return "UInt32Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]"; else return null;
};
var lime_utils__$UInt8Array_UInt8Array_$Impl_$ = {};
$hxClasses["lime.utils._UInt8Array.UInt8Array_Impl_"] = lime_utils__$UInt8Array_UInt8Array_$Impl_$;
lime_utils__$UInt8Array_UInt8Array_$Impl_$.__name__ = ["lime","utils","_UInt8Array","UInt8Array_Impl_"];
lime_utils__$UInt8Array_UInt8Array_$Impl_$.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) return new Uint8Array(bytes.b.bufferValue);
	if(len == null) return new Uint8Array(bytes.b.bufferValue,byteOffset);
	return new Uint8Array(bytes.b.bufferValue,byteOffset,len);
};
lime_utils__$UInt8Array_UInt8Array_$Impl_$.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
lime_utils__$UInt8Array_UInt8Array_$Impl_$.toString = function(this1) {
	if(this1 != null) return "UInt8Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]"; else return null;
};
var lime_utils_compress_Deflate = function() { };
$hxClasses["lime.utils.compress.Deflate"] = lime_utils_compress_Deflate;
lime_utils_compress_Deflate.__name__ = ["lime","utils","compress","Deflate"];
lime_utils_compress_Deflate.compress = function(bytes) {
	var data = pako.deflateRaw(bytes.b.bufferValue);
	return haxe_io_Bytes.ofData(data);
};
lime_utils_compress_Deflate.decompress = function(bytes) {
	var data = pako.inflateRaw(bytes.b.bufferValue);
	return haxe_io_Bytes.ofData(data);
};
var lime_utils_compress_LZMA = function() { };
$hxClasses["lime.utils.compress.LZMA"] = lime_utils_compress_LZMA;
lime_utils_compress_LZMA.__name__ = ["lime","utils","compress","LZMA"];
lime_utils_compress_LZMA.compress = function(bytes) {
	return null;
};
lime_utils_compress_LZMA.decompress = function(bytes) {
	return null;
};
var lime_utils_compress_Zlib = function() { };
$hxClasses["lime.utils.compress.Zlib"] = lime_utils_compress_Zlib;
lime_utils_compress_Zlib.__name__ = ["lime","utils","compress","Zlib"];
lime_utils_compress_Zlib.compress = function(bytes) {
	var data = pako.deflate(bytes.b.bufferValue);
	return haxe_io_Bytes.ofData(data);
};
lime_utils_compress_Zlib.decompress = function(bytes) {
	var data = pako.inflate(bytes.b.bufferValue);
	return haxe_io_Bytes.ofData(data);
};
var objects_AssimilationCavity = function(g,vx,vy,l) {
	objects_AreaObject.call(this,g,vx,vy);
	this.type = "habitat";
	this.name = "assimilation cavity";
	this.isStatic = true;
	this.level = l;
	this.entity = new entities_ObjectEntity(this,this.game,this.x,this.y,Const.ROW_ASSIMILATION,this.level);
	this.game.scene.add(this.entity);
};
$hxClasses["objects.AssimilationCavity"] = objects_AssimilationCavity;
objects_AssimilationCavity.__name__ = ["objects","AssimilationCavity"];
objects_AssimilationCavity.__super__ = objects_AreaObject;
objects_AssimilationCavity.prototype = $extend(objects_AreaObject.prototype,{
	level: null
	,updateActionsList: function() {
		if(this.game.player.state == _$PlayerState.PLR_STATE_HOST) {
			if(this.game.player.energy >= 0) this._listActions.add({ id : "assimilate", type : _$PlayerActionType.ACTION_OBJECT, name : "Assimilate", energy : 0, obj : this});
		}
	}
	,onAction: function(id) {
		this.game.log("Twisting tendrils wrap around the host, starting the assimilation process.");
	}
	,__class__: objects_AssimilationCavity
});
var objects_Biomineral = function(g,vx,vy,l) {
	objects_AreaObject.call(this,g,vx,vy);
	this.type = "habitat";
	this.name = "biomineral";
	this.isStatic = true;
	this.level = l;
	this.entity = new entities_ObjectEntity(this,this.game,this.x,this.y,Const.ROW_BIOMINERAL,this.level);
	this.game.scene.add(this.entity);
};
$hxClasses["objects.Biomineral"] = objects_Biomineral;
objects_Biomineral.__name__ = ["objects","Biomineral"];
objects_Biomineral.__super__ = objects_AreaObject;
objects_Biomineral.prototype = $extend(objects_AreaObject.prototype,{
	level: null
	,__class__: objects_Biomineral
});
var objects_BodyObject = function(g,vx,vy,parentType) {
	objects_AreaObject.call(this,g,vx,vy);
	this.inventory = new game_Inventory(g);
	this.type = "body";
	this.name = "body";
	this.isHumanBody = false;
	this.isSearched = false;
	this.organPoints = 0;
	this.createEntityByType(parentType);
};
$hxClasses["objects.BodyObject"] = objects_BodyObject;
objects_BodyObject.__name__ = ["objects","BodyObject"];
objects_BodyObject.__super__ = objects_AreaObject;
objects_BodyObject.prototype = $extend(objects_AreaObject.prototype,{
	inventory: null
	,isSearched: null
	,isHumanBody: null
	,organPoints: null
	,updateActionsList: function() {
		if(this.game.player.state != _$PlayerState.PLR_STATE_HOST) return;
		if(!this.isSearched && this.isHumanBody) {
			if(this.game.player.energy >= 10) this._listActions.add({ id : "searchBody", type : _$PlayerActionType.ACTION_OBJECT, name : "Search Body", energy : 10, obj : this});
		}
		if(this.isSearched) {
			var $it0 = this.inventory.iterator();
			while( $it0.hasNext() ) {
				var item = $it0.next();
				var name;
				if(Lambda.has(this.game.player.knownItems,item.id)) name = item.name; else name = item.info.unknown;
				if(this.game.player.energy >= 5) this._listActions.add({ id : "get." + item.id, type : _$PlayerActionType.ACTION_OBJECT, name : "Get " + name, energy : 5, obj : this});
			}
		}
	}
	,onAction: function(id) {
		if(id == "searchBody") this.searchAction(); else if(HxOverrides.substr(id,0,4) == "get.") this.getAction(HxOverrides.substr(id,4,null));
	}
	,getAction: function(id) {
		var $it0 = this.inventory.iterator();
		while( $it0.hasNext() ) {
			var item = $it0.next();
			if(item.id == id) {
				var tmpname;
				if(Lambda.has(this.game.player.knownItems,item.info.id)) tmpname = item.name; else tmpname = item.info.unknown;
				this.game.player.game.log("You pick the " + tmpname + " up.",null);
				this.game.player.host.inventory._list.add(item);
				this.inventory.remove(id);
				break;
			}
		}
	}
	,searchAction: function() {
		if(Std.random(100) < this.game.player.hostControl) this.game.log("Your host resists your command.");
		this.game.log("You've thoroughly searched the body.");
		this.isSearched = true;
	}
	,turn: function() {
		if(this.game.turns - this.creationTime < objects_BodyObject.DESPAWN_TURNS) return;
		if(!this.game.area.isHabitat) this.game.managerRegion.onBodyDiscovered(this.game.area,this.organPoints);
		this.game.scene.remove(this.entity);
		this.game.area._objects.remove(this.id);
	}
	,__class__: objects_BodyObject
});
var objects_EventObject = function(g,vx,vy,addToCurrent) {
	if(addToCurrent == null) addToCurrent = true;
	objects_AreaObject.call(this,g,vx,vy,addToCurrent);
	this.type = "event_object";
	this.name = "event object";
	this.isStatic = true;
	this.entity = new entities_ObjectEntity(this,this.game,this.x,this.y,Const.ROW_OBJECT,Const.FRAME_EVENT_OBJECT);
	this.game.scene.add(this.entity);
};
$hxClasses["objects.EventObject"] = objects_EventObject;
objects_EventObject.__name__ = ["objects","EventObject"];
objects_EventObject.__super__ = objects_AreaObject;
objects_EventObject.prototype = $extend(objects_AreaObject.prototype,{
	eventAction: null
	,eventOnAction: null
	,updateActionsList: function() {
		this.addActionFull(this.eventAction);
	}
	,onAction: function(id) {
		this.eventOnAction(this.game,this.game.player,id);
	}
	,__class__: objects_EventObject
});
var objects_GenericPickup = function(g,vx,vy,imgID) {
	objects_Pickup.call(this,g,vx,vy);
	this.entity = new entities_ObjectEntity(this,this.game,this.x,this.y,Const.ROW_OBJECT,imgID);
	this.game.scene.add(this.entity);
};
$hxClasses["objects.GenericPickup"] = objects_GenericPickup;
objects_GenericPickup.__name__ = ["objects","GenericPickup"];
objects_GenericPickup.__super__ = objects_Pickup;
objects_GenericPickup.prototype = $extend(objects_Pickup.prototype,{
	__class__: objects_GenericPickup
});
var objects_SewerHatch = function(g,vx,vy) {
	objects_AreaObject.call(this,g,vx,vy);
	this.type = "sewer_hatch";
	this.name = "sewer hatch";
	this.isStatic = true;
	this.entity = new entities_ObjectEntity(this,this.game,this.x,this.y,Const.ROW_OBJECT,Const.FRAME_SEWER_HATCH);
	this.game.scene.add(this.entity);
};
$hxClasses["objects.SewerHatch"] = objects_SewerHatch;
objects_SewerHatch.__name__ = ["objects","SewerHatch"];
objects_SewerHatch.__super__ = objects_AreaObject;
objects_SewerHatch.prototype = $extend(objects_AreaObject.prototype,{
	updateActionsList: function() {
		if(this.game.player.state != _$PlayerState.PLR_STATE_ATTACHED) {
			if(this.game.player.energy >= 10) this._listActions.add({ id : "enterSewers", type : _$PlayerActionType.ACTION_OBJECT, name : "Enter Sewers", energy : 10, obj : this});
		}
	}
	,onAction: function(id) {
		this.game.log("You enter the damp fetid sewers, escaping the prying eyes.");
		this.game.turns++;
		this.game.setLocation(_$LocationType.LOCATION_REGION);
	}
	,__class__: objects_SewerHatch
});
var openfl_IAssetCache = function() { };
$hxClasses["openfl.IAssetCache"] = openfl_IAssetCache;
openfl_IAssetCache.__name__ = ["openfl","IAssetCache"];
openfl_IAssetCache.prototype = {
	get_enabled: null
	,set_enabled: null
	,clear: null
	,getBitmapData: null
	,getFont: null
	,getSound: null
	,hasBitmapData: null
	,hasFont: null
	,hasSound: null
	,removeBitmapData: null
	,removeFont: null
	,removeSound: null
	,setBitmapData: null
	,setFont: null
	,setSound: null
	,__class__: openfl_IAssetCache
	,__properties__: {set_enabled:"set_enabled",get_enabled:"get_enabled"}
};
var openfl_AssetCache = function() {
	this.__enabled = true;
	this.bitmapData = new haxe_ds_StringMap();
	this.font = new haxe_ds_StringMap();
	this.sound = new haxe_ds_StringMap();
};
$hxClasses["openfl.AssetCache"] = openfl_AssetCache;
openfl_AssetCache.__name__ = ["openfl","AssetCache"];
openfl_AssetCache.__interfaces__ = [openfl_IAssetCache];
openfl_AssetCache.prototype = {
	bitmapData: null
	,font: null
	,sound: null
	,__enabled: null
	,clear: function(prefix) {
		if(prefix == null) {
			this.bitmapData = new haxe_ds_StringMap();
			this.font = new haxe_ds_StringMap();
			this.sound = new haxe_ds_StringMap();
		} else {
			var keys = this.bitmapData.keys();
			while( keys.hasNext() ) {
				var key = keys.next();
				if(StringTools.startsWith(key,prefix)) this.removeBitmapData(key);
			}
			var keys1 = this.font.keys();
			while( keys1.hasNext() ) {
				var key1 = keys1.next();
				if(StringTools.startsWith(key1,prefix)) this.removeFont(key1);
			}
			var keys2 = this.sound.keys();
			while( keys2.hasNext() ) {
				var key2 = keys2.next();
				if(StringTools.startsWith(key2,prefix)) this.removeSound(key2);
			}
		}
	}
	,getBitmapData: function(id) {
		return this.bitmapData.get(id);
	}
	,getFont: function(id) {
		return this.font.get(id);
	}
	,getSound: function(id) {
		return this.sound.get(id);
	}
	,hasBitmapData: function(id) {
		return this.bitmapData.exists(id);
	}
	,hasFont: function(id) {
		return this.font.exists(id);
	}
	,hasSound: function(id) {
		return this.sound.exists(id);
	}
	,removeBitmapData: function(id) {
		lime_utils_Assets.cache.image.remove(id);
		return this.bitmapData.remove(id);
	}
	,removeFont: function(id) {
		lime_utils_Assets.cache.font.remove(id);
		return this.font.remove(id);
	}
	,removeSound: function(id) {
		lime_utils_Assets.cache.audio.remove(id);
		return this.sound.remove(id);
	}
	,setBitmapData: function(id,bitmapData) {
		this.bitmapData.set(id,bitmapData);
	}
	,setFont: function(id,font) {
		this.font.set(id,font);
	}
	,setSound: function(id,sound) {
		this.sound.set(id,sound);
	}
	,get_enabled: function() {
		return this.__enabled;
	}
	,set_enabled: function(value) {
		return this.__enabled = value;
	}
	,__class__: openfl_AssetCache
	,__properties__: {set_enabled:"set_enabled",get_enabled:"get_enabled"}
};
var openfl_Assets = function() { };
$hxClasses["openfl.Assets"] = openfl_Assets;
openfl_Assets.__name__ = ["openfl","Assets"];
openfl_Assets.addEventListener = function(type,listener,useCapture,priority,useWeakReference) {
	if(useWeakReference == null) useWeakReference = false;
	if(priority == null) priority = 0;
	if(useCapture == null) useCapture = false;
	if(!lime_utils_Assets.onChange.has(openfl_Assets.LimeAssets_onChange)) lime_utils_Assets.onChange.add(openfl_Assets.LimeAssets_onChange);
	openfl_Assets.dispatcher.addEventListener(type,listener,useCapture,priority,useWeakReference);
};
openfl_Assets.dispatchEvent = function(event) {
	return openfl_Assets.dispatcher.dispatchEvent(event);
};
openfl_Assets.exists = function(id,type) {
	return lime_utils_Assets.exists(id,type);
};
openfl_Assets.getBitmapData = function(id,useCache) {
	if(useCache == null) useCache = true;
	if(useCache && openfl_Assets.cache.get_enabled() && openfl_Assets.cache.hasBitmapData(id)) {
		var bitmapData = openfl_Assets.cache.getBitmapData(id);
		if(openfl_Assets.isValidBitmapData(bitmapData)) return bitmapData;
	}
	var image = lime_utils_Assets.getImage(id,false);
	if(image != null) {
		var bitmapData1 = openfl_display_BitmapData.fromImage(image);
		if(useCache && openfl_Assets.cache.get_enabled()) openfl_Assets.cache.setBitmapData(id,bitmapData1);
		return bitmapData1;
	}
	return null;
};
openfl_Assets.getBytes = function(id) {
	return openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(lime_utils_Assets.getBytes(id));
};
openfl_Assets.getFont = function(id,useCache) {
	if(useCache == null) useCache = true;
	if(useCache && openfl_Assets.cache.get_enabled() && openfl_Assets.cache.hasFont(id)) return openfl_Assets.cache.getFont(id);
	var limeFont = lime_utils_Assets.getFont(id,false);
	if(limeFont != null) {
		var font = openfl_text_Font.__fromLimeFont(limeFont);
		if(useCache && openfl_Assets.cache.get_enabled()) openfl_Assets.cache.setFont(id,font);
		return font;
	}
	return new openfl_text_Font();
};
openfl_Assets.getLibrary = function(name) {
	return lime_utils_Assets.getLibrary(name);
};
openfl_Assets.getMovieClip = function(id) {
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = openfl_Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"MOVIE_CLIP")) {
			if(library.isLocal(symbolName,"MOVIE_CLIP")) return library.getMovieClip(symbolName); else lime_utils_Log.info("MovieClip asset \"" + id + "\" exists, but only asynchronously",{ fileName : "Assets.hx", lineNumber : 223, className : "openfl.Assets", methodName : "getMovieClip"});
		} else lime_utils_Log.info("There is no MovieClip asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 229, className : "openfl.Assets", methodName : "getMovieClip"});
	} else lime_utils_Log.info("There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 235, className : "openfl.Assets", methodName : "getMovieClip"});
	return null;
};
openfl_Assets.getMusic = function(id,useCache) {
	if(useCache == null) useCache = true;
	return openfl_Assets.getSound(id,useCache);
};
openfl_Assets.getPath = function(id) {
	return lime_utils_Assets.getPath(id);
};
openfl_Assets.getSound = function(id,useCache) {
	if(useCache == null) useCache = true;
	if(useCache && openfl_Assets.cache.get_enabled() && openfl_Assets.cache.hasSound(id)) {
		var sound = openfl_Assets.cache.getSound(id);
		if(openfl_Assets.isValidSound(sound)) return sound;
	}
	var buffer = lime_utils_Assets.getAudioBuffer(id,false);
	if(buffer != null) {
		var sound1 = openfl_media_Sound.fromAudioBuffer(buffer);
		if(useCache && openfl_Assets.cache.get_enabled()) openfl_Assets.cache.setSound(id,sound1);
		return sound1;
	}
	return null;
};
openfl_Assets.getText = function(id) {
	return lime_utils_Assets.getText(id);
};
openfl_Assets.hasEventListener = function(type) {
	return openfl_Assets.dispatcher.hasEventListener(type);
};
openfl_Assets.isLocal = function(id,type,useCache) {
	if(useCache == null) useCache = true;
	if(useCache && openfl_Assets.cache.get_enabled()) {
		if(type == "IMAGE" || type == null) {
			if(openfl_Assets.cache.hasBitmapData(id)) return true;
		}
		if(type == "FONT" || type == null) {
			if(openfl_Assets.cache.hasFont(id)) return true;
		}
		if(type == "SOUND" || type == "MUSIC" || type == null) {
			if(openfl_Assets.cache.hasSound(id)) return true;
		}
	}
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = openfl_Assets.getLibrary(libraryName);
	if(library != null) return library.isLocal(symbolName,type);
	return false;
};
openfl_Assets.isValidBitmapData = function(bitmapData) {
	return bitmapData != null && bitmapData.image != null;
};
openfl_Assets.isValidSound = function(sound) {
	return true;
};
openfl_Assets.list = function(type) {
	return lime_utils_Assets.list(type);
};
openfl_Assets.loadBitmapData = function(id,useCache,handler) {
	if(useCache == null) useCache = true;
	if(useCache == null) useCache = true;
	var promise = new lime_app_Promise();
	if(handler != null) {
		promise.future.onComplete(handler);
		promise.future.onError(function(_) {
			handler(null);
		});
	}
	if(useCache && openfl_Assets.cache.get_enabled() && openfl_Assets.cache.hasBitmapData(id)) {
		var bitmapData = openfl_Assets.cache.getBitmapData(id);
		if(openfl_Assets.isValidBitmapData(bitmapData)) {
			promise.complete(bitmapData);
			return promise.future;
		}
	}
	lime_utils_Assets.loadImage(id,false).onComplete(function(image) {
		if(image != null) {
			var bitmapData1 = openfl_display_BitmapData.fromImage(image);
			if(useCache && openfl_Assets.cache.get_enabled()) openfl_Assets.cache.setBitmapData(id,bitmapData1);
			promise.complete(bitmapData1);
		} else promise.error("[Assets] Could not load Image \"" + id + "\"");
	}).onError($bind(promise,promise.error)).onProgress($bind(promise,promise.progress));
	return promise.future;
};
openfl_Assets.loadBytes = function(id,handler) {
	var promise = new lime_app_Promise();
	var future = lime_utils_Assets.loadBytes(id);
	if(handler != null) {
		promise.future.onComplete(handler);
		promise.future.onError(function(_) {
			handler(null);
		});
	}
	future.onComplete(function(bytes) {
		promise.complete(openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(bytes));
	});
	future.onProgress(function(progress,total) {
		promise.progress(progress,total);
	});
	future.onError(function(msg) {
		promise.error(msg);
	});
	return promise.future;
};
openfl_Assets.loadFont = function(id,useCache,handler) {
	if(useCache == null) useCache = true;
	if(useCache == null) useCache = true;
	var promise = new lime_app_Promise();
	if(handler != null) {
		promise.future.onComplete(handler);
		promise.future.onError(function(_) {
			handler(null);
		});
	}
	if(useCache && openfl_Assets.cache.get_enabled() && openfl_Assets.cache.hasFont(id)) {
		promise.complete(openfl_Assets.cache.getFont(id));
		return promise.future;
	}
	lime_utils_Assets.loadFont(id).onComplete(function(limeFont) {
		var font = openfl_text_Font.__fromLimeFont(limeFont);
		if(useCache && openfl_Assets.cache.get_enabled()) openfl_Assets.cache.setFont(id,font);
		promise.complete(font);
	}).onError($bind(promise,promise.error)).onProgress($bind(promise,promise.progress));
	return promise.future;
};
openfl_Assets.loadLibrary = function(name,handler) {
	var future = lime_utils_Assets.loadLibrary(name);
	if(handler != null) {
		future.onComplete(handler);
		future.onError(function(_) {
			handler(null);
		});
	}
	return future;
};
openfl_Assets.loadMusic = function(id,useCache,handler) {
	if(useCache == null) useCache = true;
	if(useCache == null) useCache = true;
	return new lime_app_Future(function() {
		return openfl_Assets.getMusic(id,useCache);
	});
};
openfl_Assets.loadMovieClip = function(id,handler) {
	var promise = new lime_app_Promise();
	if(handler != null) {
		promise.future.onComplete(handler);
		promise.future.onError(function(_) {
			handler(null);
		});
	}
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName;
	var pos = id.indexOf(":") + 1;
	symbolName = HxOverrides.substr(id,pos,null);
	var library = openfl_Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"MOVIE_CLIP")) promise.completeWith(library.loadMovieClip(symbolName)); else promise.error("[Assets] There is no MovieClip asset with an ID of \"" + id + "\"");
	} else promise.error("[Assets] There is no asset library named \"" + libraryName + "\"");
	return promise.future;
};
openfl_Assets.loadSound = function(id,useCache,handler) {
	if(useCache == null) useCache = true;
	if(useCache == null) useCache = true;
	var promise = new lime_app_Promise();
	lime_utils_Assets.loadAudioBuffer(id,useCache).onComplete(function(buffer) {
		if(buffer != null) {
			var sound = openfl_media_Sound.fromAudioBuffer(buffer);
			if(useCache && openfl_Assets.cache.get_enabled()) openfl_Assets.cache.setSound(id,sound);
			promise.complete(sound);
		} else promise.error("[Assets] Could not load Sound \"" + id + "\"");
	}).onError($bind(promise,promise.error)).onProgress($bind(promise,promise.progress));
	return promise.future;
};
openfl_Assets.loadText = function(id,handler) {
	var future = lime_utils_Assets.loadText(id);
	if(handler != null) {
		future.onComplete(handler);
		future.onError(function(_) {
			handler(null);
		});
	}
	return future;
};
openfl_Assets.registerLibrary = function(name,library) {
	lime_utils_Assets.registerLibrary(name,library);
};
openfl_Assets.removeEventListener = function(type,listener,capture) {
	if(capture == null) capture = false;
	openfl_Assets.dispatcher.removeEventListener(type,listener,capture);
};
openfl_Assets.resolveClass = function(name) {
	return Type.resolveClass(name);
};
openfl_Assets.resolveEnum = function(name) {
	var value = Type.resolveEnum(name);
	return value;
};
openfl_Assets.unloadLibrary = function(name) {
	lime_utils_Assets.unloadLibrary(name);
};
openfl_Assets.LimeAssets_onChange = function() {
	openfl_Assets.dispatchEvent(new openfl_events_Event("change"));
};
var openfl_AssetLibrary = function() {
	lime_utils_AssetLibrary.call(this);
};
$hxClasses["openfl.AssetLibrary"] = openfl_AssetLibrary;
openfl_AssetLibrary.__name__ = ["openfl","AssetLibrary"];
openfl_AssetLibrary.__super__ = lime_utils_AssetLibrary;
openfl_AssetLibrary.prototype = $extend(lime_utils_AssetLibrary.prototype,{
	getMovieClip: function(id) {
		return null;
	}
	,loadMovieClip: function(id) {
		var _g = this;
		return new lime_app_Future(function() {
			return _g.getMovieClip(id);
		});
	}
	,__class__: openfl_AssetLibrary
});
var openfl_display_MovieClip = function() {
	openfl_display_Sprite.call(this);
	this.__currentFrame = 0;
	this.__currentLabels = [];
	this.__totalFrames = 0;
	this.enabled = true;
	if(openfl_display_MovieClip.__initSymbol != null) {
		this.__swf = openfl_display_MovieClip.__initSWF;
		this.__symbol = openfl_display_MovieClip.__initSymbol;
		openfl_display_MovieClip.__initSWF = null;
		openfl_display_MovieClip.__initSymbol = null;
		this.__fromSymbol(this.__swf,this.__symbol);
	}
};
$hxClasses["openfl.display.MovieClip"] = openfl_display_MovieClip;
openfl_display_MovieClip.__name__ = ["openfl","display","MovieClip"];
openfl_display_MovieClip.__super__ = openfl_display_Sprite;
openfl_display_MovieClip.prototype = $extend(openfl_display_Sprite.prototype,{
	enabled: null
	,__currentFrame: null
	,__currentFrameLabel: null
	,__currentLabel: null
	,__currentLabels: null
	,__frameScripts: null
	,__frameTime: null
	,__lastUpdate: null
	,__objectDepths: null
	,__objects: null
	,__playing: null
	,__swf: null
	,__symbol: null
	,__timeElapsed: null
	,__totalFrames: null
	,__zeroSymbol: null
	,addFrameScript: function(index,method) {
		if(method != null) {
			if(this.__frameScripts == null) this.__frameScripts = new haxe_ds_IntMap();
			this.__frameScripts.h[index] = method;
		} else if(this.__frameScripts != null) this.__frameScripts.remove(index);
	}
	,gotoAndPlay: function(frame,scene) {
		if(this.__symbol != null) {
			this.__currentFrame = this.__getFrame(frame);
			this.__updateFrame();
			this.play();
		}
	}
	,gotoAndStop: function(frame,scene) {
		if(this.__symbol != null) {
			this.__currentFrame = this.__getFrame(frame);
			this.__updateFrame();
			this.stop();
		}
	}
	,nextFrame: function() {
		if(this.__symbol != null) {
			var next = this.__currentFrame + 1;
			if(next > this.__totalFrames) next = this.__totalFrames;
			this.gotoAndStop(next);
		}
	}
	,play: function() {
		if(this.__symbol != null) {
			if(!this.__playing && this.__totalFrames > 1) {
				this.__playing = true;
				this.__frameTime = 1000 / this.__swf.frameRate | 0;
				this.__timeElapsed = 0;
			}
		}
	}
	,prevFrame: function() {
		if(this.__symbol != null) {
			var previous = this.__currentFrame - 1;
			if(previous < 1) previous = 1;
			this.gotoAndStop(previous);
		}
	}
	,stop: function() {
		if(this.__symbol != null) {
			if(this.__playing) this.__playing = false;
		}
	}
	,__applyTween: function(start,end,ratio) {
		return start + (end - start) * ratio;
	}
	,__enterFrame: function(deltaTime) {
		if(this.__symbol != null) {
			if(this.__playing) {
				this.__timeElapsed += deltaTime;
				var advanceFrames = Math.floor(this.__timeElapsed / this.__frameTime);
				this.__timeElapsed = this.__timeElapsed % this.__frameTime;
				if(this.__frameScripts != null) {
					var _g = 0;
					while(_g < advanceFrames) {
						var i = _g++;
						this.__currentFrame++;
						if(this.__currentFrame > this.__totalFrames) this.__currentFrame = 1;
						if(this.__frameScripts.h.hasOwnProperty(this.__currentFrame - 1)) {
							this.__frameScripts.h[this.__currentFrame - 1]();
							if(!this.__playing) break;
						}
					}
				} else {
					this.__currentFrame += advanceFrames;
					while(this.__currentFrame > this.__totalFrames) this.__currentFrame -= this.__totalFrames;
				}
				this.__updateFrame();
			}
		}
		openfl_display_Sprite.prototype.__enterFrame.call(this,deltaTime);
	}
	,__fromSymbol: function(swf,symbol) {
		if(this.__objects != null) return;
		this.__swf = swf;
		this.__symbol = symbol;
		this.__lastUpdate = -1;
		this.__objectDepths = [];
		this.__objects = new haxe_ds_IntMap();
		this.__zeroSymbol = -1;
		this.__currentFrame = 1;
		this.__totalFrames = this.__symbol.frames.length;
		var _g1 = 0;
		var _g = this.__symbol.frames.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.__symbol.frames[i].label != null) this.__currentLabels.push(new openfl_display_FrameLabel(this.__symbol.frames[i].label,i + 1));
		}
		this.__updateFrame();
		var _g2 = 0;
		var _g11 = Type.getInstanceFields(js_Boot.getClass(this));
		while(_g2 < _g11.length) {
			var field = _g11[_g2];
			++_g2;
			var _g21 = 0;
			var _g3 = this.__children;
			while(_g21 < _g3.length) {
				var child = _g3[_g21];
				++_g21;
				if(child.get_name() == field) this[field] = child;
			}
		}
		if(this.__totalFrames > 1) this.play();
	}
	,__getFrame: function(frame) {
		if(((frame | 0) === frame)) {
			var index = frame;
			if(index < 1) return 1;
			if(index > this.__totalFrames) return this.__totalFrames;
			return index;
		} else if(typeof(frame) == "string") {
			var label = frame;
			var _g = 0;
			var _g1 = this.__currentLabels;
			while(_g < _g1.length) {
				var frameLabel = _g1[_g];
				++_g;
				if(frameLabel.get_name() == label) return frameLabel.get_frame();
			}
		}
		return 1;
	}
	,__placeObject: function(displayObject,frameObject) {
		if(frameObject.name != null) displayObject.set_name(frameObject.name);
		if(frameObject.matrix != null) displayObject.get_transform().set_matrix(frameObject.matrix);
		if(frameObject.colorTransform != null) displayObject.get_transform().set_colorTransform(frameObject.colorTransform);
		if(frameObject.filters != null) {
			var filters = [];
			var _g = 0;
			var _g1 = frameObject.filters;
			while(_g < _g1.length) {
				var filter = _g1[_g];
				++_g;
				switch(filter[1]) {
				case 0:
					var quality = filter[4];
					var blurY = filter[3];
					var blurX = filter[2];
					filters.push(new openfl_filters_BlurFilter(blurX,blurY,quality));
					break;
				case 1:
					var matrix = filter[2];
					filters.push(new openfl_filters_ColorMatrixFilter(matrix));
					break;
				case 2:
					var hideObject = filter[12];
					var knockout = filter[11];
					var inner = filter[10];
					var quality1 = filter[9];
					var strength = filter[8];
					var blurY1 = filter[7];
					var blurX1 = filter[6];
					var alpha = filter[5];
					var color = filter[4];
					var angle = filter[3];
					var distance = filter[2];
					filters.push(new openfl_filters_DropShadowFilter(distance,angle,color,alpha,blurX1,blurY1,strength,quality1,inner,knockout,hideObject));
					break;
				case 3:
					var knockout1 = filter[9];
					var inner1 = filter[8];
					var quality2 = filter[7];
					var strength1 = filter[6];
					var blurY2 = filter[5];
					var blurX2 = filter[4];
					var alpha1 = filter[3];
					var color1 = filter[2];
					filters.push(new openfl_filters_GlowFilter(color1,alpha1,blurX2,blurY2,strength1,quality2,inner1,knockout1));
					break;
				}
			}
			displayObject.set_filters(filters);
		}
		displayObject.set_visible(frameObject.visible);
	}
	,__renderFrame: function(index) {
		var previousIndex = this.__lastUpdate - 1;
		if(previousIndex > index) {
			var timelineObject1;
			var exists;
			var i = 0;
			while(i < this.__objectDepths.length) {
				timelineObject1 = this.__objectDepths[i];
				exists = false;
				var _g = 0;
				var _g1 = this.__symbol.frames[0].objects;
				while(_g < _g1.length) {
					var frameObject = _g1[_g];
					++_g;
					if(frameObject.id == timelineObject1.id) {
						exists = true;
						break;
					}
				}
				if(!exists) {
					if(timelineObject1.displayObject.parent == this) this.removeChild(timelineObject1.displayObject);
					this.__objectDepths.splice(i,1);
				} else i++;
			}
			previousIndex = 0;
		}
		var frame;
		var timelineObject;
		var displayObject;
		var depth;
		var symbol;
		var mask = null;
		var maskObject = null;
		var depthChange = false;
		var _g11 = previousIndex;
		var _g2 = index + 1;
		while(_g11 < _g2) {
			var i1 = _g11++;
			if(i1 < 0) continue;
			frame = this.__symbol.frames[i1];
			var _g21 = 0;
			var _g3 = frame.objects;
			while(_g21 < _g3.length) {
				var frameObject1 = _g3[_g21];
				++_g21;
				if(frameObject1.type != openfl__$internal_timeline_FrameObjectType.DESTROY) {
					if(frameObject1.id == 0 && frameObject1.symbol != this.__zeroSymbol) {
						timelineObject = this.__objects.h[0];
						if(timelineObject != null && timelineObject.displayObject.parent == this) this.removeChild(timelineObject.displayObject);
						var x = this.__objects.h[0];
						HxOverrides.remove(this.__objectDepths,x);
						timelineObject = null;
						this.__zeroSymbol = frameObject1.symbol;
					}
					displayObject = null;
					if(!this.__objects.h.hasOwnProperty(frameObject1.id)) {
						if(this.__swf.symbols.h.hasOwnProperty(frameObject1.symbol)) {
							symbol = this.__swf.symbols.h[frameObject1.symbol];
							displayObject = symbol.__createObject(this.__swf);
						}
						if(displayObject != null) {
							timelineObject = new openfl_display__$MovieClip_TimelineObject(frameObject1.id,frameObject1.depth,displayObject);
							this.__objectDepths.push(timelineObject);
							depthChange = true;
							this.__objects.h[frameObject1.id] = timelineObject;
						}
					} else {
						timelineObject = this.__objects.h[frameObject1.id];
						displayObject = timelineObject.displayObject;
						if(timelineObject.displayObject.parent == null) {
							this.__objectDepths.push(timelineObject);
							depthChange = true;
						}
					}
					if(displayObject != null) {
						this.__placeObject(displayObject,frameObject1);
						if(mask != null) {
							if(mask.clipDepth < frameObject1.depth) mask = null; else displayObject.set_mask(maskObject);
						} else displayObject.set_mask(null);
						if(frameObject1.clipDepth != 0) {
							mask = frameObject1;
							displayObject.set_visible(false);
							maskObject = displayObject;
						}
					}
				} else if(this.__objects.h.hasOwnProperty(frameObject1.id)) {
					timelineObject = this.__objects.h[frameObject1.id];
					if(timelineObject != null && timelineObject.displayObject.parent == this) this.removeChild(timelineObject.displayObject);
					HxOverrides.remove(this.__objectDepths,timelineObject);
					depthChange = true;
				}
			}
		}
		if(depthChange) {
			this.__objectDepths.sort($bind(this,this.__sortTimelineDepth));
			var i2 = this.__objectDepths.length - 1;
			while(i2 >= 0) {
				timelineObject = this.__objectDepths[i2];
				this.addChildAt(timelineObject.displayObject,0);
				i2--;
			}
		}
	}
	,__sortTimelineDepth: function(a,b) {
		return a.depth - b.depth;
	}
	,__stopAllMovieClips: function() {
		openfl_display_Sprite.prototype.__stopAllMovieClips.call(this);
		this.stop();
	}
	,__updateFrame: function() {
		if(this.__currentFrame != this.__lastUpdate) {
			var frameIndex = this.__currentFrame - 1;
			if(frameIndex > -1) {
				if(this.__symbol.frames.length > frameIndex && this.__symbol.frames[frameIndex] != null) this.__currentFrameLabel = this.__symbol.frames[frameIndex].label; else this.__currentFrameLabel = null;
				if(this.__currentFrameLabel != null) this.__currentLabel = this.__currentFrameLabel; else if(this.__currentFrame != this.__lastUpdate + 1) {
					this.__currentLabel = null;
					var _g = 0;
					var _g1 = this.__currentLabels;
					while(_g < _g1.length) {
						var label = _g1[_g];
						++_g;
						if(label.get_frame() <= this.__currentFrame) this.__currentLabel = label.get_name(); else break;
					}
				}
				this.__renderFrame(frameIndex);
			}
			this.__renderDirty = true;
			openfl_display_DisplayObject.__worldRenderDirty++;
		}
		this.__lastUpdate = this.__currentFrame;
	}
	,get_currentFrame: function() {
		return this.__currentFrame;
	}
	,get_currentFrameLabel: function() {
		return this.__currentFrameLabel;
	}
	,get_currentLabel: function() {
		return this.__currentLabel;
	}
	,get_currentLabels: function() {
		return this.__currentLabels;
	}
	,get_framesLoaded: function() {
		return this.__totalFrames;
	}
	,get_totalFrames: function() {
		return this.__totalFrames;
	}
	,__class__: openfl_display_MovieClip
	,__properties__: $extend(openfl_display_Sprite.prototype.__properties__,{get_totalFrames:"get_totalFrames",get_framesLoaded:"get_framesLoaded",get_currentLabels:"get_currentLabels",get_currentLabel:"get_currentLabel",get_currentFrameLabel:"get_currentFrameLabel",get_currentFrame:"get_currentFrame"})
});
var openfl_Lib = function() { };
$hxClasses["openfl.Lib"] = openfl_Lib;
openfl_Lib.__name__ = ["openfl","Lib"];
openfl_Lib["as"] = function(v,c) {
	if(js_Boot.__instanceof(v,c)) return v; else return null;
};
openfl_Lib.attach = function(name) {
	return new openfl_display_MovieClip();
};
openfl_Lib.getTimer = function() {
	return lime_system_System.getTimer();
};
openfl_Lib.getURL = function(request,target) {
	if(target == null) target = "_blank";
	lime_system_System.openURL(request.url,target);
};
openfl_Lib.notImplemented = function(posInfo) {
	var api = posInfo.className + "." + posInfo.methodName;
	if(!openfl_Lib.__sentWarnings.exists(api)) {
		openfl_Lib.__sentWarnings.set(api,true);
		lime_utils_Log.warn(posInfo.methodName + " is not implemented",posInfo);
	}
};
openfl_Lib.preventDefaultTouchMove = function() {
	window.document.addEventListener("touchmove",function(evt) {
		evt.preventDefault();
	},false);
};
openfl_Lib.trace = function(arg) {
	haxe_Log.trace(arg,{ fileName : "Lib.hx", lineNumber : 151, className : "openfl.Lib", methodName : "trace"});
};
var openfl__$Vector_IVector = function() { };
$hxClasses["openfl._Vector.IVector"] = openfl__$Vector_IVector;
openfl__$Vector_IVector.__name__ = ["openfl","_Vector","IVector"];
openfl__$Vector_IVector.prototype = {
	get_length: null
	,set_length: null
	,fixed: null
	,concat: null
	,copy: null
	,get: null
	,indexOf: null
	,insertAt: null
	,iterator: null
	,join: null
	,lastIndexOf: null
	,pop: null
	,push: null
	,reverse: null
	,set: null
	,shift: null
	,slice: null
	,sort: null
	,splice: null
	,toString: null
	,unshift: null
	,__class__: openfl__$Vector_IVector
	,__properties__: {set_length:"set_length",get_length:"get_length"}
};
var openfl__$Vector_BoolVector = function(length,fixed,array) {
	if(array == null) array = [];
	this.__array = array;
	if(length != null) this.set_length(length);
	this.fixed = fixed == true;
};
$hxClasses["openfl._Vector.BoolVector"] = openfl__$Vector_BoolVector;
openfl__$Vector_BoolVector.__name__ = ["openfl","_Vector","BoolVector"];
openfl__$Vector_BoolVector.__interfaces__ = [openfl__$Vector_IVector];
openfl__$Vector_BoolVector.prototype = {
	fixed: null
	,__array: null
	,concat: function(a) {
		if(a == null) return new openfl__$Vector_BoolVector(null,null,this.__array.slice()); else return new openfl__$Vector_BoolVector(null,null,this.__array.concat((js_Boot.__cast(a , openfl__$Vector_BoolVector)).__array));
	}
	,copy: function() {
		return new openfl__$Vector_BoolVector(null,this.fixed,this.__array.slice());
	}
	,get: function(index) {
		if(index >= this.__array.length) return false; else return this.__array[index];
	}
	,indexOf: function(x,from) {
		if(from == null) from = 0;
		var _g1 = from;
		var _g = this.__array.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.__array[i] == x) return i;
		}
		return -1;
	}
	,insertAt: function(index,element) {
		if(!this.fixed || index < this.__array.length) this.__array.splice(index,0,element);
	}
	,iterator: function() {
		return HxOverrides.iter(this.__array);
	}
	,join: function(sep) {
		return this.__array.join(sep);
	}
	,lastIndexOf: function(x,from) {
		if(from == null) from = 0;
		var i = this.__array.length - 1;
		while(i >= from) {
			if(this.__array[i] == x) return i;
			i--;
		}
		return -1;
	}
	,pop: function() {
		if(!this.fixed) return this.__array.pop(); else return null;
	}
	,push: function(x) {
		if(!this.fixed) return this.__array.push(x); else return this.__array.length;
	}
	,reverse: function() {
		this.__array.reverse();
	}
	,set: function(index,value) {
		if(!this.fixed || index < this.__array.length) return this.__array[index] = value; else return value;
	}
	,shift: function() {
		if(!this.fixed) return this.__array.shift(); else return null;
	}
	,slice: function(startIndex,endIndex) {
		if(endIndex == null) endIndex = 16777215;
		if(startIndex == null) startIndex = 0;
		return new openfl__$Vector_BoolVector(null,null,this.__array.slice(startIndex,endIndex));
	}
	,sort: function(f) {
		this.__array.sort(f);
	}
	,splice: function(pos,len) {
		return new openfl__$Vector_BoolVector(null,null,this.__array.splice(pos,len));
	}
	,toString: function() {
		return this.__array.toString();
	}
	,unshift: function(x) {
		if(!this.fixed) this.__array.unshift(x);
	}
	,get_length: function() {
		return this.__array.length;
	}
	,set_length: function(value) {
		if(!this.fixed) {
			var currentLength = this.__array.length;
			if(value < 0) value = 0;
			if(value > currentLength) {
				var _g = currentLength;
				while(_g < value) {
					var i = _g++;
					this.__array[i] = false;
				}
			} else while(this.__array.length > value) this.__array.pop();
		}
		return this.__array.length;
	}
	,__class__: openfl__$Vector_BoolVector
	,__properties__: {set_length:"set_length",get_length:"get_length"}
};
var openfl__$Vector_FloatVector = function(length,fixed,array) {
	if(array == null) array = [];
	this.__array = array;
	if(length != null) this.set_length(length);
	this.fixed = fixed == true;
};
$hxClasses["openfl._Vector.FloatVector"] = openfl__$Vector_FloatVector;
openfl__$Vector_FloatVector.__name__ = ["openfl","_Vector","FloatVector"];
openfl__$Vector_FloatVector.__interfaces__ = [openfl__$Vector_IVector];
openfl__$Vector_FloatVector.prototype = {
	fixed: null
	,__array: null
	,concat: function(a) {
		if(a == null) return new openfl__$Vector_FloatVector(null,null,this.__array.slice()); else return new openfl__$Vector_FloatVector(null,null,this.__array.concat((js_Boot.__cast(a , openfl__$Vector_FloatVector)).__array));
	}
	,copy: function() {
		return new openfl__$Vector_FloatVector(null,this.fixed,this.__array.slice());
	}
	,get: function(index) {
		return this.__array[index];
	}
	,indexOf: function(x,from) {
		if(from == null) from = 0;
		var _g1 = from;
		var _g = this.__array.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.__array[i] == x) return i;
		}
		return -1;
	}
	,insertAt: function(index,element) {
		if(!this.fixed || index < this.__array.length) this.__array.splice(index,0,element);
	}
	,iterator: function() {
		return HxOverrides.iter(this.__array);
	}
	,join: function(sep) {
		return this.__array.join(sep);
	}
	,lastIndexOf: function(x,from) {
		if(from == null) from = 0;
		var i = this.__array.length - 1;
		while(i >= from) {
			if(this.__array[i] == x) return i;
			i--;
		}
		return -1;
	}
	,pop: function() {
		if(!this.fixed) return this.__array.pop(); else return null;
	}
	,push: function(x) {
		if(!this.fixed) return this.__array.push(x); else return this.__array.length;
	}
	,reverse: function() {
		this.__array.reverse();
	}
	,set: function(index,value) {
		if(!this.fixed || index < this.__array.length) return this.__array[index] = value; else return value;
	}
	,shift: function() {
		if(!this.fixed) return this.__array.shift(); else return null;
	}
	,slice: function(startIndex,endIndex) {
		if(endIndex == null) endIndex = 16777215;
		if(startIndex == null) startIndex = 0;
		return new openfl__$Vector_FloatVector(null,null,this.__array.slice(startIndex,endIndex));
	}
	,sort: function(f) {
		this.__array.sort(f);
	}
	,splice: function(pos,len) {
		return new openfl__$Vector_FloatVector(null,null,this.__array.splice(pos,len));
	}
	,toString: function() {
		return this.__array.toString();
	}
	,unshift: function(x) {
		if(!this.fixed) this.__array.unshift(x);
	}
	,get_length: function() {
		return this.__array.length;
	}
	,set_length: function(value) {
		if(!this.fixed) {
			var currentLength = this.__array.length;
			if(value < 0) value = 0;
			if(value > currentLength) {
				var _g = currentLength;
				while(_g < value) {
					var i = _g++;
					this.__array[i] = 0;
				}
			} else while(this.__array.length > value) this.__array.pop();
		}
		return this.__array.length;
	}
	,__class__: openfl__$Vector_FloatVector
	,__properties__: {set_length:"set_length",get_length:"get_length"}
};
var openfl__$Vector_FunctionVector = function(length,fixed,array) {
	if(array == null) array = [];
	this.__array = array;
	if(length != null) this.set_length(length);
	this.fixed = fixed == true;
};
$hxClasses["openfl._Vector.FunctionVector"] = openfl__$Vector_FunctionVector;
openfl__$Vector_FunctionVector.__name__ = ["openfl","_Vector","FunctionVector"];
openfl__$Vector_FunctionVector.__interfaces__ = [openfl__$Vector_IVector];
openfl__$Vector_FunctionVector.prototype = {
	fixed: null
	,__array: null
	,concat: function(a) {
		if(a == null) return new openfl__$Vector_FunctionVector(null,null,this.__array.slice()); else return new openfl__$Vector_FunctionVector(null,null,this.__array.concat((js_Boot.__cast(a , openfl__$Vector_FunctionVector)).__array));
	}
	,copy: function() {
		return new openfl__$Vector_FunctionVector(null,this.fixed,this.__array.slice());
	}
	,get: function(index) {
		if(index >= this.__array.length) return null; else return this.__array[index];
	}
	,indexOf: function(x,from) {
		if(from == null) from = 0;
		var _g1 = from;
		var _g = this.__array.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(Reflect.compareMethods(this.__array[i],x)) return i;
		}
		return -1;
	}
	,insertAt: function(index,element) {
		if(!this.fixed || index < this.__array.length) this.__array.splice(index,0,element);
	}
	,iterator: function() {
		return HxOverrides.iter(this.__array);
	}
	,join: function(sep) {
		return this.__array.join(sep);
	}
	,lastIndexOf: function(x,from) {
		if(from == null) from = 0;
		var i = this.__array.length - 1;
		while(i >= from) {
			if(Reflect.compareMethods(this.__array[i],x)) return i;
			i--;
		}
		return -1;
	}
	,pop: function() {
		if(!this.fixed) return this.__array.pop(); else return null;
	}
	,push: function(x) {
		if(!this.fixed) return this.__array.push(x); else return this.__array.length;
	}
	,reverse: function() {
		this.__array.reverse();
	}
	,set: function(index,value) {
		if(!this.fixed || index < this.__array.length) return this.__array[index] = value; else return value;
	}
	,shift: function() {
		if(!this.fixed) return this.__array.shift(); else return null;
	}
	,slice: function(startIndex,endIndex) {
		if(endIndex == null) endIndex = 16777215;
		if(startIndex == null) startIndex = 0;
		return new openfl__$Vector_FunctionVector(null,null,this.__array.slice(startIndex,endIndex));
	}
	,sort: function(f) {
		this.__array.sort(f);
	}
	,splice: function(pos,len) {
		return new openfl__$Vector_FunctionVector(null,null,this.__array.splice(pos,len));
	}
	,toString: function() {
		return this.__array.toString();
	}
	,unshift: function(x) {
		if(!this.fixed) this.__array.unshift(x);
	}
	,get_length: function() {
		return this.__array.length;
	}
	,set_length: function(value) {
		if(!this.fixed) {
			var currentLength = this.__array.length;
			if(value < 0) value = 0;
			if(value > currentLength) {
				var _g = currentLength;
				while(_g < value) {
					var i = _g++;
					this.__array[i] = null;
				}
			} else while(this.__array.length > value) this.__array.pop();
		}
		return this.__array.length;
	}
	,__class__: openfl__$Vector_FunctionVector
	,__properties__: {set_length:"set_length",get_length:"get_length"}
};
var openfl__$Vector_IntVector = function(length,fixed,array) {
	if(array == null) array = [];
	this.__array = array;
	if(length != null) this.set_length(length);
	this.fixed = fixed == true;
};
$hxClasses["openfl._Vector.IntVector"] = openfl__$Vector_IntVector;
openfl__$Vector_IntVector.__name__ = ["openfl","_Vector","IntVector"];
openfl__$Vector_IntVector.__interfaces__ = [openfl__$Vector_IVector];
openfl__$Vector_IntVector.prototype = {
	fixed: null
	,__array: null
	,concat: function(a) {
		if(a == null) return new openfl__$Vector_IntVector(null,null,this.__array.slice()); else return new openfl__$Vector_IntVector(null,null,this.__array.concat((js_Boot.__cast(a , openfl__$Vector_IntVector)).__array));
	}
	,copy: function() {
		return new openfl__$Vector_IntVector(null,this.fixed,this.__array.slice());
	}
	,get: function(index) {
		return this.__array[index];
	}
	,indexOf: function(x,from) {
		if(from == null) from = 0;
		var _g1 = from;
		var _g = this.__array.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.__array[i] == x) return i;
		}
		return -1;
	}
	,insertAt: function(index,element) {
		if(!this.fixed || index < this.__array.length) this.__array.splice(index,0,element);
	}
	,iterator: function() {
		return HxOverrides.iter(this.__array);
	}
	,join: function(sep) {
		return this.__array.join(sep);
	}
	,lastIndexOf: function(x,from) {
		if(from == null) from = 0;
		var i = this.__array.length - 1;
		while(i >= from) {
			if(this.__array[i] == x) return i;
			i--;
		}
		return -1;
	}
	,pop: function() {
		if(!this.fixed) return this.__array.pop(); else return null;
	}
	,push: function(x) {
		if(!this.fixed) return this.__array.push(x); else return this.__array.length;
	}
	,reverse: function() {
		this.__array.reverse();
	}
	,set: function(index,value) {
		if(!this.fixed || index < this.__array.length) return this.__array[index] = value; else return value;
	}
	,shift: function() {
		if(!this.fixed) return this.__array.shift(); else return null;
	}
	,slice: function(startIndex,endIndex) {
		if(endIndex == null) endIndex = 16777215;
		if(startIndex == null) startIndex = 0;
		return new openfl__$Vector_IntVector(null,null,this.__array.slice(startIndex,endIndex));
	}
	,sort: function(f) {
		this.__array.sort(f);
	}
	,splice: function(pos,len) {
		return new openfl__$Vector_IntVector(null,null,this.__array.splice(pos,len));
	}
	,toString: function() {
		return this.__array.toString();
	}
	,unshift: function(x) {
		if(!this.fixed) this.__array.unshift(x);
	}
	,get_length: function() {
		return this.__array.length;
	}
	,set_length: function(value) {
		if(!this.fixed) {
			var currentLength = this.__array.length;
			if(value < 0) value = 0;
			if(value > currentLength) {
				var _g = currentLength;
				while(_g < value) {
					var i = _g++;
					this.__array[i] = 0;
				}
			} else while(this.__array.length > value) this.__array.pop();
		}
		return this.__array.length;
	}
	,__class__: openfl__$Vector_IntVector
	,__properties__: {set_length:"set_length",get_length:"get_length"}
};
var openfl__$Vector_ObjectVector = function(length,fixed,array) {
	if(array == null) array = [];
	this.__array = array;
	if(length != null) this.set_length(length);
	this.fixed = fixed == true;
};
$hxClasses["openfl._Vector.ObjectVector"] = openfl__$Vector_ObjectVector;
openfl__$Vector_ObjectVector.__name__ = ["openfl","_Vector","ObjectVector"];
openfl__$Vector_ObjectVector.__interfaces__ = [openfl__$Vector_IVector];
openfl__$Vector_ObjectVector.prototype = {
	fixed: null
	,__array: null
	,concat: function(a) {
		if(a == null) return new openfl__$Vector_ObjectVector(null,null,this.__array.slice()); else return new openfl__$Vector_ObjectVector(null,null,this.__array.concat((js_Boot.__cast(a , openfl__$Vector_ObjectVector)).__array));
	}
	,copy: function() {
		return new openfl__$Vector_ObjectVector(null,null,this.__array.slice());
	}
	,get: function(index) {
		return this.__array[index];
	}
	,indexOf: function(x,from) {
		if(from == null) from = 0;
		var _g1 = from;
		var _g = this.__array.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.__array[i] == x) return i;
		}
		return -1;
	}
	,insertAt: function(index,element) {
		if(!this.fixed || index < this.__array.length) this.__array.splice(index,0,element);
	}
	,iterator: function() {
		return HxOverrides.iter(this.__array);
	}
	,join: function(sep) {
		return this.__array.join(sep);
	}
	,lastIndexOf: function(x,from) {
		if(from == null) from = 0;
		var i = this.__array.length - 1;
		while(i >= from) {
			if(this.__array[i] == x) return i;
			i--;
		}
		return -1;
	}
	,pop: function() {
		if(!this.fixed) return this.__array.pop(); else return null;
	}
	,push: function(x) {
		if(!this.fixed) return this.__array.push(x); else return this.__array.length;
	}
	,reverse: function() {
		this.__array.reverse();
	}
	,set: function(index,value) {
		if(!this.fixed || index < this.__array.length) return this.__array[index] = value; else return value;
	}
	,shift: function() {
		if(!this.fixed) return this.__array.shift(); else return null;
	}
	,slice: function(startIndex,endIndex) {
		if(endIndex == null) endIndex = 16777215;
		if(startIndex == null) startIndex = 0;
		return new openfl__$Vector_ObjectVector(null,null,this.__array.slice(startIndex,endIndex));
	}
	,sort: function(f) {
		this.__array.sort(f);
	}
	,splice: function(pos,len) {
		return new openfl__$Vector_ObjectVector(null,null,this.__array.splice(pos,len));
	}
	,toString: function() {
		return this.__array.toString();
	}
	,unshift: function(x) {
		if(!this.fixed) this.__array.unshift(x);
	}
	,get_length: function() {
		return this.__array.length;
	}
	,set_length: function(value) {
		if(!this.fixed) {
			var currentLength = this.__array.length;
			if(value < 0) value = 0;
			if(value > currentLength) {
				var _g = currentLength;
				while(_g < value) {
					var i = _g++;
					this.__array.push(null);
				}
			} else while(this.__array.length > value) this.__array.pop();
		}
		return this.__array.length;
	}
	,__class__: openfl__$Vector_ObjectVector
	,__properties__: {set_length:"set_length",get_length:"get_length"}
};
var openfl__$internal_renderer_AbstractBlendModeManager = function() {
};
$hxClasses["openfl._internal.renderer.AbstractBlendModeManager"] = openfl__$internal_renderer_AbstractBlendModeManager;
openfl__$internal_renderer_AbstractBlendModeManager.__name__ = ["openfl","_internal","renderer","AbstractBlendModeManager"];
openfl__$internal_renderer_AbstractBlendModeManager.prototype = {
	setBlendMode: function(blendMode) {
	}
	,__class__: openfl__$internal_renderer_AbstractBlendModeManager
};
var openfl__$internal_renderer_AbstractFilterManager = function(renderSession) {
	this.renderSession = renderSession;
};
$hxClasses["openfl._internal.renderer.AbstractFilterManager"] = openfl__$internal_renderer_AbstractFilterManager;
openfl__$internal_renderer_AbstractFilterManager.__name__ = ["openfl","_internal","renderer","AbstractFilterManager"];
openfl__$internal_renderer_AbstractFilterManager.prototype = {
	renderSession: null
	,pushObject: function(object) {
		return null;
	}
	,popObject: function(object) {
	}
	,__class__: openfl__$internal_renderer_AbstractFilterManager
};
var openfl__$internal_renderer_AbstractMaskManager = function(renderSession) {
	this.renderSession = renderSession;
};
$hxClasses["openfl._internal.renderer.AbstractMaskManager"] = openfl__$internal_renderer_AbstractMaskManager;
openfl__$internal_renderer_AbstractMaskManager.__name__ = ["openfl","_internal","renderer","AbstractMaskManager"];
openfl__$internal_renderer_AbstractMaskManager.prototype = {
	renderSession: null
	,pushMask: function(mask) {
	}
	,pushObject: function(object,handleScrollRect) {
		if(handleScrollRect == null) handleScrollRect = true;
	}
	,pushRect: function(rect,transform) {
	}
	,popMask: function() {
	}
	,popObject: function(object,handleScrollRect) {
		if(handleScrollRect == null) handleScrollRect = true;
	}
	,popRect: function() {
	}
	,saveState: function() {
	}
	,restoreState: function() {
	}
	,__class__: openfl__$internal_renderer_AbstractMaskManager
};
var openfl__$internal_renderer_AbstractRenderer = function(stage) {
	this.stage = stage;
	this.width = stage.stageWidth;
	this.height = stage.stageHeight;
};
$hxClasses["openfl._internal.renderer.AbstractRenderer"] = openfl__$internal_renderer_AbstractRenderer;
openfl__$internal_renderer_AbstractRenderer.__name__ = ["openfl","_internal","renderer","AbstractRenderer"];
openfl__$internal_renderer_AbstractRenderer.prototype = {
	height: null
	,width: null
	,transparent: null
	,viewport: null
	,renderSession: null
	,stage: null
	,clear: function() {
	}
	,render: function() {
	}
	,resize: function(width,height) {
		this.width = width;
		this.height = height;
	}
	,__class__: openfl__$internal_renderer_AbstractRenderer
};
var openfl__$internal_renderer_AbstractShaderManager = function() {
};
$hxClasses["openfl._internal.renderer.AbstractShaderManager"] = openfl__$internal_renderer_AbstractShaderManager;
openfl__$internal_renderer_AbstractShaderManager.__name__ = ["openfl","_internal","renderer","AbstractShaderManager"];
openfl__$internal_renderer_AbstractShaderManager.prototype = {
	currentShader: null
	,defaultShader: null
	,setShader: function(shader) {
	}
	,__class__: openfl__$internal_renderer_AbstractShaderManager
};
var openfl__$internal_renderer_DrawCommandBuffer = function() {
	if(openfl__$internal_renderer_DrawCommandBuffer.empty == null) {
		this.types = [];
		this.b = [];
		this.i = [];
		this.f = [];
		this.o = [];
		this.ff = [];
		this.ii = [];
		this.copyOnWrite = true;
	} else this.clear();
};
$hxClasses["openfl._internal.renderer.DrawCommandBuffer"] = openfl__$internal_renderer_DrawCommandBuffer;
openfl__$internal_renderer_DrawCommandBuffer.__name__ = ["openfl","_internal","renderer","DrawCommandBuffer"];
openfl__$internal_renderer_DrawCommandBuffer.prototype = {
	types: null
	,b: null
	,copyOnWrite: null
	,f: null
	,ff: null
	,i: null
	,ii: null
	,o: null
	,append: function(other) {
		if(this.get_length() == 0) {
			this.types = other.types;
			this.b = other.b;
			this.i = other.i;
			this.f = other.f;
			this.o = other.o;
			this.ff = other.ff;
			this.ii = other.ii;
			this.copyOnWrite = other.copyOnWrite = true;
			return other;
		}
		var data = new openfl__$internal_renderer_DrawCommandReader(other);
		var _g = 0;
		var _g1 = other.types;
		while(_g < _g1.length) {
			var type = _g1[_g];
			++_g;
			switch(type[1]) {
			case 0:
				var c = data.readBeginBitmapFill();
				this.beginBitmapFill(openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_bitmap(c),openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_matrix(c),openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_repeat(c),openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_smooth(c));
				break;
			case 1:
				var c1 = data.readBeginFill();
				this.beginFill(openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_color(c1),openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_alpha(c1));
				break;
			case 2:
				var c2 = data.readBeginGradientFill();
				this.beginGradientFill(openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_type(c2),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_colors(c2),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_alphas(c2),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_ratios(c2),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_matrix(c2),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_spreadMethod(c2),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_interpolationMethod(c2),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_focalPointRatio(c2));
				break;
			case 3:
				var c3 = data.readCubicCurveTo();
				this.cubicCurveTo(openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX1(c3),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY1(c3),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX2(c3),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY2(c3),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorX(c3),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorY(c3));
				break;
			case 4:
				var c4 = data.readCurveTo();
				this.curveTo(openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlX(c4),openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlY(c4),openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorX(c4),openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorY(c4));
				break;
			case 5:
				var c5 = data.readDrawCircle();
				this.drawCircle(openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_x(c5),openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_y(c5),openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_radius(c5));
				break;
			case 6:
				var c6 = data.readDrawEllipse();
				this.drawEllipse(openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_x(c6),openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_y(c6),openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_width(c6),openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_height(c6));
				break;
			case 7:
				var c7 = data.readDrawRect();
				this.drawRect(openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_x(c7),openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_y(c7),openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_width(c7),openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_height(c7));
				break;
			case 8:
				var c8 = data.readDrawRoundRect();
				this.drawRoundRect(openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_x(c8),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_y(c8),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_width(c8),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_height(c8),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseWidth(c8),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseHeight(c8));
				break;
			case 10:
				var c9 = data.readDrawTriangles();
				this.drawTriangles(openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_vertices(c9),openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_indices(c9),openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_uvtData(c9),openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_culling(c9));
				break;
			case 11:
				var c10 = data.readEndFill();
				this.endFill();
				break;
			case 12:
				var c11 = data.readLineBitmapStyle();
				this.lineBitmapStyle(openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_bitmap(c11),openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_matrix(c11),openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_repeat(c11),openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_smooth(c11));
				break;
			case 13:
				var c12 = data.readLineGradientStyle();
				this.lineGradientStyle(openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_type(c12),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_colors(c12),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_alphas(c12),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_ratios(c12),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_matrix(c12),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_spreadMethod(c12),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_interpolationMethod(c12),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_focalPointRatio(c12));
				break;
			case 14:
				var c13 = data.readLineStyle();
				this.lineStyle(openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_thickness(c13),openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_color(c13),openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_alpha(c13),openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_pixelHinting(c13),openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_scaleMode(c13),openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_caps(c13),openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_joints(c13),openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_miterLimit(c13));
				break;
			case 15:
				var c14 = data.readLineTo();
				this.lineTo(openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_x(c14),openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_y(c14));
				break;
			case 16:
				var c15 = data.readMoveTo();
				this.moveTo(openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_x(c15),openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_y(c15));
				break;
			case 17:
				var c16 = data.readOverrideMatrix();
				this.overrideMatrix(openfl__$internal_renderer__$DrawCommandReader_OverrideMatrixView_$Impl_$.get_matrix(c16));
				break;
			default:
			}
		}
		data.destroy();
		return other;
	}
	,beginBitmapFill: function(bitmap,matrix,repeat,smooth) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL);
		this.o.push(bitmap);
		this.o.push(matrix);
		this.b.push(repeat);
		this.b.push(smooth);
	}
	,beginFill: function(color,alpha) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.BEGIN_FILL);
		this.i.push(color);
		this.f.push(alpha);
	}
	,beginGradientFill: function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL);
		this.o.push(type);
		this.ii.push(colors);
		this.ff.push(alphas);
		this.ii.push(ratios);
		this.o.push(matrix);
		this.o.push(spreadMethod);
		this.o.push(interpolationMethod);
		this.f.push(focalPointRatio);
	}
	,clear: function() {
		this.types = openfl__$internal_renderer_DrawCommandBuffer.empty.types;
		this.b = openfl__$internal_renderer_DrawCommandBuffer.empty.b;
		this.i = openfl__$internal_renderer_DrawCommandBuffer.empty.i;
		this.f = openfl__$internal_renderer_DrawCommandBuffer.empty.f;
		this.o = openfl__$internal_renderer_DrawCommandBuffer.empty.o;
		this.ff = openfl__$internal_renderer_DrawCommandBuffer.empty.ff;
		this.ii = openfl__$internal_renderer_DrawCommandBuffer.empty.ii;
		this.copyOnWrite = true;
	}
	,copy: function() {
		var copy = new openfl__$internal_renderer_DrawCommandBuffer();
		copy.append(this);
		return copy;
	}
	,cubicCurveTo: function(controlX1,controlY1,controlX2,controlY2,anchorX,anchorY) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO);
		this.f.push(controlX1);
		this.f.push(controlY1);
		this.f.push(controlX2);
		this.f.push(controlY2);
		this.f.push(anchorX);
		this.f.push(anchorY);
	}
	,curveTo: function(controlX,controlY,anchorX,anchorY) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.CURVE_TO);
		this.f.push(controlX);
		this.f.push(controlY);
		this.f.push(anchorX);
		this.f.push(anchorY);
	}
	,destroy: function() {
		this.clear();
		this.types = null;
		this.b = null;
		this.i = null;
		this.f = null;
		this.o = null;
		this.ff = null;
		this.ii = null;
	}
	,drawCircle: function(x,y,radius) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE);
		this.f.push(x);
		this.f.push(y);
		this.f.push(radius);
	}
	,drawEllipse: function(x,y,width,height) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE);
		this.f.push(x);
		this.f.push(y);
		this.f.push(width);
		this.f.push(height);
	}
	,drawRect: function(x,y,width,height) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.DRAW_RECT);
		this.f.push(x);
		this.f.push(y);
		this.f.push(width);
		this.f.push(height);
	}
	,drawRoundRect: function(x,y,width,height,ellipseWidth,ellipseHeight) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT);
		this.f.push(x);
		this.f.push(y);
		this.f.push(width);
		this.f.push(height);
		this.f.push(ellipseWidth);
		this.o.push(ellipseHeight);
	}
	,drawTriangles: function(vertices,indices,uvtData,culling) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES);
		this.o.push(vertices);
		this.o.push(indices);
		this.o.push(uvtData);
		this.o.push(culling);
	}
	,endFill: function() {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.END_FILL);
	}
	,lineBitmapStyle: function(bitmap,matrix,repeat,smooth) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE);
		this.o.push(bitmap);
		this.o.push(matrix);
		this.b.push(repeat);
		this.b.push(smooth);
	}
	,lineGradientStyle: function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE);
		this.o.push(type);
		this.ii.push(colors);
		this.ff.push(alphas);
		this.ii.push(ratios);
		this.o.push(matrix);
		this.o.push(spreadMethod);
		this.o.push(interpolationMethod);
		this.f.push(focalPointRatio);
	}
	,lineStyle: function(thickness,color,alpha,pixelHinting,scaleMode,caps,joints,miterLimit) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.LINE_STYLE);
		this.o.push(thickness);
		this.i.push(color);
		this.f.push(alpha);
		this.b.push(pixelHinting);
		this.o.push(scaleMode);
		this.o.push(caps);
		this.o.push(joints);
		this.f.push(miterLimit);
	}
	,lineTo: function(x,y) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.LINE_TO);
		this.f.push(x);
		this.f.push(y);
	}
	,moveTo: function(x,y) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.MOVE_TO);
		this.f.push(x);
		this.f.push(y);
	}
	,prepareWrite: function() {
		if(this.copyOnWrite) {
			this.types = this.types.slice();
			this.b = this.b.slice();
			this.i = this.i.slice();
			this.f = this.f.slice();
			this.o = this.o.slice();
			this.ff = this.ff.slice();
			this.ii = this.ii.slice();
			this.copyOnWrite = false;
		}
	}
	,overrideMatrix: function(matrix) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.OVERRIDE_MATRIX);
		this.o.push(matrix);
	}
	,get_length: function() {
		return this.types.length;
	}
	,__class__: openfl__$internal_renderer_DrawCommandBuffer
	,__properties__: {get_length:"get_length"}
};
var openfl__$internal_renderer_DrawCommandReader = function(buffer) {
	this.buffer = buffer;
	this.bPos = this.iPos = this.fPos = this.oPos = this.ffPos = this.iiPos = this.tsPos = 0;
	this.prev = openfl__$internal_renderer_DrawCommandType.UNKNOWN;
};
$hxClasses["openfl._internal.renderer.DrawCommandReader"] = openfl__$internal_renderer_DrawCommandReader;
openfl__$internal_renderer_DrawCommandReader.__name__ = ["openfl","_internal","renderer","DrawCommandReader"];
openfl__$internal_renderer_DrawCommandReader.prototype = {
	buffer: null
	,bPos: null
	,iiPos: null
	,iPos: null
	,ffPos: null
	,fPos: null
	,oPos: null
	,prev: null
	,tsPos: null
	,advance: function() {
		var _g = this.prev;
		switch(_g[1]) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.fPos += 6;
			break;
		case 4:
			this.fPos += 4;
			break;
		case 5:
			this.fPos += 3;
			break;
		case 6:
			this.fPos += 4;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 10:
			this.oPos += 4;
			break;
		case 11:
			break;
		case 12:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 13:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 14:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 15:
			this.fPos += 2;
			break;
		case 16:
			this.fPos += 2;
			break;
		case 17:
			this.oPos += 1;
			break;
		default:
		}
	}
	,bool: function(index) {
		return this.buffer.b[this.bPos + index];
	}
	,destroy: function() {
		this.buffer = null;
		this.reset();
	}
	,fArr: function(index) {
		return this.buffer.ff[this.ffPos + index];
	}
	,'float': function(index) {
		return this.buffer.f[this.fPos + index];
	}
	,iArr: function(index) {
		return this.buffer.ii[this.iiPos + index];
	}
	,'int': function(index) {
		return this.buffer.i[this.iPos + index];
	}
	,obj: function(index) {
		return this.buffer.o[this.oPos + index];
	}
	,readBeginBitmapFill: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL;
		return openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$._new(this);
	}
	,readBeginFill: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_FILL;
		return openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$._new(this);
	}
	,readBeginGradientFill: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL;
		return openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$._new(this);
	}
	,readCubicCurveTo: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO;
		return openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$._new(this);
	}
	,readCurveTo: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.CURVE_TO;
		return openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$._new(this);
	}
	,readDrawCircle: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE;
		return openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$._new(this);
	}
	,readDrawEllipse: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE;
		return openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$._new(this);
	}
	,readDrawRect: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.DRAW_RECT;
		return openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$._new(this);
	}
	,readDrawRoundRect: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT;
		return openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$._new(this);
	}
	,readDrawTriangles: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES;
		return openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$._new(this);
	}
	,readEndFill: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.END_FILL;
		return openfl__$internal_renderer__$DrawCommandReader_EndFillView_$Impl_$._new(this);
	}
	,readLineBitmapStyle: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE;
		return openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$._new(this);
	}
	,readLineGradientStyle: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE;
		return openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$._new(this);
	}
	,readLineStyle: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.LINE_STYLE;
		return openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$._new(this);
	}
	,readLineTo: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.LINE_TO;
		return openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$._new(this);
	}
	,readMoveTo: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.MOVE_TO;
		return openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$._new(this);
	}
	,readOverrideMatrix: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.OVERRIDE_MATRIX;
		return openfl__$internal_renderer__$DrawCommandReader_OverrideMatrixView_$Impl_$._new(this);
	}
	,reset: function() {
		this.bPos = this.iPos = this.fPos = this.oPos = this.ffPos = this.iiPos = this.tsPos = 0;
	}
	,skip: function(type) {
		this.advance();
		this.prev = type;
	}
	,__class__: openfl__$internal_renderer_DrawCommandReader
};
var openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.BeginBitmapFillView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","BeginBitmapFillView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.__properties__ = {get_smooth:"get_smooth",get_repeat:"get_repeat",get_matrix:"get_matrix",get_bitmap:"get_bitmap"}
openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_bitmap = function(this1) {
	return this1.obj(0);
};
openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_matrix = function(this1) {
	return this1.obj(1);
};
openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_repeat = function(this1) {
	return this1.bool(0);
};
openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_smooth = function(this1) {
	return this1.bool(1);
};
var openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.BeginFillView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","BeginFillView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.__properties__ = {get_alpha:"get_alpha",get_color:"get_color"}
openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_color = function(this1) {
	return this1["int"](0);
};
openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_alpha = function(this1) {
	return this1["float"](0);
};
var openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.BeginGradientFillView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","BeginGradientFillView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.__properties__ = {get_focalPointRatio:"get_focalPointRatio",get_interpolationMethod:"get_interpolationMethod",get_spreadMethod:"get_spreadMethod",get_matrix:"get_matrix",get_ratios:"get_ratios",get_alphas:"get_alphas",get_colors:"get_colors",get_type:"get_type"}
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_type = function(this1) {
	return this1.obj(0);
};
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_colors = function(this1) {
	return this1.iArr(0);
};
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_alphas = function(this1) {
	return this1.fArr(0);
};
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_ratios = function(this1) {
	return this1.iArr(1);
};
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_matrix = function(this1) {
	return this1.obj(1);
};
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_spreadMethod = function(this1) {
	return this1.obj(2);
};
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_interpolationMethod = function(this1) {
	return this1.obj(3);
};
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_focalPointRatio = function(this1) {
	return this1["float"](0);
};
var openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.CubicCurveToView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","CubicCurveToView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.__properties__ = {get_anchorY:"get_anchorY",get_anchorX:"get_anchorX",get_controlY2:"get_controlY2",get_controlX2:"get_controlX2",get_controlY1:"get_controlY1",get_controlX1:"get_controlX1"}
openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX1 = function(this1) {
	return this1["float"](0);
};
openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY1 = function(this1) {
	return this1["float"](1);
};
openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX2 = function(this1) {
	return this1["float"](2);
};
openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY2 = function(this1) {
	return this1["float"](3);
};
openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorX = function(this1) {
	return this1["float"](4);
};
openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorY = function(this1) {
	return this1["float"](5);
};
var openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.CurveToView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","CurveToView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.__properties__ = {get_anchorY:"get_anchorY",get_anchorX:"get_anchorX",get_controlY:"get_controlY",get_controlX:"get_controlX"}
openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlX = function(this1) {
	return this1["float"](0);
};
openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlY = function(this1) {
	return this1["float"](1);
};
openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorX = function(this1) {
	return this1["float"](2);
};
openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorY = function(this1) {
	return this1["float"](3);
};
var openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.DrawCircleView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","DrawCircleView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.__properties__ = {get_radius:"get_radius",get_y:"get_y",get_x:"get_x"}
openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_x = function(this1) {
	return this1["float"](0);
};
openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_y = function(this1) {
	return this1["float"](1);
};
openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_radius = function(this1) {
	return this1["float"](2);
};
var openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.DrawEllipseView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","DrawEllipseView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.__properties__ = {get_height:"get_height",get_width:"get_width",get_y:"get_y",get_x:"get_x"}
openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_x = function(this1) {
	return this1["float"](0);
};
openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_y = function(this1) {
	return this1["float"](1);
};
openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_width = function(this1) {
	return this1["float"](2);
};
openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_height = function(this1) {
	return this1["float"](3);
};
var openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.DrawRectView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","DrawRectView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.__properties__ = {get_height:"get_height",get_width:"get_width",get_y:"get_y",get_x:"get_x"}
openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_x = function(this1) {
	return this1["float"](0);
};
openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_y = function(this1) {
	return this1["float"](1);
};
openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_width = function(this1) {
	return this1["float"](2);
};
openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_height = function(this1) {
	return this1["float"](3);
};
var openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.DrawRoundRectView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","DrawRoundRectView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.__properties__ = {get_ellipseHeight:"get_ellipseHeight",get_ellipseWidth:"get_ellipseWidth",get_height:"get_height",get_width:"get_width",get_y:"get_y",get_x:"get_x"}
openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_x = function(this1) {
	return this1["float"](0);
};
openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_y = function(this1) {
	return this1["float"](1);
};
openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_width = function(this1) {
	return this1["float"](2);
};
openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_height = function(this1) {
	return this1["float"](3);
};
openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseWidth = function(this1) {
	return this1["float"](4);
};
openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseHeight = function(this1) {
	return this1.obj(0);
};
var openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.DrawTrianglesView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","DrawTrianglesView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.__properties__ = {get_culling:"get_culling",get_uvtData:"get_uvtData",get_indices:"get_indices",get_vertices:"get_vertices"}
openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_vertices = function(this1) {
	return this1.obj(0);
};
openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_indices = function(this1) {
	return this1.obj(1);
};
openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_uvtData = function(this1) {
	return this1.obj(2);
};
openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_culling = function(this1) {
	return this1.obj(3);
};
var openfl__$internal_renderer__$DrawCommandReader_EndFillView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.EndFillView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_EndFillView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_EndFillView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","EndFillView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_EndFillView_$Impl_$._new = function(d) {
	return d;
};
var openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.LineBitmapStyleView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","LineBitmapStyleView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.__properties__ = {get_smooth:"get_smooth",get_repeat:"get_repeat",get_matrix:"get_matrix",get_bitmap:"get_bitmap"}
openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_bitmap = function(this1) {
	return this1.obj(0);
};
openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_matrix = function(this1) {
	return this1.obj(1);
};
openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_repeat = function(this1) {
	return this1.bool(0);
};
openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_smooth = function(this1) {
	return this1.bool(1);
};
var openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.LineGradientStyleView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","LineGradientStyleView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.__properties__ = {get_focalPointRatio:"get_focalPointRatio",get_interpolationMethod:"get_interpolationMethod",get_spreadMethod:"get_spreadMethod",get_matrix:"get_matrix",get_ratios:"get_ratios",get_alphas:"get_alphas",get_colors:"get_colors",get_type:"get_type"}
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_type = function(this1) {
	return this1.obj(0);
};
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_colors = function(this1) {
	return this1.iArr(0);
};
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_alphas = function(this1) {
	return this1.fArr(0);
};
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_ratios = function(this1) {
	return this1.iArr(1);
};
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_matrix = function(this1) {
	return this1.obj(1);
};
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_spreadMethod = function(this1) {
	return this1.obj(2);
};
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_interpolationMethod = function(this1) {
	return this1.obj(3);
};
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_focalPointRatio = function(this1) {
	return this1["float"](0);
};
var openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.LineStyleView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","LineStyleView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.__properties__ = {get_miterLimit:"get_miterLimit",get_joints:"get_joints",get_caps:"get_caps",get_scaleMode:"get_scaleMode",get_pixelHinting:"get_pixelHinting",get_alpha:"get_alpha",get_color:"get_color",get_thickness:"get_thickness"}
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_thickness = function(this1) {
	return this1.obj(0);
};
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_color = function(this1) {
	return this1["int"](0);
};
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_alpha = function(this1) {
	return this1["float"](0);
};
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_pixelHinting = function(this1) {
	return this1.bool(0);
};
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_scaleMode = function(this1) {
	return this1.obj(1);
};
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_caps = function(this1) {
	return this1.obj(2);
};
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_joints = function(this1) {
	return this1.obj(3);
};
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_miterLimit = function(this1) {
	return this1["float"](1);
};
var openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.LineToView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","LineToView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.__properties__ = {get_y:"get_y",get_x:"get_x"}
openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_x = function(this1) {
	return this1["float"](0);
};
openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_y = function(this1) {
	return this1["float"](1);
};
var openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.MoveToView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","MoveToView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.__properties__ = {get_y:"get_y",get_x:"get_x"}
openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_x = function(this1) {
	return this1["float"](0);
};
openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_y = function(this1) {
	return this1["float"](1);
};
var openfl__$internal_renderer__$DrawCommandReader_OverrideMatrixView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.OverrideMatrixView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_OverrideMatrixView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_OverrideMatrixView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","OverrideMatrixView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_OverrideMatrixView_$Impl_$.__properties__ = {get_matrix:"get_matrix"}
openfl__$internal_renderer__$DrawCommandReader_OverrideMatrixView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_OverrideMatrixView_$Impl_$.get_matrix = function(this1) {
	return this1.obj(0);
};
var openfl__$internal_renderer_DrawCommandType = $hxClasses["openfl._internal.renderer.DrawCommandType"] = { __ename__ : ["openfl","_internal","renderer","DrawCommandType"], __constructs__ : ["BEGIN_BITMAP_FILL","BEGIN_FILL","BEGIN_GRADIENT_FILL","CUBIC_CURVE_TO","CURVE_TO","DRAW_CIRCLE","DRAW_ELLIPSE","DRAW_RECT","DRAW_ROUND_RECT","DRAW_TILES","DRAW_TRIANGLES","END_FILL","LINE_BITMAP_STYLE","LINE_GRADIENT_STYLE","LINE_STYLE","LINE_TO","MOVE_TO","OVERRIDE_MATRIX","UNKNOWN"] };
openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL = ["BEGIN_BITMAP_FILL",0];
openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL.toString = $estr;
openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.BEGIN_FILL = ["BEGIN_FILL",1];
openfl__$internal_renderer_DrawCommandType.BEGIN_FILL.toString = $estr;
openfl__$internal_renderer_DrawCommandType.BEGIN_FILL.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL = ["BEGIN_GRADIENT_FILL",2];
openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL.toString = $estr;
openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO = ["CUBIC_CURVE_TO",3];
openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO.toString = $estr;
openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.CURVE_TO = ["CURVE_TO",4];
openfl__$internal_renderer_DrawCommandType.CURVE_TO.toString = $estr;
openfl__$internal_renderer_DrawCommandType.CURVE_TO.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE = ["DRAW_CIRCLE",5];
openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE.toString = $estr;
openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE = ["DRAW_ELLIPSE",6];
openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE.toString = $estr;
openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.DRAW_RECT = ["DRAW_RECT",7];
openfl__$internal_renderer_DrawCommandType.DRAW_RECT.toString = $estr;
openfl__$internal_renderer_DrawCommandType.DRAW_RECT.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT = ["DRAW_ROUND_RECT",8];
openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT.toString = $estr;
openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.DRAW_TILES = ["DRAW_TILES",9];
openfl__$internal_renderer_DrawCommandType.DRAW_TILES.toString = $estr;
openfl__$internal_renderer_DrawCommandType.DRAW_TILES.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES = ["DRAW_TRIANGLES",10];
openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES.toString = $estr;
openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.END_FILL = ["END_FILL",11];
openfl__$internal_renderer_DrawCommandType.END_FILL.toString = $estr;
openfl__$internal_renderer_DrawCommandType.END_FILL.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE = ["LINE_BITMAP_STYLE",12];
openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE.toString = $estr;
openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE = ["LINE_GRADIENT_STYLE",13];
openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE.toString = $estr;
openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.LINE_STYLE = ["LINE_STYLE",14];
openfl__$internal_renderer_DrawCommandType.LINE_STYLE.toString = $estr;
openfl__$internal_renderer_DrawCommandType.LINE_STYLE.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.LINE_TO = ["LINE_TO",15];
openfl__$internal_renderer_DrawCommandType.LINE_TO.toString = $estr;
openfl__$internal_renderer_DrawCommandType.LINE_TO.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.MOVE_TO = ["MOVE_TO",16];
openfl__$internal_renderer_DrawCommandType.MOVE_TO.toString = $estr;
openfl__$internal_renderer_DrawCommandType.MOVE_TO.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.OVERRIDE_MATRIX = ["OVERRIDE_MATRIX",17];
openfl__$internal_renderer_DrawCommandType.OVERRIDE_MATRIX.toString = $estr;
openfl__$internal_renderer_DrawCommandType.OVERRIDE_MATRIX.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.UNKNOWN = ["UNKNOWN",18];
openfl__$internal_renderer_DrawCommandType.UNKNOWN.toString = $estr;
openfl__$internal_renderer_DrawCommandType.UNKNOWN.__enum__ = openfl__$internal_renderer_DrawCommandType;
var openfl__$internal_renderer_RenderSession = function() {
	this.activeTextures = 0;
	this.allowSmoothing = true;
};
$hxClasses["openfl._internal.renderer.RenderSession"] = openfl__$internal_renderer_RenderSession;
openfl__$internal_renderer_RenderSession.__name__ = ["openfl","_internal","renderer","RenderSession"];
openfl__$internal_renderer_RenderSession.prototype = {
	allowSmoothing: null
	,cairo: null
	,context: null
	,element: null
	,gl: null
	,renderer: null
	,roundPixels: null
	,transformProperty: null
	,transformOriginProperty: null
	,upscaled: null
	,vendorPrefix: null
	,projectionMatrix: null
	,z: null
	,drawCount: null
	,currentBlendMode: null
	,activeTextures: null
	,blendModeManager: null
	,filterManager: null
	,maskManager: null
	,shaderManager: null
	,__class__: openfl__$internal_renderer_RenderSession
};
var openfl__$internal_renderer_cairo_CairoBitmap = function() { };
$hxClasses["openfl._internal.renderer.cairo.CairoBitmap"] = openfl__$internal_renderer_cairo_CairoBitmap;
openfl__$internal_renderer_cairo_CairoBitmap.__name__ = ["openfl","_internal","renderer","cairo","CairoBitmap"];
openfl__$internal_renderer_cairo_CairoBitmap.render = function(bitmap,renderSession) {
	if(!bitmap.__renderable || bitmap.__worldAlpha <= 0) return;
	var cairo = renderSession.cairo;
	if(bitmap.bitmapData != null && bitmap.bitmapData.__isValid) {
		renderSession.maskManager.pushObject(bitmap);
		var transform = bitmap.__renderTransform;
		if(renderSession.roundPixels) {
			var matrix = transform.__toMatrix3();
			matrix.tx = Math.round(matrix.tx);
			matrix.ty = Math.round(matrix.ty);
			cairo.set_matrix(matrix);
		} else cairo.set_matrix(transform.__toMatrix3());
		var surface = bitmap.bitmapData.getSurface();
		if(surface != null) {
			var pattern = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createForSurface(surface);
			lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_filter(pattern,renderSession.allowSmoothing && bitmap.smoothing?1:3);
			cairo.set_source(pattern);
			if(bitmap.__worldAlpha == 1) cairo.paint(); else cairo.paintWithAlpha(bitmap.__worldAlpha);
		}
		renderSession.maskManager.popObject(bitmap);
	}
};
var openfl__$internal_renderer_cairo_CairoBlendModeManager = function(renderSession) {
	openfl__$internal_renderer_AbstractBlendModeManager.call(this);
	this.renderSession = renderSession;
};
$hxClasses["openfl._internal.renderer.cairo.CairoBlendModeManager"] = openfl__$internal_renderer_cairo_CairoBlendModeManager;
openfl__$internal_renderer_cairo_CairoBlendModeManager.__name__ = ["openfl","_internal","renderer","cairo","CairoBlendModeManager"];
openfl__$internal_renderer_cairo_CairoBlendModeManager.__super__ = openfl__$internal_renderer_AbstractBlendModeManager;
openfl__$internal_renderer_cairo_CairoBlendModeManager.prototype = $extend(openfl__$internal_renderer_AbstractBlendModeManager.prototype,{
	currentBlendMode: null
	,renderSession: null
	,setBlendMode: function(blendMode) {
		if(this.currentBlendMode == blendMode) return;
		this.currentBlendMode = blendMode;
		switch(blendMode) {
		case 0:
			this.renderSession.cairo.set_operator(12);
			break;
		case 1:
			break;
		case 2:
			this.renderSession.cairo.set_operator(17);
			break;
		case 3:
			this.renderSession.cairo.set_operator(23);
			break;
		case 4:
			break;
		case 5:
			this.renderSession.cairo.set_operator(21);
			break;
		case 6:
			break;
		case 7:
			this.renderSession.cairo.set_operator(2);
			break;
		case 8:
			this.renderSession.cairo.set_operator(18);
			break;
		case 9:
			this.renderSession.cairo.set_operator(14);
			break;
		case 10:
			this.renderSession.cairo.set_operator(2);
			break;
		case 11:
			this.renderSession.cairo.set_operator(16);
			break;
		case 12:
			this.renderSession.cairo.set_operator(15);
			break;
		case 13:
			break;
		case 14:
			break;
		default:
			this.renderSession.cairo.set_operator(2);
		}
	}
	,__class__: openfl__$internal_renderer_cairo_CairoBlendModeManager
});
var openfl__$internal_renderer_cairo_CairoDisplayObject = function() { };
$hxClasses["openfl._internal.renderer.cairo.CairoDisplayObject"] = openfl__$internal_renderer_cairo_CairoDisplayObject;
openfl__$internal_renderer_cairo_CairoDisplayObject.__name__ = ["openfl","_internal","renderer","cairo","CairoDisplayObject"];
openfl__$internal_renderer_cairo_CairoDisplayObject.render = function(displayObject,renderSession) {
};
var openfl__$internal_renderer_cairo_CairoGraphics = function() { };
$hxClasses["openfl._internal.renderer.cairo.CairoGraphics"] = openfl__$internal_renderer_cairo_CairoGraphics;
openfl__$internal_renderer_cairo_CairoGraphics.__name__ = ["openfl","_internal","renderer","cairo","CairoGraphics"];
openfl__$internal_renderer_cairo_CairoGraphics.closePath = function(strokeBefore) {
	if(strokeBefore == null) strokeBefore = false;
	if(openfl__$internal_renderer_cairo_CairoGraphics.strokePattern == null) return;
	if(!strokeBefore) openfl__$internal_renderer_cairo_CairoGraphics.cairo.closePath();
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_source(openfl__$internal_renderer_cairo_CairoGraphics.strokePattern);
	if(!openfl__$internal_renderer_cairo_CairoGraphics.hitTesting) openfl__$internal_renderer_cairo_CairoGraphics.cairo.strokePreserve();
	if(strokeBefore) openfl__$internal_renderer_cairo_CairoGraphics.cairo.closePath();
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.newPath();
};
openfl__$internal_renderer_cairo_CairoGraphics.createGradientPattern = function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
	var pattern = null;
	switch(type) {
	case 1:
		if(matrix == null) matrix = new openfl_geom_Matrix();
		var point = matrix.transformPoint(new openfl_geom_Point(1638.4,0));
		var x = matrix.tx + openfl__$internal_renderer_cairo_CairoGraphics.graphics.__bounds.x;
		var y = matrix.ty + openfl__$internal_renderer_cairo_CairoGraphics.graphics.__bounds.y;
		pattern = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createRadial(x,y,0,x,y,Math.abs((point.x - matrix.tx) / 2));
		break;
	case 0:
		if(matrix == null) matrix = new openfl_geom_Matrix();
		var point1 = matrix.transformPoint(new openfl_geom_Point(-819.2,0));
		var point2 = matrix.transformPoint(new openfl_geom_Point(819.2,0));
		point1.x += openfl__$internal_renderer_cairo_CairoGraphics.graphics.__bounds.x;
		point2.x += openfl__$internal_renderer_cairo_CairoGraphics.graphics.__bounds.x;
		point1.y += openfl__$internal_renderer_cairo_CairoGraphics.graphics.__bounds.y;
		point2.y += openfl__$internal_renderer_cairo_CairoGraphics.graphics.__bounds.y;
		pattern = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createLinear(point1.x,point1.y,point2.x,point2.y);
		break;
	}
	var _g1 = 0;
	var _g = colors.length;
	while(_g1 < _g) {
		var i = _g1++;
		var rgb = colors[i];
		var alpha = alphas[i];
		var r = ((rgb & 16711680) >>> 16) / 255;
		var g = ((rgb & 65280) >>> 8) / 255;
		var b = (rgb & 255) / 255;
		var ratio = ratios[i] / 255;
		if(ratio < 0) ratio = 0;
		if(ratio > 1) ratio = 1;
		lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.addColorStopRGBA(pattern,ratio,r,g,b,alpha);
	}
	var mat = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.get_matrix(pattern);
	mat.tx = openfl__$internal_renderer_cairo_CairoGraphics.bounds.x;
	mat.ty = openfl__$internal_renderer_cairo_CairoGraphics.bounds.y;
	lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_matrix(pattern,mat);
	return pattern;
};
openfl__$internal_renderer_cairo_CairoGraphics.createImagePattern = function(bitmapFill,matrix,bitmapRepeat,smooth) {
	var pattern = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createForSurface(bitmapFill.getSurface());
	lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_filter(pattern,smooth && openfl__$internal_renderer_cairo_CairoGraphics.allowSmoothing?1:3);
	if(bitmapRepeat) lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_extend(pattern,1);
	openfl__$internal_renderer_cairo_CairoGraphics.fillPatternMatrix = matrix;
	return pattern;
};
openfl__$internal_renderer_cairo_CairoGraphics.drawRoundRect = function(x,y,width,height,ellipseWidth,ellipseHeight) {
	if(ellipseHeight == null) ellipseHeight = ellipseWidth;
	ellipseWidth *= 0.5;
	ellipseHeight *= 0.5;
	if(ellipseWidth > width / 2) ellipseWidth = width / 2;
	if(ellipseHeight > height / 2) ellipseHeight = height / 2;
	var xe = x + width;
	var ye = y + height;
	var cx1 = -ellipseWidth + ellipseWidth * openfl__$internal_renderer_cairo_CairoGraphics.SIN45;
	var cx2 = -ellipseWidth + ellipseWidth * openfl__$internal_renderer_cairo_CairoGraphics.TAN22;
	var cy1 = -ellipseHeight + ellipseHeight * openfl__$internal_renderer_cairo_CairoGraphics.SIN45;
	var cy2 = -ellipseHeight + ellipseHeight * openfl__$internal_renderer_cairo_CairoGraphics.TAN22;
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(xe,ye - ellipseHeight);
	openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(xe,ye + cy2,xe + cx1,ye + cy1);
	openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(xe + cx2,ye,xe - ellipseWidth,ye);
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(x + ellipseWidth,ye);
	openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(x - cx2,ye,x - cx1,ye + cy1);
	openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(x,ye + cy2,x,ye - ellipseHeight);
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(x,y + ellipseHeight);
	openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(x,y - cy2,x - cx1,y - cy1);
	openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(x - cx2,y,x + ellipseWidth,y);
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(xe - ellipseWidth,y);
	openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(xe + cx2,y,xe + cx1,y - cy1);
	openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(xe,y - cy2,xe,y + ellipseHeight);
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(xe,ye - ellipseHeight);
};
openfl__$internal_renderer_cairo_CairoGraphics.endFill = function() {
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.newPath();
	openfl__$internal_renderer_cairo_CairoGraphics.playCommands(openfl__$internal_renderer_cairo_CairoGraphics.fillCommands,false);
	openfl__$internal_renderer_cairo_CairoGraphics.fillCommands.clear();
};
openfl__$internal_renderer_cairo_CairoGraphics.endStroke = function() {
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.newPath();
	openfl__$internal_renderer_cairo_CairoGraphics.playCommands(openfl__$internal_renderer_cairo_CairoGraphics.strokeCommands,true);
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.closePath();
	openfl__$internal_renderer_cairo_CairoGraphics.strokeCommands.clear();
};
openfl__$internal_renderer_cairo_CairoGraphics.hitTest = function(graphics,x,y) {
	return false;
};
openfl__$internal_renderer_cairo_CairoGraphics.isCCW = function(x1,y1,x2,y2,x3,y3) {
	return (x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1) < 0;
};
openfl__$internal_renderer_cairo_CairoGraphics.normalizeUVT = function(uvt,skipT) {
	if(skipT == null) skipT = false;
	var max = -Infinity;
	var tmp = -Infinity;
	var len = uvt.get_length();
	var _g1 = 1;
	var _g = len + 1;
	while(_g1 < _g) {
		var t = _g1++;
		if(skipT && t % 3 == 0) continue;
		tmp = uvt.get(t - 1);
		if(max < tmp) max = tmp;
	}
	if(!skipT) return { max : max, uvt : uvt};
	var result = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
	var _g11 = 1;
	var _g2 = len + 1;
	while(_g11 < _g2) {
		var t1 = _g11++;
		if(skipT && t1 % 3 == 0) continue;
		var x = uvt.get(t1 - 1);
		result.push(x);
	}
	return { max : max, uvt : result};
};
openfl__$internal_renderer_cairo_CairoGraphics.playCommands = function(commands,stroke) {
	if(stroke == null) stroke = false;
	if(commands.get_length() == 0) return;
	openfl__$internal_renderer_cairo_CairoGraphics.bounds = openfl__$internal_renderer_cairo_CairoGraphics.graphics.__bounds;
	var offsetX = openfl__$internal_renderer_cairo_CairoGraphics.bounds.x;
	var offsetY = openfl__$internal_renderer_cairo_CairoGraphics.bounds.y;
	var positionX = 0.0;
	var positionY = 0.0;
	var closeGap = false;
	var startX = 0.0;
	var startY = 0.0;
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_fillRule(1);
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_antialias(3);
	var hasPath = false;
	var data = new openfl__$internal_renderer_DrawCommandReader(commands);
	var _g = 0;
	var _g1 = commands.types;
	try {
		while(_g < _g1.length) {
			var type = _g1[_g];
			++_g;
			switch(type[1]) {
			case 3:
				var c = data.readCubicCurveTo();
				hasPath = true;
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.curveTo(openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX1(c) - offsetX,openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY1(c) - offsetY,openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX2(c) - offsetX,openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY2(c) - offsetY,openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorX(c) - offsetX,openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorY(c) - offsetY);
				break;
			case 4:
				var c1 = data.readCurveTo();
				hasPath = true;
				openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlX(c1) - offsetX,openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlY(c1) - offsetY,openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorX(c1) - offsetX,openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorY(c1) - offsetY);
				break;
			case 5:
				var c2 = data.readDrawCircle();
				hasPath = true;
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_x(c2) - offsetX + openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_radius(c2),openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_y(c2) - offsetY);
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.arc(openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_x(c2) - offsetX,openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_y(c2) - offsetY,openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_radius(c2),0,Math.PI * 2);
				break;
			case 7:
				var c3 = data.readDrawRect();
				hasPath = true;
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.rectangle(openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_x(c3) - offsetX,openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_y(c3) - offsetY,openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_width(c3),openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_height(c3));
				break;
			case 6:
				var c4 = data.readDrawEllipse();
				hasPath = true;
				var x = openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_x(c4);
				var y = openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_y(c4);
				var width = openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_width(c4);
				var height = openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_height(c4);
				x -= offsetX;
				y -= offsetY;
				var kappa = .5522848;
				var ox = width / 2 * kappa;
				var oy = height / 2 * kappa;
				var xe = x + width;
				var ye = y + height;
				var xm = x + width / 2;
				var ym = y + height / 2;
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(x,ym);
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.curveTo(x,ym - oy,xm - ox,y,xm,y);
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.curveTo(xm + ox,y,xe,ym - oy,xe,ym);
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.curveTo(xe,ym + oy,xm + ox,ye,xm,ye);
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.curveTo(xm - ox,ye,x,ym + oy,x,ym);
				break;
			case 8:
				var c5 = data.readDrawRoundRect();
				hasPath = true;
				openfl__$internal_renderer_cairo_CairoGraphics.drawRoundRect(openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_x(c5) - offsetX,openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_y(c5) - offsetY,openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_width(c5),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_height(c5),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseWidth(c5),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseHeight(c5));
				break;
			case 15:
				var c6 = data.readLineTo();
				hasPath = true;
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_x(c6) - offsetX,openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_y(c6) - offsetY);
				positionX = openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_x(c6);
				positionY = openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_y(c6);
				break;
			case 16:
				var c7 = data.readMoveTo();
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_x(c7) - offsetX,openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_y(c7) - offsetY);
				positionX = openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_x(c7);
				positionY = openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_y(c7);
				closeGap = true;
				startX = openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_x(c7);
				startY = openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_y(c7);
				break;
			case 14:
				var c8 = data.readLineStyle();
				if(stroke && openfl__$internal_renderer_cairo_CairoGraphics.hasStroke) openfl__$internal_renderer_cairo_CairoGraphics.closePath(openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_thickness(c8) == null);
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(positionX - offsetX,positionY - offsetY);
				if(openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_thickness(c8) == null) openfl__$internal_renderer_cairo_CairoGraphics.hasStroke = false; else {
					openfl__$internal_renderer_cairo_CairoGraphics.hasStroke = true;
					openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_lineWidth(openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_thickness(c8) > 0?openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_thickness(c8):1);
					if(openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_joints(c8) == null) openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_lineJoin(1); else openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_lineJoin((function($this) {
						var $r;
						var _g2 = openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_joints(c8);
						$r = (function($this) {
							var $r;
							switch(_g2) {
							case 1:
								$r = 0;
								break;
							case 0:
								$r = 2;
								break;
							default:
								$r = 1;
							}
							return $r;
						}($this));
						return $r;
					}(this)));
					if(openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_caps(c8) == null) openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_lineCap(1); else openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_lineCap((function($this) {
						var $r;
						var _g21 = openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_caps(c8);
						$r = (function($this) {
							var $r;
							switch(_g21) {
							case 0:
								$r = 0;
								break;
							case 2:
								$r = 2;
								break;
							default:
								$r = 1;
							}
							return $r;
						}($this));
						return $r;
					}(this)));
					openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_miterLimit(openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_miterLimit(c8));
					var r = ((openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_color(c8) & 16711680) >>> 16) / 255;
					var g = ((openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_color(c8) & 65280) >>> 8) / 255;
					var b = (openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_color(c8) & 255) / 255;
					if(openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_alpha(c8) == 1) openfl__$internal_renderer_cairo_CairoGraphics.strokePattern = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createRGB(r,g,b); else openfl__$internal_renderer_cairo_CairoGraphics.strokePattern = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createRGBA(r,g,b,openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_alpha(c8));
				}
				break;
			case 13:
				var c9 = data.readLineGradientStyle();
				if(stroke && openfl__$internal_renderer_cairo_CairoGraphics.hasStroke) openfl__$internal_renderer_cairo_CairoGraphics.closePath();
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(positionX - offsetX,positionY - offsetY);
				openfl__$internal_renderer_cairo_CairoGraphics.strokePattern = openfl__$internal_renderer_cairo_CairoGraphics.createGradientPattern(openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_type(c9),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_colors(c9),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_alphas(c9),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_ratios(c9),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_matrix(c9),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_spreadMethod(c9),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_interpolationMethod(c9),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_focalPointRatio(c9));
				openfl__$internal_renderer_cairo_CairoGraphics.hasStroke = true;
				break;
			case 12:
				var c10 = data.readLineBitmapStyle();
				if(stroke && openfl__$internal_renderer_cairo_CairoGraphics.hasStroke) openfl__$internal_renderer_cairo_CairoGraphics.closePath();
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(positionX - offsetX,positionY - offsetY);
				openfl__$internal_renderer_cairo_CairoGraphics.strokePattern = openfl__$internal_renderer_cairo_CairoGraphics.createImagePattern(openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_bitmap(c10),openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_matrix(c10),openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_repeat(c10),openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_smooth(c10));
				openfl__$internal_renderer_cairo_CairoGraphics.hasStroke = true;
				break;
			case 0:
				var c11 = data.readBeginBitmapFill();
				openfl__$internal_renderer_cairo_CairoGraphics.fillPattern = openfl__$internal_renderer_cairo_CairoGraphics.createImagePattern(openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_bitmap(c11),openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_matrix(c11),openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_repeat(c11),openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_smooth(c11));
				openfl__$internal_renderer_cairo_CairoGraphics.bitmapFill = openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_bitmap(c11);
				openfl__$internal_renderer_cairo_CairoGraphics.bitmapRepeat = openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_repeat(c11);
				openfl__$internal_renderer_cairo_CairoGraphics.hasFill = true;
				break;
			case 1:
				var c12 = data.readBeginFill();
				if(openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_alpha(c12) < 0.005) openfl__$internal_renderer_cairo_CairoGraphics.hasFill = false; else {
					if(openfl__$internal_renderer_cairo_CairoGraphics.fillPattern != null) openfl__$internal_renderer_cairo_CairoGraphics.fillPatternMatrix = null;
					openfl__$internal_renderer_cairo_CairoGraphics.fillPattern = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createRGBA(((openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_color(c12) & 16711680) >>> 16) / 255,((openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_color(c12) & 65280) >>> 8) / 255,(openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_color(c12) & 255) / 255,openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_alpha(c12));
					openfl__$internal_renderer_cairo_CairoGraphics.hasFill = true;
				}
				openfl__$internal_renderer_cairo_CairoGraphics.bitmapFill = null;
				break;
			case 2:
				var c13 = data.readBeginGradientFill();
				if(openfl__$internal_renderer_cairo_CairoGraphics.fillPattern != null) openfl__$internal_renderer_cairo_CairoGraphics.fillPatternMatrix = null;
				openfl__$internal_renderer_cairo_CairoGraphics.fillPattern = openfl__$internal_renderer_cairo_CairoGraphics.createGradientPattern(openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_type(c13),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_colors(c13),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_alphas(c13),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_ratios(c13),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_matrix(c13),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_spreadMethod(c13),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_interpolationMethod(c13),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_focalPointRatio(c13));
				openfl__$internal_renderer_cairo_CairoGraphics.hasFill = true;
				openfl__$internal_renderer_cairo_CairoGraphics.bitmapFill = null;
				break;
			case 10:
				var c14 = data.readDrawTriangles();
				var v = openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_vertices(c14);
				var ind = openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_indices(c14);
				var uvt = openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_uvtData(c14);
				var colorFill = openfl__$internal_renderer_cairo_CairoGraphics.bitmapFill == null;
				if(colorFill && uvt != null) throw "__break__";
				var width1 = 0;
				var height1 = 0;
				var currentMatrix = openfl__$internal_renderer_cairo_CairoGraphics.graphics.__renderTransform.__toMatrix3();
				if(!colorFill) {
					if(uvt == null) {
						uvt = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
						var _g3 = 0;
						var _g22 = Std["int"](v.get_length() / 2);
						while(_g3 < _g22) {
							var i1 = _g3++;
							var x4 = v.get(i1 * 2) / openfl__$internal_renderer_cairo_CairoGraphics.bitmapFill.width;
							uvt.push(x4);
							var x5 = v.get(i1 * 2 + 1) / openfl__$internal_renderer_cairo_CairoGraphics.bitmapFill.height;
							uvt.push(x5);
						}
					}
					var skipT;
					skipT = (function($this) {
						var $r;
						var this1 = openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_uvtData(c14);
						$r = this1.get_length();
						return $r;
					}(this)) != v.get_length();
					var normalizedUVT = openfl__$internal_renderer_cairo_CairoGraphics.normalizeUVT(uvt,skipT);
					var maxUVT = normalizedUVT.max;
					uvt = normalizedUVT.uvt;
					if(maxUVT > 1) {
						width1 = openfl__$internal_renderer_cairo_CairoGraphics.bounds.width | 0;
						height1 = openfl__$internal_renderer_cairo_CairoGraphics.bounds.height | 0;
					} else {
						width1 = openfl__$internal_renderer_cairo_CairoGraphics.bitmapFill.width;
						height1 = openfl__$internal_renderer_cairo_CairoGraphics.bitmapFill.height;
					}
				}
				var i = 0;
				var l = ind.get_length();
				var a_;
				var b_;
				var c_;
				var iax;
				var iay;
				var ibx;
				var iby;
				var icx;
				var icy;
				var x1;
				var y1;
				var x2;
				var y2;
				var x3;
				var y3;
				var uvx1;
				var uvy1;
				var uvx2;
				var uvy2;
				var uvx3;
				var uvy3;
				var denom;
				var t1;
				var t2;
				var t3;
				var t4;
				var dx;
				var dy;
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_antialias(1);
				while(i < l) {
					a_ = i;
					b_ = i + 1;
					c_ = i + 2;
					iax = ind.get(a_) * 2;
					iay = ind.get(a_) * 2 + 1;
					ibx = ind.get(b_) * 2;
					iby = ind.get(b_) * 2 + 1;
					icx = ind.get(c_) * 2;
					icy = ind.get(c_) * 2 + 1;
					x1 = v.get(iax);
					y1 = v.get(iay);
					x2 = v.get(ibx);
					y2 = v.get(iby);
					x3 = v.get(icx);
					y3 = v.get(icy);
					var _g23 = openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_culling(c14);
					switch(_g23) {
					case 2:
						if(!((x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1) < 0)) {
							i += 3;
							continue;
						}
						break;
					case 0:
						if((x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1) < 0) {
							i += 3;
							continue;
						}
						break;
					default:
					}
					if(colorFill) {
						openfl__$internal_renderer_cairo_CairoGraphics.cairo.newPath();
						openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(x1,y1);
						openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(x2,y2);
						openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(x3,y3);
						openfl__$internal_renderer_cairo_CairoGraphics.cairo.closePath();
						if(!openfl__$internal_renderer_cairo_CairoGraphics.hitTesting) openfl__$internal_renderer_cairo_CairoGraphics.cairo.fillPreserve();
						i += 3;
						continue;
					}
					openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_matrix(openfl__$internal_renderer_cairo_CairoGraphics.graphics.__renderTransform.__toMatrix3());
					openfl__$internal_renderer_cairo_CairoGraphics.cairo.newPath();
					openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(x1,y1);
					openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(x2,y2);
					openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(x3,y3);
					openfl__$internal_renderer_cairo_CairoGraphics.cairo.closePath();
					uvx1 = uvt.get(iax) * width1;
					uvx2 = uvt.get(ibx) * width1;
					uvx3 = uvt.get(icx) * width1;
					uvy1 = uvt.get(iay) * height1;
					uvy2 = uvt.get(iby) * height1;
					uvy3 = uvt.get(icy) * height1;
					denom = uvx1 * (uvy3 - uvy2) - uvx2 * uvy3 + uvx3 * uvy2 + (uvx2 - uvx3) * uvy1;
					if(denom == 0) {
						i += 3;
						continue;
					}
					x1 *= currentMatrix.a;
					x2 *= currentMatrix.a;
					x3 *= currentMatrix.a;
					y1 *= currentMatrix.d;
					y2 *= currentMatrix.d;
					y3 *= currentMatrix.d;
					t1 = -(uvy1 * (x3 - x2) - uvy2 * x3 + uvy3 * x2 + (uvy2 - uvy3) * x1) / denom;
					t2 = (uvy2 * y3 + uvy1 * (y2 - y3) - uvy3 * y2 + (uvy3 - uvy2) * y1) / denom;
					t3 = (uvx1 * (x3 - x2) - uvx2 * x3 + uvx3 * x2 + (uvx2 - uvx3) * x1) / denom;
					t4 = -(uvx2 * y3 + uvx1 * (y2 - y3) - uvx3 * y2 + (uvx3 - uvx2) * y1) / denom;
					dx = (uvx1 * (uvy3 * x2 - uvy2 * x3) + uvy1 * (uvx2 * x3 - uvx3 * x2) + (uvx3 * uvy2 - uvx2 * uvy3) * x1) / denom;
					dy = (uvx1 * (uvy3 * y2 - uvy2 * y3) + uvy1 * (uvx2 * y3 - uvx3 * y2) + (uvx3 * uvy2 - uvx2 * uvy3) * y1) / denom;
					var matrix = new lime_math_Matrix3(t1,t2,t3,t4,dx,dy);
					openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_matrix(matrix);
					openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_source(openfl__$internal_renderer_cairo_CairoGraphics.fillPattern);
					if(!openfl__$internal_renderer_cairo_CairoGraphics.hitTesting) openfl__$internal_renderer_cairo_CairoGraphics.cairo.fill();
					i += 3;
				}
				break;
			default:
				data.skip(type);
			}
		}
	} catch( e ) { if( e != "__break__" ) throw e; }
	data.destroy();
	if(hasPath) {
		if(stroke && openfl__$internal_renderer_cairo_CairoGraphics.hasStroke) {
			if(openfl__$internal_renderer_cairo_CairoGraphics.hasFill && closeGap) openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(startX - offsetX,startY - offsetY); else if(closeGap && positionX == startX && positionY == startY) openfl__$internal_renderer_cairo_CairoGraphics.closePath(true);
			openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_source(openfl__$internal_renderer_cairo_CairoGraphics.strokePattern);
			if(!openfl__$internal_renderer_cairo_CairoGraphics.hitTesting) openfl__$internal_renderer_cairo_CairoGraphics.cairo.strokePreserve();
		}
		if(!stroke && openfl__$internal_renderer_cairo_CairoGraphics.hasFill) {
			openfl__$internal_renderer_cairo_CairoGraphics.cairo.translate(-openfl__$internal_renderer_cairo_CairoGraphics.bounds.x,-openfl__$internal_renderer_cairo_CairoGraphics.bounds.y);
			if(openfl__$internal_renderer_cairo_CairoGraphics.fillPatternMatrix != null) {
				var matrix1 = openfl__$internal_renderer_cairo_CairoGraphics.fillPatternMatrix.clone();
				matrix1.invert();
				if(openfl__$internal_renderer_cairo_CairoGraphics.pendingMatrix != null) matrix1.concat(openfl__$internal_renderer_cairo_CairoGraphics.pendingMatrix);
				lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_matrix(openfl__$internal_renderer_cairo_CairoGraphics.fillPattern,matrix1.__toMatrix3());
			}
			openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_source(openfl__$internal_renderer_cairo_CairoGraphics.fillPattern);
			if(openfl__$internal_renderer_cairo_CairoGraphics.pendingMatrix != null) {
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.transform(openfl__$internal_renderer_cairo_CairoGraphics.pendingMatrix.__toMatrix3());
				if(!openfl__$internal_renderer_cairo_CairoGraphics.hitTesting) openfl__$internal_renderer_cairo_CairoGraphics.cairo.fillPreserve();
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.transform(openfl__$internal_renderer_cairo_CairoGraphics.inversePendingMatrix.__toMatrix3());
			} else if(!openfl__$internal_renderer_cairo_CairoGraphics.hitTesting) openfl__$internal_renderer_cairo_CairoGraphics.cairo.fillPreserve();
			openfl__$internal_renderer_cairo_CairoGraphics.cairo.translate(openfl__$internal_renderer_cairo_CairoGraphics.bounds.x,openfl__$internal_renderer_cairo_CairoGraphics.bounds.y);
			openfl__$internal_renderer_cairo_CairoGraphics.cairo.closePath();
		}
	}
};
openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo = function(cx,cy,x,y) {
	var current = null;
	if(!openfl__$internal_renderer_cairo_CairoGraphics.cairo.get_hasCurrentPoint()) {
		openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(cx,cy);
		current = new lime_math_Vector2(cx,cy);
	} else current = openfl__$internal_renderer_cairo_CairoGraphics.cairo.get_currentPoint();
	var cx1 = current.x + 0.66666666666666663 * (cx - current.x);
	var cy1 = current.y + 0.66666666666666663 * (cy - current.y);
	var cx2 = x + 0.66666666666666663 * (cx - x);
	var cy2 = y + 0.66666666666666663 * (cy - y);
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.curveTo(cx1,cy1,cx2,cy2,x,y);
};
openfl__$internal_renderer_cairo_CairoGraphics.render = function(graphics,renderSession,parentTransform) {
};
openfl__$internal_renderer_cairo_CairoGraphics.renderMask = function(graphics,renderSession) {
	if(graphics.__commands.get_length() != 0) {
		var cairo = renderSession.cairo;
		var positionX = 0.0;
		var positionY = 0.0;
		var offsetX = 0;
		var offsetY = 0;
		var data = new openfl__$internal_renderer_DrawCommandReader(graphics.__commands);
		var _g = 0;
		var _g1 = graphics.__commands.types;
		while(_g < _g1.length) {
			var type = _g1[_g];
			++_g;
			switch(type[1]) {
			case 3:
				var c = data.readCubicCurveTo();
				cairo.curveTo(openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX1(c) - offsetX,openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY1(c) - offsetY,openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX2(c) - offsetX,openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY2(c) - offsetY,openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorX(c) - offsetX,openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorY(c) - offsetY);
				positionX = openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorX(c);
				positionY = openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorX(c);
				break;
			case 4:
				var c1 = data.readCurveTo();
				openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlX(c1) - offsetX,openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlY(c1) - offsetY,openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorX(c1) - offsetX,openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorY(c1) - offsetY);
				positionX = openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorX(c1);
				positionY = openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorY(c1);
				break;
			case 5:
				var c2 = data.readDrawCircle();
				cairo.arc(openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_x(c2) - offsetX,openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_y(c2) - offsetY,openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_radius(c2),0,Math.PI * 2);
				break;
			case 6:
				var c3 = data.readDrawEllipse();
				var x = openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_x(c3);
				var y = openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_y(c3);
				var width = openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_width(c3);
				var height = openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_height(c3);
				x -= offsetX;
				y -= offsetY;
				var kappa = .5522848;
				var ox = width / 2 * kappa;
				var oy = height / 2 * kappa;
				var xe = x + width;
				var ye = y + height;
				var xm = x + width / 2;
				var ym = y + height / 2;
				cairo.moveTo(x,ym);
				cairo.curveTo(x,ym - oy,xm - ox,y,xm,y);
				cairo.curveTo(xm + ox,y,xe,ym - oy,xe,ym);
				cairo.curveTo(xe,ym + oy,xm + ox,ye,xm,ye);
				cairo.curveTo(xm - ox,ye,x,ym + oy,x,ym);
				break;
			case 7:
				var c4 = data.readDrawRect();
				cairo.rectangle(openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_x(c4) - offsetX,openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_y(c4) - offsetY,openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_width(c4),openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_height(c4));
				break;
			case 8:
				var c5 = data.readDrawRoundRect();
				openfl__$internal_renderer_cairo_CairoGraphics.drawRoundRect(openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_x(c5) - offsetX,openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_y(c5) - offsetY,openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_width(c5),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_height(c5),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseWidth(c5),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseHeight(c5));
				break;
			case 15:
				var c6 = data.readLineTo();
				cairo.lineTo(openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_x(c6) - offsetX,openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_y(c6) - offsetY);
				positionX = openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_x(c6);
				positionY = openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_y(c6);
				break;
			case 16:
				var c7 = data.readMoveTo();
				cairo.moveTo(openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_x(c7) - offsetX,openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_y(c7) - offsetY);
				positionX = openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_x(c7);
				positionY = openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_y(c7);
				break;
			default:
				data.skip(type);
			}
		}
		data.destroy();
	}
};
var openfl__$internal_renderer_cairo_CairoMaskManager = function(renderSession) {
	openfl__$internal_renderer_AbstractMaskManager.call(this,renderSession);
};
$hxClasses["openfl._internal.renderer.cairo.CairoMaskManager"] = openfl__$internal_renderer_cairo_CairoMaskManager;
openfl__$internal_renderer_cairo_CairoMaskManager.__name__ = ["openfl","_internal","renderer","cairo","CairoMaskManager"];
openfl__$internal_renderer_cairo_CairoMaskManager.__super__ = openfl__$internal_renderer_AbstractMaskManager;
openfl__$internal_renderer_cairo_CairoMaskManager.prototype = $extend(openfl__$internal_renderer_AbstractMaskManager.prototype,{
	pushMask: function(mask) {
		var cairo = this.renderSession.cairo;
		cairo.save();
		var transform = mask.__getRenderTransform();
		cairo.set_matrix(transform.__toMatrix3());
		cairo.newPath();
		mask.__renderCairoMask(this.renderSession);
		cairo.clip();
	}
	,pushObject: function(object,handleScrollRect) {
		if(handleScrollRect == null) handleScrollRect = true;
		if(handleScrollRect && object.__scrollRect != null) this.pushRect(object.__scrollRect,object.__renderTransform);
		if(object.__mask != null) this.pushMask(object.__mask);
	}
	,pushRect: function(rect,transform) {
		var cairo = this.renderSession.cairo;
		cairo.save();
		cairo.set_matrix(new lime_math_Matrix3(transform.a,transform.c,transform.b,transform.d,transform.tx,transform.ty));
		cairo.newPath();
		cairo.rectangle(rect.x,rect.y,rect.width,rect.height);
		cairo.clip();
	}
	,popMask: function() {
		this.renderSession.cairo.restore();
	}
	,popObject: function(object,handleScrollRect) {
		if(handleScrollRect == null) handleScrollRect = true;
		if(object.__mask != null) this.popMask();
		if(handleScrollRect && object.__scrollRect != null) this.popRect();
	}
	,popRect: function() {
		this.renderSession.cairo.restore();
	}
	,__class__: openfl__$internal_renderer_cairo_CairoMaskManager
});
var openfl__$internal_renderer_cairo_CairoRenderer = function(stage,cairo) {
	openfl__$internal_renderer_AbstractRenderer.call(this,stage);
	this.cairo = cairo;
	this.renderSession = new openfl__$internal_renderer_RenderSession();
	this.renderSession.cairo = cairo;
	this.renderSession.roundPixels = true;
	this.renderSession.renderer = this;
	this.renderSession.maskManager = new openfl__$internal_renderer_cairo_CairoMaskManager(this.renderSession);
	this.renderSession.blendModeManager = new openfl__$internal_renderer_cairo_CairoBlendModeManager(this.renderSession);
};
$hxClasses["openfl._internal.renderer.cairo.CairoRenderer"] = openfl__$internal_renderer_cairo_CairoRenderer;
openfl__$internal_renderer_cairo_CairoRenderer.__name__ = ["openfl","_internal","renderer","cairo","CairoRenderer"];
openfl__$internal_renderer_cairo_CairoRenderer.__super__ = openfl__$internal_renderer_AbstractRenderer;
openfl__$internal_renderer_cairo_CairoRenderer.prototype = $extend(openfl__$internal_renderer_AbstractRenderer.prototype,{
	cairo: null
	,clear: function() {
		var _g = 0;
		var _g1 = this.stage.stage3Ds;
		while(_g < _g1.get_length()) {
			var stage3D = _g1.get(_g);
			++_g;
			stage3D.__renderCairo(this.stage,this.renderSession);
		}
	}
	,render: function() {
		this.renderSession.allowSmoothing = this.stage.quality != 2;
		this.cairo.identityMatrix();
		if(this.stage.__clearBeforeRender) {
			this.cairo.setSourceRGB(this.stage.__colorSplit[0],this.stage.__colorSplit[1],this.stage.__colorSplit[2]);
			this.cairo.paint();
		}
		this.stage.__renderCairo(this.renderSession);
	}
	,__class__: openfl__$internal_renderer_cairo_CairoRenderer
});
var openfl__$internal_renderer_cairo_CairoTextField = function() { };
$hxClasses["openfl._internal.renderer.cairo.CairoTextField"] = openfl__$internal_renderer_cairo_CairoTextField;
openfl__$internal_renderer_cairo_CairoTextField.__name__ = ["openfl","_internal","renderer","cairo","CairoTextField"];
openfl__$internal_renderer_cairo_CairoTextField.render = function(textField,renderSession,transform) {
};
var openfl__$internal_renderer_canvas_CanvasBitmap = function() { };
$hxClasses["openfl._internal.renderer.canvas.CanvasBitmap"] = openfl__$internal_renderer_canvas_CanvasBitmap;
openfl__$internal_renderer_canvas_CanvasBitmap.__name__ = ["openfl","_internal","renderer","canvas","CanvasBitmap"];
openfl__$internal_renderer_canvas_CanvasBitmap.render = function(bitmap,renderSession) {
	if(!bitmap.__renderable || bitmap.__worldAlpha <= 0) return;
	var context = renderSession.context;
	if(bitmap.bitmapData != null && bitmap.bitmapData.__isValid) {
		renderSession.maskManager.pushObject(bitmap,false);
		lime_graphics_utils_ImageCanvasUtil.convertToCanvas(bitmap.bitmapData.image);
		context.globalAlpha = bitmap.__worldAlpha;
		var transform = bitmap.__renderTransform;
		var scrollRect = bitmap.__scrollRect;
		if(renderSession.roundPixels) context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx | 0,transform.ty | 0); else context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
		if(!renderSession.allowSmoothing || !bitmap.smoothing) {
			context.mozImageSmoothingEnabled = false;
			context.msImageSmoothingEnabled = false;
			context.imageSmoothingEnabled = false;
		}
		if(scrollRect == null) context.drawImage(bitmap.bitmapData.image.get_src(),0,0); else context.drawImage(bitmap.bitmapData.image.get_src(),scrollRect.x,scrollRect.y,scrollRect.width,scrollRect.height,scrollRect.x,scrollRect.y,scrollRect.width,scrollRect.height);
		if(!renderSession.allowSmoothing || !bitmap.smoothing) {
			context.mozImageSmoothingEnabled = true;
			context.msImageSmoothingEnabled = true;
			context.imageSmoothingEnabled = true;
		}
		renderSession.maskManager.popObject(bitmap,false);
	}
};
var openfl__$internal_renderer_canvas_CanvasDisplayObject = function() { };
$hxClasses["openfl._internal.renderer.canvas.CanvasDisplayObject"] = openfl__$internal_renderer_canvas_CanvasDisplayObject;
openfl__$internal_renderer_canvas_CanvasDisplayObject.__name__ = ["openfl","_internal","renderer","canvas","CanvasDisplayObject"];
openfl__$internal_renderer_canvas_CanvasDisplayObject.render = function(displayObject,renderSession) {
	if(displayObject.opaqueBackground == null && displayObject.__graphics == null) return;
	if(!displayObject.__renderable || displayObject.__worldAlpha <= 0) return;
	if(displayObject.opaqueBackground != null && displayObject.get_width() > 0 && displayObject.get_height() > 0) {
		renderSession.maskManager.pushObject(displayObject);
		var context = renderSession.context;
		var transform = displayObject.__renderTransform;
		if(renderSession.roundPixels) context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx | 0,transform.ty | 0); else context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
		var color = displayObject.opaqueBackground;
		context.fillStyle = "rgb(" + (color >> 16 & 255) + "," + (color >> 8 & 255) + "," + (color & 255) + ")";
		context.fillRect(0,0,displayObject.get_width(),displayObject.get_height());
		renderSession.maskManager.popObject(displayObject);
	}
	if(displayObject.__graphics != null) openfl__$internal_renderer_canvas_CanvasShape.render(displayObject,renderSession);
};
var openfl__$internal_renderer_canvas_CanvasGraphics = function() { };
$hxClasses["openfl._internal.renderer.canvas.CanvasGraphics"] = openfl__$internal_renderer_canvas_CanvasGraphics;
openfl__$internal_renderer_canvas_CanvasGraphics.__name__ = ["openfl","_internal","renderer","canvas","CanvasGraphics"];
openfl__$internal_renderer_canvas_CanvasGraphics.closePath = function(strokeBefore) {
	if(strokeBefore == null) strokeBefore = false;
	if(openfl__$internal_renderer_canvas_CanvasGraphics.context.strokeStyle == null) return;
	if(!strokeBefore) openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
	openfl__$internal_renderer_canvas_CanvasGraphics.context.stroke();
	if(strokeBefore) openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
	openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
};
openfl__$internal_renderer_canvas_CanvasGraphics.createBitmapFill = function(bitmap,bitmapRepeat,smooth) {
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(bitmap.image);
	openfl__$internal_renderer_canvas_CanvasGraphics.setSmoothing(smooth);
	return openfl__$internal_renderer_canvas_CanvasGraphics.context.createPattern(bitmap.image.get_src(),bitmapRepeat?"repeat":"no-repeat");
};
openfl__$internal_renderer_canvas_CanvasGraphics.createGradientPattern = function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
	var gradientFill = null;
	switch(type) {
	case 1:
		if(matrix == null) matrix = new openfl_geom_Matrix();
		var point = matrix.transformPoint(new openfl_geom_Point(1638.4,0));
		gradientFill = openfl__$internal_renderer_canvas_CanvasGraphics.context.createRadialGradient(matrix.tx,matrix.ty,0,matrix.tx,matrix.ty,Math.abs((point.x - matrix.tx) / 2));
		break;
	case 0:
		var matrix1;
		if(matrix != null) matrix1 = matrix; else matrix1 = new openfl_geom_Matrix();
		var point1 = matrix1.transformPoint(new openfl_geom_Point(-819.2,0));
		var point2 = matrix1.transformPoint(new openfl_geom_Point(819.2,0));
		gradientFill = openfl__$internal_renderer_canvas_CanvasGraphics.context.createLinearGradient(point1.x,point1.y,point2.x,point2.y);
		break;
	}
	var _g1 = 0;
	var _g = colors.length;
	while(_g1 < _g) {
		var i = _g1++;
		var rgb = colors[i];
		var alpha = alphas[i];
		var r = (rgb & 16711680) >>> 16;
		var g = (rgb & 65280) >>> 8;
		var b = rgb & 255;
		var ratio = ratios[i] / 255;
		if(ratio < 0) ratio = 0;
		if(ratio > 1) ratio = 1;
		gradientFill.addColorStop(ratio,"rgba(" + r + ", " + g + ", " + b + ", " + alpha + ")");
	}
	return gradientFill;
};
openfl__$internal_renderer_canvas_CanvasGraphics.createTempPatternCanvas = function(bitmap,repeat,width,height) {
	var canvas = window.document.createElement("canvas");
	var context = canvas.getContext("2d");
	canvas.width = width;
	canvas.height = height;
	context.fillStyle = context.createPattern(bitmap.image.get_src(),repeat?"repeat":"no-repeat");
	context.beginPath();
	context.moveTo(0,0);
	context.lineTo(0,height);
	context.lineTo(width,height);
	context.lineTo(width,0);
	context.lineTo(0,0);
	context.closePath();
	if(!openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) context.fill();
	return canvas;
};
openfl__$internal_renderer_canvas_CanvasGraphics.drawRoundRect = function(x,y,width,height,ellipseWidth,ellipseHeight) {
	if(ellipseHeight == null) ellipseHeight = ellipseWidth;
	ellipseWidth *= 0.5;
	ellipseHeight *= 0.5;
	if(ellipseWidth > width / 2) ellipseWidth = width / 2;
	if(ellipseHeight > height / 2) ellipseHeight = height / 2;
	var xe = x + width;
	var ye = y + height;
	var cx1 = -ellipseWidth + ellipseWidth * openfl__$internal_renderer_canvas_CanvasGraphics.SIN45;
	var cx2 = -ellipseWidth + ellipseWidth * openfl__$internal_renderer_canvas_CanvasGraphics.TAN22;
	var cy1 = -ellipseHeight + ellipseHeight * openfl__$internal_renderer_canvas_CanvasGraphics.SIN45;
	var cy2 = -ellipseHeight + ellipseHeight * openfl__$internal_renderer_canvas_CanvasGraphics.TAN22;
	openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(xe,ye - ellipseHeight);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(xe,ye + cy2,xe + cx1,ye + cy1);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(xe + cx2,ye,xe - ellipseWidth,ye);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x + ellipseWidth,ye);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(x - cx2,ye,x - cx1,ye + cy1);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(x,ye + cy2,x,ye - ellipseHeight);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x,y + ellipseHeight);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(x,y - cy2,x - cx1,y - cy1);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(x - cx2,y,x + ellipseWidth,y);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(xe - ellipseWidth,y);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(xe + cx2,y,xe + cx1,y - cy1);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(xe,y - cy2,xe,y + ellipseHeight);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(xe,ye - ellipseHeight);
};
openfl__$internal_renderer_canvas_CanvasGraphics.endFill = function() {
	openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
	openfl__$internal_renderer_canvas_CanvasGraphics.playCommands(openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands,false);
	openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.clear();
};
openfl__$internal_renderer_canvas_CanvasGraphics.endStroke = function() {
	openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
	openfl__$internal_renderer_canvas_CanvasGraphics.playCommands(openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands,true);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
	openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.clear();
};
openfl__$internal_renderer_canvas_CanvasGraphics.hitTest = function(graphics,x,y) {
	openfl__$internal_renderer_canvas_CanvasGraphics.bounds = graphics.__bounds;
	openfl__$internal_renderer_canvas_CanvasGraphics.graphics = graphics;
	if(graphics.__commands.get_length() == 0 || openfl__$internal_renderer_canvas_CanvasGraphics.bounds == null || openfl__$internal_renderer_canvas_CanvasGraphics.bounds.width <= 0 || openfl__$internal_renderer_canvas_CanvasGraphics.bounds.height <= 0) return false; else {
		openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting = true;
		var transform = graphics.__renderTransform;
		var px = x * transform.a + y * transform.c + transform.tx;
		var py = x * transform.b + y * transform.d + transform.ty;
		x = px;
		y = py;
		x -= openfl__$internal_renderer_canvas_CanvasGraphics.bounds.x * transform.a + openfl__$internal_renderer_canvas_CanvasGraphics.bounds.y * transform.c + transform.tx;
		y -= openfl__$internal_renderer_canvas_CanvasGraphics.bounds.x * transform.b + openfl__$internal_renderer_canvas_CanvasGraphics.bounds.y * transform.d + transform.ty;
		if(graphics.__canvas == null) {
			graphics.__canvas = window.document.createElement("canvas");
			graphics.__context = graphics.__canvas.getContext("2d");
		}
		openfl__$internal_renderer_canvas_CanvasGraphics.context = graphics.__context;
		openfl__$internal_renderer_canvas_CanvasGraphics.context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
		openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.clear();
		openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.clear();
		openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = false;
		openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = false;
		openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
		openfl__$internal_renderer_canvas_CanvasGraphics.bitmapRepeat = false;
		var data = new openfl__$internal_renderer_DrawCommandReader(graphics.__commands);
		var _g = 0;
		var _g1 = graphics.__commands.types;
		while(_g < _g1.length) {
			var type = _g1[_g];
			++_g;
			switch(type[1]) {
			case 3:
				var c = data.readCubicCurveTo();
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.cubicCurveTo(openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX1(c),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY1(c),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX2(c),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY2(c),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorX(c),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorY(c));
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.cubicCurveTo(openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX1(c),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY1(c),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX2(c),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY2(c),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorX(c),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorY(c));
				break;
			case 4:
				var c1 = data.readCurveTo();
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.curveTo(openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlX(c1),openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlY(c1),openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorX(c1),openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorY(c1));
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.curveTo(openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlX(c1),openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlY(c1),openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorX(c1),openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorY(c1));
				break;
			case 15:
				var c2 = data.readLineTo();
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.lineTo(openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_x(c2),openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_y(c2));
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineTo(openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_x(c2),openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_y(c2));
				break;
			case 16:
				var c3 = data.readMoveTo();
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.moveTo(openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_x(c3),openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_y(c3));
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.moveTo(openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_x(c3),openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_y(c3));
				break;
			case 13:
				var c4 = data.readLineGradientStyle();
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineGradientStyle(openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_type(c4),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_colors(c4),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_alphas(c4),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_ratios(c4),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_matrix(c4),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_spreadMethod(c4),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_interpolationMethod(c4),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_focalPointRatio(c4));
				break;
			case 12:
				var c5 = data.readLineBitmapStyle();
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineBitmapStyle(openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_bitmap(c5),openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_matrix(c5),openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_repeat(c5),openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_smooth(c5));
				break;
			case 14:
				var c6 = data.readLineStyle();
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineStyle(openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_thickness(c6),openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_color(c6),1,openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_pixelHinting(c6),openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_scaleMode(c6),openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_caps(c6),openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_joints(c6),openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_miterLimit(c6));
				break;
			case 11:
				data.readEndFill();
				openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
				openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
				if(openfl__$internal_renderer_canvas_CanvasGraphics.hasFill && openfl__$internal_renderer_canvas_CanvasGraphics.context.isPointInPath(x,y)) {
					data.destroy();
					return true;
				}
				if(openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke && openfl__$internal_renderer_canvas_CanvasGraphics.context.isPointInStroke(x,y)) {
					data.destroy();
					return true;
				}
				openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = false;
				openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
				break;
			case 0:case 1:case 2:
				openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
				openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
				if(openfl__$internal_renderer_canvas_CanvasGraphics.hasFill && openfl__$internal_renderer_canvas_CanvasGraphics.context.isPointInPath(x,y)) {
					data.destroy();
					return true;
				}
				if(openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke && openfl__$internal_renderer_canvas_CanvasGraphics.context.isPointInStroke(x,y)) {
					data.destroy();
					return true;
				}
				if(type == openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL) {
					var c7 = data.readBeginBitmapFill();
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.beginBitmapFill(openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_bitmap(c7),openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_matrix(c7),openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_repeat(c7),openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_smooth(c7));
					openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.beginBitmapFill(openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_bitmap(c7),openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_matrix(c7),openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_repeat(c7),openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_smooth(c7));
				} else if(type == openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL) {
					var c8 = data.readBeginGradientFill();
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.beginGradientFill(openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_type(c8),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_colors(c8),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_alphas(c8),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_ratios(c8),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_matrix(c8),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_spreadMethod(c8),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_interpolationMethod(c8),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_focalPointRatio(c8));
					openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.beginGradientFill(openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_type(c8),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_colors(c8),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_alphas(c8),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_ratios(c8),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_matrix(c8),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_spreadMethod(c8),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_interpolationMethod(c8),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_focalPointRatio(c8));
				} else {
					var c9 = data.readBeginFill();
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.beginFill(openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_color(c9),1);
					openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.beginFill(openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_color(c9),1);
				}
				break;
			case 5:
				var c10 = data.readDrawCircle();
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawCircle(openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_x(c10),openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_y(c10),openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_radius(c10));
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawCircle(openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_x(c10),openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_y(c10),openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_radius(c10));
				break;
			case 6:
				var c11 = data.readDrawEllipse();
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawEllipse(openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_x(c11),openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_y(c11),openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_width(c11),openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_height(c11));
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawEllipse(openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_x(c11),openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_y(c11),openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_width(c11),openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_height(c11));
				break;
			case 7:
				var c12 = data.readDrawRect();
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawRect(openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_x(c12),openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_y(c12),openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_width(c12),openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_height(c12));
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawRect(openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_x(c12),openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_y(c12),openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_width(c12),openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_height(c12));
				break;
			case 8:
				var c13 = data.readDrawRoundRect();
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawRoundRect(openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_x(c13),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_y(c13),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_width(c13),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_height(c13),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseWidth(c13),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseHeight(c13));
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawRoundRect(openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_x(c13),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_y(c13),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_width(c13),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_height(c13),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseWidth(c13),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseHeight(c13));
				break;
			default:
				data.skip(type);
			}
		}
		if(openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.get_length() > 0) openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
		if(openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.get_length() > 0) openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
		data.destroy();
		if(openfl__$internal_renderer_canvas_CanvasGraphics.hasFill && openfl__$internal_renderer_canvas_CanvasGraphics.context.isPointInPath(x,y)) return true;
		if(openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke && openfl__$internal_renderer_canvas_CanvasGraphics.context.isPointInStroke(x,y)) return true;
	}
	return false;
};
openfl__$internal_renderer_canvas_CanvasGraphics.isCCW = function(x1,y1,x2,y2,x3,y3) {
	return (x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1) < 0;
};
openfl__$internal_renderer_canvas_CanvasGraphics.normalizeUVT = function(uvt,skipT) {
	if(skipT == null) skipT = false;
	var max = -Infinity;
	var tmp = -Infinity;
	var len = uvt.get_length();
	var _g1 = 1;
	var _g = len + 1;
	while(_g1 < _g) {
		var t = _g1++;
		if(skipT && t % 3 == 0) continue;
		tmp = uvt.get(t - 1);
		if(max < tmp) max = tmp;
	}
	if(!skipT) return { max : max, uvt : uvt};
	var result = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
	var _g11 = 1;
	var _g2 = len + 1;
	while(_g11 < _g2) {
		var t1 = _g11++;
		if(skipT && t1 % 3 == 0) continue;
		var x = uvt.get(t1 - 1);
		result.push(x);
	}
	return { max : max, uvt : result};
};
openfl__$internal_renderer_canvas_CanvasGraphics.playCommands = function(commands,stroke) {
	if(stroke == null) stroke = false;
	openfl__$internal_renderer_canvas_CanvasGraphics.bounds = openfl__$internal_renderer_canvas_CanvasGraphics.graphics.__bounds;
	var offsetX = openfl__$internal_renderer_canvas_CanvasGraphics.bounds.x;
	var offsetY = openfl__$internal_renderer_canvas_CanvasGraphics.bounds.y;
	var positionX = 0.0;
	var positionY = 0.0;
	var closeGap = false;
	var startX = 0.0;
	var startY = 0.0;
	openfl__$internal_renderer_canvas_CanvasGraphics.setSmoothing(true);
	var data = new openfl__$internal_renderer_DrawCommandReader(commands);
	var _g = 0;
	var _g1 = commands.types;
	while(_g < _g1.length) {
		var type = _g1[_g];
		++_g;
		switch(type[1]) {
		case 3:
			var c = data.readCubicCurveTo();
			openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX1(c) - offsetX,openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY1(c) - offsetY,openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX2(c) - offsetX,openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY2(c) - offsetY,openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorX(c) - offsetX,openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorY(c) - offsetY);
			break;
		case 4:
			var c1 = data.readCurveTo();
			openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlX(c1) - offsetX,openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlY(c1) - offsetY,openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorX(c1) - offsetX,openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorY(c1) - offsetY);
			break;
		case 5:
			var c2 = data.readDrawCircle();
			openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_x(c2) - offsetX + openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_radius(c2),openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_y(c2) - offsetY);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.arc(openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_x(c2) - offsetX,openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_y(c2) - offsetY,openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_radius(c2),0,Math.PI * 2,true);
			break;
		case 6:
			var c3 = data.readDrawEllipse();
			var x = openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_x(c3);
			var y = openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_y(c3);
			var width = openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_width(c3);
			var height = openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_height(c3);
			x -= offsetX;
			y -= offsetY;
			var kappa = .5522848;
			var ox = width / 2 * kappa;
			var oy = height / 2 * kappa;
			var xe = x + width;
			var ye = y + height;
			var xm = x + width / 2;
			var ym = y + height / 2;
			openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(x,ym);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(x,ym - oy,xm - ox,y,xm,y);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(xm + ox,y,xe,ym - oy,xe,ym);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(xe,ym + oy,xm + ox,ye,xm,ye);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(xm - ox,ye,x,ym + oy,x,ym);
			break;
		case 8:
			var c4 = data.readDrawRoundRect();
			openfl__$internal_renderer_canvas_CanvasGraphics.drawRoundRect(openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_x(c4) - offsetX,openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_y(c4) - offsetY,openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_width(c4),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_height(c4),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseWidth(c4),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseHeight(c4));
			break;
		case 15:
			var c5 = data.readLineTo();
			openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_x(c5) - offsetX,openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_y(c5) - offsetY);
			positionX = openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_x(c5);
			positionY = openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_y(c5);
			break;
		case 16:
			var c6 = data.readMoveTo();
			openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_x(c6) - offsetX,openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_y(c6) - offsetY);
			positionX = openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_x(c6);
			positionY = openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_y(c6);
			closeGap = true;
			startX = openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_x(c6);
			startY = openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_y(c6);
			break;
		case 14:
			var c7 = data.readLineStyle();
			if(stroke && openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke) openfl__$internal_renderer_canvas_CanvasGraphics.closePath(openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_thickness(c7) == null);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(positionX - offsetX,positionY - offsetY);
			if(openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_thickness(c7) == null) openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = false; else {
				if(openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_thickness(c7) > 0) openfl__$internal_renderer_canvas_CanvasGraphics.context.lineWidth = openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_thickness(c7); else openfl__$internal_renderer_canvas_CanvasGraphics.context.lineWidth = 1;
				if(openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_joints(c7) == null) openfl__$internal_renderer_canvas_CanvasGraphics.context.lineJoin = "round"; else openfl__$internal_renderer_canvas_CanvasGraphics.context.lineJoin = openfl_display__$JointStyle_JointStyle_$Impl_$.toString(openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_joints(c7)).toLowerCase();
				if(openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_caps(c7) == null) openfl__$internal_renderer_canvas_CanvasGraphics.context.lineCap = "round"; else {
					var _g2 = openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_caps(c7);
					switch(_g2) {
					case 0:
						openfl__$internal_renderer_canvas_CanvasGraphics.context.lineCap = "butt";
						break;
					default:
						openfl__$internal_renderer_canvas_CanvasGraphics.context.lineCap = openfl_display__$CapsStyle_CapsStyle_$Impl_$.toString(openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_caps(c7)).toLowerCase();
					}
				}
				openfl__$internal_renderer_canvas_CanvasGraphics.context.miterLimit = openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_miterLimit(c7);
				if(openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_alpha(c7) == 1) openfl__$internal_renderer_canvas_CanvasGraphics.context.strokeStyle = "#" + StringTools.hex(openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_color(c7) & 16777215,6); else {
					var r = (openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_color(c7) & 16711680) >>> 16;
					var g = (openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_color(c7) & 65280) >>> 8;
					var b = openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_color(c7) & 255;
					openfl__$internal_renderer_canvas_CanvasGraphics.context.strokeStyle = "rgba(" + r + ", " + g + ", " + b + ", " + openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_alpha(c7) + ")";
				}
				openfl__$internal_renderer_canvas_CanvasGraphics.setSmoothing(true);
				openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = true;
			}
			break;
		case 13:
			var c8 = data.readLineGradientStyle();
			if(stroke && openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke) openfl__$internal_renderer_canvas_CanvasGraphics.closePath();
			openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(positionX - offsetX,positionY - offsetY);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.strokeStyle = openfl__$internal_renderer_canvas_CanvasGraphics.createGradientPattern(openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_type(c8),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_colors(c8),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_alphas(c8),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_ratios(c8),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_matrix(c8),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_spreadMethod(c8),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_interpolationMethod(c8),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_focalPointRatio(c8));
			openfl__$internal_renderer_canvas_CanvasGraphics.setSmoothing(true);
			openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = true;
			break;
		case 12:
			var c9 = data.readLineBitmapStyle();
			if(stroke && openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke) openfl__$internal_renderer_canvas_CanvasGraphics.closePath();
			openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(positionX - offsetX,positionY - offsetY);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.strokeStyle = openfl__$internal_renderer_canvas_CanvasGraphics.createBitmapFill(openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_bitmap(c9),openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_repeat(c9),openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_smooth(c9));
			openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = true;
			break;
		case 0:
			var c10 = data.readBeginBitmapFill();
			openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_bitmap(c10);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.fillStyle = openfl__$internal_renderer_canvas_CanvasGraphics.createBitmapFill(openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_bitmap(c10),true,openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_smooth(c10));
			openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = true;
			if(openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_matrix(c10) != null) {
				openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix = openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_matrix(c10);
				openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix = openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_matrix(c10).clone();
				openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.invert();
			} else {
				openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix = null;
				openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix = null;
			}
			break;
		case 1:
			var c11 = data.readBeginFill();
			if(openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_alpha(c11) < 0.005) openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = false; else {
				if(openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_alpha(c11) == 1) openfl__$internal_renderer_canvas_CanvasGraphics.context.fillStyle = "#" + StringTools.hex(openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_color(c11),6); else {
					var r1 = (openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_color(c11) & 16711680) >>> 16;
					var g1 = (openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_color(c11) & 65280) >>> 8;
					var b1 = openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_color(c11) & 255;
					openfl__$internal_renderer_canvas_CanvasGraphics.context.fillStyle = "rgba(" + r1 + ", " + g1 + ", " + b1 + ", " + openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_alpha(c11) + ")";
				}
				openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
				openfl__$internal_renderer_canvas_CanvasGraphics.setSmoothing(true);
				openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = true;
			}
			break;
		case 2:
			var c12 = data.readBeginGradientFill();
			openfl__$internal_renderer_canvas_CanvasGraphics.context.fillStyle = openfl__$internal_renderer_canvas_CanvasGraphics.createGradientPattern(openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_type(c12),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_colors(c12),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_alphas(c12),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_ratios(c12),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_matrix(c12),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_spreadMethod(c12),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_interpolationMethod(c12),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_focalPointRatio(c12));
			openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
			openfl__$internal_renderer_canvas_CanvasGraphics.setSmoothing(true);
			openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = true;
			break;
		case 7:
			var c13 = data.readDrawRect();
			var optimizationUsed = false;
			if(openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill != null && !openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) {
				var st = 0;
				var sr = 0;
				var sb = 0;
				var sl = 0;
				var canOptimizeMatrix = true;
				if(openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix != null) {
					if(openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.b != 0 || openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.c != 0) canOptimizeMatrix = false; else {
						var stl = openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.transformPoint(new openfl_geom_Point(openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_x(c13),openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_y(c13)));
						var sbr = openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.transformPoint(new openfl_geom_Point(openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_x(c13) + openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_width(c13),openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_y(c13) + openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_height(c13)));
						st = stl.y;
						sl = stl.x;
						sb = sbr.y;
						sr = sbr.x;
					}
				} else {
					st = openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_y(c13);
					sl = openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_x(c13);
					sb = openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_y(c13) + openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_height(c13);
					sr = openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_x(c13) + openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_width(c13);
				}
				if(canOptimizeMatrix && st >= 0 && sl >= 0 && sr <= openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.width && sb <= openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.height) {
					optimizationUsed = true;
					if(!openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) openfl__$internal_renderer_canvas_CanvasGraphics.context.drawImage(openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.image.get_src(),sl,st,sr - sl,sb - st,openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_x(c13) - offsetX,openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_y(c13) - offsetY,openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_width(c13),openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_height(c13));
				}
			}
			if(!optimizationUsed) openfl__$internal_renderer_canvas_CanvasGraphics.context.rect(openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_x(c13) - offsetX,openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_y(c13) - offsetY,openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_width(c13),openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_height(c13));
			break;
		default:
			data.skip(type);
		}
	}
	data.destroy();
	if(stroke && openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke) {
		if(openfl__$internal_renderer_canvas_CanvasGraphics.hasFill && closeGap) openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(startX - offsetX,startY - offsetY); else if(closeGap && positionX == startX && positionY == startY) openfl__$internal_renderer_canvas_CanvasGraphics.closePath(true);
		if(!openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) openfl__$internal_renderer_canvas_CanvasGraphics.context.stroke();
	}
	if(!stroke) {
		if(openfl__$internal_renderer_canvas_CanvasGraphics.hasFill || openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill != null) {
			openfl__$internal_renderer_canvas_CanvasGraphics.context.translate(-openfl__$internal_renderer_canvas_CanvasGraphics.bounds.x,-openfl__$internal_renderer_canvas_CanvasGraphics.bounds.y);
			if(openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix != null) {
				openfl__$internal_renderer_canvas_CanvasGraphics.context.transform(openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.a,openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.b,openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.c,openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.d,openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.tx,openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.ty);
				if(!openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) openfl__$internal_renderer_canvas_CanvasGraphics.context.fill();
				openfl__$internal_renderer_canvas_CanvasGraphics.context.transform(openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.a,openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.b,openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.c,openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.d,openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.tx,openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.ty);
			} else if(!openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) openfl__$internal_renderer_canvas_CanvasGraphics.context.fill();
			openfl__$internal_renderer_canvas_CanvasGraphics.context.translate(openfl__$internal_renderer_canvas_CanvasGraphics.bounds.x,openfl__$internal_renderer_canvas_CanvasGraphics.bounds.y);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
		}
	}
};
openfl__$internal_renderer_canvas_CanvasGraphics.render = function(graphics,renderSession,parentTransform) {
	graphics.__update();
	if(graphics.__dirty) {
		openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting = false;
		openfl__$internal_renderer_canvas_CanvasGraphics.graphics = graphics;
		openfl__$internal_renderer_canvas_CanvasGraphics.allowSmoothing = renderSession.allowSmoothing;
		openfl__$internal_renderer_canvas_CanvasGraphics.bounds = graphics.__bounds;
		var width = graphics.__width;
		var height = graphics.__height;
		if(!graphics.__visible || graphics.__commands.get_length() == 0 || openfl__$internal_renderer_canvas_CanvasGraphics.bounds == null || width < 1 || height < 1) {
			graphics.__canvas = null;
			graphics.__context = null;
			graphics.__bitmap = null;
		} else {
			if(graphics.__canvas == null) {
				graphics.__canvas = window.document.createElement("canvas");
				graphics.__context = graphics.__canvas.getContext("2d");
			}
			openfl__$internal_renderer_canvas_CanvasGraphics.context = graphics.__context;
			graphics.__canvas.width = width;
			graphics.__canvas.height = height;
			var transform = graphics.__renderTransform;
			openfl__$internal_renderer_canvas_CanvasGraphics.context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
			openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.clear();
			openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.clear();
			openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = false;
			openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = false;
			openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
			openfl__$internal_renderer_canvas_CanvasGraphics.bitmapRepeat = false;
			var data = new openfl__$internal_renderer_DrawCommandReader(graphics.__commands);
			var _g = 0;
			var _g1 = graphics.__commands.types;
			try {
				while(_g < _g1.length) {
					var type = _g1[_g];
					++_g;
					switch(type[1]) {
					case 3:
						var c = data.readCubicCurveTo();
						openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.cubicCurveTo(openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX1(c),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY1(c),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX2(c),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY2(c),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorX(c),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorY(c));
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.cubicCurveTo(openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX1(c),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY1(c),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX2(c),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY2(c),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorX(c),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorY(c));
						break;
					case 4:
						var c1 = data.readCurveTo();
						openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.curveTo(openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlX(c1),openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlY(c1),openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorX(c1),openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorY(c1));
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.curveTo(openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlX(c1),openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlY(c1),openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorX(c1),openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorY(c1));
						break;
					case 15:
						var c2 = data.readLineTo();
						openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.lineTo(openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_x(c2),openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_y(c2));
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineTo(openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_x(c2),openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_y(c2));
						break;
					case 16:
						var c3 = data.readMoveTo();
						openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.moveTo(openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_x(c3),openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_y(c3));
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.moveTo(openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_x(c3),openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_y(c3));
						break;
					case 11:
						data.readEndFill();
						openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
						openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
						openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = false;
						openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
						break;
					case 14:
						var c4 = data.readLineStyle();
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineStyle(openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_thickness(c4),openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_color(c4),openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_alpha(c4),openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_pixelHinting(c4),openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_scaleMode(c4),openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_caps(c4),openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_joints(c4),openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_miterLimit(c4));
						break;
					case 13:
						var c5 = data.readLineGradientStyle();
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineGradientStyle(openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_type(c5),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_colors(c5),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_alphas(c5),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_ratios(c5),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_matrix(c5),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_spreadMethod(c5),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_interpolationMethod(c5),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_focalPointRatio(c5));
						break;
					case 12:
						var c6 = data.readLineBitmapStyle();
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineBitmapStyle(openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_bitmap(c6),openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_matrix(c6),openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_repeat(c6),openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_smooth(c6));
						break;
					case 0:case 1:case 2:
						openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
						openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
						if(type == openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL) {
							var c7 = data.readBeginBitmapFill();
							openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.beginBitmapFill(openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_bitmap(c7),openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_matrix(c7),openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_repeat(c7),openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_smooth(c7));
							openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.beginBitmapFill(openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_bitmap(c7),openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_matrix(c7),openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_repeat(c7),openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_smooth(c7));
						} else if(type == openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL) {
							var c8 = data.readBeginGradientFill();
							openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.beginGradientFill(openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_type(c8),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_colors(c8),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_alphas(c8),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_ratios(c8),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_matrix(c8),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_spreadMethod(c8),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_interpolationMethod(c8),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_focalPointRatio(c8));
							openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.beginGradientFill(openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_type(c8),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_colors(c8),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_alphas(c8),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_ratios(c8),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_matrix(c8),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_spreadMethod(c8),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_interpolationMethod(c8),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_focalPointRatio(c8));
						} else {
							var c9 = data.readBeginFill();
							openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.beginFill(openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_color(c9),openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_alpha(c9));
							openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.beginFill(openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_color(c9),openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_alpha(c9));
						}
						break;
					case 5:
						var c10 = data.readDrawCircle();
						openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawCircle(openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_x(c10),openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_y(c10),openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_radius(c10));
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawCircle(openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_x(c10),openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_y(c10),openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_radius(c10));
						break;
					case 6:
						var c11 = data.readDrawEllipse();
						openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawEllipse(openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_x(c11),openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_y(c11),openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_width(c11),openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_height(c11));
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawEllipse(openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_x(c11),openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_y(c11),openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_width(c11),openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_height(c11));
						break;
					case 7:
						var c12 = data.readDrawRect();
						openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawRect(openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_x(c12),openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_y(c12),openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_width(c12),openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_height(c12));
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawRect(openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_x(c12),openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_y(c12),openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_width(c12),openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_height(c12));
						break;
					case 8:
						var c13 = data.readDrawRoundRect();
						openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawRoundRect(openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_x(c13),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_y(c13),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_width(c13),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_height(c13),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseWidth(c13),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseHeight(c13));
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawRoundRect(openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_x(c13),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_y(c13),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_width(c13),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_height(c13),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseWidth(c13),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseHeight(c13));
						break;
					case 10:
						openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
						openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
						var c14 = data.readDrawTriangles();
						var v = openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_vertices(c14);
						var ind = openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_indices(c14);
						var uvt = openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_uvtData(c14);
						var pattern = null;
						var colorFill = openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill == null;
						if(colorFill && uvt != null) throw "__break__";
						if(!colorFill) {
							if(uvt == null) {
								uvt = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
								var _g3 = 0;
								var _g2 = Std["int"](v.get_length() / 2);
								while(_g3 < _g2) {
									var i1 = _g3++;
									var x = v.get(i1 * 2) / openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.width;
									uvt.push(x);
									var x4 = v.get(i1 * 2 + 1) / openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.height;
									uvt.push(x4);
								}
							}
							var skipT = uvt.get_length() != v.get_length();
							var normalizedUVT = openfl__$internal_renderer_canvas_CanvasGraphics.normalizeUVT(uvt,skipT);
							var maxUVT = normalizedUVT.max;
							uvt = normalizedUVT.uvt;
							if(maxUVT > 1) pattern = openfl__$internal_renderer_canvas_CanvasGraphics.createTempPatternCanvas(openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill,openfl__$internal_renderer_canvas_CanvasGraphics.bitmapRepeat,openfl__$internal_renderer_canvas_CanvasGraphics.bounds.width | 0,openfl__$internal_renderer_canvas_CanvasGraphics.bounds.height | 0); else pattern = openfl__$internal_renderer_canvas_CanvasGraphics.createTempPatternCanvas(openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill,openfl__$internal_renderer_canvas_CanvasGraphics.bitmapRepeat,openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.width,openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.height);
						}
						var i = 0;
						var l = ind.get_length();
						var a_;
						var b_;
						var c_;
						var iax;
						var iay;
						var ibx;
						var iby;
						var icx;
						var icy;
						var x1;
						var y1;
						var x2;
						var y2;
						var x3;
						var y3;
						var uvx1;
						var uvy1;
						var uvx2;
						var uvy2;
						var uvx3;
						var uvy3;
						var denom;
						var t1;
						var t2;
						var t3;
						var t4;
						var dx;
						var dy;
						while(i < l) {
							a_ = i;
							b_ = i + 1;
							c_ = i + 2;
							iax = ind.get(a_) * 2;
							iay = ind.get(a_) * 2 + 1;
							ibx = ind.get(b_) * 2;
							iby = ind.get(b_) * 2 + 1;
							icx = ind.get(c_) * 2;
							icy = ind.get(c_) * 2 + 1;
							x1 = v.get(iax);
							y1 = v.get(iay);
							x2 = v.get(ibx);
							y2 = v.get(iby);
							x3 = v.get(icx);
							y3 = v.get(icy);
							var _g21 = openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_culling(c14);
							switch(_g21) {
							case 2:
								if(!((x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1) < 0)) {
									i += 3;
									continue;
								}
								break;
							case 0:
								if((x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1) < 0) {
									i += 3;
									continue;
								}
								break;
							default:
							}
							if(colorFill) {
								openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
								openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(x1,y1);
								openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x2,y2);
								openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x3,y3);
								openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
								if(!openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) openfl__$internal_renderer_canvas_CanvasGraphics.context.fill();
								i += 3;
								continue;
							}
							openfl__$internal_renderer_canvas_CanvasGraphics.context.save();
							openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
							openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(x1,y1);
							openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x2,y2);
							openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x3,y3);
							openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
							openfl__$internal_renderer_canvas_CanvasGraphics.context.clip();
							uvx1 = uvt.get(iax) * pattern.width;
							uvx2 = uvt.get(ibx) * pattern.width;
							uvx3 = uvt.get(icx) * pattern.width;
							uvy1 = uvt.get(iay) * pattern.height;
							uvy2 = uvt.get(iby) * pattern.height;
							uvy3 = uvt.get(icy) * pattern.height;
							denom = uvx1 * (uvy3 - uvy2) - uvx2 * uvy3 + uvx3 * uvy2 + (uvx2 - uvx3) * uvy1;
							if(denom == 0) {
								i += 3;
								continue;
							}
							t1 = -(uvy1 * (x3 - x2) - uvy2 * x3 + uvy3 * x2 + (uvy2 - uvy3) * x1) / denom;
							t2 = (uvy2 * y3 + uvy1 * (y2 - y3) - uvy3 * y2 + (uvy3 - uvy2) * y1) / denom;
							t3 = (uvx1 * (x3 - x2) - uvx2 * x3 + uvx3 * x2 + (uvx2 - uvx3) * x1) / denom;
							t4 = -(uvx2 * y3 + uvx1 * (y2 - y3) - uvx3 * y2 + (uvx3 - uvx2) * y1) / denom;
							dx = (uvx1 * (uvy3 * x2 - uvy2 * x3) + uvy1 * (uvx2 * x3 - uvx3 * x2) + (uvx3 * uvy2 - uvx2 * uvy3) * x1) / denom;
							dy = (uvx1 * (uvy3 * y2 - uvy2 * y3) + uvy1 * (uvx2 * y3 - uvx3 * y2) + (uvx3 * uvy2 - uvx2 * uvy3) * y1) / denom;
							openfl__$internal_renderer_canvas_CanvasGraphics.context.transform(t1,t2,t3,t4,dx,dy);
							openfl__$internal_renderer_canvas_CanvasGraphics.context.drawImage(pattern,0,0);
							openfl__$internal_renderer_canvas_CanvasGraphics.context.restore();
							i += 3;
						}
						break;
					default:
						data.skip(type);
					}
				}
			} catch( e ) { if( e != "__break__" ) throw e; }
			if(openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.get_length() > 0) openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
			if(openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.get_length() > 0) openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
			data.destroy();
			graphics.__bitmap = openfl_display_BitmapData.fromCanvas(graphics.__canvas);
		}
		graphics.set___dirty(false);
	}
};
openfl__$internal_renderer_canvas_CanvasGraphics.renderMask = function(graphics,renderSession) {
	if(graphics.__commands.get_length() != 0) {
		openfl__$internal_renderer_canvas_CanvasGraphics.context = renderSession.context;
		var positionX = 0.0;
		var positionY = 0.0;
		var offsetX = 0;
		var offsetY = 0;
		var data = new openfl__$internal_renderer_DrawCommandReader(graphics.__commands);
		var _g = 0;
		var _g1 = graphics.__commands.types;
		while(_g < _g1.length) {
			var type = _g1[_g];
			++_g;
			switch(type[1]) {
			case 3:
				var c = data.readCubicCurveTo();
				openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX1(c) - offsetX,openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY1(c) - offsetY,openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX2(c) - offsetX,openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY2(c) - offsetY,openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorX(c) - offsetX,openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorY(c) - offsetY);
				positionX = openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorX(c);
				positionY = openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorY(c);
				break;
			case 4:
				var c1 = data.readCurveTo();
				openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlX(c1) - offsetX,openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlY(c1) - offsetY,openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorX(c1) - offsetX,openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorY(c1) - offsetY);
				positionX = openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorX(c1);
				positionY = openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorY(c1);
				break;
			case 5:
				var c2 = data.readDrawCircle();
				openfl__$internal_renderer_canvas_CanvasGraphics.context.arc(openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_x(c2) - offsetX,openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_y(c2) - offsetY,openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_radius(c2),0,Math.PI * 2,true);
				break;
			case 6:
				var c3 = data.readDrawEllipse();
				var x = openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_x(c3);
				var y = openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_y(c3);
				var width = openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_width(c3);
				var height = openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_height(c3);
				x -= offsetX;
				y -= offsetY;
				var kappa = .5522848;
				var ox = width / 2 * kappa;
				var oy = height / 2 * kappa;
				var xe = x + width;
				var ye = y + height;
				var xm = x + width / 2;
				var ym = y + height / 2;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(x,ym);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(x,ym - oy,xm - ox,y,xm,y);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(xm + ox,y,xe,ym - oy,xe,ym);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(xe,ym + oy,xm + ox,ye,xm,ye);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(xm - ox,ye,x,ym + oy,x,ym);
				break;
			case 7:
				var c4 = data.readDrawRect();
				openfl__$internal_renderer_canvas_CanvasGraphics.context.rect(openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_x(c4) - offsetX,openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_y(c4) - offsetY,openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_width(c4),openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_height(c4));
				break;
			case 8:
				var c5 = data.readDrawRoundRect();
				openfl__$internal_renderer_canvas_CanvasGraphics.drawRoundRect(openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_x(c5) - offsetX,openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_y(c5) - offsetY,openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_width(c5),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_height(c5),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseWidth(c5),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseHeight(c5));
				break;
			case 15:
				var c6 = data.readLineTo();
				openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_x(c6) - offsetX,openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_y(c6) - offsetY);
				positionX = openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_x(c6);
				positionY = openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_y(c6);
				break;
			case 16:
				var c7 = data.readMoveTo();
				openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_x(c7) - offsetX,openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_y(c7) - offsetY);
				positionX = openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_x(c7);
				positionY = openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_y(c7);
				break;
			default:
				data.skip(type);
			}
		}
		data.destroy();
	}
};
openfl__$internal_renderer_canvas_CanvasGraphics.setSmoothing = function(smooth) {
	if(!openfl__$internal_renderer_canvas_CanvasGraphics.allowSmoothing) smooth = false;
	if(openfl__$internal_renderer_canvas_CanvasGraphics.context.imageSmoothingEnabled != smooth) {
		openfl__$internal_renderer_canvas_CanvasGraphics.context.mozImageSmoothingEnabled = smooth;
		openfl__$internal_renderer_canvas_CanvasGraphics.context.msImageSmoothingEnabled = smooth;
		openfl__$internal_renderer_canvas_CanvasGraphics.context.imageSmoothingEnabled = smooth;
	}
};
var openfl__$internal_renderer_canvas_CanvasMaskManager = function(renderSession) {
	openfl__$internal_renderer_AbstractMaskManager.call(this,renderSession);
};
$hxClasses["openfl._internal.renderer.canvas.CanvasMaskManager"] = openfl__$internal_renderer_canvas_CanvasMaskManager;
openfl__$internal_renderer_canvas_CanvasMaskManager.__name__ = ["openfl","_internal","renderer","canvas","CanvasMaskManager"];
openfl__$internal_renderer_canvas_CanvasMaskManager.__super__ = openfl__$internal_renderer_AbstractMaskManager;
openfl__$internal_renderer_canvas_CanvasMaskManager.prototype = $extend(openfl__$internal_renderer_AbstractMaskManager.prototype,{
	pushMask: function(mask) {
		var context = this.renderSession.context;
		context.save();
		var transform = mask.__getRenderTransform();
		context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
		context.beginPath();
		mask.__renderCanvasMask(this.renderSession);
		context.clip();
	}
	,pushObject: function(object,handleScrollRect) {
		if(handleScrollRect == null) handleScrollRect = true;
		if(handleScrollRect && object.__scrollRect != null) this.pushRect(object.__scrollRect,object.__renderTransform);
		if(object.__mask != null) this.pushMask(object.__mask);
	}
	,pushRect: function(rect,transform) {
		var context = this.renderSession.context;
		context.save();
		context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
		context.beginPath();
		context.rect(rect.x,rect.y,rect.width,rect.height);
		context.clip();
	}
	,popMask: function() {
		this.renderSession.context.restore();
	}
	,popObject: function(object,handleScrollRect) {
		if(handleScrollRect == null) handleScrollRect = true;
		if(object.__mask != null) this.popMask();
		if(handleScrollRect && object.__scrollRect != null) this.popRect();
	}
	,popRect: function() {
		this.renderSession.context.restore();
	}
	,__class__: openfl__$internal_renderer_canvas_CanvasMaskManager
});
var openfl__$internal_renderer_canvas_CanvasRenderer = function(stage,context) {
	openfl__$internal_renderer_AbstractRenderer.call(this,stage);
	this.context = context;
	this.renderSession = new openfl__$internal_renderer_RenderSession();
	this.renderSession.context = context;
	this.renderSession.roundPixels = true;
	this.renderSession.renderer = this;
	this.renderSession.maskManager = new openfl__$internal_renderer_canvas_CanvasMaskManager(this.renderSession);
};
$hxClasses["openfl._internal.renderer.canvas.CanvasRenderer"] = openfl__$internal_renderer_canvas_CanvasRenderer;
openfl__$internal_renderer_canvas_CanvasRenderer.__name__ = ["openfl","_internal","renderer","canvas","CanvasRenderer"];
openfl__$internal_renderer_canvas_CanvasRenderer.__super__ = openfl__$internal_renderer_AbstractRenderer;
openfl__$internal_renderer_canvas_CanvasRenderer.prototype = $extend(openfl__$internal_renderer_AbstractRenderer.prototype,{
	context: null
	,clear: function() {
		var _g = 0;
		var _g1 = this.stage.stage3Ds;
		while(_g < _g1.get_length()) {
			var stage3D = _g1.get(_g);
			++_g;
			stage3D.__renderCanvas(this.stage,this.renderSession);
		}
	}
	,render: function() {
		this.renderSession.allowSmoothing = this.stage.quality != 2;
		this.context.setTransform(1,0,0,1,0,0);
		this.context.globalAlpha = 1;
		if(!this.stage.__transparent && this.stage.__clearBeforeRender) {
			this.context.fillStyle = this.stage.__colorString;
			this.context.fillRect(0,0,this.stage.stageWidth,this.stage.stageHeight);
		} else if(this.stage.__transparent && this.stage.__clearBeforeRender) this.context.clearRect(0,0,this.stage.stageWidth,this.stage.stageHeight);
		this.stage.__renderCanvas(this.renderSession);
	}
	,__class__: openfl__$internal_renderer_canvas_CanvasRenderer
});
var openfl__$internal_renderer_canvas_CanvasShape = function() { };
$hxClasses["openfl._internal.renderer.canvas.CanvasShape"] = openfl__$internal_renderer_canvas_CanvasShape;
openfl__$internal_renderer_canvas_CanvasShape.__name__ = ["openfl","_internal","renderer","canvas","CanvasShape"];
openfl__$internal_renderer_canvas_CanvasShape.render = function(shape,renderSession) {
	if(!shape.__renderable || shape.__worldAlpha <= 0) return;
	var graphics = shape.__graphics;
	if(graphics != null) {
		openfl__$internal_renderer_canvas_CanvasGraphics.render(graphics,renderSession,shape.__renderTransform);
		var bounds = graphics.__bounds;
		var width = graphics.__width;
		var height = graphics.__height;
		if(graphics.__canvas != null) {
			var context = renderSession.context;
			var scrollRect = shape.__scrollRect;
			if(width > 0 && height > 0 && (scrollRect == null || scrollRect.width > 0 && scrollRect.height > 0)) {
				renderSession.maskManager.pushObject(shape);
				context.globalAlpha = shape.__worldAlpha;
				var transform = graphics.__worldTransform;
				if(renderSession.roundPixels) context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx | 0,transform.ty | 0); else context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
				context.drawImage(graphics.__canvas,0,0);
				renderSession.maskManager.popObject(shape);
			}
		}
	}
};
var openfl__$internal_renderer_canvas_CanvasTextField = function() { };
$hxClasses["openfl._internal.renderer.canvas.CanvasTextField"] = openfl__$internal_renderer_canvas_CanvasTextField;
openfl__$internal_renderer_canvas_CanvasTextField.__name__ = ["openfl","_internal","renderer","canvas","CanvasTextField"];
openfl__$internal_renderer_canvas_CanvasTextField.disableInputMode = function(textEngine) {
};
openfl__$internal_renderer_canvas_CanvasTextField.enableInputMode = function(textEngine) {
	textEngine.__cursorPosition = -1;
	if(textEngine.__hiddenInput == null) {
		textEngine.__hiddenInput = window.document.createElement("input");
		var hiddenInput = textEngine.__hiddenInput;
		hiddenInput.type = "text";
		hiddenInput.style.position = "absolute";
		hiddenInput.style.opacity = "0";
		hiddenInput.style.color = "transparent";
		hiddenInput.style.left = "0px";
		hiddenInput.style.top = "50%";
		if(new EReg("(iPad|iPhone|iPod).*OS 8_","gi").match(window.navigator.userAgent)) {
			hiddenInput.style.fontSize = "0px";
			hiddenInput.style.width = "0px";
			hiddenInput.style.height = "0px";
		} else {
			hiddenInput.style.width = "1px";
			hiddenInput.style.height = "1px";
		}
		hiddenInput.style.pointerEvents = "none";
		hiddenInput.style.zIndex = "-10000000";
		if(textEngine.maxChars > 0) hiddenInput.maxLength = textEngine.maxChars;
		window.document.body.appendChild(hiddenInput);
		hiddenInput.value = textEngine.text;
	}
};
openfl__$internal_renderer_canvas_CanvasTextField.render = function(textField,renderSession,transform) {
	var textEngine = textField.__textEngine;
	var bounds = textEngine.bounds;
	var graphics = textField.__graphics;
	if(textField.__dirty) {
		textField.__updateLayout();
		if(graphics.__bounds == null) graphics.__bounds = new openfl_geom_Rectangle();
		graphics.__bounds.copyFrom(bounds);
	}
	graphics.__update();
	if(textField.__dirty || graphics.__dirty) {
		var width = graphics.__width;
		var height = graphics.__height;
		if((textEngine.text == null || textEngine.text == "") && !textEngine.background && !textEngine.border && !textEngine.__hasFocus && (textEngine.type != 1 || !textEngine.selectable) || (textEngine.width <= 0 || textEngine.height <= 0) && textEngine.autoSize != 2) {
			textField.__graphics.__canvas = null;
			textField.__graphics.__context = null;
			textField.__graphics.__bitmap = null;
			textField.__graphics.set___dirty(false);
			textField.__dirty = false;
		} else {
			if(textField.__graphics.__canvas == null) {
				textField.__graphics.__canvas = window.document.createElement("canvas");
				textField.__graphics.__context = textField.__graphics.__canvas.getContext("2d");
			}
			openfl__$internal_renderer_canvas_CanvasTextField.context = graphics.__context;
			graphics.__canvas.width = width;
			graphics.__canvas.height = height;
			var transform1 = graphics.__renderTransform;
			if(renderSession.roundPixels) openfl__$internal_renderer_canvas_CanvasTextField.context.setTransform(transform1.a,transform1.b,transform1.c,transform1.d,transform1.tx | 0,transform1.ty | 0); else openfl__$internal_renderer_canvas_CanvasTextField.context.setTransform(transform1.a,transform1.b,transform1.c,transform1.d,transform1.tx,transform1.ty);
			if(textEngine.text != null && textEngine.text != "" || textEngine.__hasFocus) {
				var text = textEngine.text;
				if(!renderSession.allowSmoothing || textEngine.antiAliasType == 0 && textEngine.sharpness == 400) {
					graphics.__context.mozImageSmoothingEnabled = false;
					graphics.__context.msImageSmoothingEnabled = false;
					graphics.__context.imageSmoothingEnabled = false;
				} else {
					graphics.__context.mozImageSmoothingEnabled = true;
					graphics.__context.msImageSmoothingEnabled = true;
					graphics.__context.imageSmoothingEnabled = true;
				}
				if(textEngine.border || textEngine.background) {
					openfl__$internal_renderer_canvas_CanvasTextField.context.rect(0.5,0.5,bounds.width - 1,bounds.height - 1);
					if(textEngine.background) {
						openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#" + StringTools.hex(textEngine.backgroundColor,6);
						openfl__$internal_renderer_canvas_CanvasTextField.context.fill();
					}
					if(textEngine.border) {
						openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
						openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + StringTools.hex(textEngine.borderColor,6);
						openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
					}
				}
				openfl__$internal_renderer_canvas_CanvasTextField.context.textBaseline = "top";
				openfl__$internal_renderer_canvas_CanvasTextField.context.textAlign = "start";
				var scrollX = -textField.get_scrollH();
				var scrollY = 0.0;
				var _g1 = 0;
				var _g = textField.get_scrollV() - 1;
				while(_g1 < _g) {
					var i = _g1++;
					scrollY -= textEngine.lineHeights.get(i);
				}
				var advance;
				var offsetY = 0.0;
				var applyHack = new EReg("(iPad|iPhone|iPod|Firefox)","g").match(window.navigator.userAgent);
				var _g2 = 0;
				var _g11 = textEngine.layoutGroups;
				while(_g2 < _g11.get_length()) {
					var group = _g11.get(_g2);
					++_g2;
					if(group.lineIndex < textField.get_scrollV() - 1) continue;
					if(group.lineIndex > textField.get_scrollV() + textEngine.bottomScrollV - 2) break;
					openfl__$internal_renderer_canvas_CanvasTextField.context.font = openfl__$internal_text_TextEngine.getFont(group.format);
					openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#" + StringTools.hex(group.format.color,6);
					if(applyHack) offsetY = group.format.size * 0.185;
					openfl__$internal_renderer_canvas_CanvasTextField.context.fillText(text.substring(group.startIndex,group.endIndex),group.offsetX + scrollX,group.offsetY + offsetY + scrollY);
					if(textField.__caretIndex > -1 && textEngine.selectable) {
						if(textField.__selectionIndex == textField.__caretIndex) {
							if(textField.__showCursor && group.startIndex <= textField.__caretIndex && group.endIndex >= textField.__caretIndex) {
								advance = 0.0;
								var _g3 = 0;
								var _g21 = textField.__caretIndex - group.startIndex;
								while(_g3 < _g21) {
									var i1 = _g3++;
									if(group.advances.length <= i1) break;
									advance += group.advances[i1];
								}
								openfl__$internal_renderer_canvas_CanvasTextField.context.fillRect(group.offsetX + advance,group.offsetY,1,group.height);
							}
						} else if(group.startIndex <= textField.__caretIndex && group.endIndex >= textField.__caretIndex || group.startIndex <= textField.__selectionIndex && group.endIndex >= textField.__selectionIndex) {
							var selectionStart = Std["int"](Math.min(textField.__selectionIndex,textField.__caretIndex));
							var selectionEnd = Std["int"](Math.max(textField.__selectionIndex,textField.__caretIndex));
							if(group.startIndex > selectionStart) selectionStart = group.startIndex;
							if(group.endIndex < selectionEnd) selectionEnd = group.endIndex;
							var start;
							var end;
							start = textField.getCharBoundaries(selectionStart);
							if(selectionEnd >= textEngine.text.length) {
								end = textField.getCharBoundaries(textEngine.text.length - 1);
								end.x += end.width + 2;
							} else end = textField.getCharBoundaries(selectionEnd);
							if(start != null && end != null) {
								openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#000000";
								openfl__$internal_renderer_canvas_CanvasTextField.context.fillRect(start.x,start.y,end.x - start.x,group.height);
								openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#FFFFFF";
								openfl__$internal_renderer_canvas_CanvasTextField.context.fillText(text.substring(selectionStart,selectionEnd),scrollX + start.x,group.offsetY + offsetY + scrollY);
							}
						}
					}
				}
			} else {
				if(textEngine.border || textEngine.background) {
					if(textEngine.border) openfl__$internal_renderer_canvas_CanvasTextField.context.rect(0.5,0.5,bounds.width - 1,bounds.height - 1); else openfl__$internal_renderer_canvas_CanvasTextField.context.rect(0,0,bounds.width,bounds.height);
					if(textEngine.background) {
						openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#" + StringTools.hex(textEngine.backgroundColor,6);
						openfl__$internal_renderer_canvas_CanvasTextField.context.fill();
					}
					if(textEngine.border) {
						openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
						openfl__$internal_renderer_canvas_CanvasTextField.context.lineCap = "square";
						openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + StringTools.hex(textEngine.borderColor,6);
						openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
					}
				}
				if(textField.__caretIndex > -1 && textEngine.selectable && textField.__showCursor) {
					var scrollX1 = -textField.get_scrollH();
					var scrollY1 = 0.0;
					var _g12 = 0;
					var _g4 = textField.get_scrollV() - 1;
					while(_g12 < _g4) {
						var i2 = _g12++;
						scrollY1 -= textEngine.lineHeights.get(i2);
					}
					openfl__$internal_renderer_canvas_CanvasTextField.context.beginPath();
					openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + StringTools.hex(textField.get_defaultTextFormat().color,6);
					openfl__$internal_renderer_canvas_CanvasTextField.context.moveTo(scrollX1 + 2.5,scrollY1 + 2.5);
					openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
					openfl__$internal_renderer_canvas_CanvasTextField.context.lineTo(scrollX1 + 2.5,scrollY1 + openfl__$internal_text_TextEngine.getFormatHeight(textField.get_defaultTextFormat()) - 1);
					openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
					openfl__$internal_renderer_canvas_CanvasTextField.context.closePath();
				}
			}
			graphics.__bitmap = openfl_display_BitmapData.fromCanvas(textField.__graphics.__canvas);
			graphics.__visible = true;
			textField.__dirty = false;
			graphics.set___dirty(false);
		}
	}
};
var openfl__$internal_renderer_console_ConsoleRenderer = function(stage,ctx) {
	openfl__$internal_renderer_AbstractRenderer.call(this,stage);
	throw new js__$Boot_HaxeError("ConsoleRenderer not supported");
};
$hxClasses["openfl._internal.renderer.console.ConsoleRenderer"] = openfl__$internal_renderer_console_ConsoleRenderer;
openfl__$internal_renderer_console_ConsoleRenderer.__name__ = ["openfl","_internal","renderer","console","ConsoleRenderer"];
openfl__$internal_renderer_console_ConsoleRenderer.__super__ = openfl__$internal_renderer_AbstractRenderer;
openfl__$internal_renderer_console_ConsoleRenderer.prototype = $extend(openfl__$internal_renderer_AbstractRenderer.prototype,{
	render: function() {
	}
	,__class__: openfl__$internal_renderer_console_ConsoleRenderer
});
var openfl__$internal_renderer_dom_DOMBitmap = function() { };
$hxClasses["openfl._internal.renderer.dom.DOMBitmap"] = openfl__$internal_renderer_dom_DOMBitmap;
openfl__$internal_renderer_dom_DOMBitmap.__name__ = ["openfl","_internal","renderer","dom","DOMBitmap"];
openfl__$internal_renderer_dom_DOMBitmap.render = function(bitmap,renderSession) {
	if(bitmap.stage != null && bitmap.__worldVisible && bitmap.__renderable && bitmap.bitmapData != null && bitmap.bitmapData.__isValid) {
		renderSession.maskManager.pushObject(bitmap);
		if(bitmap.bitmapData.image.buffer.__srcImage != null) openfl__$internal_renderer_dom_DOMBitmap.renderImage(bitmap,renderSession); else openfl__$internal_renderer_dom_DOMBitmap.renderCanvas(bitmap,renderSession);
		renderSession.maskManager.popObject(bitmap);
	} else {
		if(bitmap.__image != null) {
			renderSession.element.removeChild(bitmap.__image);
			bitmap.__image = null;
			bitmap.__style = null;
		}
		if(bitmap.__canvas != null) {
			renderSession.element.removeChild(bitmap.__canvas);
			bitmap.__canvas = null;
			bitmap.__style = null;
		}
	}
};
openfl__$internal_renderer_dom_DOMBitmap.renderCanvas = function(bitmap,renderSession) {
	if(bitmap.__image != null) {
		renderSession.element.removeChild(bitmap.__image);
		bitmap.__image = null;
	}
	if(bitmap.__canvas == null) {
		bitmap.__canvas = window.document.createElement("canvas");
		bitmap.__context = bitmap.__canvas.getContext("2d");
		bitmap.__imageVersion = -1;
		if(!renderSession.allowSmoothing || !bitmap.smoothing) {
			bitmap.__context.mozImageSmoothingEnabled = false;
			bitmap.__context.msImageSmoothingEnabled = false;
			bitmap.__context.imageSmoothingEnabled = false;
		}
		openfl__$internal_renderer_dom_DOMRenderer.initializeElement(bitmap,bitmap.__canvas,renderSession);
	}
	if(bitmap.__imageVersion != bitmap.bitmapData.image.version) {
		lime_graphics_utils_ImageCanvasUtil.convertToCanvas(bitmap.bitmapData.image);
		bitmap.__canvas.width = bitmap.bitmapData.width;
		bitmap.__canvas.height = bitmap.bitmapData.height;
		bitmap.__context.drawImage(bitmap.bitmapData.image.buffer.__srcCanvas,0,0);
		bitmap.__imageVersion = bitmap.bitmapData.image.version;
	}
	openfl__$internal_renderer_dom_DOMRenderer.updateClip(bitmap,renderSession);
	openfl__$internal_renderer_dom_DOMRenderer.applyStyle(bitmap,renderSession,true,true,true);
};
openfl__$internal_renderer_dom_DOMBitmap.renderImage = function(bitmap,renderSession) {
	if(bitmap.__canvas != null) {
		renderSession.element.removeChild(bitmap.__canvas);
		bitmap.__canvas = null;
	}
	if(bitmap.__image == null) {
		bitmap.__image = window.document.createElement("img");
		bitmap.__image.src = bitmap.bitmapData.image.buffer.__srcImage.src;
		openfl__$internal_renderer_dom_DOMRenderer.initializeElement(bitmap,bitmap.__image,renderSession);
	}
	openfl__$internal_renderer_dom_DOMRenderer.updateClip(bitmap,renderSession);
	openfl__$internal_renderer_dom_DOMRenderer.applyStyle(bitmap,renderSession,true,true,true);
};
var openfl__$internal_renderer_dom_DOMDisplayObject = function() { };
$hxClasses["openfl._internal.renderer.dom.DOMDisplayObject"] = openfl__$internal_renderer_dom_DOMDisplayObject;
openfl__$internal_renderer_dom_DOMDisplayObject.__name__ = ["openfl","_internal","renderer","dom","DOMDisplayObject"];
openfl__$internal_renderer_dom_DOMDisplayObject.render = function(displayObject,renderSession) {
	if(displayObject.opaqueBackground != null && displayObject.get_width() > 0 && displayObject.get_height() > 0) {
	}
	openfl__$internal_renderer_dom_DOMShape.render(displayObject,renderSession);
};
var openfl__$internal_renderer_dom_DOMMaskManager = function(renderSession) {
	openfl__$internal_renderer_AbstractMaskManager.call(this,renderSession);
	this.clipRects = [];
	this.numClipRects = 0;
};
$hxClasses["openfl._internal.renderer.dom.DOMMaskManager"] = openfl__$internal_renderer_dom_DOMMaskManager;
openfl__$internal_renderer_dom_DOMMaskManager.__name__ = ["openfl","_internal","renderer","dom","DOMMaskManager"];
openfl__$internal_renderer_dom_DOMMaskManager.__super__ = openfl__$internal_renderer_AbstractMaskManager;
openfl__$internal_renderer_dom_DOMMaskManager.prototype = $extend(openfl__$internal_renderer_AbstractMaskManager.prototype,{
	currentClipRect: null
	,clipRects: null
	,numClipRects: null
	,pushMask: function(mask) {
		this.pushRect(mask.getBounds(mask),mask.__getRenderTransform());
	}
	,pushObject: function(object,handleScrollRect) {
		if(handleScrollRect == null) handleScrollRect = true;
		if(handleScrollRect && object.__scrollRect != null) this.pushRect(object.__scrollRect,object.__renderTransform);
		if(object.__mask != null) this.pushMask(object.__mask);
	}
	,pushRect: function(rect,transform) {
		if(this.numClipRects == this.clipRects.length) this.clipRects[this.numClipRects] = new openfl_geom_Rectangle();
		var clipRect = this.clipRects[this.numClipRects];
		rect.__transform(clipRect,transform);
		if(this.numClipRects > 0) {
			var parentClipRect = this.clipRects[this.numClipRects - 1];
			clipRect.__contract(parentClipRect.x,parentClipRect.y,parentClipRect.width,parentClipRect.height);
		}
		if(clipRect.height < 0) clipRect.height = 0;
		if(clipRect.width < 0) clipRect.width = 0;
		this.currentClipRect = clipRect;
		this.numClipRects++;
	}
	,popMask: function() {
		this.popRect();
	}
	,popObject: function(object,handleScrollRect) {
		if(handleScrollRect == null) handleScrollRect = true;
		if(object.__mask != null) this.popMask();
		if(handleScrollRect && object.__scrollRect != null) this.popRect();
	}
	,popRect: function() {
		if(this.numClipRects > 0) {
			this.numClipRects--;
			if(this.numClipRects > 0) this.currentClipRect = this.clipRects[this.numClipRects - 1]; else this.currentClipRect = null;
		}
	}
	,updateClip: function(displayObject) {
		if(this.currentClipRect == null) {
			displayObject.__worldClipChanged = displayObject.__worldClip != null;
			displayObject.__worldClip = null;
		} else {
			if(displayObject.__worldClip == null) displayObject.__worldClip = new openfl_geom_Rectangle();
			var clip = openfl_geom_Rectangle.__temp;
			var matrix = openfl_geom_Matrix.__temp;
			matrix.copyFrom(displayObject.__renderTransform);
			matrix.invert();
			this.currentClipRect.__transform(clip,matrix);
			if(clip.equals(displayObject.__worldClip)) displayObject.__worldClipChanged = false; else {
				displayObject.__worldClip.copyFrom(clip);
				displayObject.__worldClipChanged = true;
			}
		}
	}
	,__class__: openfl__$internal_renderer_dom_DOMMaskManager
});
var openfl__$internal_renderer_dom_DOMRenderer = function(stage,element) {
	openfl__$internal_renderer_AbstractRenderer.call(this,stage);
	this.element = element;
	this.renderSession = new openfl__$internal_renderer_RenderSession();
	this.renderSession.element = element;
	this.renderSession.roundPixels = true;
	var prefix = (function () {
		  var styles = window.getComputedStyle(document.documentElement, ''),
			pre = (Array.prototype.slice
			  .call(styles)
			  .join('') 
			  .match(/-(moz|webkit|ms)-/) || (styles.OLink === '' && ['', 'o'])
			)[1],
			dom = ('WebKit|Moz|MS|O').match(new RegExp('(' + pre + ')', 'i'))[1];
		  return {
			dom: dom,
			lowercase: pre,
			css: '-' + pre + '-',
			js: pre[0].toUpperCase() + pre.substr(1)
		  };
		})();
	this.renderSession.vendorPrefix = prefix.lowercase;
	if(prefix.lowercase == "webkit") this.renderSession.transformProperty = "-webkit-transform"; else this.renderSession.transformProperty = "transform";
	if(prefix.lowercase == "webkit") this.renderSession.transformOriginProperty = "-webkit-transform-origin"; else this.renderSession.transformOriginProperty = "transform-origin";
	this.renderSession.maskManager = new openfl__$internal_renderer_dom_DOMMaskManager(this.renderSession);
	this.renderSession.renderer = this;
};
$hxClasses["openfl._internal.renderer.dom.DOMRenderer"] = openfl__$internal_renderer_dom_DOMRenderer;
openfl__$internal_renderer_dom_DOMRenderer.__name__ = ["openfl","_internal","renderer","dom","DOMRenderer"];
openfl__$internal_renderer_dom_DOMRenderer.applyStyle = function(displayObject,renderSession,setTransform,setAlpha,setClip) {
	var style = displayObject.__style;
	if(setTransform && displayObject.__renderTransformChanged) style.setProperty(renderSession.transformProperty,displayObject.__renderTransform.to3DString(renderSession.roundPixels),null);
	if(displayObject.__worldZ != ++renderSession.z) {
		displayObject.__worldZ = renderSession.z;
		style.setProperty("z-index",displayObject.__worldZ == null?"null":"" + displayObject.__worldZ,null);
	}
	if(setAlpha && displayObject.__worldAlphaChanged) {
		if(displayObject.__worldAlpha < 1) style.setProperty("opacity",displayObject.__worldAlpha == null?"null":"" + displayObject.__worldAlpha,null); else style.removeProperty("opacity");
	}
	if(setClip && displayObject.__worldClipChanged) {
		if(displayObject.__worldClip == null) style.removeProperty("clip"); else {
			var clip = displayObject.__worldClip;
			style.setProperty("clip","rect(" + clip.y + "px, " + clip.get_right() + "px, " + clip.get_bottom() + "px, " + clip.x + "px)",null);
		}
	}
};
openfl__$internal_renderer_dom_DOMRenderer.initializeElement = function(displayObject,element,renderSession) {
	var style = displayObject.__style = element.style;
	style.setProperty("position","absolute",null);
	style.setProperty("top","0",null);
	style.setProperty("left","0",null);
	style.setProperty(renderSession.transformOriginProperty,"0 0 0",null);
	renderSession.element.appendChild(element);
	displayObject.__worldAlphaChanged = true;
	displayObject.__renderTransformChanged = true;
	displayObject.__worldVisibleChanged = true;
	displayObject.__worldClipChanged = true;
	displayObject.__worldClip = null;
	displayObject.__worldZ = -1;
};
openfl__$internal_renderer_dom_DOMRenderer.updateClip = function(displayObject,renderSession) {
	var maskManager = renderSession.maskManager;
	maskManager.updateClip(displayObject);
};
openfl__$internal_renderer_dom_DOMRenderer.__super__ = openfl__$internal_renderer_AbstractRenderer;
openfl__$internal_renderer_dom_DOMRenderer.prototype = $extend(openfl__$internal_renderer_AbstractRenderer.prototype,{
	element: null
	,clear: function() {
		var _g = 0;
		var _g1 = this.stage.stage3Ds;
		while(_g < _g1.get_length()) {
			var stage3D = _g1.get(_g);
			++_g;
			stage3D.__renderDOM(this.stage,this.renderSession);
		}
	}
	,render: function() {
		this.renderSession.allowSmoothing = this.stage.quality != 2;
		if(!this.stage.__transparent) this.element.style.background = this.stage.__colorString; else this.element.style.background = "none";
		this.renderSession.z = 1;
		this.stage.__renderDOM(this.renderSession);
	}
	,__class__: openfl__$internal_renderer_dom_DOMRenderer
});
var openfl__$internal_renderer_dom_DOMShape = function() { };
$hxClasses["openfl._internal.renderer.dom.DOMShape"] = openfl__$internal_renderer_dom_DOMShape;
openfl__$internal_renderer_dom_DOMShape.__name__ = ["openfl","_internal","renderer","dom","DOMShape"];
openfl__$internal_renderer_dom_DOMShape.render = function(shape,renderSession) {
	var graphics = shape.__graphics;
	if(shape.stage != null && shape.__worldVisible && shape.__renderable && graphics != null) {
		openfl__$internal_renderer_canvas_CanvasGraphics.render(graphics,renderSession,shape.__renderTransform);
		if(graphics.__dirty || shape.__worldAlphaChanged || shape.__canvas == null && graphics.__canvas != null) {
			if(graphics.__canvas != null) {
				if(shape.__canvas != graphics.__canvas) {
					if(shape.__canvas != null) renderSession.element.removeChild(shape.__canvas);
					shape.__canvas = graphics.__canvas;
					shape.__context = graphics.__context;
					openfl__$internal_renderer_dom_DOMRenderer.initializeElement(shape,shape.__canvas,renderSession);
				}
			} else if(shape.__canvas != null) {
				renderSession.element.removeChild(shape.__canvas);
				shape.__canvas = null;
				shape.__style = null;
			}
		}
		if(shape.__canvas != null) {
			renderSession.maskManager.pushObject(shape);
			var cacheTransform = shape.__renderTransform;
			shape.__renderTransform = graphics.__worldTransform;
			if(graphics.__transformDirty) {
				graphics.__transformDirty = false;
				shape.__renderTransformChanged = true;
			}
			openfl__$internal_renderer_dom_DOMRenderer.updateClip(shape,renderSession);
			openfl__$internal_renderer_dom_DOMRenderer.applyStyle(shape,renderSession,true,true,true);
			shape.__renderTransform = cacheTransform;
			renderSession.maskManager.popObject(shape);
		}
	} else if(shape.__canvas != null) {
		renderSession.element.removeChild(shape.__canvas);
		shape.__canvas = null;
		shape.__style = null;
	}
};
var openfl__$internal_renderer_dom_DOMTextField = function() { };
$hxClasses["openfl._internal.renderer.dom.DOMTextField"] = openfl__$internal_renderer_dom_DOMTextField;
openfl__$internal_renderer_dom_DOMTextField.__name__ = ["openfl","_internal","renderer","dom","DOMTextField"];
openfl__$internal_renderer_dom_DOMTextField.measureText = function(textField) {
	var textEngine = textField.__textEngine;
	var div = textField.__div;
	if(div == null) {
		div = window.document.createElement("div");
		div.innerHTML = new EReg("\n","g").replace(textEngine.text,"<br>");
		div.style.setProperty("font",openfl__$internal_text_TextEngine.getFont(textField.__textFormat),null);
		div.style.setProperty("pointer-events","none",null);
		div.style.position = "absolute";
		div.style.top = "110%";
		window.document.body.appendChild(div);
	}
	textEngine.__measuredWidth = div.clientWidth;
	if(textField.__div == null) div.style.width = Std.string(textEngine.width - 4) + "px";
	textEngine.__measuredHeight = div.clientHeight;
	if(textField.__div == null) window.document.body.removeChild(div);
};
openfl__$internal_renderer_dom_DOMTextField.render = function(textField,renderSession) {
	var textEngine = textField.__textEngine;
	if(textField.stage != null && textField.__worldVisible && textField.__renderable) {
		if(textField.__dirty || textField.__div == null) {
			if(textEngine.text != "" || textEngine.background || textEngine.border || textEngine.type == 1) {
				if(textField.__div == null) {
					textField.__div = window.document.createElement("div");
					openfl__$internal_renderer_dom_DOMRenderer.initializeElement(textField,textField.__div,renderSession);
					textField.__style.setProperty("outline","none",null);
					textField.__div.addEventListener("input",function(event) {
						event.preventDefault();
						if(textField.get_htmlText() != textField.__div.innerHTML) {
							textField.set_htmlText(textField.__div.innerHTML);
							if(textField.__displayAsPassword) {
							}
							textField.__dirty = false;
						}
					},true);
				}
				if(!textEngine.multiline) textField.__style.setProperty("white-space","nowrap",null); else textField.__style.setProperty("word-wrap","break-word",null);
				textField.__style.setProperty("overflow","hidden",null);
				if(textEngine.selectable) textField.__style.setProperty("cursor","text",null); else textField.__style.setProperty("cursor","inherit",null);
				textField.__div.contentEditable = textEngine.type == 1;
				var style = textField.__style;
				textField.__div.innerHTML = new EReg("\n","g").replace(textEngine.text,"<br>");
				if(textEngine.background) style.setProperty("background-color","#" + StringTools.hex(textEngine.backgroundColor,6),null); else style.removeProperty("background-color");
				if(textEngine.border) style.setProperty("border","solid 1px #" + StringTools.hex(textEngine.borderColor,6),null); else style.removeProperty("border");
				style.setProperty("font",openfl__$internal_text_TextEngine.getFont(textField.__textFormat),null);
				style.setProperty("color","#" + StringTools.hex(textField.__textFormat.color,6),null);
				if(textEngine.autoSize != 2) style.setProperty("width","auto",null); else style.setProperty("width",textEngine.width + "px",null);
				style.setProperty("height",textEngine.height + "px",null);
				var _g = textField.__textFormat.align;
				switch(_g) {
				case 0:
					style.setProperty("text-align","center",null);
					break;
				case 4:
					style.setProperty("text-align","right",null);
					break;
				default:
					style.setProperty("text-align","left",null);
				}
				textField.__dirty = false;
			} else if(textField.__div != null) {
				renderSession.element.removeChild(textField.__div);
				textField.__div = null;
			}
		}
		if(textField.__div != null) {
			openfl__$internal_renderer_dom_DOMRenderer.updateClip(textField,renderSession);
			openfl__$internal_renderer_dom_DOMRenderer.applyStyle(textField,renderSession,true,true,true);
		}
	} else if(textField.__div != null) {
		renderSession.element.removeChild(textField.__div);
		textField.__div = null;
		textField.__style = null;
	}
};
var openfl__$internal_renderer_opengl_GLBitmap = function() { };
$hxClasses["openfl._internal.renderer.opengl.GLBitmap"] = openfl__$internal_renderer_opengl_GLBitmap;
openfl__$internal_renderer_opengl_GLBitmap.__name__ = ["openfl","_internal","renderer","opengl","GLBitmap"];
openfl__$internal_renderer_opengl_GLBitmap.render = function(bitmap,renderSession) {
	if(!bitmap.__renderable || bitmap.__worldAlpha <= 0) return;
	if(bitmap.bitmapData != null && bitmap.bitmapData.__isValid) {
		var renderer = renderSession.renderer;
		var gl = renderSession.gl;
		renderSession.blendModeManager.setBlendMode(bitmap.get_blendMode());
		renderSession.maskManager.pushObject(bitmap);
		var shader = renderSession.filterManager.pushObject(bitmap);
		shader.get_data().uImage0.input = bitmap.bitmapData;
		shader.get_data().uImage0.smoothing = renderSession.allowSmoothing && (bitmap.smoothing || renderSession.upscaled);
		shader.get_data().uMatrix.value = renderer.getMatrix(bitmap.__renderTransform);
		renderSession.shaderManager.setShader(shader);
		gl.bindBuffer(gl.ARRAY_BUFFER,bitmap.bitmapData.getBuffer(gl,bitmap.__worldAlpha));
		gl.vertexAttribPointer(shader.get_data().aPosition.index,3,gl.FLOAT,false,24,0);
		gl.vertexAttribPointer(shader.get_data().aTexCoord.index,2,gl.FLOAT,false,24,12);
		gl.vertexAttribPointer(shader.get_data().aAlpha.index,1,gl.FLOAT,false,24,20);
		gl.drawArrays(gl.TRIANGLE_STRIP,0,4);
		renderSession.filterManager.popObject(bitmap);
		renderSession.maskManager.popObject(bitmap);
	}
};
var openfl__$internal_renderer_opengl_GLBlendModeManager = function(gl) {
	openfl__$internal_renderer_AbstractBlendModeManager.call(this);
	this.gl = gl;
	this.setBlendMode(10);
	gl.enable(gl.BLEND);
};
$hxClasses["openfl._internal.renderer.opengl.GLBlendModeManager"] = openfl__$internal_renderer_opengl_GLBlendModeManager;
openfl__$internal_renderer_opengl_GLBlendModeManager.__name__ = ["openfl","_internal","renderer","opengl","GLBlendModeManager"];
openfl__$internal_renderer_opengl_GLBlendModeManager.__super__ = openfl__$internal_renderer_AbstractBlendModeManager;
openfl__$internal_renderer_opengl_GLBlendModeManager.prototype = $extend(openfl__$internal_renderer_AbstractBlendModeManager.prototype,{
	currentBlendMode: null
	,gl: null
	,setBlendMode: function(blendMode) {
		if(this.currentBlendMode == blendMode) return;
		this.currentBlendMode = blendMode;
		switch(blendMode) {
		case 0:
			this.gl.blendEquation(this.gl.FUNC_ADD);
			this.gl.blendFunc(this.gl.ONE,this.gl.ONE);
			break;
		case 9:
			this.gl.blendEquation(this.gl.FUNC_ADD);
			this.gl.blendFunc(this.gl.DST_COLOR,this.gl.ONE_MINUS_SRC_ALPHA);
			break;
		case 12:
			this.gl.blendEquation(this.gl.FUNC_ADD);
			this.gl.blendFunc(this.gl.ONE,this.gl.ONE_MINUS_SRC_COLOR);
			break;
		case 14:
			this.gl.blendEquation(this.gl.FUNC_REVERSE_SUBTRACT);
			this.gl.blendFunc(this.gl.ONE,this.gl.ONE);
			break;
		default:
			this.gl.blendEquation(this.gl.FUNC_ADD);
			this.gl.blendFunc(this.gl.ONE,this.gl.ONE_MINUS_SRC_ALPHA);
		}
	}
	,__class__: openfl__$internal_renderer_opengl_GLBlendModeManager
});
var openfl__$internal_renderer_opengl_GLDisplayObject = function() { };
$hxClasses["openfl._internal.renderer.opengl.GLDisplayObject"] = openfl__$internal_renderer_opengl_GLDisplayObject;
openfl__$internal_renderer_opengl_GLDisplayObject.__name__ = ["openfl","_internal","renderer","opengl","GLDisplayObject"];
openfl__$internal_renderer_opengl_GLDisplayObject.render = function(displayObject,renderSession) {
	if(displayObject.opaqueBackground == null && displayObject.__graphics == null) return;
	if(!displayObject.__renderable || displayObject.__worldAlpha <= 0) return;
	if(displayObject.opaqueBackground != null && displayObject.get_width() > 0 && displayObject.get_height() > 0) {
		renderSession.maskManager.pushObject(displayObject);
		var gl = renderSession.gl;
		var rect = openfl_geom_Rectangle.__temp;
		rect.setTo(0,0,displayObject.get_width(),displayObject.get_height());
		renderSession.maskManager.pushRect(rect,displayObject.__renderTransform);
		var color = displayObject.opaqueBackground;
		gl.clearColor((color >> 16 & 255) / 255,(color >> 8 & 255) / 255,(color & 255) / 255,1);
		gl.clear(gl.COLOR_BUFFER_BIT);
		renderSession.maskManager.popRect();
		renderSession.maskManager.popObject(displayObject);
	}
	if(displayObject.__graphics != null) openfl__$internal_renderer_opengl_GLShape.render(displayObject,renderSession);
};
var openfl__$internal_renderer_opengl_GLFilterManager = function(renderer,renderSession) {
	openfl__$internal_renderer_AbstractFilterManager.call(this,renderSession);
	this.renderer = renderer;
	this.gl = renderSession.gl;
	this.filterDepth = 0;
	this.matrix = new openfl_geom_Matrix();
};
$hxClasses["openfl._internal.renderer.opengl.GLFilterManager"] = openfl__$internal_renderer_opengl_GLFilterManager;
openfl__$internal_renderer_opengl_GLFilterManager.__name__ = ["openfl","_internal","renderer","opengl","GLFilterManager"];
openfl__$internal_renderer_opengl_GLFilterManager.__super__ = openfl__$internal_renderer_AbstractFilterManager;
openfl__$internal_renderer_opengl_GLFilterManager.prototype = $extend(openfl__$internal_renderer_AbstractFilterManager.prototype,{
	filterDepth: null
	,gl: null
	,matrix: null
	,renderer: null
	,pushObject: function(object) {
		if(object.__filters != null && object.__filters.length > 0) {
			if(object.__filters.length == 1 && object.__filters[0].__numPasses == 0) return object.__filters[0].__initShader(this.renderSession,0); else this.renderer.getRenderTarget(true);
			this.filterDepth++;
		}
		return this.renderSession.shaderManager.defaultShader;
	}
	,popObject: function(object) {
		if(object.__filters != null && object.__filters.length > 0) {
			var filter = object.__filters[0];
			var currentTarget;
			var shader;
			if(object.__filters.length > 1 || filter.__numPasses > 0) {
				var _g1 = 0;
				var _g = filter.__numPasses;
				while(_g1 < _g) {
					var i = _g1++;
					currentTarget = this.renderer.currentRenderTarget;
					this.renderer.getRenderTarget(true);
					shader = filter.__initShader(this.renderSession,i);
					this.renderPass(currentTarget,shader);
				}
				this.filterDepth--;
				this.renderer.getRenderTarget(this.filterDepth > 0);
				this.renderPass(this.renderer.currentRenderTarget,this.renderSession.shaderManager.defaultShader);
			} else this.filterDepth--;
		}
	}
	,renderPass: function(target,shader) {
		shader.get_data().uImage0.input = target;
		shader.get_data().uImage0.smoothing = this.renderSession.allowSmoothing && this.renderSession.upscaled;
		shader.get_data().uMatrix.value = this.renderer.getMatrix(this.matrix);
		this.renderSession.shaderManager.setShader(shader);
		this.gl.bindBuffer(this.gl.ARRAY_BUFFER,target.getBuffer(this.gl,1));
		this.gl.vertexAttribPointer(shader.get_data().aPosition.index,3,this.gl.FLOAT,false,24,0);
		this.gl.vertexAttribPointer(shader.get_data().aTexCoord.index,2,this.gl.FLOAT,false,24,12);
		this.gl.vertexAttribPointer(shader.get_data().aAlpha.index,1,this.gl.FLOAT,false,24,20);
		this.gl.drawArrays(this.gl.TRIANGLE_STRIP,0,4);
	}
	,__class__: openfl__$internal_renderer_opengl_GLFilterManager
});
var openfl__$internal_renderer_opengl_GLMaskManager = function(renderSession) {
	openfl__$internal_renderer_AbstractMaskManager.call(this,renderSession);
	this.gl = renderSession.gl;
	this.clipRects = [];
	this.numClipRects = 0;
	this.tempRect = new openfl_geom_Rectangle();
};
$hxClasses["openfl._internal.renderer.opengl.GLMaskManager"] = openfl__$internal_renderer_opengl_GLMaskManager;
openfl__$internal_renderer_opengl_GLMaskManager.__name__ = ["openfl","_internal","renderer","opengl","GLMaskManager"];
openfl__$internal_renderer_opengl_GLMaskManager.__super__ = openfl__$internal_renderer_AbstractMaskManager;
openfl__$internal_renderer_opengl_GLMaskManager.prototype = $extend(openfl__$internal_renderer_AbstractMaskManager.prototype,{
	clipRects: null
	,gl: null
	,numClipRects: null
	,tempRect: null
	,pushMask: function(mask) {
		this.pushRect(mask.getBounds(mask),mask.__getRenderTransform());
	}
	,pushObject: function(object,handleScrollRect) {
		if(handleScrollRect == null) handleScrollRect = true;
		if(handleScrollRect && object.__scrollRect != null) this.pushRect(object.__scrollRect,object.__renderTransform);
		if(object.__mask != null) this.pushMask(object.__mask);
	}
	,pushRect: function(rect,transform) {
		var stage = openfl_Lib.current.stage;
		if(this.numClipRects == this.clipRects.length) this.clipRects[this.numClipRects] = new openfl_geom_Rectangle();
		var clipRect = this.clipRects[this.numClipRects];
		rect.__transform(clipRect,transform);
		if(this.numClipRects > 0) {
			var parentClipRect = this.clipRects[this.numClipRects - 1];
			clipRect.__contract(parentClipRect.x,parentClipRect.y,parentClipRect.width,parentClipRect.height);
		}
		if(clipRect.height < 0) clipRect.height = 0;
		if(clipRect.width < 0) clipRect.width = 0;
		this.scissorRect(clipRect);
		this.numClipRects++;
	}
	,popMask: function() {
		this.popRect();
	}
	,popObject: function(object,handleScrollRect) {
		if(handleScrollRect == null) handleScrollRect = true;
		if(object.__mask != null) this.popMask();
		if(handleScrollRect && object.__scrollRect != null) this.popRect();
	}
	,popRect: function() {
		if(this.numClipRects > 0) {
			this.numClipRects--;
			if(this.numClipRects > 0) this.scissorRect(this.clipRects[this.numClipRects - 1]); else this.scissorRect();
		}
	}
	,scissorRect: function(rect) {
		if(rect != null) {
			var renderer = this.renderSession.renderer;
			this.gl.enable(this.gl.SCISSOR_TEST);
			var clipRect = this.tempRect;
			rect.__transform(clipRect,renderer.displayMatrix);
			var x = Math.floor(clipRect.x);
			var y = Math.floor(renderer.height - clipRect.y - clipRect.height);
			var width = Math.ceil(clipRect.width);
			var height = Math.ceil(clipRect.height);
			if(width < 0) width = 0;
			if(height < 0) height = 0;
			this.gl.scissor(x,y,width,height);
		} else this.gl.disable(this.gl.SCISSOR_TEST);
	}
	,__class__: openfl__$internal_renderer_opengl_GLMaskManager
});
var openfl__$internal_renderer_opengl_GLRenderer = function(stage,gl,flipped) {
	if(flipped == null) flipped = true;
	openfl__$internal_renderer_AbstractRenderer.call(this,stage);
	this.gl = gl;
	this.flipped = flipped;
	this.matrix = lime_math__$Matrix4_Matrix4_$Impl_$._new();
	this.values = [];
	this.renderSession = new openfl__$internal_renderer_RenderSession();
	this.renderSession.gl = gl;
	this.renderSession.roundPixels = true;
	this.renderSession.renderer = this;
	this.renderSession.blendModeManager = new openfl__$internal_renderer_opengl_GLBlendModeManager(gl);
	this.renderSession.filterManager = new openfl__$internal_renderer_opengl_GLFilterManager(this,this.renderSession);
	this.renderSession.shaderManager = new openfl__$internal_renderer_opengl_GLShaderManager(gl);
	this.renderSession.maskManager = new openfl__$internal_renderer_opengl_GLMaskManager(this.renderSession);
	if(stage.window != null) {
		if(stage.stage3Ds.get(0).context3D == null) stage.stage3Ds.get(0).__createContext(stage,this.renderSession);
		this.resize(Math.ceil(stage.window.__width * stage.window.__scale),Math.ceil(stage.window.__height * stage.window.__scale));
	}
};
$hxClasses["openfl._internal.renderer.opengl.GLRenderer"] = openfl__$internal_renderer_opengl_GLRenderer;
openfl__$internal_renderer_opengl_GLRenderer.__name__ = ["openfl","_internal","renderer","opengl","GLRenderer"];
openfl__$internal_renderer_opengl_GLRenderer.__super__ = openfl__$internal_renderer_AbstractRenderer;
openfl__$internal_renderer_opengl_GLRenderer.prototype = $extend(openfl__$internal_renderer_AbstractRenderer.prototype,{
	projection: null
	,projectionFlipped: null
	,currentRenderTarget: null
	,displayHeight: null
	,displayMatrix: null
	,displayWidth: null
	,flipped: null
	,gl: null
	,matrix: null
	,renderTargetA: null
	,renderTargetB: null
	,offsetX: null
	,offsetY: null
	,values: null
	,clear: function() {
		if(this.stage.__transparent) this.gl.clearColor(0,0,0,0); else this.gl.clearColor(this.stage.__colorSplit[0],this.stage.__colorSplit[1],this.stage.__colorSplit[2],1);
		this.gl.clear(this.gl.COLOR_BUFFER_BIT);
		var _g = 0;
		var _g1 = this.stage.stage3Ds;
		while(_g < _g1.get_length()) {
			var stage3D = _g1.get(_g);
			++_g;
			stage3D.__renderGL(this.stage,this.renderSession);
		}
	}
	,getCacheObject: function() {
	}
	,getMatrix: function(transform) {
		var _matrix = openfl_geom_Matrix.__temp;
		_matrix.copyFrom(transform);
		_matrix.concat(this.displayMatrix);
		if(this.renderSession.roundPixels) {
			_matrix.tx = Math.round(_matrix.tx);
			_matrix.ty = Math.round(_matrix.ty);
		}
		lime_math__$Matrix4_Matrix4_$Impl_$.identity(this.matrix);
		lime_math__$Matrix4_Matrix4_$Impl_$.set(this.matrix,0,_matrix.a);
		lime_math__$Matrix4_Matrix4_$Impl_$.set(this.matrix,1,_matrix.b);
		lime_math__$Matrix4_Matrix4_$Impl_$.set(this.matrix,4,_matrix.c);
		lime_math__$Matrix4_Matrix4_$Impl_$.set(this.matrix,5,_matrix.d);
		lime_math__$Matrix4_Matrix4_$Impl_$.set(this.matrix,12,_matrix.tx);
		lime_math__$Matrix4_Matrix4_$Impl_$.set(this.matrix,13,_matrix.ty);
		lime_math__$Matrix4_Matrix4_$Impl_$.append(this.matrix,this.flipped?this.projectionFlipped:this.projection);
		var _g = 0;
		while(_g < 16) {
			var i = _g++;
			this.values[i] = lime_math__$Matrix4_Matrix4_$Impl_$.get(this.matrix,i);
		}
		return this.values;
	}
	,getRenderTarget: function(framebuffer) {
		if(framebuffer) {
			if(this.renderTargetA == null) {
				this.renderTargetA = openfl_display_BitmapData.fromTexture(this.stage.stage3Ds.get(0).context3D.createRectangleTexture(this.width,this.height,1,true));
				this.gl.bindTexture(this.gl.TEXTURE_2D,this.renderTargetA.getTexture(this.gl));
				this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_WRAP_S,this.gl.CLAMP_TO_EDGE);
				this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_WRAP_T,this.gl.CLAMP_TO_EDGE);
			}
			if(this.renderTargetB == null) {
				this.renderTargetB = openfl_display_BitmapData.fromTexture(this.stage.stage3Ds.get(0).context3D.createRectangleTexture(this.width,this.height,1,true));
				this.gl.bindTexture(this.gl.TEXTURE_2D,this.renderTargetB.getTexture(this.gl));
				this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_WRAP_S,this.gl.CLAMP_TO_EDGE);
				this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_WRAP_T,this.gl.CLAMP_TO_EDGE);
			}
			if(this.currentRenderTarget == this.renderTargetA) this.currentRenderTarget = this.renderTargetB; else this.currentRenderTarget = this.renderTargetA;
			this.gl.bindFramebuffer(this.gl.FRAMEBUFFER,this.currentRenderTarget.__getFramebuffer(this.gl));
			this.gl.viewport(0,0,this.width,this.height);
			this.gl.clearColor(0,0,0,0);
			this.gl.clear(this.gl.COLOR_BUFFER_BIT);
			this.flipped = false;
		} else {
			this.gl.bindFramebuffer(this.gl.FRAMEBUFFER,null);
			this.flipped = true;
		}
	}
	,render: function() {
		this.gl.viewport(this.offsetX,this.offsetY,this.displayWidth,this.displayHeight);
		this.renderSession.allowSmoothing = this.stage.quality != 2;
		this.renderSession.upscaled = this.displayMatrix.a != 1 || this.displayMatrix.d != 1;
		this.stage.__renderGL(this.renderSession);
		if(this.offsetX > 0 || this.offsetY > 0) {
			this.gl.clearColor(0,0,0,1);
			this.gl.enable(this.gl.SCISSOR_TEST);
			if(this.offsetX > 0) {
				this.gl.scissor(0,0,this.offsetX,this.height);
				this.gl.clear(this.gl.COLOR_BUFFER_BIT);
				this.gl.scissor(this.offsetX + this.displayWidth,0,this.width,this.height);
				this.gl.clear(this.gl.COLOR_BUFFER_BIT);
			}
			if(this.offsetY > 0) {
				this.gl.scissor(0,0,this.width,this.offsetY);
				this.gl.clear(this.gl.COLOR_BUFFER_BIT);
				this.gl.scissor(0,this.offsetY + this.displayHeight,this.width,this.height);
				this.gl.clear(this.gl.COLOR_BUFFER_BIT);
			}
			this.gl.disable(this.gl.SCISSOR_TEST);
		}
	}
	,resize: function(width,height) {
		openfl__$internal_renderer_AbstractRenderer.prototype.resize.call(this,width,height);
		if(this.renderTargetA != null && (this.renderTargetA.width != width || this.renderTargetA.height != height)) {
			this.renderTargetA = openfl_display_BitmapData.fromTexture(this.stage.stage3Ds.get(0).context3D.createRectangleTexture(width,height,1,true));
			this.gl.bindTexture(this.gl.TEXTURE_2D,this.renderTargetA.getTexture(this.gl));
			this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_WRAP_S,this.gl.CLAMP_TO_EDGE);
			this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_WRAP_T,this.gl.CLAMP_TO_EDGE);
		}
		if(this.renderTargetB != null && (this.renderTargetB.width != width || this.renderTargetB.height != height)) {
			this.renderTargetB = openfl_display_BitmapData.fromTexture(this.stage.stage3Ds.get(0).context3D.createRectangleTexture(width,height,1,true));
			this.gl.bindTexture(this.gl.TEXTURE_2D,this.renderTargetB.getTexture(this.gl));
			this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_WRAP_S,this.gl.CLAMP_TO_EDGE);
			this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_WRAP_T,this.gl.CLAMP_TO_EDGE);
		}
		this.displayMatrix = this.stage.__displayMatrix;
		this.offsetX = Math.round(this.displayMatrix.__transformX(0,0));
		this.offsetY = Math.round(this.displayMatrix.__transformY(0,0));
		this.displayWidth = Math.round(this.displayMatrix.__transformX(width,0) - this.offsetX);
		this.displayHeight = Math.round(this.displayMatrix.__transformY(0,height) - this.offsetY);
		this.projection = lime_math__$Matrix4_Matrix4_$Impl_$.createOrtho(this.offsetX,this.displayWidth + this.offsetX,this.offsetY,this.displayHeight + this.offsetY,-1000,1000);
		this.projectionFlipped = lime_math__$Matrix4_Matrix4_$Impl_$.createOrtho(this.offsetX,this.displayWidth + this.offsetX,this.displayHeight + this.offsetY,this.offsetY,-1000,1000);
	}
	,__class__: openfl__$internal_renderer_opengl_GLRenderer
});
var openfl__$internal_renderer_opengl_GLShaderManager = function(gl) {
	openfl__$internal_renderer_AbstractShaderManager.call(this);
	this.gl = gl;
	this.defaultShader = new openfl_display_Shader();
	this.defaultShader.gl = gl;
	this.defaultShader.__init();
};
$hxClasses["openfl._internal.renderer.opengl.GLShaderManager"] = openfl__$internal_renderer_opengl_GLShaderManager;
openfl__$internal_renderer_opengl_GLShaderManager.__name__ = ["openfl","_internal","renderer","opengl","GLShaderManager"];
openfl__$internal_renderer_opengl_GLShaderManager.__super__ = openfl__$internal_renderer_AbstractShaderManager;
openfl__$internal_renderer_opengl_GLShaderManager.prototype = $extend(openfl__$internal_renderer_AbstractShaderManager.prototype,{
	gl: null
	,setShader: function(shader) {
		if(this.currentShader == shader) {
			if(this.currentShader != null) this.currentShader.__update();
			return;
		}
		if(this.currentShader != null) this.currentShader.__disable();
		if(shader == null) {
			this.currentShader = null;
			this.gl.useProgram(null);
			return;
		}
		this.currentShader = shader;
		if(this.currentShader.gl == null) {
			this.currentShader.gl = this.gl;
			this.currentShader.__init();
		}
		this.gl.useProgram(shader.glProgram);
		this.currentShader.__enable();
		this.currentShader.__update();
	}
	,__class__: openfl__$internal_renderer_opengl_GLShaderManager
});
var openfl__$internal_renderer_opengl_GLShape = function() { };
$hxClasses["openfl._internal.renderer.opengl.GLShape"] = openfl__$internal_renderer_opengl_GLShape;
openfl__$internal_renderer_opengl_GLShape.__name__ = ["openfl","_internal","renderer","opengl","GLShape"];
openfl__$internal_renderer_opengl_GLShape.render = function(shape,renderSession) {
	if(!shape.__renderable || shape.__worldAlpha <= 0) return;
	var graphics = shape.__graphics;
	if(graphics != null) {
		openfl__$internal_renderer_canvas_CanvasGraphics.render(graphics,renderSession,shape.__renderTransform);
		var bounds = graphics.__bounds;
		if(graphics.__bitmap != null && graphics.__visible) {
			var renderer = renderSession.renderer;
			var gl = renderSession.gl;
			renderSession.blendModeManager.setBlendMode(shape.get_blendMode());
			renderSession.maskManager.pushObject(shape);
			var shader = renderSession.filterManager.pushObject(shape);
			shader.get_data().uImage0.input = graphics.__bitmap;
			shader.get_data().uImage0.smoothing = renderSession.allowSmoothing;
			shader.get_data().uMatrix.value = renderer.getMatrix(graphics.__worldTransform);
			renderSession.shaderManager.setShader(shader);
			gl.bindBuffer(gl.ARRAY_BUFFER,graphics.__bitmap.getBuffer(gl,shape.__worldAlpha));
			gl.vertexAttribPointer(shader.get_data().aPosition.index,3,gl.FLOAT,false,24,0);
			gl.vertexAttribPointer(shader.get_data().aTexCoord.index,2,gl.FLOAT,false,24,12);
			gl.vertexAttribPointer(shader.get_data().aAlpha.index,1,gl.FLOAT,false,24,20);
			gl.drawArrays(gl.TRIANGLE_STRIP,0,4);
			renderSession.filterManager.popObject(shape);
			renderSession.maskManager.popObject(shape);
		}
	}
};
var openfl__$internal_renderer_opengl_GLStage3D = function() { };
$hxClasses["openfl._internal.renderer.opengl.GLStage3D"] = openfl__$internal_renderer_opengl_GLStage3D;
openfl__$internal_renderer_opengl_GLStage3D.__name__ = ["openfl","_internal","renderer","opengl","GLStage3D"];
openfl__$internal_renderer_opengl_GLStage3D.render = function(stage3D,renderSession) {
	if(stage3D.context3D != null) {
		renderSession.gl.depthMask(true);
		renderSession.blendModeManager.setBlendMode(null);
		if(renderSession.shaderManager.currentShader != null) {
			renderSession.shaderManager.setShader(null);
			if(stage3D.context3D.__program != null) stage3D.context3D.__program.__use();
		}
	}
};
var openfl__$internal_stage3D_AGALConverter = function() { };
$hxClasses["openfl._internal.stage3D.AGALConverter"] = openfl__$internal_stage3D_AGALConverter;
openfl__$internal_stage3D_AGALConverter.__name__ = ["openfl","_internal","stage3D","AGALConverter"];
openfl__$internal_stage3D_AGALConverter.prefixFromType = function(regType,programType) {
	switch(regType) {
	case 0:
		return "va";
	case 1:
		if(programType == openfl__$internal_stage3D__$AGALConverter_ProgramType.VERTEX) return "vc"; else return "fc";
		break;
	case 2:
		if(programType == openfl__$internal_stage3D__$AGALConverter_ProgramType.VERTEX) return "vt"; else return "ft";
		break;
	case 3:
		return "output_";
	case 4:
		return "v";
	case 5:
		return "sampler";
	default:
		throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("Invalid data!"));
	}
};
openfl__$internal_stage3D_AGALConverter.readUInt64 = function(byteArray) {
	var low = byteArray.readInt();
	var high = byteArray.readInt();
	var x = new haxe__$Int64__$_$_$Int64(high,low);
	return x;
};
openfl__$internal_stage3D_AGALConverter.convertToGLSL = function(agal,samplerState) {
	agal.position = 0;
	agal.__endian = 1;
	var magic = agal.readByte() & 255;
	if(magic == 176) return agal.readUTF();
	if(magic != 160) throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("Magic value must be 0xA0, may not be AGAL"));
	var version = agal.readInt();
	if(version != 1) throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("Version must be 1"));
	var shaderTypeID = agal.readByte() & 255;
	if(shaderTypeID != 161) throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("Shader type ID must be 0xA1"));
	var programType;
	if((agal.readByte() & 255) == 0) programType = openfl__$internal_stage3D__$AGALConverter_ProgramType.VERTEX; else programType = openfl__$internal_stage3D__$AGALConverter_ProgramType.FRAGMENT;
	var map = new openfl__$internal_stage3D_RegisterMap();
	var sb = new StringBuf();
	while(agal.position < openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(agal)) {
		var opcode = agal.readInt();
		var dest = agal.readUnsignedInt();
		var source1 = openfl__$internal_stage3D_AGALConverter.readUInt64(agal);
		var source2 = openfl__$internal_stage3D_AGALConverter.readUInt64(agal);
		var dr = openfl__$internal_stage3D__$AGALConverter_DestRegister.parse(dest,programType);
		var sr1 = openfl__$internal_stage3D__$AGALConverter_SourceRegister.parse(source1,programType,dr.mask);
		var sr2 = openfl__$internal_stage3D__$AGALConverter_SourceRegister.parse(source2,programType,dr.mask);
		sb.b += "\t";
		switch(opcode) {
		case 0:
			sb.add(dr.toGLSL() + " = " + sr1.toGLSL() + "; // mov");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 1:
			sb.add(dr.toGLSL() + " = " + sr1.toGLSL() + " + " + sr2.toGLSL() + "; // add");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 2:
			sb.add(dr.toGLSL() + " = " + sr1.toGLSL() + " - " + sr2.toGLSL() + "; // sub");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 3:
			sb.add(dr.toGLSL() + " = " + sr1.toGLSL() + " * " + sr2.toGLSL() + "; // mul");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 4:
			sb.add(dr.toGLSL() + " = " + sr1.toGLSL() + " / " + sr2.toGLSL() + "; // div");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 5:
			sb.add(dr.toGLSL() + " = vec4(1) / " + sr1.toGLSL() + ", " + sr2.toGLSL() + "; // rcp (untested)");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 6:
			sb.add(dr.toGLSL() + " = min(" + sr1.toGLSL() + ", " + sr2.toGLSL() + "); // min");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 7:
			sb.add(dr.toGLSL() + " = max(" + sr1.toGLSL() + ", " + sr2.toGLSL() + "); // max");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 8:
			sb.add(dr.toGLSL() + " = fract(" + sr1.toGLSL() + "); // frc");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 9:
			sb.add(dr.toGLSL() + " = sqrt(" + sr1.toGLSL() + "); // sqrt");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 10:
			sb.add(dr.toGLSL() + " = inversesqrt(" + sr1.toGLSL() + "); // rsq");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 11:
			sb.add(dr.toGLSL() + " = pow(" + sr1.toGLSL() + ", " + sr2.toGLSL() + "); // pow");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 12:
			sb.add(dr.toGLSL() + " = log2(" + sr1.toGLSL() + "); // log");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 13:
			sb.add(dr.toGLSL() + " = exp2(" + sr1.toGLSL() + "); // exp");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 14:
			sb.add(dr.toGLSL() + " = normalize(" + sr1.toGLSL() + "); // normalize");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 15:
			sb.add(dr.toGLSL() + " = sin(" + sr1.toGLSL() + "); // sin");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 16:
			sb.add(dr.toGLSL() + " = cos(" + sr1.toGLSL() + "); // cos");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 17:
			sr1.sourceMask = sr2.sourceMask = 7;
			sb.add(dr.toGLSL() + " = cross(vec3(" + sr1.toGLSL() + "), vec3(" + sr2.toGLSL() + ")); // crs");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 18:
			sr1.sourceMask = sr2.sourceMask = 7;
			sb.add(dr.toGLSL() + " = vec4(dot(vec3(" + sr1.toGLSL() + "), vec3(" + sr2.toGLSL() + ")))" + dr.getWriteMask() + "; // dp3");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 19:
			sr1.sourceMask = sr2.sourceMask = 15;
			sb.add(dr.toGLSL() + " = vec4(dot(vec4(" + sr1.toGLSL() + "), vec4(" + sr2.toGLSL() + ")))" + dr.getWriteMask() + "; // dp4");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 20:
			sb.add(dr.toGLSL() + " = abs(" + sr1.toGLSL() + "); // abs");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 21:
			sb.add(dr.toGLSL() + " = -" + sr1.toGLSL() + "; // neg");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 22:
			sb.add(dr.toGLSL() + " = clamp(" + sr1.toGLSL() + ", 0.0, 1.0); // saturate");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 23:
			var existingUsage = map.getRegisterUsage(sr2);
			if(existingUsage != openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4 && existingUsage != openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4_ARRAY) {
				sb.add(dr.toGLSL() + " = " + sr1.toGLSL() + " * mat3(" + sr2.toGLSL(false) + "); // m33");
				map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.MATRIX_4_4);
			} else {
				sr1.sourceMask = sr2.sourceMask = 7;
				sb.add(dr.toGLSL() + " = vec3(" + "dot(" + sr1.toGLSL(true) + "," + sr2.toGLSL(true,0) + "), " + "dot(" + sr1.toGLSL(true) + "," + sr2.toGLSL(true,1) + ")," + "dot(" + sr1.toGLSL(true) + "," + sr2.toGLSL(true,2) + ")); // m33");
				map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4,0);
				map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4,1);
				map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4,2);
			}
			break;
		case 24:
			var existingUsage1 = map.getRegisterUsage(sr2);
			if(existingUsage1 != openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4 && existingUsage1 != openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4_ARRAY) {
				sb.add(dr.toGLSL() + " = " + sr1.toGLSL() + " * " + sr2.toGLSL(false) + "; // m44");
				map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.MATRIX_4_4);
			} else {
				sr1.sourceMask = sr2.sourceMask = 15;
				sb.add(dr.toGLSL() + " = vec4(" + "dot(" + sr1.toGLSL(true) + "," + sr2.toGLSL(true,0) + "), " + "dot(" + sr1.toGLSL(true) + "," + sr2.toGLSL(true,1) + "), " + "dot(" + sr1.toGLSL(true) + "," + sr2.toGLSL(true,2) + "), " + "dot(" + sr1.toGLSL(true) + "," + sr2.toGLSL(true,3) + ")); // m44");
				map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4,0);
				map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4,1);
				map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4,2);
				map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4,3);
			}
			break;
		case 25:
			dr.mask &= 7;
			var existingUsage2 = map.getRegisterUsage(sr2);
			if(existingUsage2 != openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4 && existingUsage2 != openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4_ARRAY) {
				sb.add(dr.toGLSL() + " = " + sr1.toGLSL() + " * " + sr2.toGLSL(false) + "; // m34");
				map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.MATRIX_4_4);
			} else {
				sr1.sourceMask = sr2.sourceMask = 15;
				sb.add(dr.toGLSL() + " = vec3(" + "dot(" + sr1.toGLSL(true) + "," + sr2.toGLSL(true,0) + "), " + "dot(" + sr1.toGLSL(true) + "," + sr2.toGLSL(true,1) + ")," + "dot(" + sr1.toGLSL(true) + "," + sr2.toGLSL(true,2) + ")); // m34");
				map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4,0);
				map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4,1);
				map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4,2);
			}
			break;
		case 39:
			sr1.sourceMask = 15;
			sb.add("if (any(lessThan(" + sr1.toGLSL() + ", vec4(0)))) discard;");
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 40:
			var sampler = openfl__$internal_stage3D__$AGALConverter_SamplerRegister.parse(source2,programType);
			var _g = sampler.d;
			switch(_g) {
			case 0:
				sr1.sourceMask = 3;
				map.addSaR(sampler,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.SAMPLER_2D);
				sb.add(dr.toGLSL() + " = texture2D(" + sampler.toGLSL() + ", " + sr1.toGLSL() + "); // tex");
				break;
			case 1:
				sr1.sourceMask = 7;
				sb.add(dr.toGLSL() + " = textureCube(" + sampler.toGLSL() + ", " + sr1.toGLSL() + "); // tex");
				map.addSaR(sampler,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.SAMPLER_CUBE);
				break;
			}
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			if(samplerState != null) samplerState[sampler.n] = sampler.toSamplerState();
			break;
		case 41:
			sr1.sourceMask = sr2.sourceMask = 15;
			sb.add(dr.toGLSL() + " = vec4(greaterThanEqual(" + sr1.toGLSL() + ", " + sr2.toGLSL() + "))" + dr.getWriteMask() + "; // ste");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 42:
			sr1.sourceMask = sr2.sourceMask = 15;
			sb.add(dr.toGLSL() + " = vec4(lessThan(" + sr1.toGLSL() + ", " + sr2.toGLSL() + "))" + dr.getWriteMask() + "; // slt");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 44:
			sr1.sourceMask = sr2.sourceMask = 15;
			sb.add(dr.toGLSL() + " = vec4(equal(" + sr1.toGLSL() + ", " + sr2.toGLSL() + "))" + dr.getWriteMask() + "; // seq");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 45:
			sr1.sourceMask = sr2.sourceMask = 15;
			sb.add(dr.toGLSL() + " = vec4(notEqual(" + sr1.toGLSL() + ", " + sr2.toGLSL() + "))" + dr.getWriteMask() + "; // sne");
			map.addDR(dr,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		default:
			throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("Opcode " + opcode));
		}
		sb.b += "\n";
	}
	if(openfl__$internal_stage3D_AGALConverter.limitedProfile == null) {
		var version1 = lime_graphics_opengl_GL.context.getParameter(7938);
		openfl__$internal_stage3D_AGALConverter.limitedProfile = version1.indexOf("OpenGL ES") > -1 || version1.indexOf("WebGL") > -1;
	}
	var glslVersion = 100;
	var glsl = new StringBuf();
	glsl.b += Std.string("// AGAL " + (programType == openfl__$internal_stage3D__$AGALConverter_ProgramType.VERTEX?"vertex":"fragment") + " shader\n");
	if(openfl__$internal_stage3D_AGALConverter.limitedProfile) {
		glsl.b += Std.string("#version " + glslVersion + "\n");
		glsl.b += "precision highp float;\n";
	}
	glsl.add(map.toGLSL(false));
	if(programType == openfl__$internal_stage3D__$AGALConverter_ProgramType.VERTEX) glsl.b += "uniform vec4 vcPositionScale;\n";
	glsl.b += "void main() {\n";
	glsl.add(map.toGLSL(true));
	if(sb.b == null) glsl.b += "null"; else glsl.b += "" + sb.b;
	if(programType == openfl__$internal_stage3D__$AGALConverter_ProgramType.VERTEX) glsl.b += "\tgl_Position *= vcPositionScale;\n";
	glsl.b += "}\n";
	return glsl.b;
};
var openfl__$internal_stage3D__$AGALConverter_DestRegister = function() {
};
$hxClasses["openfl._internal.stage3D._AGALConverter.DestRegister"] = openfl__$internal_stage3D__$AGALConverter_DestRegister;
openfl__$internal_stage3D__$AGALConverter_DestRegister.__name__ = ["openfl","_internal","stage3D","_AGALConverter","DestRegister"];
openfl__$internal_stage3D__$AGALConverter_DestRegister.parse = function(v,programType) {
	var dr = new openfl__$internal_stage3D__$AGALConverter_DestRegister();
	dr.programType = programType;
	dr.type = v >> 24 & 15;
	dr.mask = v >> 16 & 15;
	dr.n = v & 65535;
	return dr;
};
openfl__$internal_stage3D__$AGALConverter_DestRegister.prototype = {
	mask: null
	,n: null
	,programType: null
	,type: null
	,getWriteMask: function() {
		var str = ".";
		if((this.mask & 1) != 0) str += "x";
		if((this.mask & 2) != 0) str += "y";
		if((this.mask & 4) != 0) str += "z";
		if((this.mask & 8) != 0) str += "w";
		return str;
	}
	,toGLSL: function(useMask) {
		if(useMask == null) useMask = true;
		var str;
		if(this.type == 3) if(this.programType == openfl__$internal_stage3D__$AGALConverter_ProgramType.VERTEX) str = "gl_Position"; else str = "gl_FragColor"; else str = openfl__$internal_stage3D_AGALConverter.prefixFromType(this.type,this.programType) + this.n;
		if(useMask && this.mask != 15) str += this.getWriteMask();
		return str;
	}
	,__class__: openfl__$internal_stage3D__$AGALConverter_DestRegister
};
var openfl__$internal_stage3D__$AGALConverter_ProgramType = $hxClasses["openfl._internal.stage3D._AGALConverter.ProgramType"] = { __ename__ : ["openfl","_internal","stage3D","_AGALConverter","ProgramType"], __constructs__ : ["VERTEX","FRAGMENT"] };
openfl__$internal_stage3D__$AGALConverter_ProgramType.VERTEX = ["VERTEX",0];
openfl__$internal_stage3D__$AGALConverter_ProgramType.VERTEX.toString = $estr;
openfl__$internal_stage3D__$AGALConverter_ProgramType.VERTEX.__enum__ = openfl__$internal_stage3D__$AGALConverter_ProgramType;
openfl__$internal_stage3D__$AGALConverter_ProgramType.FRAGMENT = ["FRAGMENT",1];
openfl__$internal_stage3D__$AGALConverter_ProgramType.FRAGMENT.toString = $estr;
openfl__$internal_stage3D__$AGALConverter_ProgramType.FRAGMENT.__enum__ = openfl__$internal_stage3D__$AGALConverter_ProgramType;
var openfl__$internal_stage3D_RegisterMap = function() {
	this.mEntries = [];
};
$hxClasses["openfl._internal.stage3D.RegisterMap"] = openfl__$internal_stage3D_RegisterMap;
openfl__$internal_stage3D_RegisterMap.__name__ = ["openfl","_internal","stage3D","RegisterMap"];
openfl__$internal_stage3D_RegisterMap.prototype = {
	mEntries: null
	,add: function(type,name,number,usage) {
		var _g = 0;
		var _g1 = this.mEntries;
		while(_g < _g1.length) {
			var entry1 = _g1[_g];
			++_g;
			if(entry1.type == type && entry1.name == name && entry1.number == number) {
				if(entry1.usage != usage) throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("Cannot use register in multiple ways yet (mat4/vec4)"));
				return;
			}
		}
		var entry = new openfl__$internal_stage3D__$AGALConverter_RegisterMapEntry();
		entry.type = type;
		entry.name = name;
		entry.number = number;
		entry.usage = usage;
		this.mEntries.push(entry);
	}
	,addDR: function(dr,usage) {
		this.add(dr.type,dr.toGLSL(false),dr.n,usage);
	}
	,addSaR: function(sr,usage) {
		this.add(sr.type,sr.toGLSL(),sr.n,usage);
	}
	,addSR: function(sr,usage,offset) {
		if(offset == null) offset = 0;
		if(sr.d != 0) {
			this.add(sr.itype,openfl__$internal_stage3D_AGALConverter.prefixFromType(sr.itype,sr.programType) + sr.n,sr.n,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4);
			this.add(sr.type,openfl__$internal_stage3D_AGALConverter.prefixFromType(sr.type,sr.programType) + sr.o,sr.o,openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4_ARRAY);
			return;
		}
		this.add(sr.type,sr.toGLSL(false,offset),sr.n + offset,usage);
	}
	,getRegisterUsage: function(sr) {
		if(sr.d != 0) return openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4_ARRAY;
		return this.getUsage(sr.type,sr.toGLSL(false),sr.n);
	}
	,getUsage: function(type,name,number) {
		var _g = 0;
		var _g1 = this.mEntries;
		while(_g < _g1.length) {
			var entry = _g1[_g];
			++_g;
			if(entry.type == type && entry.name == name && entry.number == number) return entry.usage;
		}
		return openfl__$internal_stage3D__$AGALConverter_RegisterUsage.UNUSED;
	}
	,toGLSL: function(tempRegistersOnly) {
		this.mEntries.sort(function(a,b) {
			if(a.type != b.type) return js_Boot.__cast(a.type , Int) - js_Boot.__cast(b.type , Int); else return a.number - b.number;
		});
		var sb_b = "";
		var _g1 = 0;
		var _g = this.mEntries.length;
		while(_g1 < _g) {
			var i = _g1++;
			var entry = this.mEntries[i];
			if(tempRegistersOnly && entry.type != 2 || !tempRegistersOnly && entry.type == 2) continue;
			if(entry.type == 3) continue;
			var _g2 = entry.type;
			switch(_g2) {
			case 0:
				sb_b += "attribute ";
				break;
			case 1:
				sb_b += "uniform ";
				break;
			case 2:
				sb_b += "\t";
				break;
			case 3:
				break;
			case 4:
				sb_b += "varying ";
				break;
			case 5:
				sb_b += "uniform ";
				break;
			default:
				throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError());
			}
			var _g21 = entry.usage;
			switch(_g21[1]) {
			case 1:
				sb_b += "vec4 ";
				break;
			case 6:
				sb_b += "vec4 ";
				break;
			case 2:
				sb_b += "mat4 ";
				break;
			case 3:
				sb_b += "sampler2D ";
				break;
			case 5:
				sb_b += "samplerCube ";
				break;
			case 0:
				haxe_Log.trace("Missing switch patten: RegisterUsage.UNUSED",{ fileName : "AGALConverter.hx", lineNumber : 765, className : "openfl._internal.stage3D.RegisterMap", methodName : "toGLSL"});
				break;
			case 4:
				haxe_Log.trace("Missing switch patten: RegisterUsage.SAMPLER_2D_ALPHA",{ fileName : "AGALConverter.hx", lineNumber : 769, className : "openfl._internal.stage3D.RegisterMap", methodName : "toGLSL"});
				break;
			}
			if(entry.usage == openfl__$internal_stage3D__$AGALConverter_RegisterUsage.SAMPLER_2D_ALPHA) {
				sb_b += "sampler2D ";
				if(entry.name == null) sb_b += "null"; else sb_b += "" + entry.name;
				sb_b += ";\n";
				sb_b += "uniform ";
				sb_b += "sampler2D ";
				sb_b += Std.string(entry.name + "_alpha");
				sb_b += ";\n";
			} else if(entry.usage == openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4_ARRAY) {
				var count = 128;
				if(i < this.mEntries.length - 1) count = this.mEntries[i + 1].number - entry.number;
				sb_b += Std.string(entry.name + "[" + count + "]");
				sb_b += ";\n";
			} else {
				if(entry.name == null) sb_b += "null"; else sb_b += "" + entry.name;
				sb_b += ";\n";
			}
		}
		return sb_b;
	}
	,__class__: openfl__$internal_stage3D_RegisterMap
};
var openfl__$internal_stage3D__$AGALConverter_RegisterMapEntry = function() {
};
$hxClasses["openfl._internal.stage3D._AGALConverter.RegisterMapEntry"] = openfl__$internal_stage3D__$AGALConverter_RegisterMapEntry;
openfl__$internal_stage3D__$AGALConverter_RegisterMapEntry.__name__ = ["openfl","_internal","stage3D","_AGALConverter","RegisterMapEntry"];
openfl__$internal_stage3D__$AGALConverter_RegisterMapEntry.prototype = {
	name: null
	,number: null
	,type: null
	,usage: null
	,__class__: openfl__$internal_stage3D__$AGALConverter_RegisterMapEntry
};
var openfl__$internal_stage3D__$AGALConverter_RegisterUsage = $hxClasses["openfl._internal.stage3D._AGALConverter.RegisterUsage"] = { __ename__ : ["openfl","_internal","stage3D","_AGALConverter","RegisterUsage"], __constructs__ : ["UNUSED","VECTOR_4","MATRIX_4_4","SAMPLER_2D","SAMPLER_2D_ALPHA","SAMPLER_CUBE","VECTOR_4_ARRAY"] };
openfl__$internal_stage3D__$AGALConverter_RegisterUsage.UNUSED = ["UNUSED",0];
openfl__$internal_stage3D__$AGALConverter_RegisterUsage.UNUSED.toString = $estr;
openfl__$internal_stage3D__$AGALConverter_RegisterUsage.UNUSED.__enum__ = openfl__$internal_stage3D__$AGALConverter_RegisterUsage;
openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4 = ["VECTOR_4",1];
openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4.toString = $estr;
openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4.__enum__ = openfl__$internal_stage3D__$AGALConverter_RegisterUsage;
openfl__$internal_stage3D__$AGALConverter_RegisterUsage.MATRIX_4_4 = ["MATRIX_4_4",2];
openfl__$internal_stage3D__$AGALConverter_RegisterUsage.MATRIX_4_4.toString = $estr;
openfl__$internal_stage3D__$AGALConverter_RegisterUsage.MATRIX_4_4.__enum__ = openfl__$internal_stage3D__$AGALConverter_RegisterUsage;
openfl__$internal_stage3D__$AGALConverter_RegisterUsage.SAMPLER_2D = ["SAMPLER_2D",3];
openfl__$internal_stage3D__$AGALConverter_RegisterUsage.SAMPLER_2D.toString = $estr;
openfl__$internal_stage3D__$AGALConverter_RegisterUsage.SAMPLER_2D.__enum__ = openfl__$internal_stage3D__$AGALConverter_RegisterUsage;
openfl__$internal_stage3D__$AGALConverter_RegisterUsage.SAMPLER_2D_ALPHA = ["SAMPLER_2D_ALPHA",4];
openfl__$internal_stage3D__$AGALConverter_RegisterUsage.SAMPLER_2D_ALPHA.toString = $estr;
openfl__$internal_stage3D__$AGALConverter_RegisterUsage.SAMPLER_2D_ALPHA.__enum__ = openfl__$internal_stage3D__$AGALConverter_RegisterUsage;
openfl__$internal_stage3D__$AGALConverter_RegisterUsage.SAMPLER_CUBE = ["SAMPLER_CUBE",5];
openfl__$internal_stage3D__$AGALConverter_RegisterUsage.SAMPLER_CUBE.toString = $estr;
openfl__$internal_stage3D__$AGALConverter_RegisterUsage.SAMPLER_CUBE.__enum__ = openfl__$internal_stage3D__$AGALConverter_RegisterUsage;
openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4_ARRAY = ["VECTOR_4_ARRAY",6];
openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4_ARRAY.toString = $estr;
openfl__$internal_stage3D__$AGALConverter_RegisterUsage.VECTOR_4_ARRAY.__enum__ = openfl__$internal_stage3D__$AGALConverter_RegisterUsage;
var openfl__$internal_stage3D__$AGALConverter_SamplerRegister = function() {
};
$hxClasses["openfl._internal.stage3D._AGALConverter.SamplerRegister"] = openfl__$internal_stage3D__$AGALConverter_SamplerRegister;
openfl__$internal_stage3D__$AGALConverter_SamplerRegister.__name__ = ["openfl","_internal","stage3D","_AGALConverter","SamplerRegister"];
openfl__$internal_stage3D__$AGALConverter_SamplerRegister.parse = function(v,programType) {
	var sr = new openfl__$internal_stage3D__$AGALConverter_SamplerRegister();
	sr.programType = programType;
	var this1;
	var a;
	var b1 = 60;
	b1 &= 63;
	if(b1 == 0) {
		var x1 = new haxe__$Int64__$_$_$Int64(v.high,v.low);
		a = x1;
	} else if(b1 < 32) {
		var x2 = new haxe__$Int64__$_$_$Int64(v.high >> b1,v.high << 32 - b1 | v.low >>> b1);
		a = x2;
	} else {
		var x3 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> b1 - 32);
		a = x3;
	}
	var b;
	{
		var x4 = new haxe__$Int64__$_$_$Int64(0,15);
		b = x4;
	}
	var x = new haxe__$Int64__$_$_$Int64(a.high & b.high,a.low & b.low);
	this1 = x;
	sr.f = this1.low;
	var this2;
	var a1;
	var b3 = 56;
	b3 &= 63;
	if(b3 == 0) {
		var x6 = new haxe__$Int64__$_$_$Int64(v.high,v.low);
		a1 = x6;
	} else if(b3 < 32) {
		var x7 = new haxe__$Int64__$_$_$Int64(v.high >> b3,v.high << 32 - b3 | v.low >>> b3);
		a1 = x7;
	} else {
		var x8 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> b3 - 32);
		a1 = x8;
	}
	var b2;
	{
		var x9 = new haxe__$Int64__$_$_$Int64(0,15);
		b2 = x9;
	}
	var x5 = new haxe__$Int64__$_$_$Int64(a1.high & b2.high,a1.low & b2.low);
	this2 = x5;
	sr.m = this2.low;
	var this3;
	var a2;
	var b5 = 52;
	b5 &= 63;
	if(b5 == 0) {
		var x11 = new haxe__$Int64__$_$_$Int64(v.high,v.low);
		a2 = x11;
	} else if(b5 < 32) {
		var x12 = new haxe__$Int64__$_$_$Int64(v.high >> b5,v.high << 32 - b5 | v.low >>> b5);
		a2 = x12;
	} else {
		var x13 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> b5 - 32);
		a2 = x13;
	}
	var b4;
	{
		var x14 = new haxe__$Int64__$_$_$Int64(0,15);
		b4 = x14;
	}
	var x10 = new haxe__$Int64__$_$_$Int64(a2.high & b4.high,a2.low & b4.low);
	this3 = x10;
	sr.w = this3.low;
	var this4;
	var a3;
	var b7 = 48;
	b7 &= 63;
	if(b7 == 0) {
		var x16 = new haxe__$Int64__$_$_$Int64(v.high,v.low);
		a3 = x16;
	} else if(b7 < 32) {
		var x17 = new haxe__$Int64__$_$_$Int64(v.high >> b7,v.high << 32 - b7 | v.low >>> b7);
		a3 = x17;
	} else {
		var x18 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> b7 - 32);
		a3 = x18;
	}
	var b6;
	{
		var x19 = new haxe__$Int64__$_$_$Int64(0,15);
		b6 = x19;
	}
	var x15 = new haxe__$Int64__$_$_$Int64(a3.high & b6.high,a3.low & b6.low);
	this4 = x15;
	sr.s = this4.low;
	var this5;
	var a4;
	var b9 = 44;
	b9 &= 63;
	if(b9 == 0) {
		var x21 = new haxe__$Int64__$_$_$Int64(v.high,v.low);
		a4 = x21;
	} else if(b9 < 32) {
		var x22 = new haxe__$Int64__$_$_$Int64(v.high >> b9,v.high << 32 - b9 | v.low >>> b9);
		a4 = x22;
	} else {
		var x23 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> b9 - 32);
		a4 = x23;
	}
	var b8;
	{
		var x24 = new haxe__$Int64__$_$_$Int64(0,15);
		b8 = x24;
	}
	var x20 = new haxe__$Int64__$_$_$Int64(a4.high & b8.high,a4.low & b8.low);
	this5 = x20;
	sr.d = this5.low;
	var this6;
	var a5;
	var b11 = 40;
	b11 &= 63;
	if(b11 == 0) {
		var x26 = new haxe__$Int64__$_$_$Int64(v.high,v.low);
		a5 = x26;
	} else if(b11 < 32) {
		var x27 = new haxe__$Int64__$_$_$Int64(v.high >> b11,v.high << 32 - b11 | v.low >>> b11);
		a5 = x27;
	} else {
		var x28 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> b11 - 32);
		a5 = x28;
	}
	var b10;
	{
		var x29 = new haxe__$Int64__$_$_$Int64(0,15);
		b10 = x29;
	}
	var x25 = new haxe__$Int64__$_$_$Int64(a5.high & b10.high,a5.low & b10.low);
	this6 = x25;
	sr.t = this6.low;
	sr.type = (function($this) {
		var $r;
		var this7;
		{
			var a6;
			var b13 = 32;
			b13 &= 63;
			if(b13 == 0) {
				var x31 = new haxe__$Int64__$_$_$Int64(v.high,v.low);
				a6 = x31;
			} else if(b13 < 32) {
				var x32 = new haxe__$Int64__$_$_$Int64(v.high >> b13,v.high << 32 - b13 | v.low >>> b13);
				a6 = x32;
			} else {
				var x33 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> b13 - 32);
				a6 = x33;
			}
			var b12;
			{
				var x34 = new haxe__$Int64__$_$_$Int64(0,15);
				b12 = x34;
			}
			var x30 = new haxe__$Int64__$_$_$Int64(a6.high & b12.high,a6.low & b12.low);
			this7 = x30;
		}
		$r = this7.low;
		return $r;
	}(this));
	var this8;
	var a7;
	var b15 = 16;
	b15 &= 63;
	if(b15 == 0) {
		var x36 = new haxe__$Int64__$_$_$Int64(v.high,v.low);
		a7 = x36;
	} else if(b15 < 32) {
		var x37 = new haxe__$Int64__$_$_$Int64(v.high >> b15,v.high << 32 - b15 | v.low >>> b15);
		a7 = x37;
	} else {
		var x38 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> b15 - 32);
		a7 = x38;
	}
	var b14;
	{
		var x39 = new haxe__$Int64__$_$_$Int64(0,255);
		b14 = x39;
	}
	var x35 = new haxe__$Int64__$_$_$Int64(a7.high & b14.high,a7.low & b14.low);
	this8 = x35;
	sr.b = this8.low;
	var this9;
	var b16;
	{
		var x41 = new haxe__$Int64__$_$_$Int64(0,65535);
		b16 = x41;
	}
	var x40 = new haxe__$Int64__$_$_$Int64(v.high & b16.high,v.low & b16.low);
	this9 = x40;
	sr.n = this9.low;
	return sr;
};
openfl__$internal_stage3D__$AGALConverter_SamplerRegister.prototype = {
	b: null
	,d: null
	,f: null
	,m: null
	,n: null
	,programType: null
	,s: null
	,t: null
	,type: null
	,w: null
	,toGLSL: function() {
		var str = openfl__$internal_stage3D_AGALConverter.prefixFromType(this.type,this.programType) + this.n;
		return str;
	}
	,toSamplerState: function() {
		var magFilter = 0;
		var minFilter = 0;
		var wrapModeS = 0;
		var wrapModeT = 0;
		var _g = this.f;
		switch(_g) {
		case 0:
			magFilter = 9728;
			break;
		case 1:
			magFilter = 9729;
			break;
		default:
			throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError());
		}
		var _g1 = this.m;
		switch(_g1) {
		case 0:
			if(this.f != 0) minFilter = 9729; else minFilter = 9728;
			break;
		case 1:
			if(this.f != 0) minFilter = 9986; else minFilter = 9984;
			break;
		case 2:
			if(this.f != 0) minFilter = 9987; else minFilter = 9985;
			break;
		default:
			throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError());
		}
		var _g2 = this.w;
		switch(_g2) {
		case 0:
			wrapModeS = 33071;
			wrapModeT = 33071;
			break;
		case 1:
			wrapModeS = 10497;
			wrapModeT = 10497;
			break;
		default:
			throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError());
		}
		var ignoreSampler = (this.s & 4) == 4;
		var centroid = (this.s & 1) == 1;
		var lodBias = (this.b << 24 >> 24) / 8.0;
		var maxAniso = 0.0;
		return new openfl__$internal_stage3D_SamplerState(minFilter,magFilter,wrapModeS,wrapModeT,lodBias,maxAniso,ignoreSampler,centroid);
	}
	,__class__: openfl__$internal_stage3D__$AGALConverter_SamplerRegister
};
var openfl__$internal_stage3D__$AGALConverter_SourceRegister = function() {
};
$hxClasses["openfl._internal.stage3D._AGALConverter.SourceRegister"] = openfl__$internal_stage3D__$AGALConverter_SourceRegister;
openfl__$internal_stage3D__$AGALConverter_SourceRegister.__name__ = ["openfl","_internal","stage3D","_AGALConverter","SourceRegister"];
openfl__$internal_stage3D__$AGALConverter_SourceRegister.parse = function(v,programType,sourceMask) {
	var sr = new openfl__$internal_stage3D__$AGALConverter_SourceRegister();
	sr.programType = programType;
	var this1;
	var a;
	var b1 = 63;
	b1 &= 63;
	if(b1 == 0) {
		var x1 = new haxe__$Int64__$_$_$Int64(v.high,v.low);
		a = x1;
	} else if(b1 < 32) {
		var x2 = new haxe__$Int64__$_$_$Int64(v.high >> b1,v.high << 32 - b1 | v.low >>> b1);
		a = x2;
	} else {
		var x3 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> b1 - 32);
		a = x3;
	}
	var b;
	{
		var x4 = new haxe__$Int64__$_$_$Int64(0,1);
		b = x4;
	}
	var x = new haxe__$Int64__$_$_$Int64(a.high & b.high,a.low & b.low);
	this1 = x;
	sr.d = this1.low;
	var this2;
	var a1;
	var b3 = 48;
	b3 &= 63;
	if(b3 == 0) {
		var x6 = new haxe__$Int64__$_$_$Int64(v.high,v.low);
		a1 = x6;
	} else if(b3 < 32) {
		var x7 = new haxe__$Int64__$_$_$Int64(v.high >> b3,v.high << 32 - b3 | v.low >>> b3);
		a1 = x7;
	} else {
		var x8 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> b3 - 32);
		a1 = x8;
	}
	var b2;
	{
		var x9 = new haxe__$Int64__$_$_$Int64(0,3);
		b2 = x9;
	}
	var x5 = new haxe__$Int64__$_$_$Int64(a1.high & b2.high,a1.low & b2.low);
	this2 = x5;
	sr.q = this2.low;
	sr.itype = (function($this) {
		var $r;
		var this3;
		{
			var a2;
			var b5 = 40;
			b5 &= 63;
			if(b5 == 0) {
				var x11 = new haxe__$Int64__$_$_$Int64(v.high,v.low);
				a2 = x11;
			} else if(b5 < 32) {
				var x12 = new haxe__$Int64__$_$_$Int64(v.high >> b5,v.high << 32 - b5 | v.low >>> b5);
				a2 = x12;
			} else {
				var x13 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> b5 - 32);
				a2 = x13;
			}
			var b4;
			{
				var x14 = new haxe__$Int64__$_$_$Int64(0,15);
				b4 = x14;
			}
			var x10 = new haxe__$Int64__$_$_$Int64(a2.high & b4.high,a2.low & b4.low);
			this3 = x10;
		}
		$r = this3.low;
		return $r;
	}(this));
	sr.type = (function($this) {
		var $r;
		var this4;
		{
			var a3;
			var b7 = 32;
			b7 &= 63;
			if(b7 == 0) {
				var x16 = new haxe__$Int64__$_$_$Int64(v.high,v.low);
				a3 = x16;
			} else if(b7 < 32) {
				var x17 = new haxe__$Int64__$_$_$Int64(v.high >> b7,v.high << 32 - b7 | v.low >>> b7);
				a3 = x17;
			} else {
				var x18 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> b7 - 32);
				a3 = x18;
			}
			var b6;
			{
				var x19 = new haxe__$Int64__$_$_$Int64(0,15);
				b6 = x19;
			}
			var x15 = new haxe__$Int64__$_$_$Int64(a3.high & b6.high,a3.low & b6.low);
			this4 = x15;
		}
		$r = this4.low;
		return $r;
	}(this));
	var this5;
	var a4;
	var b9 = 24;
	b9 &= 63;
	if(b9 == 0) {
		var x21 = new haxe__$Int64__$_$_$Int64(v.high,v.low);
		a4 = x21;
	} else if(b9 < 32) {
		var x22 = new haxe__$Int64__$_$_$Int64(v.high >> b9,v.high << 32 - b9 | v.low >>> b9);
		a4 = x22;
	} else {
		var x23 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> b9 - 32);
		a4 = x23;
	}
	var b8;
	{
		var x24 = new haxe__$Int64__$_$_$Int64(0,255);
		b8 = x24;
	}
	var x20 = new haxe__$Int64__$_$_$Int64(a4.high & b8.high,a4.low & b8.low);
	this5 = x20;
	sr.s = this5.low;
	var this6;
	var a5;
	var b11 = 16;
	b11 &= 63;
	if(b11 == 0) {
		var x26 = new haxe__$Int64__$_$_$Int64(v.high,v.low);
		a5 = x26;
	} else if(b11 < 32) {
		var x27 = new haxe__$Int64__$_$_$Int64(v.high >> b11,v.high << 32 - b11 | v.low >>> b11);
		a5 = x27;
	} else {
		var x28 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> b11 - 32);
		a5 = x28;
	}
	var b10;
	{
		var x29 = new haxe__$Int64__$_$_$Int64(0,255);
		b10 = x29;
	}
	var x25 = new haxe__$Int64__$_$_$Int64(a5.high & b10.high,a5.low & b10.low);
	this6 = x25;
	sr.o = this6.low;
	var this7;
	var b12;
	{
		var x31 = new haxe__$Int64__$_$_$Int64(0,65535);
		b12 = x31;
	}
	var x30 = new haxe__$Int64__$_$_$Int64(v.high & b12.high,v.low & b12.low);
	this7 = x30;
	sr.n = this7.low;
	sr.sourceMask = sourceMask;
	return sr;
};
openfl__$internal_stage3D__$AGALConverter_SourceRegister.prototype = {
	d: null
	,itype: null
	,n: null
	,o: null
	,programType: null
	,q: null
	,s: null
	,sourceMask: null
	,type: null
	,toGLSL: function(emitSwizzle,offset) {
		if(offset == null) offset = 0;
		if(emitSwizzle == null) emitSwizzle = true;
		if(this.type == 3) if(this.programType == openfl__$internal_stage3D__$AGALConverter_ProgramType.VERTEX) return "gl_Position"; else return "gl_FragColor";
		var fullxyzw = this.s == 228 && this.sourceMask == 15;
		var swizzle = "";
		if(this.type != 5 && !fullxyzw) {
			var _g = 0;
			while(_g < 4) {
				var i = _g++;
				if((this.sourceMask & 1 << i) != 0) {
					var _g1 = this.s >> i * 2 & 3;
					switch(_g1) {
					case 0:
						swizzle += "x";
						break;
					case 1:
						swizzle += "y";
						break;
					case 2:
						swizzle += "z";
						break;
					case 3:
						swizzle += "w";
						break;
					}
				}
			}
		}
		var str = openfl__$internal_stage3D_AGALConverter.prefixFromType(this.type,this.programType);
		if(this.d == 0) str += this.n + offset; else {
			str += this.o;
			var indexComponent = String.fromCharCode(HxOverrides.cca("x",0) + this.q);
			var indexRegister = openfl__$internal_stage3D_AGALConverter.prefixFromType(this.itype,this.programType) + this.n + "." + indexComponent;
			str += "[ int(" + indexRegister + ") +" + offset + "]";
		}
		if(emitSwizzle && swizzle != "") str += "." + swizzle;
		return str;
	}
	,__class__: openfl__$internal_stage3D__$AGALConverter_SourceRegister
};
var openfl__$internal_stage3D_Context3DStateCache = function() {
	this._registers = openfl__$Vector_Vector_$Impl_$.toFloatVector(null,4096);
	this.clearSettings();
};
$hxClasses["openfl._internal.stage3D.Context3DStateCache"] = openfl__$internal_stage3D_Context3DStateCache;
openfl__$internal_stage3D_Context3DStateCache.__name__ = ["openfl","_internal","stage3D","Context3DStateCache"];
openfl__$internal_stage3D_Context3DStateCache.prototype = {
	_activeTexture: null
	,_activeVertexArray: null
	,_cullingMode: null
	,_depthTestCompareMode: null
	,_depthTestEnabled: null
	,_depthTestMask: null
	,_destBlendFactor: null
	,_program: null
	,_registers: null
	,_srcBlendFactor: null
	,_viewportHeight: null
	,_viewportOriginX: null
	,_viewportOriginY: null
	,_viewportWidth: null
	,clearRegisters: function() {
		var numFloats = 4096;
		var _g = 0;
		while(_g < numFloats) {
			var c = _g++;
			this._registers.set(c,-999999999.0);
		}
	}
	,clearSettings: function() {
		this._srcBlendFactor = null;
		this._destBlendFactor = null;
		this._depthTestEnabled = false;
		this._depthTestMask = false;
		this._depthTestCompareMode = null;
		this._program = null;
		this._cullingMode = null;
		this._activeTexture = -1;
		this._activeVertexArray = -1;
		this._viewportOriginX = -1;
		this._viewportOriginY = -1;
		this._viewportWidth = -1;
		this._viewportHeight = -1;
		this.clearRegisters();
	}
	,updateActiveTextureSample: function(texture) {
		this._activeTexture = texture;
		return true;
	}
	,updateActiveVertexArray: function(vertexArray) {
		this._activeVertexArray = vertexArray;
		return true;
	}
	,updateBlendDestFactor: function(factor) {
		this._destBlendFactor = factor;
		return true;
	}
	,updateBlendSrcFactor: function(factor) {
		this._srcBlendFactor = factor;
		return true;
	}
	,updateCullingMode: function(cullMode) {
		this._cullingMode = cullMode;
		return true;
	}
	,updateDepthCompareMode: function(mode) {
		this._depthTestCompareMode = mode;
		return true;
	}
	,updateDepthTestEnabled: function(test) {
		this._depthTestEnabled = test;
		return true;
	}
	,updateDepthTestMask: function(mask) {
		this._depthTestMask = mask;
		return true;
	}
	,updateProgram3D: function(program3d) {
		this._program = program3d;
		return true;
	}
	,updateRegisters: function(mTemp,startRegister,numRegisters) {
		return true;
	}
	,updateViewport: function(originX,originY,width,height) {
		this._viewportOriginX = originX;
		this._viewportOriginY = originY;
		this._viewportWidth = width;
		this._viewportHeight = height;
		return true;
	}
	,__class__: openfl__$internal_stage3D_Context3DStateCache
};
var openfl__$internal_stage3D_GLUtils = function() { };
$hxClasses["openfl._internal.stage3D.GLUtils"] = openfl__$internal_stage3D_GLUtils;
openfl__$internal_stage3D_GLUtils.__name__ = ["openfl","_internal","stage3D","GLUtils"];
openfl__$internal_stage3D_GLUtils.CheckGLError = function() {
	if(!openfl__$internal_stage3D_GLUtils.debug) return;
	var error = lime_graphics_opengl_GL.context.getError();
	if(error != 0) throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("Error calling openGL api. Error: " + error + "\n"));
};
var openfl__$internal_stage3D_SamplerState = function(minFilter,magFilter,wrapModeS,wrapModeT,lodBias,maxAniso,ignoreSampler,centroid) {
	if(centroid == null) centroid = false;
	if(ignoreSampler == null) ignoreSampler = false;
	if(maxAniso == null) maxAniso = 0.0;
	if(lodBias == null) lodBias = 0.0;
	this.minFilter = minFilter;
	this.magFilter = magFilter;
	this.wrapModeS = wrapModeS;
	this.wrapModeT = wrapModeT;
	this.lodBias = lodBias;
	this.maxAniso = maxAniso;
	this.ignoreSampler = ignoreSampler;
	this.centroid = centroid;
};
$hxClasses["openfl._internal.stage3D.SamplerState"] = openfl__$internal_stage3D_SamplerState;
openfl__$internal_stage3D_SamplerState.__name__ = ["openfl","_internal","stage3D","SamplerState"];
openfl__$internal_stage3D_SamplerState.prototype = {
	centroid: null
	,ignoreSampler: null
	,lodBias: null
	,magFilter: null
	,maxAniso: null
	,minFilter: null
	,wrapModeS: null
	,wrapModeT: null
	,copyFrom: function(other) {
		if(other == null || other.ignoreSampler) return;
		this.minFilter = other.minFilter;
		this.magFilter = other.magFilter;
		this.wrapModeS = other.wrapModeS;
		this.wrapModeT = other.wrapModeT;
		this.lodBias = other.lodBias;
		this.maxAniso = other.maxAniso;
		this.centroid = other.centroid;
	}
	,equals: function(other) {
		if(this == other) return true;
		if(other == null) return false;
		return this.minFilter == other.minFilter && this.magFilter == other.magFilter && this.wrapModeS == other.wrapModeS && this.wrapModeT == other.wrapModeT && this.lodBias == other.lodBias && this.maxAniso == other.maxAniso;
	}
	,__class__: openfl__$internal_stage3D_SamplerState
};
var openfl__$internal_swf_FilterType = $hxClasses["openfl._internal.swf.FilterType"] = { __ename__ : ["openfl","_internal","swf","FilterType"], __constructs__ : ["BlurFilter","ColorMatrixFilter","DropShadowFilter","GlowFilter"] };
openfl__$internal_swf_FilterType.BlurFilter = function(blurX,blurY,quality) { var $x = ["BlurFilter",0,blurX,blurY,quality]; $x.__enum__ = openfl__$internal_swf_FilterType; $x.toString = $estr; return $x; };
openfl__$internal_swf_FilterType.ColorMatrixFilter = function(matrix) { var $x = ["ColorMatrixFilter",1,matrix]; $x.__enum__ = openfl__$internal_swf_FilterType; $x.toString = $estr; return $x; };
openfl__$internal_swf_FilterType.DropShadowFilter = function(distance,angle,color,alpha,blurX,blurY,strength,quality,inner,knockout,hideObject) { var $x = ["DropShadowFilter",2,distance,angle,color,alpha,blurX,blurY,strength,quality,inner,knockout,hideObject]; $x.__enum__ = openfl__$internal_swf_FilterType; $x.toString = $estr; return $x; };
openfl__$internal_swf_FilterType.GlowFilter = function(color,alpha,blurX,blurY,strength,quality,inner,knockout) { var $x = ["GlowFilter",3,color,alpha,blurX,blurY,strength,quality,inner,knockout]; $x.__enum__ = openfl__$internal_swf_FilterType; $x.toString = $estr; return $x; };
var openfl__$internal_swf_SWFLite = function() {
	this.symbols = new haxe_ds_IntMap();
};
$hxClasses["openfl._internal.swf.SWFLite"] = openfl__$internal_swf_SWFLite;
openfl__$internal_swf_SWFLite.__name__ = ["openfl","_internal","swf","SWFLite"];
openfl__$internal_swf_SWFLite.resolveClass = function(name) {
	var value = Type.resolveClass(name);
	if(value == null) value = Type.resolveClass(StringTools.replace(name,"openfl._legacy","openfl"));
	if(value == null) value = Type.resolveClass(StringTools.replace(name,"openfl._v2","openfl"));
	return value;
};
openfl__$internal_swf_SWFLite.resolveEnum = function(name) {
	var value = Type.resolveEnum(name);
	if(value == null) value = Type.resolveEnum(StringTools.replace(name,"openfl._legacy","openfl"));
	if(value == null) value = Type.resolveEnum(StringTools.replace(name,"openfl._v2","openfl"));
	return value;
};
openfl__$internal_swf_SWFLite.unserialize = function(data) {
	if(data == null) return null;
	var unserializer = new haxe_Unserializer(data);
	unserializer.setResolver({ resolveClass : openfl__$internal_swf_SWFLite.resolveClass, resolveEnum : openfl__$internal_swf_SWFLite.resolveEnum});
	return unserializer.unserialize();
};
openfl__$internal_swf_SWFLite.prototype = {
	frameRate: null
	,library: null
	,root: null
	,symbols: null
	,createButton: function(className) {
		return null;
	}
	,createMovieClip: function(className) {
		if(className == null) className = "";
		if(className == "") return this.root.__createObject(this); else {
			var $it0 = this.symbols.iterator();
			while( $it0.hasNext() ) {
				var symbol = $it0.next();
				if(symbol.className == className) {
					if(js_Boot.__instanceof(symbol,openfl__$internal_symbols_SpriteSymbol)) return (js_Boot.__cast(symbol , openfl__$internal_symbols_SpriteSymbol)).__createObject(this);
				}
			}
		}
		return null;
	}
	,getBitmapData: function(className) {
		var $it0 = this.symbols.iterator();
		while( $it0.hasNext() ) {
			var symbol = $it0.next();
			if(symbol.className == className) {
				if(js_Boot.__instanceof(symbol,openfl__$internal_symbols_BitmapSymbol)) {
					var bitmap = symbol;
					return openfl_Assets.getBitmapData(bitmap.path);
				}
			}
		}
		return null;
	}
	,hasSymbol: function(className) {
		var $it0 = this.symbols.iterator();
		while( $it0.hasNext() ) {
			var symbol = $it0.next();
			if(symbol.className == className) return true;
		}
		return false;
	}
	,serialize: function() {
		var serializer = new haxe_Serializer();
		serializer.serialize(this);
		return serializer.toString();
	}
	,__class__: openfl__$internal_swf_SWFLite
};
var openfl__$internal_swf_SWFLiteLibrary = function(id) {
	openfl_AssetLibrary.call(this);
	this.id = id;
};
$hxClasses["openfl._internal.swf.SWFLiteLibrary"] = openfl__$internal_swf_SWFLiteLibrary;
openfl__$internal_swf_SWFLiteLibrary.__name__ = ["openfl","_internal","swf","SWFLiteLibrary"];
openfl__$internal_swf_SWFLiteLibrary.__super__ = openfl_AssetLibrary;
openfl__$internal_swf_SWFLiteLibrary.prototype = $extend(openfl_AssetLibrary.prototype,{
	id: null
	,swf: null
	,exists: function(id,type) {
		if(this.swf == null) return false;
		if(id == "" && type == "MOVIE_CLIP") return true;
		if(type == "IMAGE" || type == "MOVIE_CLIP") return this.swf != null && this.swf.hasSymbol(id);
		return false;
	}
	,getImage: function(id) {
		if(this.cachedImages.exists(id) || this.classTypes.exists(id) || this.paths.exists(id)) return openfl_AssetLibrary.prototype.getImage.call(this,id); else if(this.swf != null) return lime_graphics_Image.fromBitmapData(this.swf.getBitmapData(id)); else return null;
	}
	,getMovieClip: function(id) {
		if(this.swf != null) return this.swf.createMovieClip(id); else return null;
	}
	,isLocal: function(id,type) {
		return true;
	}
	,load: function() {
		var _g = this;
		if(this.id != null) this.preload.set(this.id,true);
		var $it0 = this.paths.keys();
		while( $it0.hasNext() ) {
			var id = $it0.next();
			this.preload.set(id,true);
		}
		return openfl_AssetLibrary.prototype.load.call(this).then(function(_) {
			if(_g.id != null) {
				_g.swf = openfl__$internal_swf_SWFLite.unserialize(_g.getText(_g.id));
				_g.swf.library = _g;
			}
			var promise = new lime_app_Promise();
			promise.complete(_g);
			return promise.future;
		});
	}
	,unload: function() {
		var bitmap;
		var $it0 = this.swf.symbols.iterator();
		while( $it0.hasNext() ) {
			var symbol = $it0.next();
			if(js_Boot.__instanceof(symbol,openfl__$internal_symbols_BitmapSymbol)) {
				bitmap = symbol;
				openfl_Assets.cache.removeBitmapData(bitmap.path);
			}
		}
	}
	,__class__: openfl__$internal_swf_SWFLiteLibrary
});
var openfl__$internal_swf_ShapeCommand = $hxClasses["openfl._internal.swf.ShapeCommand"] = { __ename__ : ["openfl","_internal","swf","ShapeCommand"], __constructs__ : ["BeginBitmapFill","BeginFill","BeginGradientFill","CurveTo","EndFill","LineStyle","LineTo","MoveTo"] };
openfl__$internal_swf_ShapeCommand.BeginBitmapFill = function(bitmap,matrix,repeat,smooth) { var $x = ["BeginBitmapFill",0,bitmap,matrix,repeat,smooth]; $x.__enum__ = openfl__$internal_swf_ShapeCommand; $x.toString = $estr; return $x; };
openfl__$internal_swf_ShapeCommand.BeginFill = function(color,alpha) { var $x = ["BeginFill",1,color,alpha]; $x.__enum__ = openfl__$internal_swf_ShapeCommand; $x.toString = $estr; return $x; };
openfl__$internal_swf_ShapeCommand.BeginGradientFill = function(fillType,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) { var $x = ["BeginGradientFill",2,fillType,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio]; $x.__enum__ = openfl__$internal_swf_ShapeCommand; $x.toString = $estr; return $x; };
openfl__$internal_swf_ShapeCommand.CurveTo = function(controlX,controlY,anchorX,anchorY) { var $x = ["CurveTo",3,controlX,controlY,anchorX,anchorY]; $x.__enum__ = openfl__$internal_swf_ShapeCommand; $x.toString = $estr; return $x; };
openfl__$internal_swf_ShapeCommand.EndFill = ["EndFill",4];
openfl__$internal_swf_ShapeCommand.EndFill.toString = $estr;
openfl__$internal_swf_ShapeCommand.EndFill.__enum__ = openfl__$internal_swf_ShapeCommand;
openfl__$internal_swf_ShapeCommand.LineStyle = function(thickness,color,alpha,pixelHinting,scaleMode,caps,joints,miterLimit) { var $x = ["LineStyle",5,thickness,color,alpha,pixelHinting,scaleMode,caps,joints,miterLimit]; $x.__enum__ = openfl__$internal_swf_ShapeCommand; $x.toString = $estr; return $x; };
openfl__$internal_swf_ShapeCommand.LineTo = function(x,y) { var $x = ["LineTo",6,x,y]; $x.__enum__ = openfl__$internal_swf_ShapeCommand; $x.toString = $estr; return $x; };
openfl__$internal_swf_ShapeCommand.MoveTo = function(x,y) { var $x = ["MoveTo",7,x,y]; $x.__enum__ = openfl__$internal_swf_ShapeCommand; $x.toString = $estr; return $x; };
var openfl__$internal_symbols_SWFSymbol = function() {
};
$hxClasses["openfl._internal.symbols.SWFSymbol"] = openfl__$internal_symbols_SWFSymbol;
openfl__$internal_symbols_SWFSymbol.__name__ = ["openfl","_internal","symbols","SWFSymbol"];
openfl__$internal_symbols_SWFSymbol.prototype = {
	className: null
	,id: null
	,__createObject: function(swf) {
		return null;
	}
	,__class__: openfl__$internal_symbols_SWFSymbol
};
var openfl__$internal_symbols_BitmapSymbol = function() {
	openfl__$internal_symbols_SWFSymbol.call(this);
};
$hxClasses["openfl._internal.symbols.BitmapSymbol"] = openfl__$internal_symbols_BitmapSymbol;
openfl__$internal_symbols_BitmapSymbol.__name__ = ["openfl","_internal","symbols","BitmapSymbol"];
openfl__$internal_symbols_BitmapSymbol.__super__ = openfl__$internal_symbols_SWFSymbol;
openfl__$internal_symbols_BitmapSymbol.prototype = $extend(openfl__$internal_symbols_SWFSymbol.prototype,{
	alpha: null
	,path: null
	,__createObject: function(swf) {
		return new openfl_display_Bitmap(this.__getBitmap(swf),1,true);
	}
	,__getBitmap: function(swf) {
		if(openfl_Assets.cache.hasBitmapData(this.path)) return openfl_Assets.cache.getBitmapData(this.path); else {
			var source = swf.library.getImage(this.path);
			if(source != null && this.alpha != null && this.alpha != "") {
				var alphaBitmapData = swf.library.getImage(this.alpha);
				source.copyChannel(alphaBitmapData,alphaBitmapData.get_rect(),new lime_math_Vector2(),lime_graphics_ImageChannel.RED,lime_graphics_ImageChannel.ALPHA);
				source.buffer.premultiplied = true;
				source.set_premultiplied(false);
			}
			var bitmapData = openfl_display_BitmapData.fromImage(source);
			openfl_Assets.cache.setBitmapData(this.path,bitmapData);
			return bitmapData;
		}
	}
	,__class__: openfl__$internal_symbols_BitmapSymbol
});
var openfl__$internal_symbols_ButtonSymbol = function() {
	openfl__$internal_symbols_SWFSymbol.call(this);
};
$hxClasses["openfl._internal.symbols.ButtonSymbol"] = openfl__$internal_symbols_ButtonSymbol;
openfl__$internal_symbols_ButtonSymbol.__name__ = ["openfl","_internal","symbols","ButtonSymbol"];
openfl__$internal_symbols_ButtonSymbol.__super__ = openfl__$internal_symbols_SWFSymbol;
openfl__$internal_symbols_ButtonSymbol.prototype = $extend(openfl__$internal_symbols_SWFSymbol.prototype,{
	downState: null
	,hitState: null
	,overState: null
	,upState: null
	,__createObject: function(swf) {
		var simpleButton = null;
		openfl_display_SimpleButton.__initSWF = swf;
		openfl_display_SimpleButton.__initSymbol = this;
		if(this.className != null) {
			var symbolType = Type.resolveClass(this.className);
			if(symbolType != null) simpleButton = Type.createInstance(symbolType,[]); else {
			}
		}
		if(simpleButton == null) simpleButton = new openfl_display_SimpleButton();
		return simpleButton;
	}
	,__class__: openfl__$internal_symbols_ButtonSymbol
});
var openfl__$internal_symbols_DynamicTextSymbol = function() {
	openfl__$internal_symbols_SWFSymbol.call(this);
};
$hxClasses["openfl._internal.symbols.DynamicTextSymbol"] = openfl__$internal_symbols_DynamicTextSymbol;
openfl__$internal_symbols_DynamicTextSymbol.__name__ = ["openfl","_internal","symbols","DynamicTextSymbol"];
openfl__$internal_symbols_DynamicTextSymbol.__super__ = openfl__$internal_symbols_SWFSymbol;
openfl__$internal_symbols_DynamicTextSymbol.prototype = $extend(openfl__$internal_symbols_SWFSymbol.prototype,{
	align: null
	,border: null
	,color: null
	,fontHeight: null
	,fontID: null
	,fontName: null
	,height: null
	,html: null
	,indent: null
	,input: null
	,leading: null
	,leftMargin: null
	,multiline: null
	,password: null
	,rightMargin: null
	,selectable: null
	,text: null
	,width: null
	,wordWrap: null
	,x: null
	,y: null
	,__createObject: function(swf) {
		var textField = new openfl_text_TextField();
		textField.__fromSymbol(swf,this);
		return textField;
	}
	,__class__: openfl__$internal_symbols_DynamicTextSymbol
});
var openfl__$internal_symbols_FontSymbol = function() {
	openfl__$internal_symbols_SWFSymbol.call(this);
};
$hxClasses["openfl._internal.symbols.FontSymbol"] = openfl__$internal_symbols_FontSymbol;
openfl__$internal_symbols_FontSymbol.__name__ = ["openfl","_internal","symbols","FontSymbol"];
openfl__$internal_symbols_FontSymbol.__super__ = openfl__$internal_symbols_SWFSymbol;
openfl__$internal_symbols_FontSymbol.prototype = $extend(openfl__$internal_symbols_SWFSymbol.prototype,{
	advances: null
	,bold: null
	,codes: null
	,glyphs: null
	,italic: null
	,leading: null
	,name: null
	,__class__: openfl__$internal_symbols_FontSymbol
});
var openfl__$internal_symbols_ShapeSymbol = function() {
	openfl__$internal_symbols_SWFSymbol.call(this);
};
$hxClasses["openfl._internal.symbols.ShapeSymbol"] = openfl__$internal_symbols_ShapeSymbol;
openfl__$internal_symbols_ShapeSymbol.__name__ = ["openfl","_internal","symbols","ShapeSymbol"];
openfl__$internal_symbols_ShapeSymbol.__super__ = openfl__$internal_symbols_SWFSymbol;
openfl__$internal_symbols_ShapeSymbol.prototype = $extend(openfl__$internal_symbols_SWFSymbol.prototype,{
	commands: null
	,rendered: null
	,__createObject: function(swf) {
		var shape = new openfl_display_Shape();
		var graphics = shape.get_graphics();
		if(this.rendered != null) {
			graphics.copyFrom(this.rendered.get_graphics());
			return shape;
		}
		var _g = 0;
		var _g1 = this.commands;
		while(_g < _g1.length) {
			var command = _g1[_g];
			++_g;
			switch(command[1]) {
			case 1:
				var alpha = command[3];
				var color = command[2];
				graphics.beginFill(color,alpha);
				break;
			case 0:
				var smooth = command[5];
				var repeat = command[4];
				var matrix = command[3];
				var bitmapID = command[2];
				var bitmap = swf.symbols.h[bitmapID];
				if(bitmap != null && bitmap.path != "") graphics.beginBitmapFill(bitmap.__getBitmap(swf),matrix,repeat,smooth);
				break;
			case 2:
				var focalPointRatio = command[9];
				var interpolationMethod = command[8];
				var spreadMethod = command[7];
				var matrix1 = command[6];
				var ratios = command[5];
				var alphas = command[4];
				var colors = command[3];
				var fillType = command[2];
				graphics.beginGradientFill(fillType,colors,alphas,ratios,matrix1,spreadMethod,interpolationMethod,focalPointRatio);
				break;
			case 3:
				var anchorY = command[5];
				var anchorX = command[4];
				var controlY = command[3];
				var controlX = command[2];
				graphics.curveTo(controlX,controlY,anchorX,anchorY);
				break;
			case 4:
				graphics.endFill();
				break;
			case 5:
				var miterLimit = command[9];
				var joints = command[8];
				var caps = command[7];
				var scaleMode = command[6];
				var pixelHinting = command[5];
				var alpha1 = command[4];
				var color1 = command[3];
				var thickness = command[2];
				if(thickness != null) graphics.lineStyle(thickness,color1,alpha1,pixelHinting,scaleMode,caps,joints,miterLimit); else graphics.lineStyle();
				break;
			case 6:
				var y = command[3];
				var x = command[2];
				graphics.lineTo(x,y);
				break;
			case 7:
				var y1 = command[3];
				var x1 = command[2];
				graphics.moveTo(x1,y1);
				break;
			}
		}
		this.commands = null;
		this.rendered = new openfl_display_Shape();
		this.rendered.get_graphics().copyFrom(shape.get_graphics());
		return shape;
	}
	,__class__: openfl__$internal_symbols_ShapeSymbol
});
var openfl__$internal_symbols_SpriteSymbol = function() {
	openfl__$internal_symbols_SWFSymbol.call(this);
	this.frames = [];
};
$hxClasses["openfl._internal.symbols.SpriteSymbol"] = openfl__$internal_symbols_SpriteSymbol;
openfl__$internal_symbols_SpriteSymbol.__name__ = ["openfl","_internal","symbols","SpriteSymbol"];
openfl__$internal_symbols_SpriteSymbol.__super__ = openfl__$internal_symbols_SWFSymbol;
openfl__$internal_symbols_SpriteSymbol.prototype = $extend(openfl__$internal_symbols_SWFSymbol.prototype,{
	frames: null
	,__createObject: function(swf) {
		var movieClip = null;
		openfl_display_MovieClip.__initSWF = swf;
		openfl_display_MovieClip.__initSymbol = this;
		if(this.className != null) {
			var symbolType = Type.resolveClass(this.className);
			if(symbolType != null) movieClip = Type.createInstance(symbolType,[]); else {
			}
		}
		if(movieClip == null) movieClip = new openfl_display_MovieClip();
		return movieClip;
	}
	,__class__: openfl__$internal_symbols_SpriteSymbol
});
var openfl__$internal_symbols_StaticTextSymbol = function() {
	openfl__$internal_symbols_SWFSymbol.call(this);
};
$hxClasses["openfl._internal.symbols.StaticTextSymbol"] = openfl__$internal_symbols_StaticTextSymbol;
openfl__$internal_symbols_StaticTextSymbol.__name__ = ["openfl","_internal","symbols","StaticTextSymbol"];
openfl__$internal_symbols_StaticTextSymbol.__super__ = openfl__$internal_symbols_SWFSymbol;
openfl__$internal_symbols_StaticTextSymbol.prototype = $extend(openfl__$internal_symbols_SWFSymbol.prototype,{
	matrix: null
	,records: null
	,rendered: null
	,__createObject: function(swf) {
		var shape = new openfl_display_Shape();
		var graphics = shape.get_graphics();
		if(this.rendered != null) {
			graphics.copyFrom(this.rendered.get_graphics());
			return shape;
		}
		if(this.records != null) {
			var font = null;
			var color = 16777215;
			var offsetX = this.matrix.tx;
			var offsetY = this.matrix.ty;
			var _g = 0;
			var _g1 = this.records;
			while(_g < _g1.length) {
				var record = _g1[_g];
				++_g;
				if(record.fontID != null) font = swf.symbols.h[record.fontID];
				if(record.offsetX != null) offsetX = this.matrix.tx + record.offsetX * 0.05;
				if(record.offsetY != null) offsetY = this.matrix.ty + record.offsetY * 0.05;
				if(record.color != null) color = record.color;
				if(font != null) {
					var scale = record.fontHeight / 1024 * 0.05;
					var index;
					var code;
					var _g3 = 0;
					var _g2 = record.glyphs.length;
					while(_g3 < _g2) {
						var i = _g3++;
						index = record.glyphs[i];
						var _g4 = 0;
						var _g5 = font.glyphs[index];
						while(_g4 < _g5.length) {
							var command = _g5[_g4];
							++_g4;
							switch(command[1]) {
							case 1:
								var alpha = command[3];
								graphics.beginFill(color & 16777215,(color >> 24 & 255) / 255);
								break;
							case 3:
								var anchorY = command[5];
								var anchorX = command[4];
								var controlY = command[3];
								var controlX = command[2];
								graphics.curveTo(controlX * scale + offsetX,controlY * scale + offsetY,anchorX * scale + offsetX,anchorY * scale + offsetY);
								break;
							case 4:
								graphics.endFill();
								break;
							case 5:
								var miterLimit = command[9];
								var joints = command[8];
								var caps = command[7];
								var scaleMode = command[6];
								var pixelHinting = command[5];
								var alpha1 = command[4];
								var color1 = command[3];
								var thickness = command[2];
								if(thickness != null) graphics.lineStyle(thickness,color1,alpha1,pixelHinting,scaleMode,caps,joints,miterLimit); else graphics.lineStyle();
								break;
							case 6:
								var y = command[3];
								var x = command[2];
								graphics.lineTo(x * scale + offsetX,y * scale + offsetY);
								break;
							case 7:
								var y1 = command[3];
								var x1 = command[2];
								graphics.moveTo(x1 * scale + offsetX,y1 * scale + offsetY);
								break;
							default:
							}
						}
						offsetX += record.advances[i] * 0.05;
					}
				}
			}
		}
		this.records = null;
		this.rendered = new openfl_display_Shape();
		this.rendered.get_graphics().copyFrom(shape.get_graphics());
		return shape;
	}
	,__class__: openfl__$internal_symbols_StaticTextSymbol
});
var openfl__$internal_symbols_StaticTextRecord = function() {
};
$hxClasses["openfl._internal.symbols.StaticTextRecord"] = openfl__$internal_symbols_StaticTextRecord;
openfl__$internal_symbols_StaticTextRecord.__name__ = ["openfl","_internal","symbols","StaticTextRecord"];
openfl__$internal_symbols_StaticTextRecord.prototype = {
	advances: null
	,color: null
	,fontHeight: null
	,fontID: null
	,glyphs: null
	,offsetX: null
	,offsetY: null
	,__class__: openfl__$internal_symbols_StaticTextRecord
};
var openfl__$internal_text_TextEngine = function(textField) {
	this.textField = textField;
	this.width = 100;
	this.height = 100;
	this.text = "";
	this.bounds = new openfl_geom_Rectangle(0,0,0,0);
	this.type = 0;
	this.autoSize = 2;
	this.embedFonts = false;
	this.selectable = true;
	this.borderColor = 0;
	this.border = false;
	this.backgroundColor = 16777215;
	this.background = false;
	this.gridFitType = 1;
	this.maxChars = 0;
	this.multiline = false;
	this.sharpness = 0;
	this.scrollH = 0;
	this.scrollV = 1;
	this.wordWrap = false;
	this.lineAscents = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
	this.lineBreaks = openfl__$Vector_Vector_$Impl_$.toIntVector(null);
	this.lineDescents = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
	this.lineLeadings = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
	this.lineHeights = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
	this.lineWidths = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
	this.layoutGroups = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
	this.textFormatRanges = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
	openfl__$internal_text_TextEngine.__canvas = window.document.createElement("canvas");
	openfl__$internal_text_TextEngine.__context = openfl__$internal_text_TextEngine.__canvas.getContext("2d");
};
$hxClasses["openfl._internal.text.TextEngine"] = openfl__$internal_text_TextEngine;
openfl__$internal_text_TextEngine.__name__ = ["openfl","_internal","text","TextEngine"];
openfl__$internal_text_TextEngine.findFont = function(name) {
	return null;
};
openfl__$internal_text_TextEngine.getFormatHeight = function(format) {
	var ascent;
	var descent;
	var leading;
	openfl__$internal_text_TextEngine.__context.font = openfl__$internal_text_TextEngine.getFont(format);
	ascent = format.size;
	descent = format.size * 0.185;
	leading = format.leading;
	return ascent + descent + leading;
};
openfl__$internal_text_TextEngine.getFont = function(format) {
	var font;
	if(format.italic) font = "italic "; else font = "normal ";
	font += "normal ";
	if(format.bold) font += "bold "; else font += "normal ";
	font += format.size + "px";
	font += "/" + (format.size + format.leading + 6) + "px ";
	font += "" + (function($this) {
		var $r;
		var _g = format.font;
		$r = (function($this) {
			var $r;
			switch(_g) {
			case "_sans":
				$r = "sans-serif";
				break;
			case "_serif":
				$r = "serif";
				break;
			case "_typewriter":
				$r = "monospace";
				break;
			default:
				$r = "'" + format.font + "'";
			}
			return $r;
		}($this));
		return $r;
	}(this));
	return font;
};
openfl__$internal_text_TextEngine.getFontInstance = function(format) {
	return null;
};
openfl__$internal_text_TextEngine.prototype = {
	antiAliasType: null
	,autoSize: null
	,background: null
	,backgroundColor: null
	,border: null
	,borderColor: null
	,bottomScrollV: null
	,bounds: null
	,caretIndex: null
	,embedFonts: null
	,gridFitType: null
	,height: null
	,layoutGroups: null
	,lineAscents: null
	,lineBreaks: null
	,lineDescents: null
	,lineLeadings: null
	,lineHeights: null
	,lineWidths: null
	,maxChars: null
	,maxScrollH: null
	,maxScrollV: null
	,multiline: null
	,numLines: null
	,restrict: null
	,scrollH: null
	,scrollV: null
	,selectable: null
	,sharpness: null
	,text: null
	,textHeight: null
	,textFormatRanges: null
	,textWidth: null
	,type: null
	,width: null
	,wordWrap: null
	,textField: null
	,__cursorPosition: null
	,__cursorTimer: null
	,__hasFocus: null
	,__isKeyDown: null
	,__measuredHeight: null
	,__measuredWidth: null
	,__selectionStart: null
	,__showCursor: null
	,__textFormat: null
	,__textLayout: null
	,__texture: null
	,__cairoFont: null
	,__font: null
	,__hiddenInput: null
	,getBounds: function() {
		var padding;
		if(this.border) padding = 1; else padding = 0;
		this.bounds.width = this.width + padding;
		this.bounds.height = this.height + padding;
	}
	,getLine: function(index) {
		if(index < 0 || index > this.lineBreaks.get_length() + 1) return null;
		if(this.lineBreaks.get_length() == 0) return this.text; else return this.text.substring(index > 0?this.lineBreaks.get(index - 1):0,this.lineBreaks.get(index));
	}
	,getLineBreakIndex: function(startIndex) {
		if(startIndex == null) startIndex = 0;
		var cr = this.text.indexOf("\n",startIndex);
		var lf = this.text.indexOf("\r",startIndex);
		if(cr == -1) return lf;
		if(lf == -1) return cr;
		if(cr < lf) return cr; else return lf;
	}
	,getLineMeasurements: function() {
		this.lineAscents.set_length(0);
		this.lineDescents.set_length(0);
		this.lineLeadings.set_length(0);
		this.lineHeights.set_length(0);
		this.lineWidths.set_length(0);
		var currentLineAscent = 0.0;
		var currentLineDescent = 0.0;
		var currentLineLeading = null;
		var currentLineHeight = 0.0;
		var currentLineWidth = 0.0;
		this.textWidth = 0;
		this.textHeight = 0;
		this.numLines = 1;
		this.bottomScrollV = 0;
		this.maxScrollH = 0;
		var _g = 0;
		var _g1 = this.layoutGroups;
		while(_g < _g1.get_length()) {
			var group = _g1.get(_g);
			++_g;
			while(group.lineIndex > this.numLines - 1) {
				this.lineAscents.push(currentLineAscent);
				this.lineDescents.push(currentLineDescent);
				this.lineLeadings.push(currentLineLeading != null?currentLineLeading:0);
				this.lineHeights.push(currentLineHeight);
				this.lineWidths.push(currentLineWidth);
				currentLineAscent = 0;
				currentLineDescent = 0;
				currentLineLeading = null;
				currentLineHeight = 0;
				currentLineWidth = 0;
				this.numLines++;
				if(this.textHeight <= this.height - 2) this.bottomScrollV++;
			}
			currentLineAscent = Math.max(currentLineAscent,group.ascent);
			currentLineDescent = Math.max(currentLineDescent,group.descent);
			if(currentLineLeading == null) currentLineLeading = group.leading; else currentLineLeading = Std["int"](Math.max(currentLineLeading,group.leading));
			currentLineHeight = Math.max(currentLineHeight,group.height);
			currentLineWidth = group.offsetX - 2 + group.width;
			if(currentLineWidth > this.textWidth) this.textWidth = currentLineWidth;
			this.textHeight = group.offsetY - 2 + group.ascent + group.descent;
		}
		this.lineAscents.push(currentLineAscent);
		this.lineDescents.push(currentLineDescent);
		this.lineLeadings.push(currentLineLeading != null?currentLineLeading:0);
		this.lineHeights.push(currentLineHeight);
		this.lineWidths.push(currentLineWidth);
		if(this.numLines == 1) {
			this.bottomScrollV = 1;
			if(currentLineLeading > 0) this.textHeight += currentLineLeading;
		} else if(this.textHeight <= this.height - 2) this.bottomScrollV++;
		if(this.autoSize != 2) {
			var _g2 = this.autoSize;
			switch(_g2) {
			case 1:case 3:case 0:
				if(!this.wordWrap) this.width = this.textWidth + 4;
				this.height = this.textHeight + 4;
				this.bottomScrollV = this.numLines;
				break;
			default:
			}
		}
		if(this.textWidth > this.width - 4) this.maxScrollH = this.textWidth - this.width + 4 | 0; else this.maxScrollH = 0;
		this.maxScrollV = this.numLines - this.bottomScrollV + 1;
	}
	,getLayoutGroups: function() {
		var _g = this;
		this.layoutGroups.set_length(0);
		var rangeIndex = -1;
		var formatRange = null;
		var font = null;
		var currentFormat = openfl_text_TextField.__defaultTextFormat.clone();
		var leading = 0;
		var ascent = 0.0;
		var descent = 0.0;
		var layoutGroup;
		var advances;
		var widthValue;
		var heightValue = 0.0;
		var spaceWidth = 0.0;
		var previousSpaceIndex = 0;
		var spaceIndex = this.text.indexOf(" ");
		var breakIndex = this.getLineBreakIndex();
		var marginRight = 0.0;
		var offsetX = 2.0;
		var offsetY = 2.0;
		var textIndex = 0;
		var lineIndex = 0;
		var lineFormat = null;
		if(rangeIndex < _g.textFormatRanges.get_length() - 1) {
			rangeIndex++;
			formatRange = _g.textFormatRanges.get(rangeIndex);
			currentFormat.__merge(formatRange.format);
			openfl__$internal_text_TextEngine.__context.font = openfl__$internal_text_TextEngine.getFont(currentFormat);
			ascent = currentFormat.size;
			descent = currentFormat.size * 0.185;
			leading = currentFormat.leading;
			heightValue = ascent + descent + leading;
			if(spaceIndex > -1) spaceWidth = openfl__$internal_text_TextEngine.__context.measureText(" ").width;
		}
		lineFormat = formatRange.format;
		var wrap;
		var maxLoops = this.text.length;
		if(this.multiline) maxLoops++;
		while(textIndex < maxLoops) if(breakIndex > -1 && (spaceIndex == -1 || breakIndex < spaceIndex) && formatRange.end >= breakIndex) {
			layoutGroup = new openfl__$internal_text_TextLayoutGroup(formatRange.format,textIndex,breakIndex);
			var text = this.text;
			var advances1 = [];
			var _g1 = textIndex;
			while(_g1 < breakIndex) {
				var i = _g1++;
				advances1.push(openfl__$internal_text_TextEngine.__context.measureText(text.charAt(i)).width);
			}
			layoutGroup.advances = advances1;
			layoutGroup.offsetX = offsetX;
			layoutGroup.ascent = ascent;
			layoutGroup.descent = descent;
			layoutGroup.leading = leading;
			layoutGroup.lineIndex = lineIndex;
			layoutGroup.offsetY = offsetY;
			var advances2 = layoutGroup.advances;
			var width = 0.0;
			var _g2 = 0;
			while(_g2 < advances2.length) {
				var advance = advances2[_g2];
				++_g2;
				width += advance;
			}
			layoutGroup.width = width;
			layoutGroup.height = heightValue;
			this.layoutGroups.push(layoutGroup);
			offsetY += heightValue;
			offsetX = 2;
			if(this.wordWrap && layoutGroup.offsetX + layoutGroup.width > this.width - 2) {
				layoutGroup.offsetY = offsetY;
				layoutGroup.offsetX = offsetX;
				layoutGroup.lineIndex++;
				offsetY += heightValue;
				lineIndex++;
			}
			if(formatRange.end == breakIndex) {
				if(rangeIndex < _g.textFormatRanges.get_length() - 1) {
					rangeIndex++;
					formatRange = _g.textFormatRanges.get(rangeIndex);
					currentFormat.__merge(formatRange.format);
					openfl__$internal_text_TextEngine.__context.font = openfl__$internal_text_TextEngine.getFont(currentFormat);
					ascent = currentFormat.size;
					descent = currentFormat.size * 0.185;
					leading = currentFormat.leading;
					heightValue = ascent + descent + leading;
					if(spaceIndex > -1) spaceWidth = openfl__$internal_text_TextEngine.__context.measureText(" ").width;
				}
				lineFormat = formatRange.format;
			}
			textIndex = breakIndex + 1;
			breakIndex = this.getLineBreakIndex(textIndex);
			lineIndex++;
		} else if(formatRange.end >= spaceIndex && spaceIndex > -1 && textIndex < formatRange.end) {
			layoutGroup = null;
			wrap = false;
			while(true) {
				if(textIndex == formatRange.end) break;
				if(spaceIndex == -1) spaceIndex = formatRange.end;
				var text1 = this.text;
				var advances3 = [];
				var _g3 = textIndex;
				while(_g3 < spaceIndex) {
					var i1 = _g3++;
					advances3.push(openfl__$internal_text_TextEngine.__context.measureText(text1.charAt(i1)).width);
				}
				advances = advances3;
				var width1 = 0.0;
				var _g4 = 0;
				while(_g4 < advances.length) {
					var advance1 = advances[_g4];
					++_g4;
					width1 += advance1;
				}
				widthValue = width1;
				if(this.wordWrap) {
					if(offsetX + widthValue > this.width - 2) wrap = true;
				}
				if(wrap) {
					offsetY += heightValue;
					var i2 = this.layoutGroups.get_length() - 1;
					var offsetCount = 0;
					while(true) {
						layoutGroup = this.layoutGroups.get(i2);
						if(i2 > 0 && layoutGroup.startIndex > previousSpaceIndex) offsetCount++; else break;
						i2--;
					}
					lineIndex++;
					offsetX = 2;
					if(offsetCount > 0) {
						var bumpX;
						bumpX = ((function($this) {
							var $r;
							var index = $this.layoutGroups.get_length() - offsetCount;
							$r = $this.layoutGroups.get(index);
							return $r;
						}(this))).offsetX;
						var _g11 = this.layoutGroups.get_length() - offsetCount;
						var _g5 = this.layoutGroups.get_length();
						while(_g11 < _g5) {
							var i3 = _g11++;
							layoutGroup = this.layoutGroups.get(i3);
							layoutGroup.offsetX -= bumpX;
							layoutGroup.offsetY = offsetY;
							layoutGroup.lineIndex = lineIndex;
							offsetX += layoutGroup.width;
						}
					}
					layoutGroup = new openfl__$internal_text_TextLayoutGroup(formatRange.format,textIndex,spaceIndex);
					layoutGroup.advances = advances;
					layoutGroup.offsetX = offsetX;
					layoutGroup.ascent = ascent;
					layoutGroup.descent = descent;
					layoutGroup.leading = leading;
					layoutGroup.lineIndex = lineIndex;
					layoutGroup.offsetY = offsetY;
					layoutGroup.width = widthValue;
					layoutGroup.height = heightValue;
					this.layoutGroups.push(layoutGroup);
					offsetX = widthValue + spaceWidth;
					marginRight = spaceWidth;
					wrap = false;
				} else {
					if(layoutGroup != null && textIndex == spaceIndex) {
						if(formatRange.format.align != 2) layoutGroup.endIndex = spaceIndex;
						layoutGroup.advances.push(spaceWidth);
						marginRight += spaceWidth;
					} else if(layoutGroup == null || lineFormat.align == 2) {
						layoutGroup = new openfl__$internal_text_TextLayoutGroup(formatRange.format,textIndex,spaceIndex);
						layoutGroup.advances = advances;
						layoutGroup.offsetX = offsetX;
						layoutGroup.ascent = ascent;
						layoutGroup.descent = descent;
						layoutGroup.leading = leading;
						layoutGroup.lineIndex = lineIndex;
						layoutGroup.offsetY = offsetY;
						layoutGroup.width = widthValue;
						layoutGroup.height = heightValue;
						this.layoutGroups.push(layoutGroup);
						layoutGroup.advances.push(spaceWidth);
						marginRight = spaceWidth;
					} else {
						layoutGroup.endIndex = spaceIndex;
						layoutGroup.advances = layoutGroup.advances.concat(advances);
						layoutGroup.width += marginRight + widthValue;
						layoutGroup.advances.push(spaceWidth);
						marginRight = spaceWidth;
					}
					offsetX += widthValue + spaceWidth;
				}
				textIndex = spaceIndex + 1;
				previousSpaceIndex = spaceIndex;
				spaceIndex = this.text.indexOf(" ",previousSpaceIndex + 1);
				if(formatRange.end <= previousSpaceIndex) {
					layoutGroup = null;
					if(rangeIndex < _g.textFormatRanges.get_length() - 1) {
						rangeIndex++;
						formatRange = _g.textFormatRanges.get(rangeIndex);
						currentFormat.__merge(formatRange.format);
						openfl__$internal_text_TextEngine.__context.font = openfl__$internal_text_TextEngine.getFont(currentFormat);
						ascent = currentFormat.size;
						descent = currentFormat.size * 0.185;
						leading = currentFormat.leading;
						heightValue = ascent + descent + leading;
						if(spaceIndex > -1) spaceWidth = openfl__$internal_text_TextEngine.__context.measureText(" ").width;
					}
				}
				if(spaceIndex > breakIndex && breakIndex > -1 || textIndex > this.text.length || spaceIndex > formatRange.end || spaceIndex == -1 && breakIndex > -1) {
					if(spaceIndex > formatRange.end) textIndex--;
					break;
				}
			}
		} else {
			if(textIndex > formatRange.end) break; else if(textIndex < formatRange.end || textIndex == this.text.length) {
				layoutGroup = new openfl__$internal_text_TextLayoutGroup(formatRange.format,textIndex,formatRange.end);
				var text2 = this.text;
				var advances4 = [];
				var _g6 = textIndex;
				while(_g6 < formatRange.end) {
					var i4 = _g6++;
					advances4.push(openfl__$internal_text_TextEngine.__context.measureText(text2.charAt(i4)).width);
				}
				layoutGroup.advances = advances4;
				layoutGroup.offsetX = offsetX;
				layoutGroup.ascent = ascent;
				layoutGroup.descent = descent;
				layoutGroup.leading = leading;
				layoutGroup.lineIndex = lineIndex;
				layoutGroup.offsetY = offsetY;
				var advances5 = layoutGroup.advances;
				var width2 = 0.0;
				var _g7 = 0;
				while(_g7 < advances5.length) {
					var advance2 = advances5[_g7];
					++_g7;
					width2 += advance2;
				}
				layoutGroup.width = width2;
				layoutGroup.height = heightValue;
				this.layoutGroups.push(layoutGroup);
				offsetX += layoutGroup.width;
				textIndex = formatRange.end;
			}
			if(rangeIndex < _g.textFormatRanges.get_length() - 1) {
				rangeIndex++;
				formatRange = _g.textFormatRanges.get(rangeIndex);
				currentFormat.__merge(formatRange.format);
				openfl__$internal_text_TextEngine.__context.font = openfl__$internal_text_TextEngine.getFont(currentFormat);
				ascent = currentFormat.size;
				descent = currentFormat.size * 0.185;
				leading = currentFormat.leading;
				heightValue = ascent + descent + leading;
				if(spaceIndex > -1) spaceWidth = openfl__$internal_text_TextEngine.__context.measureText(" ").width;
			}
			if(textIndex == formatRange.end) {
				textIndex++;
				break;
			}
		}
	}
	,setTextAlignment: function() {
		var lineIndex = -1;
		var offsetX = 0.0;
		var group;
		var lineLength;
		var _g1 = 0;
		var _g = this.layoutGroups.get_length();
		while(_g1 < _g) {
			var i = _g1++;
			group = this.layoutGroups.get(i);
			if(group.lineIndex != lineIndex) {
				lineIndex = group.lineIndex;
				var _g2 = group.format.align;
				switch(_g2) {
				case 0:
					if(this.lineWidths.get(lineIndex) < this.width - 4) offsetX = Math.round((this.width - 4 - this.lineWidths.get(lineIndex)) / 2); else offsetX = 0;
					break;
				case 4:
					if(this.lineWidths.get(lineIndex) < this.width - 4) offsetX = Math.round(this.width - 4 - this.lineWidths.get(lineIndex)); else offsetX = 0;
					break;
				case 2:
					if(this.lineWidths.get(lineIndex) < this.width - 4) {
						lineLength = 1;
						var _g4 = i + 1;
						var _g3 = this.layoutGroups.get_length();
						while(_g4 < _g3) {
							var j = _g4++;
							if(this.layoutGroups.get(j).lineIndex == lineIndex) lineLength++; else break;
						}
						if(lineLength > 1) {
							group = this.layoutGroups.get(i + lineLength - 1);
							var endChar = this.text.charAt(group.endIndex);
							if(group.endIndex < this.text.length && endChar != "\n" && endChar != "\r") {
								offsetX = (this.width - 4 - this.lineWidths.get(lineIndex)) / (lineLength - 1);
								var _g31 = 1;
								while(_g31 < lineLength) {
									var j1 = _g31++;
									this.layoutGroups.get(i + j1).offsetX += offsetX * j1;
								}
							}
						}
					}
					offsetX = 0;
					break;
				default:
					offsetX = 0;
				}
			}
			if(offsetX > 0) group.offsetX += offsetX;
		}
	}
	,update: function() {
		if(this.text == null || !this.multiline && StringTools.trim(this.text) == "" || this.textFormatRanges.get_length() == 0) {
			this.lineAscents.set_length(0);
			this.lineBreaks.set_length(0);
			this.lineDescents.set_length(0);
			this.lineLeadings.set_length(0);
			this.lineHeights.set_length(0);
			this.lineWidths.set_length(0);
			this.layoutGroups.set_length(0);
			this.textWidth = 0;
			this.textHeight = 0;
			this.numLines = 1;
			this.maxScrollH = 0;
			this.maxScrollV = 1;
			this.bottomScrollV = 1;
		} else {
			this.getLayoutGroups();
			this.getLineMeasurements();
			this.setTextAlignment();
		}
		this.getBounds();
	}
	,__class__: openfl__$internal_text_TextEngine
};
var openfl__$internal_text_TextFormatRange = function(format,start,end) {
	this.format = format;
	this.start = start;
	this.end = end;
};
$hxClasses["openfl._internal.text.TextFormatRange"] = openfl__$internal_text_TextFormatRange;
openfl__$internal_text_TextFormatRange.__name__ = ["openfl","_internal","text","TextFormatRange"];
openfl__$internal_text_TextFormatRange.prototype = {
	end: null
	,format: null
	,start: null
	,__class__: openfl__$internal_text_TextFormatRange
};
var openfl__$internal_text_TextLayoutGroup = function(format,startIndex,endIndex) {
	this.format = format;
	this.startIndex = startIndex;
	this.endIndex = endIndex;
};
$hxClasses["openfl._internal.text.TextLayoutGroup"] = openfl__$internal_text_TextLayoutGroup;
openfl__$internal_text_TextLayoutGroup.__name__ = ["openfl","_internal","text","TextLayoutGroup"];
openfl__$internal_text_TextLayoutGroup.prototype = {
	advances: null
	,ascent: null
	,descent: null
	,endIndex: null
	,format: null
	,height: null
	,leading: null
	,lineIndex: null
	,offsetX: null
	,offsetY: null
	,startIndex: null
	,width: null
	,__class__: openfl__$internal_text_TextLayoutGroup
};
var openfl__$internal_timeline_Frame = function() {
	this.objects = [];
};
$hxClasses["openfl._internal.timeline.Frame"] = openfl__$internal_timeline_Frame;
openfl__$internal_timeline_Frame.__name__ = ["openfl","_internal","timeline","Frame"];
openfl__$internal_timeline_Frame.prototype = {
	label: null
	,objects: null
	,__class__: openfl__$internal_timeline_Frame
};
var openfl__$internal_timeline_FrameObject = function() {
};
$hxClasses["openfl._internal.timeline.FrameObject"] = openfl__$internal_timeline_FrameObject;
openfl__$internal_timeline_FrameObject.__name__ = ["openfl","_internal","timeline","FrameObject"];
openfl__$internal_timeline_FrameObject.prototype = {
	clipDepth: null
	,colorTransform: null
	,depth: null
	,filters: null
	,id: null
	,matrix: null
	,name: null
	,symbol: null
	,type: null
	,visible: null
	,__class__: openfl__$internal_timeline_FrameObject
};
var openfl__$internal_timeline_FrameObjectType = $hxClasses["openfl._internal.timeline.FrameObjectType"] = { __ename__ : ["openfl","_internal","timeline","FrameObjectType"], __constructs__ : ["CREATE","UPDATE","DESTROY"] };
openfl__$internal_timeline_FrameObjectType.CREATE = ["CREATE",0];
openfl__$internal_timeline_FrameObjectType.CREATE.toString = $estr;
openfl__$internal_timeline_FrameObjectType.CREATE.__enum__ = openfl__$internal_timeline_FrameObjectType;
openfl__$internal_timeline_FrameObjectType.UPDATE = ["UPDATE",1];
openfl__$internal_timeline_FrameObjectType.UPDATE.toString = $estr;
openfl__$internal_timeline_FrameObjectType.UPDATE.__enum__ = openfl__$internal_timeline_FrameObjectType;
openfl__$internal_timeline_FrameObjectType.DESTROY = ["DESTROY",2];
openfl__$internal_timeline_FrameObjectType.DESTROY.toString = $estr;
openfl__$internal_timeline_FrameObjectType.DESTROY.__enum__ = openfl__$internal_timeline_FrameObjectType;
var openfl__$internal_utils_NullUtils = function() { };
$hxClasses["openfl._internal.utils.NullUtils"] = openfl__$internal_utils_NullUtils;
openfl__$internal_utils_NullUtils.__name__ = ["openfl","_internal","utils","NullUtils"];
var openfl__$internal_utils_PerlinNoise = function(seed,octaves,falloff) {
	if(seed == null) seed = 123;
	if(falloff == null) falloff = .5;
	if(octaves == null) this.octaves = 4; else this.octaves = octaves;
	this.baseFactor = 0.015625;
	this.seedOffset(seed);
	this.octFreqPers(falloff);
};
$hxClasses["openfl._internal.utils.PerlinNoise"] = openfl__$internal_utils_PerlinNoise;
openfl__$internal_utils_PerlinNoise.__name__ = ["openfl","_internal","utils","PerlinNoise"];
openfl__$internal_utils_PerlinNoise.prototype = {
	octaves: null
	,aOctFreq: null
	,aOctPers: null
	,fPersMax: null
	,iXoffset: null
	,iYoffset: null
	,iZoffset: null
	,baseFactor: null
	,fill: function(bitmap,_x,_y,_z,_) {
		var baseX;
		baseX = _x * this.baseFactor + this.iXoffset;
		_y = _y * this.baseFactor + this.iYoffset;
		_z = _z * this.baseFactor + this.iZoffset;
		var width = bitmap.width;
		var height = bitmap.height;
		var p = openfl__$internal_utils_PerlinNoise.P;
		var octaves = this.octaves;
		var aOctFreq = this.aOctFreq;
		var aOctPers = this.aOctPers;
		var _g = 0;
		while(_g < height) {
			var py = _g++;
			_x = baseX;
			var _g1 = 0;
			while(_g1 < width) {
				var px = _g1++;
				var s = 0.;
				var _g2 = 0;
				while(_g2 < octaves) {
					var i = _g2++;
					var fFreq = aOctFreq[i];
					var fPers = aOctPers[i];
					var x = _x * fFreq;
					var y = _y * fFreq;
					var z = _z * fFreq;
					var xf = x - x % 1;
					var yf = y - y % 1;
					var zf = z - z % 1;
					var X = (xf | 0) & 255;
					var Y = (yf | 0) & 255;
					var Z = (zf | 0) & 255;
					x -= xf;
					y -= yf;
					z -= zf;
					var u = x * x * x * (x * (x * 6 - 15) + 10);
					var v = y * y * y * (y * (y * 6 - 15) + 10);
					var w = z * z * z * (z * (z * 6 - 15) + 10);
					var A = p[X] + Y;
					var AA = p[A] + Z;
					var AB = p[A + 1] + Z;
					var B = p[X + 1] + Y;
					var BA = p[B] + Z;
					var BB = p[B + 1] + Z;
					var x1 = x - 1;
					var y1 = y - 1;
					var z1 = z - 1;
					var hash = p[BB + 1] & 15;
					var g1;
					g1 = ((hash & 1) == 0?hash < 8?x1:y1:hash < 8?-x1:-y1) + ((hash & 2) == 0?hash < 4?y1:hash == 12?x1:z1:hash < 4?-y1:hash == 14?-x1:-z1);
					hash = p[AB + 1] & 15;
					var g2;
					g2 = ((hash & 1) == 0?hash < 8?x:y1:hash < 8?-x:-y1) + ((hash & 2) == 0?hash < 4?y1:hash == 12?x:z1:hash < 4?-y1:hash == 14?-x:-z1);
					hash = p[BA + 1] & 15;
					var g3;
					g3 = ((hash & 1) == 0?hash < 8?x1:y:hash < 8?-x1:-y) + ((hash & 2) == 0?hash < 4?y:hash == 12?x1:z1:hash < 4?-y:hash == 14?-x1:-z1);
					hash = p[AA + 1] & 15;
					var g4;
					g4 = ((hash & 1) == 0?hash < 8?x:y:hash < 8?-x:-y) + ((hash & 2) == 0?hash < 4?y:hash == 12?x:z1:hash < 4?-y:hash == 14?-x:-z1);
					hash = p[BB] & 15;
					var g5;
					g5 = ((hash & 1) == 0?hash < 8?x1:y1:hash < 8?-x1:-y1) + ((hash & 2) == 0?hash < 4?y1:hash == 12?x1:z:hash < 4?-y1:hash == 14?-x1:-z);
					hash = p[AB] & 15;
					var g6;
					g6 = ((hash & 1) == 0?hash < 8?x:y1:hash < 8?-x:-y1) + ((hash & 2) == 0?hash < 4?y1:hash == 12?x:z:hash < 4?-y1:hash == 14?-x:-z);
					hash = p[BA] & 15;
					var g7;
					g7 = ((hash & 1) == 0?hash < 8?x1:y:hash < 8?-x1:-y) + ((hash & 2) == 0?hash < 4?y:hash == 12?x1:z:hash < 4?-y:hash == 14?-x1:-z);
					hash = p[AA] & 15;
					var g8;
					g8 = ((hash & 1) == 0?hash < 8?x:y:hash < 8?-x:-y) + ((hash & 2) == 0?hash < 4?y:hash == 12?x:z:hash < 4?-y:hash == 14?-x:-z);
					g2 += u * (g1 - g2);
					g4 += u * (g3 - g4);
					g6 += u * (g5 - g6);
					g8 += u * (g7 - g8);
					g4 += v * (g2 - g4);
					g8 += v * (g6 - g8);
					s += (g8 + w * (g4 - g8)) * fPers;
				}
				var color = (s * this.fPersMax + 1) * 128 | 0;
				bitmap.setPixel32(px,py,-16777216 | color << 16 | color << 8 | color);
				_x += this.baseFactor;
			}
			_y += this.baseFactor;
		}
	}
	,octFreqPers: function(fPersistence) {
		var fFreq;
		var fPers;
		this.aOctFreq = [];
		this.aOctPers = [];
		this.fPersMax = 0;
		var _g1 = 0;
		var _g = this.octaves;
		while(_g1 < _g) {
			var i = _g1++;
			fFreq = Math.pow(2,i);
			fPers = Math.pow(fPersistence,i);
			this.fPersMax += fPers;
			this.aOctFreq.push(fFreq);
			this.aOctPers.push(fPers);
		}
		this.fPersMax = 1 / this.fPersMax;
	}
	,seedOffset: function(iSeed) {
		this.iXoffset = iSeed = iSeed * 16807. % 2147483647 | 0;
		this.iYoffset = iSeed = iSeed * 16807. % 2147483647 | 0;
		this.iZoffset = iSeed = iSeed * 16807. % 2147483647 | 0;
	}
	,__class__: openfl__$internal_utils_PerlinNoise
};
var openfl_display_Application = function() {
	lime_app_Application.call(this);
	if(openfl_Lib.application == null) openfl_Lib.application = this;
};
$hxClasses["openfl.display.Application"] = openfl_display_Application;
openfl_display_Application.__name__ = ["openfl","display","Application"];
openfl_display_Application.__super__ = lime_app_Application;
openfl_display_Application.prototype = $extend(lime_app_Application.prototype,{
	create: function(config) {
		this.config = config;
		this.backend.create(config);
		openfl_Lib.current.__loaderInfo = openfl_display_LoaderInfo.create(null);
		openfl_Lib.current.__loaderInfo.content = openfl_Lib.current;
		if(config != null) {
			if(Object.prototype.hasOwnProperty.call(config,"fps")) this.backend.setFrameRate(config.fps);
			if(Object.prototype.hasOwnProperty.call(config,"windows")) {
				var _g = 0;
				var _g1 = config.windows;
				while(_g < _g1.length) {
					var windowConfig = _g1[_g];
					++_g;
					var $window = new openfl_display_Window(windowConfig);
					this.createWindow($window);
					break;
				}
			}
			if(this.__preloader == null || this.__preloader.complete) this.onPreloadComplete();
		}
	}
	,__class__: openfl_display_Application
});
var openfl_display_Bitmap = function(bitmapData,pixelSnapping,smoothing) {
	if(smoothing == null) smoothing = false;
	openfl_display_DisplayObject.call(this);
	this.set_bitmapData(bitmapData);
	this.pixelSnapping = pixelSnapping;
	this.smoothing = smoothing;
	if(pixelSnapping == null) this.pixelSnapping = 1;
};
$hxClasses["openfl.display.Bitmap"] = openfl_display_Bitmap;
openfl_display_Bitmap.__name__ = ["openfl","display","Bitmap"];
openfl_display_Bitmap.__super__ = openfl_display_DisplayObject;
openfl_display_Bitmap.prototype = $extend(openfl_display_DisplayObject.prototype,{
	bitmapData: null
	,pixelSnapping: null
	,smoothing: null
	,__image: null
	,__imageVersion: null
	,__getBounds: function(rect,matrix) {
		if(this.bitmapData != null) {
			var bounds = openfl_geom_Rectangle.__temp;
			bounds.setTo(0,0,this.bitmapData.width,this.bitmapData.height);
			bounds.__transform(bounds,matrix);
			rect.__expand(bounds.x,bounds.y,bounds.width,bounds.height);
		}
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(!hitObject.get_visible() || this.__isMask || this.bitmapData == null) return false;
		if(this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) return false;
		this.__getRenderTransform();
		var px = this.__renderTransform.__transformInverseX(x,y);
		var py = this.__renderTransform.__transformInverseY(x,y);
		if(px > 0 && py > 0 && px <= this.bitmapData.width && py <= this.bitmapData.height) {
			if(stack != null && !interactiveOnly) stack.push(hitObject);
			return true;
		}
		return false;
	}
	,__hitTestMask: function(x,y) {
		if(this.bitmapData == null) return false;
		this.__getRenderTransform();
		var px = this.__renderTransform.__transformInverseX(x,y);
		var py = this.__renderTransform.__transformInverseY(x,y);
		if(px > 0 && py > 0 && px <= this.bitmapData.width && py <= this.bitmapData.height) return true;
		return false;
	}
	,__renderCairo: function(renderSession) {
		openfl__$internal_renderer_cairo_CairoBitmap.render(this,renderSession);
	}
	,__renderCairoMask: function(renderSession) {
		renderSession.cairo.rectangle(0,0,this.get_width(),this.get_height());
	}
	,__renderCanvas: function(renderSession) {
		openfl__$internal_renderer_canvas_CanvasBitmap.render(this,renderSession);
	}
	,__renderCanvasMask: function(renderSession) {
		renderSession.context.rect(0,0,this.get_width(),this.get_height());
	}
	,__renderDOM: function(renderSession) {
		if(this.stage != null && this.__worldVisible && this.__renderable && this.bitmapData != null && this.bitmapData.__isValid) {
			renderSession.maskManager.pushObject(this);
			if(this.bitmapData.image.buffer.__srcImage != null) openfl__$internal_renderer_dom_DOMBitmap.renderImage(this,renderSession); else openfl__$internal_renderer_dom_DOMBitmap.renderCanvas(this,renderSession);
			renderSession.maskManager.popObject(this);
		} else {
			if(this.__image != null) {
				renderSession.element.removeChild(this.__image);
				this.__image = null;
				this.__style = null;
			}
			if(this.__canvas != null) {
				renderSession.element.removeChild(this.__canvas);
				this.__canvas = null;
				this.__style = null;
			}
		}
	}
	,__renderGL: function(renderSession) {
		openfl__$internal_renderer_opengl_GLBitmap.render(this,renderSession);
	}
	,__updateMask: function(maskGraphics) {
		if(this.bitmapData == null) return;
		maskGraphics.__commands.overrideMatrix(this.__worldTransform);
		maskGraphics.beginFill(0);
		maskGraphics.drawRect(0,0,this.bitmapData.width,this.bitmapData.height);
		if(maskGraphics.__bounds == null) maskGraphics.__bounds = new openfl_geom_Rectangle();
		this.__getBounds(maskGraphics.__bounds,openfl_geom_Matrix.__identity);
		openfl_display_DisplayObject.prototype.__updateMask.call(this,maskGraphics);
	}
	,set_bitmapData: function(value) {
		this.bitmapData = value;
		this.smoothing = false;
		if(this.__filters != null && this.__filters.length > 0) {
		}
		return this.bitmapData;
	}
	,get_height: function() {
		if(this.bitmapData != null) return this.bitmapData.height * Math.abs(this.get_scaleY());
		return 0;
	}
	,set_height: function(value) {
		if(this.bitmapData != null) {
			if(value != this.bitmapData.height) this.set_scaleY(value / this.bitmapData.height);
			return value;
		}
		return 0;
	}
	,get_width: function() {
		if(this.bitmapData != null) return this.bitmapData.width * Math.abs(this.get_scaleX());
		return 0;
	}
	,set_width: function(value) {
		if(this.bitmapData != null) {
			if(value != this.bitmapData.width) this.set_scaleX(value / this.bitmapData.width);
			return value;
		}
		return 0;
	}
	,__class__: openfl_display_Bitmap
	,__properties__: $extend(openfl_display_DisplayObject.prototype.__properties__,{set_bitmapData:"set_bitmapData"})
});
var openfl_display_BitmapData = function(width,height,transparent,fillColor) {
	if(fillColor == null) fillColor = -1;
	if(transparent == null) transparent = true;
	this.transparent = transparent;
	if(width == null) width = 0; else width = width;
	if(height == null) height = 0; else height = height;
	if(width < 0) width = 0; else width = width;
	if(height < 0) height = 0; else height = height;
	this.width = width;
	this.height = height;
	this.rect = new openfl_geom_Rectangle(0,0,width,height);
	if(width > 0 && height > 0) {
		if(transparent) {
			if((fillColor & -16777216) == 0) fillColor = 0;
		} else fillColor = -16777216 | fillColor & 16777215;
		fillColor = fillColor << 8 | fillColor >> 24 & 255;
		this.image = new lime_graphics_Image(null,0,0,width,height,fillColor);
		this.image.set_transparent(transparent);
		this.__isValid = true;
		this.readable = true;
	}
	this.__worldTransform = new openfl_geom_Matrix();
	this.__worldColorTransform = new openfl_geom_ColorTransform();
};
$hxClasses["openfl.display.BitmapData"] = openfl_display_BitmapData;
openfl_display_BitmapData.__name__ = ["openfl","display","BitmapData"];
openfl_display_BitmapData.__interfaces__ = [openfl_display_IBitmapDrawable];
openfl_display_BitmapData.fromBase64 = function(base64,type,onload) {
	var bitmapData = new openfl_display_BitmapData(0,0,true,0);
	bitmapData.__fromBase64(base64,type,onload);
	return bitmapData;
};
openfl_display_BitmapData.fromBytes = function(bytes,rawAlpha,onload) {
	var bitmapData = new openfl_display_BitmapData(0,0,true,0);
	bitmapData.__fromBytes(bytes,rawAlpha,onload);
	return bitmapData;
};
openfl_display_BitmapData.fromCanvas = function(canvas,transparent) {
	if(transparent == null) transparent = true;
	if(canvas == null) return null;
	var bitmapData = new openfl_display_BitmapData(0,0,transparent,0);
	bitmapData.__fromImage(lime_graphics_Image.fromCanvas(canvas));
	bitmapData.image.set_transparent(transparent);
	return bitmapData;
};
openfl_display_BitmapData.fromFile = function(path,onload,onerror) {
	var bitmapData = new openfl_display_BitmapData(0,0,true,0);
	bitmapData.__fromFile(path,onload,onerror);
	return bitmapData;
};
openfl_display_BitmapData.fromImage = function(image,transparent) {
	if(transparent == null) transparent = true;
	if(image == null || image.buffer == null) return null;
	var bitmapData = new openfl_display_BitmapData(0,0,transparent,0);
	bitmapData.__fromImage(image);
	bitmapData.image.set_transparent(transparent);
	return bitmapData;
};
openfl_display_BitmapData.fromTexture = function(texture) {
	if(texture == null) return null;
	var bitmapData = new openfl_display_BitmapData(texture.__width,texture.__height,true,0);
	bitmapData.readable = false;
	bitmapData.__texture = texture.__textureID;
	bitmapData.image = null;
	return bitmapData;
};
openfl_display_BitmapData.prototype = {
	height: null
	,image: null
	,readable: null
	,rect: null
	,transparent: null
	,width: null
	,__blendMode: null
	,__buffer: null
	,__bufferAlpha: null
	,__bufferData: null
	,__framebuffer: null
	,__isValid: null
	,__surface: null
	,__texture: null
	,__textureVersion: null
	,__transform: null
	,__worldColorTransform: null
	,__worldTransform: null
	,applyFilter: function(sourceBitmapData,sourceRect,destPoint,filter) {
		if(!this.readable || sourceBitmapData == null || !sourceBitmapData.readable) return;
		filter.__applyFilter(sourceBitmapData,this,sourceRect,destPoint);
	}
	,clone: function() {
		if(!this.__isValid) return new openfl_display_BitmapData(this.width,this.height,this.transparent,0); else if(!this.readable && this.image == null) {
			var bitmapData = new openfl_display_BitmapData(0,0,this.transparent,0);
			bitmapData.width = this.width;
			bitmapData.height = this.height;
			bitmapData.rect.copyFrom(this.rect);
			bitmapData.__framebuffer = this.__framebuffer;
			bitmapData.__texture = this.__texture;
			bitmapData.__isValid = true;
			return bitmapData;
		} else return openfl_display_BitmapData.fromImage(this.image.clone(),this.transparent);
	}
	,colorTransform: function(rect,colorTransform) {
		if(!this.readable) return;
		this.image.colorTransform(rect.__toLimeRectangle(),colorTransform.__toLimeColorMatrix());
	}
	,compare: function(otherBitmapData) {
		if(otherBitmapData == this) return 0; else if(otherBitmapData == null) return -1; else if(this.readable == false || otherBitmapData.readable == false) return -2; else if(this.width != otherBitmapData.width) return -3; else if(this.height != otherBitmapData.height) return -4;
		if(this.image != null && otherBitmapData.image != null && this.image.get_format() == otherBitmapData.image.get_format()) {
			var bytes = this.image.get_data();
			var otherBytes = otherBitmapData.image.get_data();
			var equal = true;
			var _g1 = 0;
			var _g = bytes.length;
			while(_g1 < _g) {
				var i = _g1++;
				if(bytes[i] != otherBytes[i]) {
					equal = false;
					break;
				}
			}
			if(equal) return 0;
		}
		var bitmapData = null;
		var foundDifference;
		var pixel;
		var otherPixel;
		var comparePixel;
		var r;
		var g;
		var b;
		var a;
		var _g11 = 0;
		var _g2 = this.height;
		while(_g11 < _g2) {
			var y = _g11++;
			var _g3 = 0;
			var _g21 = this.width;
			while(_g3 < _g21) {
				var x = _g3++;
				foundDifference = false;
				pixel = this.getPixel32(x,y);
				otherPixel = otherBitmapData.getPixel32(x,y);
				comparePixel = 0;
				if(pixel != otherPixel) {
					r = (pixel >> 16 & 255) - (otherPixel >> 16 & 255);
					g = (pixel >> 8 & 255) - (otherPixel >> 8 & 255);
					b = (pixel & 255) - (otherPixel & 255);
					if(r < 0) r *= -1;
					if(g < 0) g *= -1;
					if(b < 0) b *= -1;
					if(r == 0 && g == 0 && b == 0) {
						a = (pixel >> 24 & 255) - (otherPixel >> 24 & 255);
						if(a != 0) {
							comparePixel = (comparePixel >> 24 & 255 & 255) << 24 | 16711680 | (comparePixel >> 8 & 255 & 255) << 8 | comparePixel & 255 & 255;
							255;
							comparePixel = (comparePixel >> 24 & 255 & 255) << 24 | (comparePixel >> 16 & 255 & 255) << 16 | 65280 | comparePixel & 255 & 255;
							255;
							comparePixel = (comparePixel >> 24 & 255 & 255) << 24 | (comparePixel >> 16 & 255 & 255) << 16 | (comparePixel >> 8 & 255 & 255) << 8 | 255;
							255;
							comparePixel = (a & 255) << 24 | (comparePixel >> 16 & 255 & 255) << 16 | (comparePixel >> 8 & 255 & 255) << 8 | comparePixel & 255 & 255;
							a;
							foundDifference = true;
						}
					} else {
						comparePixel = (comparePixel >> 24 & 255 & 255) << 24 | (r & 255) << 16 | (comparePixel >> 8 & 255 & 255) << 8 | comparePixel & 255 & 255;
						r;
						comparePixel = (comparePixel >> 24 & 255 & 255) << 24 | (comparePixel >> 16 & 255 & 255) << 16 | (g & 255) << 8 | comparePixel & 255 & 255;
						g;
						comparePixel = (comparePixel >> 24 & 255 & 255) << 24 | (comparePixel >> 16 & 255 & 255) << 16 | (comparePixel >> 8 & 255 & 255) << 8 | b & 255;
						b;
						comparePixel = -16777216 | (comparePixel >> 16 & 255 & 255) << 16 | (comparePixel >> 8 & 255 & 255) << 8 | comparePixel & 255 & 255;
						255;
						foundDifference = true;
					}
				}
				if(foundDifference) {
					if(bitmapData == null) bitmapData = new openfl_display_BitmapData(this.width,this.height,this.transparent || otherBitmapData.transparent,0);
					bitmapData.setPixel32(x,y,comparePixel);
				}
			}
		}
		if(bitmapData == null) return 0;
		return bitmapData;
	}
	,copyChannel: function(sourceBitmapData,sourceRect,destPoint,sourceChannel,destChannel) {
		if(!this.readable) return;
		var sourceChannel1;
		switch(sourceChannel) {
		case 1:
			sourceChannel1 = lime_graphics_ImageChannel.RED;
			break;
		case 2:
			sourceChannel1 = lime_graphics_ImageChannel.GREEN;
			break;
		case 4:
			sourceChannel1 = lime_graphics_ImageChannel.BLUE;
			break;
		case 8:
			sourceChannel1 = lime_graphics_ImageChannel.ALPHA;
			break;
		default:
			return;
		}
		var destChannel1;
		switch(destChannel) {
		case 1:
			destChannel1 = lime_graphics_ImageChannel.RED;
			break;
		case 2:
			destChannel1 = lime_graphics_ImageChannel.GREEN;
			break;
		case 4:
			destChannel1 = lime_graphics_ImageChannel.BLUE;
			break;
		case 8:
			destChannel1 = lime_graphics_ImageChannel.ALPHA;
			break;
		default:
			return;
		}
		this.image.copyChannel(sourceBitmapData.image,sourceRect.__toLimeRectangle(),destPoint.__toLimeVector2(),sourceChannel1,destChannel1);
	}
	,copyPixels: function(sourceBitmapData,sourceRect,destPoint,alphaBitmapData,alphaPoint,mergeAlpha) {
		if(mergeAlpha == null) mergeAlpha = false;
		if(!this.readable || sourceBitmapData == null) return;
		this.image.copyPixels(sourceBitmapData.image,sourceRect.__toLimeRectangle(),destPoint.__toLimeVector2(),alphaBitmapData != null?alphaBitmapData.image:null,alphaPoint != null?alphaPoint.__toLimeVector2():null,mergeAlpha);
	}
	,dispose: function() {
		this.image = null;
		this.width = 0;
		this.height = 0;
		this.rect = null;
		this.__isValid = false;
		this.readable = false;
		this.__surface = null;
		this.__buffer = null;
		this.__framebuffer = null;
		this.__texture = null;
	}
	,disposeImage: function() {
		this.readable = false;
	}
	,draw: function(source,matrix,colorTransform,blendMode,clipRect,smoothing) {
		if(smoothing == null) smoothing = false;
		if(matrix == null) {
			matrix = new openfl_geom_Matrix();
			if(source.__transform != null) {
				matrix.copyFrom(source.__transform);
				matrix.tx = 0;
				matrix.ty = 0;
			}
		}
		if(!this.readable) {
			if(lime_graphics_opengl_GL.context != null) {
				var gl = lime_graphics_opengl_GL.context;
				gl.bindFramebuffer(gl.FRAMEBUFFER,this.__getFramebuffer(gl));
				gl.viewport(0,0,this.width,this.height);
				var renderer = new openfl__$internal_renderer_opengl_GLRenderer(openfl_Lib.current.stage,gl,false);
				renderer.resize(this.width,this.height);
				var renderSession = renderer.renderSession;
				renderSession.shaderManager = (js_Boot.__cast(openfl_Lib.current.stage.__renderer , openfl__$internal_renderer_opengl_GLRenderer)).renderSession.shaderManager;
				var matrixCache = source.__worldTransform;
				source.__updateTransforms(matrix);
				source.__updateChildren(false);
				source.__renderGL(renderer.renderSession);
				source.__updateTransforms(matrixCache);
				source.__updateChildren(true);
				gl.bindFramebuffer(gl.FRAMEBUFFER,null);
			}
		} else {
			if(colorTransform != null) {
				var width = Math.ceil(Reflect.getProperty(source,"width"));
				var height = Math.ceil(Reflect.getProperty(source,"height"));
				var copy = new openfl_display_BitmapData(width,height,true,0);
				copy.draw(source);
				copy.colorTransform(copy.rect,colorTransform);
				source = copy;
			}
			lime_graphics_utils_ImageCanvasUtil.convertToCanvas(this.image);
			var buffer = this.image.buffer;
			var renderSession1 = new openfl__$internal_renderer_RenderSession();
			renderSession1.context = buffer.__srcContext;
			renderSession1.allowSmoothing = smoothing;
			renderSession1.roundPixels = true;
			renderSession1.maskManager = new openfl__$internal_renderer_canvas_CanvasMaskManager(renderSession1);
			if(!smoothing) {
				buffer.__srcContext.mozImageSmoothingEnabled = false;
				buffer.__srcContext.msImageSmoothingEnabled = false;
				buffer.__srcContext.imageSmoothingEnabled = false;
			}
			if(clipRect != null) renderSession1.maskManager.pushRect(clipRect,new openfl_geom_Matrix());
			var matrixCache1 = source.__worldTransform;
			source.__updateTransforms(matrix);
			source.__updateChildren(false);
			source.__renderCanvas(renderSession1);
			source.__updateTransforms(matrixCache1);
			source.__updateChildren(true);
			if(!smoothing) {
				buffer.__srcContext.mozImageSmoothingEnabled = true;
				buffer.__srcContext.msImageSmoothingEnabled = true;
				buffer.__srcContext.imageSmoothingEnabled = true;
			}
			if(clipRect != null) renderSession1.maskManager.popRect();
			buffer.__srcContext.setTransform(1,0,0,1,0,0);
			buffer.__srcImageData = null;
			buffer.data = null;
			this.image.dirty = true;
			this.image.version++;
		}
	}
	,drawWithQuality: function(source,matrix,colorTransform,blendMode,clipRect,smoothing,quality) {
		if(smoothing == null) smoothing = false;
		this.draw(source,matrix,colorTransform,blendMode,clipRect,smoothing);
	}
	,encode: function(rect,compressor,byteArray) {
		if(!this.readable || rect == null) return byteArray = null;
		if(byteArray == null) byteArray = new openfl_utils_ByteArrayData(0);
		if(js_Boot.__instanceof(compressor,openfl_display_PNGEncoderOptions)) {
			byteArray.writeBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(this.image.encode("png")));
			return byteArray;
		} else if(js_Boot.__instanceof(compressor,openfl_display_JPEGEncoderOptions)) {
			byteArray.writeBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(this.image.encode("jpg",(js_Boot.__cast(compressor , openfl_display_JPEGEncoderOptions)).quality)));
			return byteArray;
		}
		return byteArray = null;
	}
	,fillRect: function(rect,color) {
		if(rect == null) return;
		if(this.transparent && (color & -16777216) == 0) color = 0;
		if(this.readable) this.image.fillRect(rect.__toLimeRectangle(),color,1); else if(this.__framebuffer != null) {
			var gl = lime_graphics_opengl_GL.context;
			var color1 = color;
			var useScissor = !this.rect.equals(rect);
			gl.bindFramebuffer(gl.FRAMEBUFFER,this.__framebuffer);
			if(useScissor) {
				gl.enable(gl.SCISSOR_TEST);
				gl.scissor(Math.round(rect.x),Math.round(rect.y),Math.round(rect.width),Math.round(rect.height));
			}
			gl.clearColor((color1 >> 16 & 255) / 255,(color1 >> 8 & 255) / 255,(color1 & 255) / 255,(color1 >> 24 & 255) / 255);
			gl.clear(gl.COLOR_BUFFER_BIT);
			if(useScissor) gl.disable(gl.SCISSOR_TEST);
			gl.bindFramebuffer(gl.FRAMEBUFFER,null);
		}
	}
	,floodFill: function(x,y,color) {
		if(!this.readable) return;
		this.image.floodFill(x,y,color,1);
	}
	,generateFilterRect: function(sourceRect,filter) {
		return sourceRect.clone();
	}
	,getBuffer: function(gl,alpha) {
		if(this.__buffer == null) {
			var uvWidth = 1;
			var uvHeight = 1;
			var array = [this.width,this.height,0,uvWidth,uvHeight,alpha,0,this.height,0,0,uvHeight,alpha,this.width,0,0,uvWidth,0,alpha,0,0,0,0,0,alpha];
			var this1;
			if(array != null) this1 = new Float32Array(array); else this1 = null;
			this.__bufferData = this1;
			this.__bufferAlpha = alpha;
			this.__buffer = gl.createBuffer();
			gl.bindBuffer(gl.ARRAY_BUFFER,this.__buffer);
			gl.bufferData(gl.ARRAY_BUFFER,this.__bufferData,gl.STATIC_DRAW);
		} else if(this.__bufferAlpha != alpha) {
			this.__bufferData[5] = alpha;
			this.__bufferData[11] = alpha;
			this.__bufferData[17] = alpha;
			this.__bufferData[23] = alpha;
			this.__bufferAlpha = alpha;
			gl.bindBuffer(gl.ARRAY_BUFFER,this.__buffer);
			gl.bufferData(gl.ARRAY_BUFFER,this.__bufferData,gl.STATIC_DRAW);
		}
		return this.__buffer;
	}
	,getColorBoundsRect: function(mask,color,findColor) {
		if(findColor == null) findColor = true;
		if(!this.readable) return new openfl_geom_Rectangle(0,0,this.width,this.height);
		if(!this.transparent || (mask >> 24 & 255) > 0) {
			var color1 = color;
			if((color1 >> 24 & 255) == 0) color1 = 0;
		}
		var rect = this.image.getColorBoundsRect(mask,color,findColor,1);
		return new openfl_geom_Rectangle(rect.x,rect.y,rect.width,rect.height);
	}
	,getPixel: function(x,y) {
		if(!this.readable) return 0;
		return this.image.getPixel(x,y,1);
	}
	,getPixel32: function(x,y) {
		if(!this.readable) return 0;
		return this.image.getPixel32(x,y,1);
	}
	,getPixels: function(rect) {
		if(!this.readable) return null;
		if(rect == null) rect = this.rect;
		return openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(this.image.getPixels(rect.__toLimeRectangle(),1));
	}
	,getSurface: function() {
		if(!this.readable) return null;
		if(this.__surface == null) this.__surface = lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.fromImage(this.image);
		return this.__surface;
	}
	,getTexture: function(gl) {
		if(!this.__isValid) return null;
		if(this.__texture == null) {
			this.__texture = gl.createTexture();
			gl.bindTexture(gl.TEXTURE_2D,this.__texture);
			gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_S,gl.CLAMP_TO_EDGE);
			gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_T,gl.CLAMP_TO_EDGE);
			gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MAG_FILTER,gl.NEAREST);
			gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,gl.NEAREST);
			this.__textureVersion = -1;
		}
		lime_graphics_utils_ImageCanvasUtil.sync(this.image,false);
		if(this.image != null && this.image.version != this.__textureVersion) {
			var internalFormat;
			var format;
			if(this.__surface != null) lime_graphics_cairo__$CairoSurface_CairoSurface_$Impl_$.flush(this.__surface);
			if(this.image.buffer.bitsPerPixel == 1) {
				internalFormat = gl.ALPHA;
				format = gl.ALPHA;
			} else {
				internalFormat = gl.RGBA;
				format = gl.RGBA;
			}
			gl.bindTexture(gl.TEXTURE_2D,this.__texture);
			var textureImage = this.image;
			if(textureImage.type != lime_graphics_ImageType.DATA && !textureImage.get_premultiplied()) gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL,1); else if(!textureImage.get_premultiplied() && textureImage.get_transparent()) gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL,1);
			if(textureImage.get_format() != 0) {
				textureImage = textureImage.clone();
				textureImage.set_format(0);
			}
			if(textureImage.type == lime_graphics_ImageType.DATA) gl.texImage2D(gl.TEXTURE_2D,0,internalFormat,textureImage.buffer.width,textureImage.buffer.height,0,format,gl.UNSIGNED_BYTE,textureImage.get_data()); else gl.texImage2D(gl.TEXTURE_2D,0,internalFormat,format,gl.UNSIGNED_BYTE,textureImage.get_src());
			gl.bindTexture(gl.TEXTURE_2D,null);
			this.__textureVersion = this.image.version;
		}
		if(!this.readable && this.image != null) {
			this.__surface = null;
			this.image = null;
		}
		return this.__texture;
	}
	,getVector: function(rect) {
		var pixels = this.getPixels(rect);
		var length = Std["int"](openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(pixels) / 4);
		var result = openfl__$Vector_Vector_$Impl_$.toIntVector(null,length,true);
		var _g = 0;
		while(_g < length) {
			var i = _g++;
			var value = pixels.readUnsignedInt();
			result.set(i,value);
		}
		return result;
	}
	,histogram: function(hRect) {
		var rect;
		if(hRect != null) rect = hRect; else rect = new openfl_geom_Rectangle(0,0,this.width,this.height);
		var pixels = this.getPixels(rect);
		var result;
		var _g = [];
		var _g1 = 0;
		while(_g1 < 4) {
			var i = _g1++;
			_g.push((function($this) {
				var $r;
				var _g2 = [];
				{
					var _g3 = 0;
					while(_g3 < 256) {
						var j = _g3++;
						_g2.push(0);
					}
				}
				$r = _g2;
				return $r;
			}(this)));
		}
		result = _g;
		var _g21 = 0;
		var _g11 = openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(pixels);
		while(_g21 < _g11) {
			var i1 = _g21++;
			++result[i1 % 4][pixels.readUnsignedByte()];
		}
		return result;
	}
	,hitTest: function(firstPoint,firstAlphaThreshold,secondObject,secondBitmapDataPoint,secondAlphaThreshold) {
		if(secondAlphaThreshold == null) secondAlphaThreshold = 1;
		if(!this.readable) return false;
		if(js_Boot.__instanceof(secondObject,openfl_display_Bitmap)) secondObject = (js_Boot.__cast(secondObject , openfl_display_Bitmap)).bitmapData;
		if(js_Boot.__instanceof(secondObject,openfl_geom_Point)) {
			var secondPoint = secondObject;
			var x = secondPoint.x - firstPoint.x | 0;
			var y = secondPoint.y - firstPoint.y | 0;
			if(this.rect.contains(x,y)) {
				var pixel = this.getPixel32(x,y);
				if((pixel >> 24 & 255) >= firstAlphaThreshold) return true;
			}
		} else if(js_Boot.__instanceof(secondObject,openfl_display_BitmapData)) {
			var secondBitmapData = secondObject;
			var x1;
			var y1;
			if(secondBitmapDataPoint == null) {
				x1 = 0;
				y1 = 0;
			} else {
				x1 = secondBitmapDataPoint.x - firstPoint.x | 0;
				y1 = secondBitmapDataPoint.y - firstPoint.y | 0;
			}
			if(this.rect.contains(x1,y1)) {
				var hitRect = openfl_geom_Rectangle.__temp;
				hitRect.setTo(x1,y1,Math.min(secondBitmapData.width,this.width - x1),Math.min(secondBitmapData.height,this.height - y1));
				var pixels = this.getPixels(hitRect);
				hitRect.offset(-x1,-y1);
				var testPixels = secondBitmapData.getPixels(hitRect);
				var length = hitRect.width * hitRect.height | 0;
				var pixel1;
				var testPixel;
				var _g = 0;
				while(_g < length) {
					var i = _g++;
					pixel1 = pixels.readUnsignedInt();
					testPixel = testPixels.readUnsignedInt();
					if((pixel1 >> 24 & 255) >= firstAlphaThreshold && (testPixel >> 24 & 255) >= secondAlphaThreshold) return true;
				}
				return false;
			}
		} else if(js_Boot.__instanceof(secondObject,openfl_geom_Rectangle)) {
			var secondRectangle = openfl_geom_Rectangle.__temp;
			secondRectangle.copyFrom(secondObject);
			secondRectangle.offset(-firstPoint.x,-firstPoint.y);
			secondRectangle.__contract(0,0,this.width,this.height);
			if(secondRectangle.width > 0 && secondRectangle.height > 0) {
				var pixels1 = this.getPixels(secondRectangle);
				var length1 = Std["int"](openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(pixels1) / 4);
				var pixel2;
				var _g1 = 0;
				while(_g1 < length1) {
					var i1 = _g1++;
					pixel2 = pixels1.readUnsignedInt();
					if((pixel2 >> 24 & 255) >= firstAlphaThreshold) return true;
				}
			}
		}
		return false;
	}
	,lock: function() {
	}
	,merge: function(sourceBitmapData,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier) {
		if(!this.readable || sourceBitmapData == null || !sourceBitmapData.readable || sourceRect == null || destPoint == null) return;
		this.image.merge(sourceBitmapData.image,sourceRect.__toLimeRectangle(),destPoint.__toLimeVector2(),redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
	}
	,noise: function(randomSeed,low,high,channelOptions,grayScale) {
		if(grayScale == null) grayScale = false;
		if(channelOptions == null) channelOptions = 7;
		if(high == null) high = 255;
		if(low == null) low = 0;
		if(!this.readable) return;
		var rand;
		var func = function() {
			randomSeed = randomSeed * 1103515245 + 12345;
			return Std["int"](Math.abs(randomSeed / 65536)) % 32768;
		};
		rand = func;
		rand();
		var range = high - low;
		var data = new openfl_utils_ByteArrayData(0);
		var redChannel = (channelOptions & 1) == 1;
		var greenChannel = (channelOptions & 2) >> 1 == 1;
		var blueChannel = (channelOptions & 4) >> 2 == 1;
		var alphaChannel = (channelOptions & 8) >> 3 == 1;
		var _g1 = 0;
		var _g = this.height;
		while(_g1 < _g) {
			var y = _g1++;
			var _g3 = 0;
			var _g2 = this.width;
			while(_g3 < _g2) {
				var x = _g3++;
				var red = 0;
				var blue = 0;
				var green = 0;
				var alpha = 255;
				if(grayScale) {
					red = green = blue = low + rand() % range;
					alpha = 255;
				} else {
					if(redChannel) red = low + rand() % range;
					if(greenChannel) green = low + rand() % range;
					if(blueChannel) blue = low + rand() % range;
					if(alphaChannel) alpha = low + rand() % range;
				}
				var rgb = alpha;
				rgb = (rgb << 8) + red;
				rgb = (rgb << 8) + green;
				rgb = (rgb << 8) + blue;
				this.setPixel32(x,y,rgb);
			}
		}
	}
	,paletteMap: function(sourceBitmapData,sourceRect,destPoint,redArray,greenArray,blueArray,alphaArray) {
		var sw = sourceRect.width | 0;
		var sh = sourceRect.height | 0;
		var pixels = this.getPixels(sourceRect);
		pixels.position = 0;
		var pixelValue;
		var r;
		var g;
		var b;
		var a;
		var color;
		var c1;
		var c2;
		var c3;
		var c4;
		var _g1 = 0;
		var _g = sh * sw;
		while(_g1 < _g) {
			var i = _g1++;
			pixelValue = pixels.readUnsignedInt();
			if(alphaArray == null) c1 = pixelValue & -16777216; else c1 = alphaArray[pixelValue >> 24 & 255];
			if(redArray == null) c2 = pixelValue & 16711680; else c2 = redArray[pixelValue >> 16 & 255];
			if(greenArray == null) c3 = pixelValue & 65280; else c3 = greenArray[pixelValue >> 8 & 255];
			if(blueArray == null) c4 = pixelValue & 255; else c4 = blueArray[pixelValue & 255];
			a = (c1 >> 24 & 255) + (c2 >> 24 & 255) + (c3 >> 24 & 255) + (c4 >> 24 & 255);
			if(a > 255) a == 255;
			r = (c1 >> 16 & 255) + (c2 >> 16 & 255) + (c3 >> 16 & 255) + (c4 >> 16 & 255);
			if(r > 255) r == 255;
			g = (c1 >> 8 & 255) + (c2 >> 8 & 255) + (c3 >> 8 & 255) + (c4 >> 8 & 255);
			if(g > 255) g == 255;
			b = (c1 & 255) + (c2 & 255) + (c3 & 255) + (c4 & 255);
			if(b > 255) b == 255;
			color = a << 24 | r << 16 | g << 8 | b;
			pixels.position = i * 4;
			pixels.writeUnsignedInt(color);
		}
		pixels.position = 0;
		var destRect = new openfl_geom_Rectangle(destPoint.x,destPoint.y,sw,sh);
		this.setPixels(destRect,pixels);
	}
	,perlinNoise: function(baseX,baseY,numOctaves,randomSeed,stitch,fractalNoise,channelOptions,grayScale,offsets) {
		if(grayScale == null) grayScale = false;
		if(channelOptions == null) channelOptions = 7;
		if(!this.readable) return;
		var noise = new openfl__$internal_utils_PerlinNoise(randomSeed,numOctaves,0.01);
		noise.fill(this,baseX,baseY,0);
	}
	,scroll: function(x,y) {
		if(!this.readable) return;
		this.image.scroll(x,y);
	}
	,setPixel: function(x,y,color) {
		if(!this.readable) return;
		this.image.setPixel(x,y,color,1);
	}
	,setPixel32: function(x,y,color) {
		if(!this.readable) return;
		this.image.setPixel32(x,y,color,1);
	}
	,setPixels: function(rect,byteArray) {
		if(!this.readable || rect == null) return;
		this.image.setPixels(rect.__toLimeRectangle(),openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytes(byteArray),1);
	}
	,setVector: function(rect,inputVector) {
		var byteArray = new openfl_utils_ByteArrayData(0);
		openfl_utils__$ByteArray_ByteArray_$Impl_$.set_length(byteArray,inputVector.get_length() * 4);
		var _g = 0;
		while(_g < inputVector.get_length()) {
			var color = inputVector.get(_g);
			++_g;
			byteArray.writeUnsignedInt(color);
		}
		byteArray.position = 0;
		this.setPixels(rect,byteArray);
	}
	,threshold: function(sourceBitmapData,sourceRect,destPoint,operation,threshold,color,mask,copySource) {
		if(copySource == null) copySource = false;
		if(mask == null) mask = -1;
		if(color == null) color = 0;
		if(sourceBitmapData == null || sourceRect == null || destPoint == null || sourceRect.x > sourceBitmapData.width || sourceRect.y > sourceBitmapData.height || destPoint.x > this.width || destPoint.y > this.height) return 0;
		return this.image.threshold(sourceBitmapData.image,sourceRect.__toLimeRectangle(),destPoint.__toLimeVector2(),operation,threshold,color,mask,copySource,1);
	}
	,unlock: function(changeRect) {
	}
	,__fromBase64: function(base64,type,onload) {
		var _g = this;
		lime_graphics_Image.fromBase64(base64,type,function(image) {
			_g.__fromImage(image);
			if(onload != null) onload(_g);
		});
	}
	,__fromBytes: function(bytes,rawAlpha,onload) {
		var _g = this;
		lime_graphics_Image.fromBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytes(bytes),function(image) {
			_g.__fromImage(image);
			if(rawAlpha != null) {
				lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
				lime_graphics_utils_ImageCanvasUtil.createImageData(image);
				var data = image.buffer.data;
				var _g2 = 0;
				var _g1 = openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(rawAlpha);
				while(_g2 < _g1) {
					var i = _g2++;
					var val = rawAlpha.readUnsignedByte();
					data[i * 4 + 3] = val;
				}
				image.version++;
			}
			if(onload != null) onload(_g);
		});
	}
	,__fromFile: function(path,onload,onerror) {
		var _g = this;
		lime_graphics_Image.fromFile(path,function(image) {
			_g.__fromImage(image);
			if(onload != null) onload(_g);
		},onerror);
	}
	,__fromImage: function(image) {
		if(image != null && image.buffer != null) {
			this.image = image;
			this.width = image.width;
			this.height = image.height;
			this.rect = new openfl_geom_Rectangle(0,0,image.width,image.height);
			this.readable = true;
			this.__isValid = true;
		}
	}
	,__getFramebuffer: function(gl) {
		if(this.__framebuffer == null) {
			this.getTexture(gl);
			this.__framebuffer = gl.createFramebuffer();
			gl.bindFramebuffer(gl.FRAMEBUFFER,this.__framebuffer);
			gl.framebufferTexture2D(gl.FRAMEBUFFER,gl.COLOR_ATTACHMENT0,gl.TEXTURE_2D,this.__texture,0);
		}
		return this.__framebuffer;
	}
	,__renderCairo: function(renderSession) {
		if(!this.readable) return;
		var cairo = renderSession.cairo;
		if(this.__worldTransform == null) this.__worldTransform = new openfl_geom_Matrix();
		var transform = this.__worldTransform;
		if(renderSession.roundPixels) {
			var matrix = transform.__toMatrix3();
			matrix.tx = Math.round(matrix.tx);
			matrix.ty = Math.round(matrix.ty);
			cairo.set_matrix(matrix);
		} else cairo.set_matrix(transform.__toMatrix3());
		var surface = this.getSurface();
		if(surface != null) {
			var pattern = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createForSurface(surface);
			if(!renderSession.allowSmoothing || cairo.get_antialias() == 1) lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_filter(pattern,3); else lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_filter(pattern,1);
			cairo.set_source(pattern);
			cairo.paint();
		}
	}
	,__renderCairoMask: function(renderSession) {
	}
	,__renderCanvas: function(renderSession) {
		if(!this.readable) return;
		if(this.image.type == lime_graphics_ImageType.DATA) lime_graphics_utils_ImageCanvasUtil.convertToCanvas(this.image);
		var context = renderSession.context;
		if(this.__worldTransform == null) this.__worldTransform = new openfl_geom_Matrix();
		context.globalAlpha = 1;
		var transform = this.__worldTransform;
		if(renderSession.roundPixels) context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx | 0,transform.ty | 0); else context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
		context.drawImage(this.image.get_src(),0,0);
	}
	,__renderCanvasMask: function(renderSession) {
	}
	,__renderGL: function(renderSession) {
		var renderer = renderSession.renderer;
		var gl = renderSession.gl;
		renderSession.blendModeManager.setBlendMode(10);
		var shader = renderSession.shaderManager.defaultShader;
		shader.get_data().uImage0.input = this;
		shader.get_data().uImage0.smoothing = renderSession.allowSmoothing && renderSession.upscaled;
		shader.get_data().uMatrix.value = renderer.getMatrix(this.__worldTransform);
		renderSession.shaderManager.setShader(shader);
		gl.bindBuffer(gl.ARRAY_BUFFER,this.getBuffer(gl,1));
		gl.vertexAttribPointer(shader.get_data().aPosition.index,3,gl.FLOAT,false,24,0);
		gl.vertexAttribPointer(shader.get_data().aTexCoord.index,2,gl.FLOAT,false,24,12);
		gl.vertexAttribPointer(shader.get_data().aAlpha.index,1,gl.FLOAT,false,24,20);
		gl.drawArrays(gl.TRIANGLE_STRIP,0,4);
	}
	,__resize: function(width,height) {
		this.width = width;
		this.height = height;
		this.rect.width = width;
		this.rect.height = height;
	}
	,__sync: function() {
		lime_graphics_utils_ImageCanvasUtil.sync(this.image,false);
	}
	,__updateChildren: function(transformOnly) {
	}
	,__updateMask: function(maskGraphics) {
	}
	,__updateTransforms: function(overrideTransform) {
		if(overrideTransform == null) this.__worldTransform.identity(); else this.__worldTransform = overrideTransform;
	}
	,__class__: openfl_display_BitmapData
};
var openfl_display__$BlendMode_BlendMode_$Impl_$ = {};
$hxClasses["openfl.display._BlendMode.BlendMode_Impl_"] = openfl_display__$BlendMode_BlendMode_$Impl_$;
openfl_display__$BlendMode_BlendMode_$Impl_$.__name__ = ["openfl","display","_BlendMode","BlendMode_Impl_"];
openfl_display__$BlendMode_BlendMode_$Impl_$.fromString = function(value) {
	switch(value) {
	case "add":
		return 0;
	case "alpha":
		return 1;
	case "darken":
		return 2;
	case "difference":
		return 3;
	case "erase":
		return 4;
	case "hardlight":
		return 5;
	case "invert":
		return 6;
	case "layer":
		return 7;
	case "lighten":
		return 8;
	case "multiply":
		return 9;
	case "normal":
		return 10;
	case "overlay":
		return 11;
	case "screen":
		return 12;
	case "shader":
		return 13;
	case "subtract":
		return 14;
	default:
		return null;
	}
};
openfl_display__$BlendMode_BlendMode_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "add";
	case 1:
		return "alpha";
	case 2:
		return "darken";
	case 3:
		return "difference";
	case 4:
		return "erase";
	case 5:
		return "hardlight";
	case 6:
		return "invert";
	case 7:
		return "layer";
	case 8:
		return "lighten";
	case 9:
		return "multiply";
	case 10:
		return "normal";
	case 11:
		return "overlay";
	case 12:
		return "screen";
	case 13:
		return "shader";
	case 14:
		return "subtract";
	default:
		return null;
	}
};
var openfl_display__$CapsStyle_CapsStyle_$Impl_$ = {};
$hxClasses["openfl.display._CapsStyle.CapsStyle_Impl_"] = openfl_display__$CapsStyle_CapsStyle_$Impl_$;
openfl_display__$CapsStyle_CapsStyle_$Impl_$.__name__ = ["openfl","display","_CapsStyle","CapsStyle_Impl_"];
openfl_display__$CapsStyle_CapsStyle_$Impl_$.fromString = function(value) {
	switch(value) {
	case "none":
		return 0;
	case "round":
		return 1;
	case "square":
		return 2;
	default:
		return null;
	}
};
openfl_display__$CapsStyle_CapsStyle_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "none";
	case 1:
		return "round";
	case 2:
		return "square";
	default:
		return null;
	}
};
var openfl_display_DirectRenderer = function(type) {
	if(type == null) type = "DirectRenderer";
	openfl_display_DisplayObject.call(this);
};
$hxClasses["openfl.display.DirectRenderer"] = openfl_display_DirectRenderer;
openfl_display_DirectRenderer.__name__ = ["openfl","display","DirectRenderer"];
openfl_display_DirectRenderer.__super__ = openfl_display_DisplayObject;
openfl_display_DirectRenderer.prototype = $extend(openfl_display_DisplayObject.prototype,{
	__render: null
	,get_render: function() {
		return this.__render;
	}
	,set_render: function(value) {
		return this.__render = value;
	}
	,__class__: openfl_display_DirectRenderer
	,__properties__: $extend(openfl_display_DisplayObject.prototype.__properties__,{set_render:"set_render",get_render:"get_render"})
});
var openfl_display_FrameLabel = function(name,frame) {
	openfl_events_EventDispatcher.call(this);
	this.__name = name;
	this.__frame = frame;
};
$hxClasses["openfl.display.FrameLabel"] = openfl_display_FrameLabel;
openfl_display_FrameLabel.__name__ = ["openfl","display","FrameLabel"];
openfl_display_FrameLabel.__super__ = openfl_events_EventDispatcher;
openfl_display_FrameLabel.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	__frame: null
	,__name: null
	,get_frame: function() {
		return this.__frame;
	}
	,get_name: function() {
		return this.__name;
	}
	,__class__: openfl_display_FrameLabel
	,__properties__: {get_name:"get_name",get_frame:"get_frame"}
});
var openfl_display__$GradientType_GradientType_$Impl_$ = {};
$hxClasses["openfl.display._GradientType.GradientType_Impl_"] = openfl_display__$GradientType_GradientType_$Impl_$;
openfl_display__$GradientType_GradientType_$Impl_$.__name__ = ["openfl","display","_GradientType","GradientType_Impl_"];
openfl_display__$GradientType_GradientType_$Impl_$.fromString = function(value) {
	switch(value) {
	case "linear":
		return 0;
	case "radial":
		return 1;
	default:
		return null;
	}
};
openfl_display__$GradientType_GradientType_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "linear";
	case 1:
		return "radial";
	default:
		return null;
	}
};
var openfl_display_Graphics = function(owner) {
	this.__dirty = true;
	this.__owner = owner;
	this.__commands = new openfl__$internal_renderer_DrawCommandBuffer();
	this.__strokePadding = 0;
	this.__positionX = 0;
	this.__positionY = 0;
	this.__renderTransform = new openfl_geom_Matrix();
	this.__worldTransform = new openfl_geom_Matrix();
	this.__width = 0;
	this.__height = 0;
	this.moveTo(0,0);
};
$hxClasses["openfl.display.Graphics"] = openfl_display_Graphics;
openfl_display_Graphics.__name__ = ["openfl","display","Graphics"];
openfl_display_Graphics.prototype = {
	__bounds: null
	,__commands: null
	,__dirty: null
	,__height: null
	,__managed: null
	,__positionX: null
	,__positionY: null
	,__renderTransform: null
	,__strokePadding: null
	,__transformDirty: null
	,__visible: null
	,__owner: null
	,__width: null
	,__worldTransform: null
	,__canvas: null
	,__context: null
	,__bitmap: null
	,beginBitmapFill: function(bitmap,matrix,repeat,smooth) {
		if(smooth == null) smooth = false;
		if(repeat == null) repeat = true;
		this.__commands.beginBitmapFill(bitmap,matrix != null?matrix.clone():null,repeat,smooth);
		this.__visible = true;
	}
	,beginFill: function(color,alpha) {
		if(alpha == null) alpha = 1;
		if(color == null) color = 0;
		this.__commands.beginFill(color & 16777215,alpha);
		if(alpha > 0) this.__visible = true;
	}
	,beginGradientFill: function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
		if(focalPointRatio == null) focalPointRatio = 0;
		if(interpolationMethod == null) interpolationMethod = 1;
		if(spreadMethod == null) spreadMethod = 0;
		this.__commands.beginGradientFill(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio);
		var _g = 0;
		while(_g < alphas.length) {
			var alpha = alphas[_g];
			++_g;
			if(alpha > 0) {
				this.__visible = true;
				break;
			}
		}
	}
	,clear: function() {
		this.__commands.clear();
		this.__strokePadding = 0;
		if(this.__bounds != null) {
			this.set___dirty(true);
			this.__transformDirty = true;
			this.__bounds = null;
		}
		this.__visible = false;
		this.moveTo(0,0);
	}
	,copyFrom: function(sourceGraphics) {
		if(sourceGraphics.__bounds != null) this.__bounds = sourceGraphics.__bounds.clone(); else this.__bounds = null;
		this.__commands = sourceGraphics.__commands.copy();
		this.set___dirty(true);
		this.__strokePadding = sourceGraphics.__strokePadding;
		this.__positionX = sourceGraphics.__positionX;
		this.__positionY = sourceGraphics.__positionY;
		this.__transformDirty = true;
		this.__visible = sourceGraphics.__visible;
	}
	,cubicCurveTo: function(controlX1,controlY1,controlX2,controlY2,anchorX,anchorY) {
		this.__inflateBounds(this.__positionX - this.__strokePadding,this.__positionY - this.__strokePadding);
		this.__inflateBounds(this.__positionX + this.__strokePadding,this.__positionY + this.__strokePadding);
		var ix1;
		var iy1;
		var ix2;
		var iy2;
		ix1 = anchorX;
		ix2 = anchorX;
		if(!((controlX1 < anchorX && controlX1 > this.__positionX || controlX1 > anchorX && controlX1 < this.__positionX) && (controlX2 < anchorX && controlX2 > this.__positionX || controlX2 > anchorX && controlX2 < this.__positionX))) {
			var u = 2 * this.__positionX - 4 * controlX1 + 2 * controlX2;
			var v = controlX1 - this.__positionX;
			var w = -this.__positionX + 3 * controlX1 + anchorX - 3 * controlX2;
			var t1 = (-u + Math.sqrt(u * u - 4 * v * w)) / (2 * w);
			var t2 = (-u - Math.sqrt(u * u - 4 * v * w)) / (2 * w);
			if(t1 > 0 && t1 < 1) ix1 = this.__calculateBezierCubicPoint(t1,this.__positionX,controlX1,controlX2,anchorX);
			if(t2 > 0 && t2 < 1) ix2 = this.__calculateBezierCubicPoint(t2,this.__positionX,controlX1,controlX2,anchorX);
		}
		iy1 = anchorY;
		iy2 = anchorY;
		if(!((controlY1 < anchorY && controlY1 > this.__positionX || controlY1 > anchorY && controlY1 < this.__positionX) && (controlY2 < anchorY && controlY2 > this.__positionX || controlY2 > anchorY && controlY2 < this.__positionX))) {
			var u1 = 2 * this.__positionX - 4 * controlY1 + 2 * controlY2;
			var v1 = controlY1 - this.__positionX;
			var w1 = -this.__positionX + 3 * controlY1 + anchorY - 3 * controlY2;
			var t11 = (-u1 + Math.sqrt(u1 * u1 - 4 * v1 * w1)) / (2 * w1);
			var t21 = (-u1 - Math.sqrt(u1 * u1 - 4 * v1 * w1)) / (2 * w1);
			if(t11 > 0 && t11 < 1) iy1 = this.__calculateBezierCubicPoint(t11,this.__positionX,controlY1,controlY2,anchorY);
			if(t21 > 0 && t21 < 1) iy2 = this.__calculateBezierCubicPoint(t21,this.__positionX,controlY1,controlY2,anchorY);
		}
		this.__inflateBounds(ix1 - this.__strokePadding,iy1 - this.__strokePadding);
		this.__inflateBounds(ix1 + this.__strokePadding,iy1 + this.__strokePadding);
		this.__inflateBounds(ix2 - this.__strokePadding,iy2 - this.__strokePadding);
		this.__inflateBounds(ix2 + this.__strokePadding,iy2 + this.__strokePadding);
		this.__positionX = anchorX;
		this.__positionY = anchorY;
		this.__commands.cubicCurveTo(controlX1,controlY1,controlX2,controlY2,anchorX,anchorY);
		this.set___dirty(true);
	}
	,curveTo: function(controlX,controlY,anchorX,anchorY) {
		this.__inflateBounds(this.__positionX - this.__strokePadding,this.__positionY - this.__strokePadding);
		this.__inflateBounds(this.__positionX + this.__strokePadding,this.__positionY + this.__strokePadding);
		var ix;
		var iy;
		if(controlX < anchorX && controlX > this.__positionX || controlX > anchorX && controlX < this.__positionX) ix = anchorX; else {
			var tx = (this.__positionX - controlX) / (this.__positionX - 2 * controlX + anchorX);
			ix = this.__calculateBezierQuadPoint(tx,this.__positionX,controlX,anchorX);
		}
		if(controlY < anchorY && controlY > this.__positionY || controlY > anchorY && controlY < this.__positionY) iy = anchorY; else {
			var ty = (this.__positionY - controlY) / (this.__positionY - 2 * controlY + anchorY);
			iy = this.__calculateBezierQuadPoint(ty,this.__positionY,controlY,anchorY);
		}
		this.__inflateBounds(ix - this.__strokePadding,iy - this.__strokePadding);
		this.__inflateBounds(ix + this.__strokePadding,iy + this.__strokePadding);
		this.__positionX = anchorX;
		this.__positionY = anchorY;
		this.__commands.curveTo(controlX,controlY,anchorX,anchorY);
		this.set___dirty(true);
	}
	,drawCircle: function(x,y,radius) {
		if(radius <= 0) return;
		this.__inflateBounds(x - radius - this.__strokePadding,y - radius - this.__strokePadding);
		this.__inflateBounds(x + radius + this.__strokePadding,y + radius + this.__strokePadding);
		this.__commands.drawCircle(x,y,radius);
		this.set___dirty(true);
	}
	,drawEllipse: function(x,y,width,height) {
		if(width <= 0 || height <= 0) return;
		this.__inflateBounds(x - this.__strokePadding,y - this.__strokePadding);
		this.__inflateBounds(x + width + this.__strokePadding,y + height + this.__strokePadding);
		this.__commands.drawEllipse(x,y,width,height);
		this.set___dirty(true);
	}
	,drawGraphicsData: function(graphicsData) {
		var fill;
		var bitmapFill;
		var gradientFill;
		var stroke;
		var path;
		var _g = 0;
		while(_g < graphicsData.get_length()) {
			var graphics = graphicsData.get(_g);
			++_g;
			if(js_Boot.__instanceof(graphics,openfl_display_GraphicsSolidFill)) {
				fill = graphics;
				this.beginFill(fill.color,fill.alpha);
			} else if(js_Boot.__instanceof(graphics,openfl_display_GraphicsBitmapFill)) {
				bitmapFill = graphics;
				this.beginBitmapFill(bitmapFill.bitmapData,bitmapFill.matrix,bitmapFill.repeat,bitmapFill.smooth);
			} else if(js_Boot.__instanceof(graphics,openfl_display_GraphicsGradientFill)) {
				gradientFill = graphics;
				this.beginGradientFill(gradientFill.type,gradientFill.colors,gradientFill.alphas,gradientFill.ratios,gradientFill.matrix,gradientFill.spreadMethod,gradientFill.interpolationMethod,gradientFill.focalPointRatio);
			} else if(js_Boot.__instanceof(graphics,openfl_display_GraphicsStroke)) {
				stroke = graphics;
				if(js_Boot.__instanceof(stroke.fill,openfl_display_GraphicsSolidFill)) {
					fill = stroke.fill;
					this.lineStyle(stroke.thickness,fill.color,fill.alpha,stroke.pixelHinting,stroke.scaleMode,stroke.caps,stroke.joints,stroke.miterLimit);
				} else {
					this.lineStyle(stroke.thickness,0,1,stroke.pixelHinting,stroke.scaleMode,stroke.caps,stroke.joints,stroke.miterLimit);
					if(js_Boot.__instanceof(stroke.fill,openfl_display_GraphicsBitmapFill)) {
						bitmapFill = stroke.fill;
						this.lineBitmapStyle(bitmapFill.bitmapData,bitmapFill.matrix,bitmapFill.repeat,bitmapFill.smooth);
					} else if(js_Boot.__instanceof(stroke.fill,openfl_display_GraphicsGradientFill)) {
						gradientFill = stroke.fill;
						this.lineGradientStyle(gradientFill.type,gradientFill.colors,gradientFill.alphas,gradientFill.ratios,gradientFill.matrix,gradientFill.spreadMethod,gradientFill.interpolationMethod,gradientFill.focalPointRatio);
					}
				}
			} else if(js_Boot.__instanceof(graphics,openfl_display_GraphicsPath)) {
				path = graphics;
				this.drawPath(path.commands,path.data,path.winding);
			} else if(js_Boot.__instanceof(graphics,openfl_display_GraphicsEndFill)) this.endFill();
		}
	}
	,drawPath: function(commands,data,winding) {
		if(winding == null) winding = 0;
		var dataIndex = 0;
		var _g = 0;
		try {
			while(_g < commands.get_length()) {
				var command = commands.get(_g);
				++_g;
				switch(command) {
				case 1:
					this.moveTo(data.get(dataIndex),data.get(dataIndex + 1));
					dataIndex += 2;
					break;
				case 2:
					this.lineTo(data.get(dataIndex),data.get(dataIndex + 1));
					dataIndex += 2;
					break;
				case 4:
					this.moveTo(data.get(dataIndex + 2),data.get(dataIndex + 3));
					throw "__break__";
					dataIndex += 4;
					break;
				case 5:
					this.lineTo(data.get(dataIndex + 2),data.get(dataIndex + 3));
					throw "__break__";
					dataIndex += 4;
					break;
				case 3:
					this.curveTo(data.get(dataIndex),data.get(dataIndex + 1),data.get(dataIndex + 2),data.get(dataIndex + 3));
					dataIndex += 4;
					break;
				case 6:
					this.cubicCurveTo(data.get(dataIndex),data.get(dataIndex + 1),data.get(dataIndex + 2),data.get(dataIndex + 3),data.get(dataIndex + 4),data.get(dataIndex + 5));
					dataIndex += 6;
					break;
				default:
				}
			}
		} catch( e ) { if( e != "__break__" ) throw e; }
	}
	,drawRect: function(x,y,width,height) {
		if(width <= 0 || height <= 0) return;
		this.__inflateBounds(x - this.__strokePadding,y - this.__strokePadding);
		this.__inflateBounds(x + width + this.__strokePadding,y + height + this.__strokePadding);
		this.__commands.drawRect(x,y,width,height);
		this.set___dirty(true);
	}
	,drawRoundRect: function(x,y,width,height,ellipseWidth,ellipseHeight) {
		if(width <= 0 || height <= 0) return;
		this.__inflateBounds(x - this.__strokePadding,y - this.__strokePadding);
		this.__inflateBounds(x + width + this.__strokePadding,y + height + this.__strokePadding);
		this.__commands.drawRoundRect(x,y,width,height,ellipseWidth,ellipseHeight);
		this.set___dirty(true);
	}
	,drawRoundRectComplex: function(x,y,width,height,topLeftRadius,topRightRadius,bottomLeftRadius,bottomRightRadius) {
		openfl_Lib.notImplemented({ fileName : "Graphics.hx", lineNumber : 450, className : "openfl.display.Graphics", methodName : "drawRoundRectComplex"});
	}
	,drawTriangles: function(vertices,indices,uvtData,culling) {
		if(culling == null) culling = 1;
		var vlen = Std["int"](vertices.get_length() / 2);
		if(culling == null) culling = 1;
		if(indices == null) {
			if(vlen % 3 != 0) throw new js__$Boot_HaxeError(new openfl_errors_ArgumentError("Not enough vertices to close a triangle."));
			indices = openfl__$Vector_Vector_$Impl_$.toIntVector(null);
			var _g = 0;
			while(_g < vlen) {
				var i = _g++;
				indices.push(i);
			}
		}
		this.__inflateBounds(0,0);
		var tmpx = -Infinity;
		var tmpy = -Infinity;
		var maxX = -Infinity;
		var maxY = -Infinity;
		var _g1 = 0;
		while(_g1 < vlen) {
			var i1 = _g1++;
			tmpx = vertices.get(i1 * 2);
			tmpy = vertices.get(i1 * 2 + 1);
			if(maxX < tmpx) maxX = tmpx;
			if(maxY < tmpy) maxY = tmpy;
		}
		this.__inflateBounds(maxX,maxY);
		this.__commands.drawTriangles(vertices,indices,uvtData,culling);
		this.set___dirty(true);
		this.__visible = true;
	}
	,endFill: function() {
		this.__commands.endFill();
	}
	,lineBitmapStyle: function(bitmap,matrix,repeat,smooth) {
		if(smooth == null) smooth = false;
		if(repeat == null) repeat = true;
		this.__commands.lineBitmapStyle(bitmap,matrix != null?matrix.clone():null,repeat,smooth);
	}
	,lineGradientStyle: function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
		if(focalPointRatio == null) focalPointRatio = 0;
		if(interpolationMethod == null) interpolationMethod = 1;
		if(spreadMethod == null) spreadMethod = 0;
		this.__commands.lineGradientStyle(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio);
	}
	,lineStyle: function(thickness,color,alpha,pixelHinting,scaleMode,caps,joints,miterLimit) {
		if(miterLimit == null) miterLimit = 3;
		if(scaleMode == null) scaleMode = 2;
		if(pixelHinting == null) pixelHinting = false;
		if(alpha == null) alpha = 1;
		if(color == null) color = 0;
		if(thickness != null) {
			if(joints == 1) {
				if(thickness > this.__strokePadding) this.__strokePadding = thickness;
			} else if(thickness / 2 > this.__strokePadding) this.__strokePadding = thickness / 2;
		}
		this.__commands.lineStyle(thickness,color,alpha,pixelHinting,scaleMode,caps,joints,miterLimit);
		if(thickness != null) this.__visible = true;
	}
	,lineTo: function(x,y) {
		if(!isFinite(x) || !isFinite(y)) return;
		this.__inflateBounds(this.__positionX - this.__strokePadding,this.__positionY - this.__strokePadding);
		this.__inflateBounds(this.__positionX + this.__strokePadding,this.__positionY + this.__strokePadding);
		this.__positionX = x;
		this.__positionY = y;
		this.__inflateBounds(this.__positionX - this.__strokePadding,this.__positionY - this.__strokePadding);
		this.__inflateBounds(this.__positionX + this.__strokePadding * 2,this.__positionY + this.__strokePadding);
		this.__commands.lineTo(x,y);
		this.set___dirty(true);
	}
	,moveTo: function(x,y) {
		this.__positionX = x;
		this.__positionY = y;
		this.__commands.moveTo(x,y);
	}
	,readGraphicsData: function(recurse) {
		if(recurse == null) recurse = true;
		var graphicsData = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
		this.__owner.__readGraphicsData(graphicsData,recurse);
		return graphicsData;
	}
	,__calculateBezierCubicPoint: function(t,p1,p2,p3,p4) {
		var iT = 1 - t;
		return p1 * (iT * iT * iT) + 3 * p2 * t * (iT * iT) + 3 * p3 * iT * (t * t) + p4 * (t * t * t);
	}
	,__calculateBezierQuadPoint: function(t,p1,p2,p3) {
		var iT = 1 - t;
		return iT * iT * p1 + 2 * iT * t * p2 + t * t * p3;
	}
	,__cleanup: function() {
		if(this.__bounds != null) {
			this.set___dirty(true);
			this.__transformDirty = true;
		}
		this.__bitmap = null;
		this.__canvas = null;
		this.__context = null;
	}
	,__getBounds: function(rect,matrix) {
		if(this.__bounds == null) return;
		var bounds = openfl_geom_Rectangle.__temp;
		this.__bounds.__transform(bounds,matrix);
		rect.__expand(bounds.x,bounds.y,bounds.width,bounds.height);
	}
	,__hitTest: function(x,y,shapeFlag,matrix) {
		if(this.__bounds == null) return false;
		var px = matrix.__transformInverseX(x,y);
		var py = matrix.__transformInverseY(x,y);
		if(px > this.__bounds.x && py > this.__bounds.y && this.__bounds.contains(px,py)) {
			if(shapeFlag) return openfl__$internal_renderer_canvas_CanvasGraphics.hitTest(this,px,py);
			return true;
		}
		return false;
	}
	,__inflateBounds: function(x,y) {
		if(this.__bounds == null) {
			this.__bounds = new openfl_geom_Rectangle(x,y,0,0);
			this.__transformDirty = true;
			return;
		}
		if(x < this.__bounds.x) {
			this.__bounds.width += this.__bounds.x - x;
			this.__bounds.x = x;
			this.__transformDirty = true;
		}
		if(y < this.__bounds.y) {
			this.__bounds.height += this.__bounds.y - y;
			this.__bounds.y = y;
			this.__transformDirty = true;
		}
		if(x > this.__bounds.x + this.__bounds.width) this.__bounds.width = x - this.__bounds.x;
		if(y > this.__bounds.y + this.__bounds.height) this.__bounds.height = y - this.__bounds.y;
	}
	,__readGraphicsData: function(graphicsData) {
		var data = new openfl__$internal_renderer_DrawCommandReader(this.__commands);
		var path;
		var _g = 0;
		var _g1 = this.__commands.types;
		while(_g < _g1.length) {
			var type = _g1[_g];
			++_g;
			switch(type[1]) {
			case 3:
				var c = data.readCubicCurveTo();
				break;
			case 4:
				var c1 = data.readCurveTo();
				path = new openfl_display_GraphicsPath();
				path.curveTo(openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlX(c1),openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlY(c1),openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorX(c1),openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorY(c1));
				graphicsData.push(path);
				break;
			case 15:
				var c2 = data.readLineTo();
				path = new openfl_display_GraphicsPath();
				path.lineTo(openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_x(c2),openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_y(c2));
				graphicsData.push(path);
				break;
			case 16:
				var c3 = data.readMoveTo();
				path = new openfl_display_GraphicsPath();
				path.moveTo(openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_x(c3),openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_y(c3));
				graphicsData.push(path);
				break;
			case 13:
				var c4 = data.readLineGradientStyle();
				break;
			case 12:
				var c5 = data.readLineBitmapStyle();
				break;
			case 14:
				var c6 = data.readLineStyle();
				var x = new openfl_display_GraphicsStroke(openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_thickness(c6),openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_pixelHinting(c6),openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_scaleMode(c6),openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_caps(c6),openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_joints(c6),openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_miterLimit(c6));
				graphicsData.push(x);
				break;
			case 11:
				data.readEndFill();
				var x1 = new openfl_display_GraphicsEndFill();
				graphicsData.push(x1);
				break;
			case 0:
				var c7 = data.readBeginBitmapFill();
				var x2 = new openfl_display_GraphicsBitmapFill(openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_bitmap(c7),openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_matrix(c7),openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_repeat(c7),openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_smooth(c7));
				graphicsData.push(x2);
				break;
			case 1:
				var c8 = data.readBeginFill();
				var x3 = new openfl_display_GraphicsSolidFill(openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_color(c8),1);
				graphicsData.push(x3);
				break;
			case 2:
				var c9 = data.readBeginGradientFill();
				var x4 = new openfl_display_GraphicsGradientFill(openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_type(c9),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_colors(c9),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_alphas(c9),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_ratios(c9),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_matrix(c9),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_spreadMethod(c9),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_interpolationMethod(c9),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_focalPointRatio(c9));
				graphicsData.push(x4);
				break;
			case 5:
				var c10 = data.readDrawCircle();
				break;
			case 6:
				var c11 = data.readDrawEllipse();
				break;
			case 7:
				var c12 = data.readDrawEllipse();
				break;
			case 8:
				var c13 = data.readDrawEllipse();
				break;
			default:
				data.skip(type);
			}
		}
	}
	,__update: function() {
		if(this.__bounds == null || this.__bounds.width <= 0 || this.__bounds.height <= 0) return;
		var parentTransform = this.__owner.__renderTransform;
		var scaleX = 1.0;
		var scaleY = 1.0;
		if(parentTransform != null) {
			if(parentTransform.b == 0) scaleX = Math.abs(parentTransform.a); else scaleX = Math.sqrt(parentTransform.a * parentTransform.a + parentTransform.b * parentTransform.b);
			if(parentTransform.c == 0) scaleY = Math.abs(parentTransform.d); else scaleY = Math.sqrt(parentTransform.c * parentTransform.c + parentTransform.d * parentTransform.d);
		}
		var width = this.__bounds.width * scaleX;
		var height = this.__bounds.height * scaleY;
		if(Math.abs(width - this.__width) > 2 || Math.abs(height - this.__height) > 2) this.set___dirty(true);
		this.__width = Math.floor(width);
		this.__height = Math.floor(height);
		if(this.__width <= 0 || this.__height <= 0) return;
		this.__renderTransform.a = this.__width / this.__bounds.width;
		this.__renderTransform.d = this.__height / this.__bounds.height;
		this.__worldTransform.a = 1 / this.__renderTransform.a;
		this.__worldTransform.b = 0;
		this.__worldTransform.c = 0;
		this.__worldTransform.d = 1 / this.__renderTransform.d;
		this.__worldTransform.tx = this.__bounds.x;
		this.__worldTransform.ty = this.__bounds.y;
		this.__worldTransform.concat(this.__owner.__renderTransform);
	}
	,set___dirty: function(value) {
		if(value && this.__owner != null) this.__owner.__setRenderDirty();
		return this.__dirty = value;
	}
	,__class__: openfl_display_Graphics
	,__properties__: {set___dirty:"set___dirty"}
};
var openfl_display_IGraphicsFill = function() { };
$hxClasses["openfl.display.IGraphicsFill"] = openfl_display_IGraphicsFill;
openfl_display_IGraphicsFill.__name__ = ["openfl","display","IGraphicsFill"];
openfl_display_IGraphicsFill.prototype = {
	__graphicsFillType: null
	,__class__: openfl_display_IGraphicsFill
};
var openfl_display_IGraphicsData = function() { };
$hxClasses["openfl.display.IGraphicsData"] = openfl_display_IGraphicsData;
openfl_display_IGraphicsData.__name__ = ["openfl","display","IGraphicsData"];
openfl_display_IGraphicsData.prototype = {
	__graphicsDataType: null
	,__class__: openfl_display_IGraphicsData
};
var openfl_display_GraphicsBitmapFill = function(bitmapData,matrix,repeat,smooth) {
	if(smooth == null) smooth = false;
	if(repeat == null) repeat = true;
	this.bitmapData = bitmapData;
	this.matrix = matrix;
	this.repeat = repeat;
	this.smooth = smooth;
	this.__graphicsDataType = openfl_display_GraphicsDataType.BITMAP;
	this.__graphicsFillType = openfl_display_GraphicsFillType.BITMAP_FILL;
};
$hxClasses["openfl.display.GraphicsBitmapFill"] = openfl_display_GraphicsBitmapFill;
openfl_display_GraphicsBitmapFill.__name__ = ["openfl","display","GraphicsBitmapFill"];
openfl_display_GraphicsBitmapFill.__interfaces__ = [openfl_display_IGraphicsFill,openfl_display_IGraphicsData];
openfl_display_GraphicsBitmapFill.prototype = {
	bitmapData: null
	,matrix: null
	,repeat: null
	,smooth: null
	,__graphicsDataType: null
	,__graphicsFillType: null
	,__class__: openfl_display_GraphicsBitmapFill
};
var openfl_display_GraphicsEndFill = function() {
	this.__graphicsDataType = openfl_display_GraphicsDataType.END;
	this.__graphicsFillType = openfl_display_GraphicsFillType.END_FILL;
};
$hxClasses["openfl.display.GraphicsEndFill"] = openfl_display_GraphicsEndFill;
openfl_display_GraphicsEndFill.__name__ = ["openfl","display","GraphicsEndFill"];
openfl_display_GraphicsEndFill.__interfaces__ = [openfl_display_IGraphicsFill,openfl_display_IGraphicsData];
openfl_display_GraphicsEndFill.prototype = {
	__graphicsDataType: null
	,__graphicsFillType: null
	,__class__: openfl_display_GraphicsEndFill
};
var openfl_display_GraphicsGradientFill = function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
	if(focalPointRatio == null) focalPointRatio = 0;
	if(type == null) type = 0;
	if(spreadMethod == null) spreadMethod = 0;
	if(interpolationMethod == null) interpolationMethod = 1;
	this.type = type;
	this.colors = colors;
	this.alphas = alphas;
	this.ratios = ratios;
	this.matrix = matrix;
	this.spreadMethod = spreadMethod;
	this.interpolationMethod = interpolationMethod;
	this.focalPointRatio = focalPointRatio;
	this.__graphicsDataType = openfl_display_GraphicsDataType.GRADIENT;
	this.__graphicsFillType = openfl_display_GraphicsFillType.GRADIENT_FILL;
};
$hxClasses["openfl.display.GraphicsGradientFill"] = openfl_display_GraphicsGradientFill;
openfl_display_GraphicsGradientFill.__name__ = ["openfl","display","GraphicsGradientFill"];
openfl_display_GraphicsGradientFill.__interfaces__ = [openfl_display_IGraphicsFill,openfl_display_IGraphicsData];
openfl_display_GraphicsGradientFill.prototype = {
	alphas: null
	,colors: null
	,focalPointRatio: null
	,interpolationMethod: null
	,matrix: null
	,ratios: null
	,spreadMethod: null
	,type: null
	,__graphicsDataType: null
	,__graphicsFillType: null
	,__class__: openfl_display_GraphicsGradientFill
};
var openfl_display_IGraphicsPath = function() { };
$hxClasses["openfl.display.IGraphicsPath"] = openfl_display_IGraphicsPath;
openfl_display_IGraphicsPath.__name__ = ["openfl","display","IGraphicsPath"];
var openfl_display_GraphicsPath = function(commands,data,winding) {
	if(winding == null) winding = 0;
	this.commands = commands;
	this.data = data;
	this.winding = winding;
	this.__graphicsDataType = openfl_display_GraphicsDataType.PATH;
};
$hxClasses["openfl.display.GraphicsPath"] = openfl_display_GraphicsPath;
openfl_display_GraphicsPath.__name__ = ["openfl","display","GraphicsPath"];
openfl_display_GraphicsPath.__interfaces__ = [openfl_display_IGraphicsPath,openfl_display_IGraphicsData];
openfl_display_GraphicsPath.prototype = {
	commands: null
	,data: null
	,winding: null
	,__graphicsDataType: null
	,curveTo: function(controlX,controlY,anchorX,anchorY) {
		if(this.commands != null && this.data != null) {
			this.commands.push(3);
			this.data.push(anchorX);
			this.data.push(anchorY);
			this.data.push(controlX);
			this.data.push(controlY);
		}
	}
	,lineTo: function(x,y) {
		if(this.commands != null && this.data != null) {
			this.commands.push(2);
			this.data.push(x);
			this.data.push(y);
		}
	}
	,moveTo: function(x,y) {
		if(this.commands != null && this.data != null) {
			this.commands.push(1);
			this.data.push(x);
			this.data.push(y);
		}
	}
	,wideLineTo: function(x,y) {
		if(this.commands != null && this.data != null) {
			this.commands.push(2);
			this.data.push(x);
			this.data.push(y);
		}
	}
	,wideMoveTo: function(x,y) {
		if(this.commands != null && this.data != null) {
			this.commands.push(1);
			this.data.push(x);
			this.data.push(y);
		}
	}
	,__class__: openfl_display_GraphicsPath
};
var openfl_display__$GraphicsPathWinding_GraphicsPathWinding_$Impl_$ = {};
$hxClasses["openfl.display._GraphicsPathWinding.GraphicsPathWinding_Impl_"] = openfl_display__$GraphicsPathWinding_GraphicsPathWinding_$Impl_$;
openfl_display__$GraphicsPathWinding_GraphicsPathWinding_$Impl_$.__name__ = ["openfl","display","_GraphicsPathWinding","GraphicsPathWinding_Impl_"];
openfl_display__$GraphicsPathWinding_GraphicsPathWinding_$Impl_$.fromString = function(value) {
	switch(value) {
	case "evenOdd":
		return 0;
	case "nonZero":
		return 1;
	default:
		return null;
	}
};
openfl_display__$GraphicsPathWinding_GraphicsPathWinding_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "evenOdd";
	case 1:
		return "nonZero";
	default:
		return null;
	}
};
var openfl_display_GraphicsSolidFill = function(color,alpha) {
	if(alpha == null) alpha = 1;
	if(color == null) color = 0;
	this.alpha = alpha;
	this.color = color;
	this.__graphicsDataType = openfl_display_GraphicsDataType.SOLID;
	this.__graphicsFillType = openfl_display_GraphicsFillType.SOLID_FILL;
};
$hxClasses["openfl.display.GraphicsSolidFill"] = openfl_display_GraphicsSolidFill;
openfl_display_GraphicsSolidFill.__name__ = ["openfl","display","GraphicsSolidFill"];
openfl_display_GraphicsSolidFill.__interfaces__ = [openfl_display_IGraphicsFill,openfl_display_IGraphicsData];
openfl_display_GraphicsSolidFill.prototype = {
	alpha: null
	,color: null
	,__graphicsDataType: null
	,__graphicsFillType: null
	,__class__: openfl_display_GraphicsSolidFill
};
var openfl_display_IGraphicsStroke = function() { };
$hxClasses["openfl.display.IGraphicsStroke"] = openfl_display_IGraphicsStroke;
openfl_display_IGraphicsStroke.__name__ = ["openfl","display","IGraphicsStroke"];
var openfl_display_GraphicsStroke = function(thickness,pixelHinting,scaleMode,caps,joints,miterLimit,fill) {
	if(miterLimit == null) miterLimit = 3;
	if(pixelHinting == null) pixelHinting = false;
	if(thickness == null) thickness = 0.0;
	if(caps != null) this.caps = caps; else this.caps = 0;
	this.fill = fill;
	if(joints != null) this.joints = joints; else this.joints = 2;
	this.miterLimit = miterLimit;
	this.pixelHinting = pixelHinting;
	if(scaleMode != null) this.scaleMode = scaleMode; else this.scaleMode = 2;
	this.thickness = thickness;
	this.__graphicsDataType = openfl_display_GraphicsDataType.STROKE;
};
$hxClasses["openfl.display.GraphicsStroke"] = openfl_display_GraphicsStroke;
openfl_display_GraphicsStroke.__name__ = ["openfl","display","GraphicsStroke"];
openfl_display_GraphicsStroke.__interfaces__ = [openfl_display_IGraphicsStroke,openfl_display_IGraphicsData];
openfl_display_GraphicsStroke.prototype = {
	caps: null
	,fill: null
	,joints: null
	,miterLimit: null
	,pixelHinting: null
	,scaleMode: null
	,thickness: null
	,__graphicsDataType: null
	,__class__: openfl_display_GraphicsStroke
};
var openfl_display_GraphicsDataType = $hxClasses["openfl.display.GraphicsDataType"] = { __ename__ : ["openfl","display","GraphicsDataType"], __constructs__ : ["STROKE","SOLID","GRADIENT","PATH","BITMAP","END"] };
openfl_display_GraphicsDataType.STROKE = ["STROKE",0];
openfl_display_GraphicsDataType.STROKE.toString = $estr;
openfl_display_GraphicsDataType.STROKE.__enum__ = openfl_display_GraphicsDataType;
openfl_display_GraphicsDataType.SOLID = ["SOLID",1];
openfl_display_GraphicsDataType.SOLID.toString = $estr;
openfl_display_GraphicsDataType.SOLID.__enum__ = openfl_display_GraphicsDataType;
openfl_display_GraphicsDataType.GRADIENT = ["GRADIENT",2];
openfl_display_GraphicsDataType.GRADIENT.toString = $estr;
openfl_display_GraphicsDataType.GRADIENT.__enum__ = openfl_display_GraphicsDataType;
openfl_display_GraphicsDataType.PATH = ["PATH",3];
openfl_display_GraphicsDataType.PATH.toString = $estr;
openfl_display_GraphicsDataType.PATH.__enum__ = openfl_display_GraphicsDataType;
openfl_display_GraphicsDataType.BITMAP = ["BITMAP",4];
openfl_display_GraphicsDataType.BITMAP.toString = $estr;
openfl_display_GraphicsDataType.BITMAP.__enum__ = openfl_display_GraphicsDataType;
openfl_display_GraphicsDataType.END = ["END",5];
openfl_display_GraphicsDataType.END.toString = $estr;
openfl_display_GraphicsDataType.END.__enum__ = openfl_display_GraphicsDataType;
var openfl_display_GraphicsFillType = $hxClasses["openfl.display.GraphicsFillType"] = { __ename__ : ["openfl","display","GraphicsFillType"], __constructs__ : ["SOLID_FILL","GRADIENT_FILL","BITMAP_FILL","END_FILL"] };
openfl_display_GraphicsFillType.SOLID_FILL = ["SOLID_FILL",0];
openfl_display_GraphicsFillType.SOLID_FILL.toString = $estr;
openfl_display_GraphicsFillType.SOLID_FILL.__enum__ = openfl_display_GraphicsFillType;
openfl_display_GraphicsFillType.GRADIENT_FILL = ["GRADIENT_FILL",1];
openfl_display_GraphicsFillType.GRADIENT_FILL.toString = $estr;
openfl_display_GraphicsFillType.GRADIENT_FILL.__enum__ = openfl_display_GraphicsFillType;
openfl_display_GraphicsFillType.BITMAP_FILL = ["BITMAP_FILL",2];
openfl_display_GraphicsFillType.BITMAP_FILL.toString = $estr;
openfl_display_GraphicsFillType.BITMAP_FILL.__enum__ = openfl_display_GraphicsFillType;
openfl_display_GraphicsFillType.END_FILL = ["END_FILL",3];
openfl_display_GraphicsFillType.END_FILL.toString = $estr;
openfl_display_GraphicsFillType.END_FILL.__enum__ = openfl_display_GraphicsFillType;
var openfl_display__$InterpolationMethod_InterpolationMethod_$Impl_$ = {};
$hxClasses["openfl.display._InterpolationMethod.InterpolationMethod_Impl_"] = openfl_display__$InterpolationMethod_InterpolationMethod_$Impl_$;
openfl_display__$InterpolationMethod_InterpolationMethod_$Impl_$.__name__ = ["openfl","display","_InterpolationMethod","InterpolationMethod_Impl_"];
openfl_display__$InterpolationMethod_InterpolationMethod_$Impl_$.fromString = function(value) {
	switch(value) {
	case "linearRGB":
		return 0;
	case "rgb":
		return 1;
	default:
		return null;
	}
};
openfl_display__$InterpolationMethod_InterpolationMethod_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "linearRGB";
	case 1:
		return "rgb";
	default:
		return null;
	}
};
var openfl_display_JPEGEncoderOptions = function(quality) {
	if(quality == null) quality = 80;
	this.quality = quality;
};
$hxClasses["openfl.display.JPEGEncoderOptions"] = openfl_display_JPEGEncoderOptions;
openfl_display_JPEGEncoderOptions.__name__ = ["openfl","display","JPEGEncoderOptions"];
openfl_display_JPEGEncoderOptions.prototype = {
	quality: null
	,__class__: openfl_display_JPEGEncoderOptions
};
var openfl_display__$JointStyle_JointStyle_$Impl_$ = {};
$hxClasses["openfl.display._JointStyle.JointStyle_Impl_"] = openfl_display__$JointStyle_JointStyle_$Impl_$;
openfl_display__$JointStyle_JointStyle_$Impl_$.__name__ = ["openfl","display","_JointStyle","JointStyle_Impl_"];
openfl_display__$JointStyle_JointStyle_$Impl_$.fromString = function(value) {
	switch(value) {
	case "bevel":
		return 0;
	case "miter":
		return 1;
	case "round":
		return 2;
	default:
		return null;
	}
};
openfl_display__$JointStyle_JointStyle_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "bevel";
	case 1:
		return "miter";
	case 2:
		return "round";
	default:
		return null;
	}
};
var openfl_display__$LineScaleMode_LineScaleMode_$Impl_$ = {};
$hxClasses["openfl.display._LineScaleMode.LineScaleMode_Impl_"] = openfl_display__$LineScaleMode_LineScaleMode_$Impl_$;
openfl_display__$LineScaleMode_LineScaleMode_$Impl_$.__name__ = ["openfl","display","_LineScaleMode","LineScaleMode_Impl_"];
openfl_display__$LineScaleMode_LineScaleMode_$Impl_$.fromString = function(value) {
	switch(value) {
	case "horizontal":
		return 0;
	case "none":
		return 1;
	case "normal":
		return 2;
	case "vertical":
		return 3;
	default:
		return null;
	}
};
openfl_display__$LineScaleMode_LineScaleMode_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "horizontal";
	case 1:
		return "none";
	case 2:
		return "normal";
	case 3:
		return "vertical";
	default:
		return null;
	}
};
var openfl_display_Loader = function() {
	openfl_display_DisplayObjectContainer.call(this);
	this.contentLoaderInfo = openfl_display_LoaderInfo.create(this);
};
$hxClasses["openfl.display.Loader"] = openfl_display_Loader;
openfl_display_Loader.__name__ = ["openfl","display","Loader"];
openfl_display_Loader.__super__ = openfl_display_DisplayObjectContainer;
openfl_display_Loader.prototype = $extend(openfl_display_DisplayObjectContainer.prototype,{
	content: null
	,contentLoaderInfo: null
	,close: function() {
		openfl_Lib.notImplemented({ fileName : "Loader.hx", lineNumber : 48, className : "openfl.display.Loader", methodName : "close"});
	}
	,load: function(request,context) {
		var _g = this;
		var extension = "";
		var path = request.url;
		var queryIndex = path.indexOf("?");
		if(queryIndex > -1) path = path.substring(0,queryIndex);
		var extIndex = path.lastIndexOf(".");
		if(extIndex > -1) extension = path.substring(extIndex + 1);
		this.contentLoaderInfo.url = request.url;
		if(request.contentType == null || request.contentType == "") switch(extension) {
		case "json":
			this.contentLoaderInfo.contentType = "application/json";
			break;
		case "swf":
			this.contentLoaderInfo.contentType = "application/x-shockwave-flash";
			break;
		case "jpg":case "jpeg":
			this.contentLoaderInfo.contentType = "image/jpeg";
			break;
		case "png":
			this.contentLoaderInfo.contentType = "image/png";
			break;
		case "gif":
			this.contentLoaderInfo.contentType = "image/gif";
			break;
		case "js":
			this.contentLoaderInfo.contentType = "application/javascript";
			break;
		default:
			this.contentLoaderInfo.contentType = "application/x-www-form-urlencoded";
		} else this.contentLoaderInfo.contentType = request.contentType;
		if(this.contentLoaderInfo.contentType.indexOf("/javascript") > -1 || this.contentLoaderInfo.contentType.indexOf("/ecmascript") > -1) {
			var loader = new openfl_net_URLLoader();
			loader.addEventListener("complete",function(e) {
				_g.contentLoaderInfo.content = new openfl_display_Sprite();
				_g.addChild(_g.contentLoaderInfo.content);
				eval("(function () {" + Std.string(loader.data) + "})()");
				var event = new openfl_events_Event("complete");
				event.target = _g.contentLoaderInfo;
				event.currentTarget = _g.contentLoaderInfo;
				_g.contentLoaderInfo.dispatchEvent(event);
			});
			loader.addEventListener("ioError",function(e1) {
				_g.BitmapData_onError(e1);
			});
			loader.dataFormat = 1;
			loader.load(request);
			return;
		} else if(this.contentLoaderInfo.contentType.indexOf("/json") > -1) {
			var loader1 = new openfl_net_URLLoader();
			loader1.addEventListener("complete",function(e2) {
				var info = JSON.parse(loader1.data);
				var library = Type.createInstance(Type.resolveClass(info.type),[null]);
				openfl_Assets.registerLibrary(info.name,library);
				var manifest = haxe_Unserializer.run(info.manifest);
				var assetType;
				var basePath = request.url;
				basePath = StringTools.replace(basePath,"\\","/");
				var parts = basePath.split("/");
				parts.pop();
				parts.pop();
				basePath = parts.join("/");
				var libraryData = null;
				var loaded = -1;
				var total = 0;
				var checkLoaded = function() {
					if(loaded >= total) {
						library.swf = openfl__$internal_swf_SWFLite.unserialize(libraryData);
						_g.contentLoaderInfo.content = library.getMovieClip("");
						_g.addChild(_g.contentLoaderInfo.content);
						var event1 = new openfl_events_Event("complete");
						event1.target = _g.contentLoaderInfo;
						event1.currentTarget = _g.contentLoaderInfo;
						_g.contentLoaderInfo.dispatchEvent(event1);
					}
				};
				var _g1 = 0;
				while(_g1 < manifest.length) {
					var asset = [manifest[_g1]];
					++_g1;
					if(!openfl_Assets.exists(asset[0].id)) {
						assetType = asset[0].type;
						switch(assetType) {
						case "IMAGE":
							total++;
							openfl_display_BitmapData.fromFile(basePath + "/" + Std.string(asset[0].path),(function(asset) {
								return function(bitmapData) {
									loaded++;
									checkLoaded();
									openfl_Assets.cache.setBitmapData(asset[0].path,bitmapData);
								};
							})(asset),(function() {
								return function() {
									_g.BitmapData_onError(null);
								};
							})());
							break;
						case "TEXT":
							total++;
							var textLoader = [new openfl_net_URLLoader()];
							textLoader[0].addEventListener("complete",(function(textLoader) {
								return function(_) {
									libraryData = textLoader[0].data;
									loaded++;
									checkLoaded();
								};
							})(textLoader));
							textLoader[0].addEventListener("ioError",(function() {
								return function(e3) {
									_g.BitmapData_onError(e3);
								};
							})());
							textLoader[0].dataFormat = 1;
							textLoader[0].load(new openfl_net_URLRequest(basePath + "/" + Std.string(asset[0].path)));
							break;
						default:
						}
					}
				}
				loaded++;
				checkLoaded();
			});
			loader1.addEventListener("ioError",function(e4) {
				_g.BitmapData_onError(e4);
			});
			loader1.dataFormat = 1;
			loader1.load(request);
		}
		var worker = new lime_system_BackgroundWorker();
		worker.doWork.add(function(_1) {
			openfl_display_BitmapData.fromFile(path,function(bitmapData1) {
				worker.sendComplete(bitmapData1);
			},function() {
				worker.sendError("ioError");
			});
		});
		worker.onError.add($bind(this,this.BitmapData_onError));
		worker.onComplete.add($bind(this,this.BitmapData_onLoad));
		worker.run();
	}
	,loadBytes: function(buffer,context) {
		var worker = new lime_system_BackgroundWorker();
		worker.doWork.add(function(_) {
			openfl_display_BitmapData.fromBytes(buffer,null,function(bitmapData) {
				worker.sendComplete(bitmapData);
			});
		});
		worker.onComplete.add($bind(this,this.BitmapData_onLoad));
		worker.run();
	}
	,unload: function() {
		if(this.get_numChildren() > 0) {
			while(this.get_numChildren() > 0) this.removeChildAt(0);
			this.content = null;
			this.contentLoaderInfo.url = null;
			this.contentLoaderInfo.contentType = null;
			this.contentLoaderInfo.content = null;
			this.contentLoaderInfo.bytesLoaded = 0;
			this.contentLoaderInfo.bytesTotal = 0;
			this.contentLoaderInfo.width = 0;
			this.contentLoaderInfo.height = 0;
			var event = new openfl_events_Event("unload");
			event.currentTarget = this;
			this.__dispatchEvent(event);
		}
	}
	,unloadAndStop: function(gc) {
		if(gc == null) gc = true;
		openfl_Lib.notImplemented({ fileName : "Loader.hx", lineNumber : 321, className : "openfl.display.Loader", methodName : "unloadAndStop"});
	}
	,BitmapData_onLoad: function(bitmapData) {
		this.contentLoaderInfo.content = new openfl_display_Bitmap(bitmapData);
		this.content = this.contentLoaderInfo.content;
		this.addChild(this.content);
		var event = new openfl_events_Event("complete");
		event.target = this.contentLoaderInfo;
		event.currentTarget = this.contentLoaderInfo;
		this.contentLoaderInfo.dispatchEvent(event);
	}
	,BitmapData_onError: function(_) {
		var event = new openfl_events_IOErrorEvent("ioError");
		event.target = this.contentLoaderInfo;
		event.currentTarget = this.contentLoaderInfo;
		this.contentLoaderInfo.dispatchEvent(event);
	}
	,__class__: openfl_display_Loader
});
var openfl_display_LoaderInfo = function() {
	openfl_events_EventDispatcher.call(this);
	this.applicationDomain = openfl_system_ApplicationDomain.currentDomain;
	this.bytesLoaded = 0;
	this.bytesTotal = 0;
	this.childAllowsParent = true;
	this.parameters = { };
};
$hxClasses["openfl.display.LoaderInfo"] = openfl_display_LoaderInfo;
openfl_display_LoaderInfo.__name__ = ["openfl","display","LoaderInfo"];
openfl_display_LoaderInfo.create = function(loader) {
	var loaderInfo = new openfl_display_LoaderInfo();
	loaderInfo.uncaughtErrorEvents = new openfl_events_UncaughtErrorEvents();
	if(loader != null) loaderInfo.loader = loader; else loaderInfo.url = openfl_display_LoaderInfo.__rootURL;
	return loaderInfo;
};
openfl_display_LoaderInfo.__super__ = openfl_events_EventDispatcher;
openfl_display_LoaderInfo.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	applicationDomain: null
	,bytes: null
	,bytesLoaded: null
	,bytesTotal: null
	,childAllowsParent: null
	,content: null
	,contentType: null
	,frameRate: null
	,height: null
	,loader: null
	,loaderURL: null
	,parameters: null
	,parentAllowsChild: null
	,sameDomain: null
	,sharedEvents: null
	,uncaughtErrorEvents: null
	,url: null
	,width: null
	,__completed: null
	,__complete: function() {
		if(!this.__completed) {
			if(this.bytesLoaded < this.bytesTotal) this.bytesLoaded = this.bytesTotal;
			this.__update(this.bytesLoaded,this.bytesTotal);
			this.__completed = true;
			this.dispatchEvent(new openfl_events_Event("complete"));
		}
	}
	,__update: function(bytesLoaded,bytesTotal) {
		this.bytesLoaded = bytesLoaded;
		this.bytesTotal = bytesTotal;
		this.dispatchEvent(new openfl_events_ProgressEvent("progress",false,false,bytesLoaded,bytesTotal));
	}
	,__class__: openfl_display_LoaderInfo
});
var openfl_display__$MovieClip_TimelineObject = function(id,depth,displayObject) {
	this.id = id;
	this.depth = depth;
	this.displayObject = displayObject;
};
$hxClasses["openfl.display._MovieClip.TimelineObject"] = openfl_display__$MovieClip_TimelineObject;
openfl_display__$MovieClip_TimelineObject.__name__ = ["openfl","display","_MovieClip","TimelineObject"];
openfl_display__$MovieClip_TimelineObject.prototype = {
	depth: null
	,displayObject: null
	,id: null
	,__class__: openfl_display__$MovieClip_TimelineObject
};
var openfl_display_OpenGLView = function() {
	openfl_display_DirectRenderer.call(this,"OpenGLView");
};
$hxClasses["openfl.display.OpenGLView"] = openfl_display_OpenGLView;
openfl_display_OpenGLView.__name__ = ["openfl","display","OpenGLView"];
openfl_display_OpenGLView.__properties__ = {get_isSupported:"get_isSupported"}
openfl_display_OpenGLView.get_isSupported = function() {
	if(!window.WebGLRenderingContext) return false;
	if(lime_graphics_opengl_GL.context != null) return true; else {
		var canvas = window.document.createElement("canvas");
		var context = canvas.getContext("webgl");
		if(context == null) context = canvas.getContext("experimental-webgl");
		return context != null;
	}
};
openfl_display_OpenGLView.__super__ = openfl_display_DirectRenderer;
openfl_display_OpenGLView.prototype = $extend(openfl_display_DirectRenderer.prototype,{
	__added: null
	,__initialized: null
	,__renderCanvas: function(renderSession) {
	}
	,__renderDOM: function(renderSession) {
		if(this.stage != null && this.__worldVisible && this.__renderable) {
			if(!this.__added) {
				renderSession.element.appendChild(this.__canvas);
				this.__added = true;
				openfl__$internal_renderer_dom_DOMRenderer.initializeElement(this,this.__canvas,renderSession);
			}
			if(this.__context != null) {
				var rect = null;
				if(this.__scrollRect == null) rect = new openfl_geom_Rectangle(0,0,this.stage.stageWidth,this.stage.stageHeight); else rect = new openfl_geom_Rectangle(this.get_x() + this.__scrollRect.x,this.get_y() + this.__scrollRect.y,this.__scrollRect.width,this.__scrollRect.height);
				if(this.__render != null) this.__render(rect);
			}
		} else if(this.__added) {
			renderSession.element.removeChild(this.__canvas);
			this.__added = false;
		}
	}
	,__renderGL: function(renderSession) {
		if(this.stage != null && this.__renderable) {
			var rect = null;
			if(this.__scrollRect == null) rect = new openfl_geom_Rectangle(0,0,this.stage.stageWidth,this.stage.stageHeight); else rect = new openfl_geom_Rectangle(this.get_x() + this.__scrollRect.x,this.get_y() + this.__scrollRect.y,this.__scrollRect.width,this.__scrollRect.height);
			renderSession.shaderManager.setShader(null);
			renderSession.blendModeManager.setBlendMode(null);
			if(this.__render != null) this.__render(rect);
		}
	}
	,__class__: openfl_display_OpenGLView
});
var openfl_display_PNGEncoderOptions = function(fastCompression) {
	if(fastCompression == null) fastCompression = false;
	this.fastCompression = fastCompression;
};
$hxClasses["openfl.display.PNGEncoderOptions"] = openfl_display_PNGEncoderOptions;
openfl_display_PNGEncoderOptions.__name__ = ["openfl","display","PNGEncoderOptions"];
openfl_display_PNGEncoderOptions.prototype = {
	fastCompression: null
	,__class__: openfl_display_PNGEncoderOptions
};
var openfl_display__$PixelSnapping_PixelSnapping_$Impl_$ = {};
$hxClasses["openfl.display._PixelSnapping.PixelSnapping_Impl_"] = openfl_display__$PixelSnapping_PixelSnapping_$Impl_$;
openfl_display__$PixelSnapping_PixelSnapping_$Impl_$.__name__ = ["openfl","display","_PixelSnapping","PixelSnapping_Impl_"];
openfl_display__$PixelSnapping_PixelSnapping_$Impl_$.fromString = function(value) {
	switch(value) {
	case "always":
		return 0;
	case "auto":
		return 1;
	case "never":
		return 2;
	default:
		return null;
	}
};
openfl_display__$PixelSnapping_PixelSnapping_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "always";
	case 1:
		return "auto";
	case 2:
		return "never";
	default:
		return null;
	}
};
var openfl_display_Preloader = function(display) {
	lime_app_Preloader.call(this);
	this.display = display;
	if(display != null) {
		display.addEventListener("complete",$bind(this,this.display_onComplete),false,-1000);
		openfl_Lib.current.addChild(display);
	}
};
$hxClasses["openfl.display.Preloader"] = openfl_display_Preloader;
openfl_display_Preloader.__name__ = ["openfl","display","Preloader"];
openfl_display_Preloader.__super__ = lime_app_Preloader;
openfl_display_Preloader.prototype = $extend(lime_app_Preloader.prototype,{
	display: null
	,ready: null
	,start: function() {
		this.ready = true;
		openfl_Lib.current.get_loaderInfo().__complete();
		if(this.display != null) this.display.dispatchEvent(new openfl_events_Event("complete",true,true)); else lime_app_Preloader.prototype.start.call(this);
	}
	,update: function(loaded,total) {
		openfl_Lib.current.get_loaderInfo().__update(loaded,total);
		if(this.display != null) this.display.dispatchEvent(new openfl_events_ProgressEvent("progress",true,true,loaded,total));
	}
	,display_onComplete: function(event) {
		if(event.isDefaultPrevented()) return;
		if(this.display != null) {
			this.display.removeEventListener("complete",$bind(this,this.display_onComplete));
			if(this.display.parent == openfl_Lib.current) openfl_Lib.current.removeChild(this.display);
			openfl_Lib.current.stage.set_focus(null);
			this.display = null;
		}
		if(this.ready) lime_app_Preloader.prototype.start.call(this);
	}
	,__class__: openfl_display_Preloader
});
var openfl_display_DefaultPreloader = function() {
	openfl_display_Sprite.call(this);
	var backgroundColor = this.getBackgroundColor();
	var r = backgroundColor >> 16 & 255;
	var g = backgroundColor >> 8 & 255;
	var b = backgroundColor & 255;
	var perceivedLuminosity = 0.299 * r + 0.587 * g + 0.114 * b;
	var color = 0;
	if(perceivedLuminosity < 70) color = 16777215;
	var x = 30;
	var height = 7;
	var y = this.getHeight() / 2 - height / 2;
	var width = this.getWidth() - x * 2;
	var padding = 2;
	this.outline = new openfl_display_Sprite();
	this.outline.get_graphics().beginFill(color,0.07);
	this.outline.get_graphics().drawRect(0,0,width,height);
	this.outline.set_x(x);
	this.outline.set_y(y);
	this.outline.set_alpha(0);
	this.addChild(this.outline);
	this.progress = new openfl_display_Sprite();
	this.progress.get_graphics().beginFill(color,0.35);
	this.progress.get_graphics().drawRect(0,0,width - padding * 2,height - padding * 2);
	this.progress.set_x(x + padding);
	this.progress.set_y(y + padding);
	this.progress.set_scaleX(0);
	this.progress.set_alpha(0);
	this.addChild(this.progress);
	this.startAnimation = openfl_Lib.getTimer() + 100;
	this.endAnimation = this.startAnimation + 1000;
	this.addEventListener("addedToStage",$bind(this,this.this_onAddedToStage));
};
$hxClasses["openfl.display.DefaultPreloader"] = openfl_display_DefaultPreloader;
openfl_display_DefaultPreloader.__name__ = ["openfl","display","DefaultPreloader"];
openfl_display_DefaultPreloader.__super__ = openfl_display_Sprite;
openfl_display_DefaultPreloader.prototype = $extend(openfl_display_Sprite.prototype,{
	endAnimation: null
	,outline: null
	,progress: null
	,startAnimation: null
	,getBackgroundColor: function() {
		return openfl_Lib.current.stage.window.config.background;
	}
	,getHeight: function() {
		var height = openfl_Lib.current.stage.window.config.height;
		if(height > 0) return height; else return openfl_Lib.current.stage.stageHeight;
	}
	,getWidth: function() {
		var width = openfl_Lib.current.stage.window.config.width;
		if(width > 0) return width; else return openfl_Lib.current.stage.stageWidth;
	}
	,onInit: function() {
		this.addEventListener("enterFrame",$bind(this,this.this_onEnterFrame));
	}
	,onLoaded: function() {
		this.removeEventListener("enterFrame",$bind(this,this.this_onEnterFrame));
		this.dispatchEvent(new openfl_events_Event("complete"));
	}
	,onUpdate: function(bytesLoaded,bytesTotal) {
		var percentLoaded = 0.0;
		if(bytesTotal > 0) {
			percentLoaded = bytesLoaded / bytesTotal;
			if(percentLoaded > 1) percentLoaded = 1;
		}
		this.progress.set_scaleX(percentLoaded);
	}
	,this_onAddedToStage: function(event) {
		this.removeEventListener("addedToStage",$bind(this,this.this_onAddedToStage));
		this.onInit();
		this.onUpdate(this.get_loaderInfo().bytesLoaded,this.get_loaderInfo().bytesTotal);
		this.addEventListener("progress",$bind(this,this.this_onProgress));
		this.addEventListener("complete",$bind(this,this.this_onComplete));
	}
	,this_onComplete: function(event) {
		event.preventDefault();
		this.removeEventListener("progress",$bind(this,this.this_onProgress));
		this.removeEventListener("complete",$bind(this,this.this_onComplete));
		this.onLoaded();
	}
	,this_onEnterFrame: function(event) {
		var elapsed = openfl_Lib.getTimer() - this.startAnimation;
		var total = this.endAnimation - this.startAnimation;
		var percent = elapsed / total;
		if(percent < 0) percent = 0;
		if(percent > 1) percent = 1;
		this.outline.set_alpha(percent);
		this.progress.set_alpha(percent);
	}
	,this_onProgress: function(event) {
		this.onUpdate(event.bytesLoaded | 0,event.bytesTotal | 0);
	}
	,__class__: openfl_display_DefaultPreloader
});
var openfl_display_Shader = function(code) {
	this.__data = new openfl_display_ShaderData(null);
	if(this.__glFragmentSource == null) this.__glFragmentSource = "varying float vAlpha;\n\t\tvarying vec2 vTexCoord;\n\t\tuniform sampler2D uImage0;\n\t\t\n\t\tvoid main(void) {\n\t\t\t\n\t\t\tvec4 color = texture2D (uImage0, vTexCoord);\n\t\t\t\n\t\t\tif (color.a == 0.0) {\n\t\t\t\t\n\t\t\t\tgl_FragColor = vec4 (0.0, 0.0, 0.0, 0.0);\n\t\t\t\t\n\t\t\t} else {\n\t\t\t\t\n\t\t\t\tgl_FragColor = color * vAlpha;\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t}";
	if(this.__glVertexSource == null) this.__glVertexSource = "attribute float aAlpha;\n\t\tattribute vec4 aPosition;\n\t\tattribute vec2 aTexCoord;\n\t\tvarying float vAlpha;\n\t\tvarying vec2 vTexCoord;\n\t\t\n\t\tuniform mat4 uMatrix;\n\t\t\n\t\tvoid main(void) {\n\t\t\t\n\t\t\tvAlpha = aAlpha;\n\t\t\tvTexCoord = aTexCoord;\n\t\t\tgl_Position = uMatrix * aPosition;\n\t\t\t\n\t\t}";
	this.byteCode = code;
	this.precisionHint = 1;
	this.__glSourceDirty = true;
	this.__numPasses = 1;
};
$hxClasses["openfl.display.Shader"] = openfl_display_Shader;
openfl_display_Shader.__name__ = ["openfl","display","Shader"];
openfl_display_Shader.prototype = {
	byteCode: null
	,glProgram: null
	,precisionHint: null
	,gl: null
	,__data: null
	,__glFragmentSource: null
	,__glSourceDirty: null
	,__glVertexSource: null
	,__isUniform: null
	,__inputBitmapData: null
	,__numPasses: null
	,__paramBool: null
	,__paramFloat: null
	,__paramInt: null
	,__uniformMatrix2: null
	,__uniformMatrix3: null
	,__uniformMatrix4: null
	,__disable: function() {
		if(this.glProgram != null) this.__disableGL();
	}
	,__disableGL: function() {
		if(this.get_data().uImage0 != null) this.get_data().uImage0.input = null;
		var _g = 0;
		var _g1 = this.__paramBool;
		while(_g < _g1.length) {
			var parameter = _g1[_g];
			++_g;
			this.gl.disableVertexAttribArray(parameter.index);
		}
		var _g2 = 0;
		var _g11 = this.__paramFloat;
		while(_g2 < _g11.length) {
			var parameter1 = _g11[_g2];
			++_g2;
			this.gl.disableVertexAttribArray(parameter1.index);
		}
		var _g3 = 0;
		var _g12 = this.__paramInt;
		while(_g3 < _g12.length) {
			var parameter2 = _g12[_g3];
			++_g3;
			this.gl.disableVertexAttribArray(parameter2.index);
		}
		this.gl.bindBuffer(this.gl.ARRAY_BUFFER,null);
		this.gl.bindTexture(this.gl.TEXTURE_2D,null);
	}
	,__enable: function() {
		this.__init();
		if(this.glProgram != null) this.__enableGL();
	}
	,__enableGL: function() {
		var textureCount = 0;
		var _g = 0;
		var _g1 = this.__inputBitmapData;
		while(_g < _g1.length) {
			var input = _g1[_g];
			++_g;
			this.gl.uniform1i(input.index,textureCount);
			textureCount++;
		}
	}
	,__init: function() {
		if(this.__data == null) this.__data = new openfl_display_ShaderData(null);
		if(this.__glFragmentSource != null && this.__glVertexSource != null && (this.glProgram == null || this.__glSourceDirty)) this.__initGL();
	}
	,__initGL: function() {
		if(this.__glSourceDirty || this.__isUniform == null) {
			this.__glSourceDirty = false;
			this.glProgram = null;
			this.__isUniform = new haxe_ds_StringMap();
			this.__inputBitmapData = [];
			this.__paramBool = [];
			this.__paramFloat = [];
			this.__paramInt = [];
			var this1;
			this1 = new Float32Array(4);
			this.__uniformMatrix2 = this1;
			var this2;
			this2 = new Float32Array(9);
			this.__uniformMatrix3 = this2;
			var this3;
			this3 = new Float32Array(16);
			this.__uniformMatrix4 = this3;
			this.__processGLData(this.get_glVertexSource(),"attribute");
			this.__processGLData(this.get_glVertexSource(),"uniform");
			this.__processGLData(this.get_glFragmentSource(),"uniform");
		}
		if(this.gl != null && this.glProgram == null) {
			var fragment;
			fragment = "#ifdef GL_ES\n\t\t\t\tprecision " + (this.precisionHint == 1?"mediump":"lowp") + " float;\n\t\t\t\t#endif\n\t\t\t\t" + this.get_glFragmentSource();
			this.glProgram = lime_utils_GLUtils.createProgram(this.get_glVertexSource(),fragment);
			if(this.glProgram != null) {
				var _g = 0;
				var _g1 = this.__inputBitmapData;
				while(_g < _g1.length) {
					var input = _g1[_g];
					++_g;
					if(this.__isUniform.get(input.name)) input.index = this.gl.getUniformLocation(this.glProgram,input.name); else input.index = this.gl.getAttribLocation(this.glProgram,input.name);
				}
				var _g2 = 0;
				var _g11 = this.__paramBool;
				while(_g2 < _g11.length) {
					var parameter = _g11[_g2];
					++_g2;
					if(this.__isUniform.get(parameter.name)) parameter.index = this.gl.getUniformLocation(this.glProgram,parameter.name); else parameter.index = this.gl.getAttribLocation(this.glProgram,parameter.name);
				}
				var _g3 = 0;
				var _g12 = this.__paramFloat;
				while(_g3 < _g12.length) {
					var parameter1 = _g12[_g3];
					++_g3;
					if(this.__isUniform.get(parameter1.name)) parameter1.index = this.gl.getUniformLocation(this.glProgram,parameter1.name); else parameter1.index = this.gl.getAttribLocation(this.glProgram,parameter1.name);
				}
				var _g4 = 0;
				var _g13 = this.__paramInt;
				while(_g4 < _g13.length) {
					var parameter2 = _g13[_g4];
					++_g4;
					if(this.__isUniform.get(parameter2.name)) parameter2.index = this.gl.getUniformLocation(this.glProgram,parameter2.name); else parameter2.index = this.gl.getAttribLocation(this.glProgram,parameter2.name);
				}
			}
		}
	}
	,__processGLData: function(source,storageType) {
		var lastMatch = 0;
		var position;
		var regex;
		var name;
		var type;
		if(storageType == "uniform") regex = new EReg("uniform ([A-Za-z0-9]+) ([A-Za-z0-9]+)",""); else regex = new EReg("attribute ([A-Za-z0-9]+) ([A-Za-z0-9]+)","");
		while(regex.matchSub(source,lastMatch)) {
			type = regex.matched(1);
			name = regex.matched(2);
			if(StringTools.startsWith(type,"sampler")) {
				var input = new openfl_display_ShaderInput();
				input.name = name;
				this.__inputBitmapData.push(input);
				Reflect.setField(this.get_data(),name,input);
			} else {
				var parameterType;
				switch(type) {
				case "bool":
					parameterType = 0;
					break;
				case "double":case "float":
					parameterType = 4;
					break;
				case "int":case "uint":
					parameterType = 8;
					break;
				case "bvec2":
					parameterType = 1;
					break;
				case "bvec3":
					parameterType = 2;
					break;
				case "bvec4":
					parameterType = 3;
					break;
				case "ivec2":case "uvec2":
					parameterType = 9;
					break;
				case "ivec3":case "uvec3":
					parameterType = 10;
					break;
				case "ivec4":case "uvec4":
					parameterType = 11;
					break;
				case "vec2":case "dvec2":
					parameterType = 5;
					break;
				case "vec3":case "dvec3":
					parameterType = 6;
					break;
				case "vec4":case "dvec4":
					parameterType = 7;
					break;
				case "mat2":case "mat2x2":
					parameterType = 12;
					break;
				case "mat2x3":
					parameterType = 13;
					break;
				case "mat2x4":
					parameterType = 14;
					break;
				case "mat3x2":
					parameterType = 15;
					break;
				case "mat3":case "mat3x3":
					parameterType = 16;
					break;
				case "mat3x4":
					parameterType = 17;
					break;
				case "mat4x2":
					parameterType = 18;
					break;
				case "mat4x3":
					parameterType = 19;
					break;
				case "mat4":case "mat4x4":
					parameterType = 20;
					break;
				default:
					parameterType = null;
				}
				switch(parameterType) {
				case 0:case 1:case 2:case 3:
					var parameter = new openfl_display_ShaderParameter();
					parameter.name = name;
					parameter.type = parameterType;
					this.__paramBool.push(parameter);
					Reflect.setField(this.get_data(),name,parameter);
					break;
				case 8:case 9:case 10:case 11:
					var parameter1 = new openfl_display_ShaderParameter();
					parameter1.name = name;
					parameter1.type = parameterType;
					this.__paramInt.push(parameter1);
					Reflect.setField(this.get_data(),name,parameter1);
					break;
				default:
					var parameter2 = new openfl_display_ShaderParameter();
					parameter2.name = name;
					parameter2.type = parameterType;
					this.__paramFloat.push(parameter2);
					Reflect.setField(this.get_data(),name,parameter2);
				}
			}
			this.__isUniform.set(name,storageType == "uniform");
			position = regex.matchedPos();
			lastMatch = position.pos + position.len;
		}
	}
	,__update: function() {
		if(this.glProgram != null) this.__updateGL();
	}
	,__updateGL: function() {
		var textureCount = 0;
		var _g = 0;
		var _g1 = this.__inputBitmapData;
		while(_g < _g1.length) {
			var input = _g1[_g];
			++_g;
			if(input.input != null) {
				this.gl.activeTexture(this.gl.TEXTURE0 + textureCount);
				this.gl.bindTexture(this.gl.TEXTURE_2D,input.input.getTexture(this.gl));
				if(input.smoothing) {
					this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MAG_FILTER,this.gl.LINEAR);
					this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MIN_FILTER,this.gl.LINEAR);
				} else {
					this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MAG_FILTER,this.gl.NEAREST);
					this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MIN_FILTER,this.gl.NEAREST);
				}
			}
			textureCount++;
		}
		var index = 0;
		var _g2 = 0;
		var _g11 = this.__paramBool;
		while(_g2 < _g11.length) {
			var parameter = _g11[_g2];
			++_g2;
			var value = parameter.value;
			index = parameter.index;
			if(value != null) {
				var _g21 = parameter.type;
				switch(_g21) {
				case 0:
					this.gl.uniform1i(index,value[0]?1:0);
					break;
				case 1:
					this.gl.uniform2i(index,value[0]?1:0,value[1]?1:0);
					break;
				case 2:
					this.gl.uniform3i(index,value[0]?1:0,value[1]?1:0,value[2]?1:0);
					break;
				case 3:
					this.gl.uniform4i(index,value[0]?1:0,value[1]?1:0,value[2]?1:0,value[3]?1:0);
					break;
				default:
				}
			} else if(!this.__isUniform.get(parameter.name)) this.gl.enableVertexAttribArray(parameter.index);
		}
		var _g3 = 0;
		var _g12 = this.__paramFloat;
		while(_g3 < _g12.length) {
			var parameter1 = _g12[_g3];
			++_g3;
			var value1 = parameter1.value;
			index = parameter1.index;
			if(value1 != null) {
				var _g22 = parameter1.type;
				switch(_g22) {
				case 4:
					this.gl.uniform1f(index,value1[0]);
					break;
				case 5:
					this.gl.uniform2f(index,value1[0],value1[1]);
					break;
				case 6:
					this.gl.uniform3f(index,value1[0],value1[1],value1[2]);
					break;
				case 7:
					this.gl.uniform4f(index,value1[0],value1[1],value1[2],value1[3]);
					break;
				case 12:
					var _g31 = 0;
					while(_g31 < 4) {
						var i = _g31++;
						this.__uniformMatrix2[i] = value1[i];
					}
					this.gl.uniformMatrix2fv(index,false,this.__uniformMatrix2);
					break;
				case 16:
					var _g32 = 0;
					while(_g32 < 9) {
						var i1 = _g32++;
						this.__uniformMatrix3[i1] = value1[i1];
					}
					this.gl.uniformMatrix3fv(index,false,this.__uniformMatrix3);
					break;
				case 20:
					var _g33 = 0;
					while(_g33 < 16) {
						var i2 = _g33++;
						this.__uniformMatrix4[i2] = value1[i2];
					}
					this.gl.uniformMatrix4fv(index,false,this.__uniformMatrix4);
					break;
				default:
				}
			} else if(!this.__isUniform.get(parameter1.name)) this.gl.enableVertexAttribArray(parameter1.index);
		}
		var _g4 = 0;
		var _g13 = this.__paramInt;
		while(_g4 < _g13.length) {
			var parameter2 = _g13[_g4];
			++_g4;
			var value2 = parameter2.value;
			if(value2 != null) {
				var _g23 = parameter2.type;
				switch(_g23) {
				case 8:
					this.gl.uniform1i(index,value2[0]);
					break;
				case 9:
					this.gl.uniform2i(index,value2[0],value2[1]);
					break;
				case 10:
					this.gl.uniform3i(index,value2[0],value2[1],value2[2]);
					break;
				case 11:
					this.gl.uniform4i(index,value2[0],value2[1],value2[2],value2[3]);
					break;
				default:
				}
			} else if(!this.__isUniform.get(parameter2.name)) this.gl.enableVertexAttribArray(parameter2.index);
		}
	}
	,get_data: function() {
		if(this.__glSourceDirty || this.__data == null) this.__init();
		return this.__data;
	}
	,set_data: function(value) {
		return this.__data = value;
	}
	,get_glFragmentSource: function() {
		return this.__glFragmentSource;
	}
	,set_glFragmentSource: function(value) {
		if(value != this.__glFragmentSource) this.__glSourceDirty = true;
		return this.__glFragmentSource = value;
	}
	,get_glVertexSource: function() {
		return this.__glVertexSource;
	}
	,set_glVertexSource: function(value) {
		if(value != this.__glFragmentSource) this.__glSourceDirty = true;
		return this.__glFragmentSource = value;
	}
	,__class__: openfl_display_Shader
	,__properties__: {set_glVertexSource:"set_glVertexSource",get_glVertexSource:"get_glVertexSource",set_glFragmentSource:"set_glFragmentSource",get_glFragmentSource:"get_glFragmentSource",set_data:"set_data",get_data:"get_data"}
};
var openfl_display_ShaderData = function(byteArray) {
};
$hxClasses["openfl.display.ShaderData"] = openfl_display_ShaderData;
openfl_display_ShaderData.__name__ = ["openfl","display","ShaderData"];
openfl_display_ShaderData.prototype = {
	aAlpha: null
	,aPosition: null
	,aTexCoord: null
	,uImage0: null
	,uMatrix: null
	,__class__: openfl_display_ShaderData
};
var openfl_display_ShaderInput = function() {
	this.channels = 0;
	this.height = 0;
	this.index = 0;
	this.width = 0;
};
$hxClasses["openfl.display.ShaderInput"] = openfl_display_ShaderInput;
openfl_display_ShaderInput.__name__ = ["openfl","display","ShaderInput"];
openfl_display_ShaderInput.prototype = {
	channels: null
	,height: null
	,index: null
	,input: null
	,name: null
	,smoothing: null
	,width: null
	,__class__: openfl_display_ShaderInput
};
var openfl_display_ShaderParameter = function() {
	this.index = 0;
};
$hxClasses["openfl.display.ShaderParameter"] = openfl_display_ShaderParameter;
openfl_display_ShaderParameter.__name__ = ["openfl","display","ShaderParameter"];
openfl_display_ShaderParameter.prototype = {
	index: null
	,name: null
	,type: null
	,value: null
	,__class__: openfl_display_ShaderParameter
};
var openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$ = {};
$hxClasses["openfl.display._ShaderParameterType.ShaderParameterType_Impl_"] = openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.__name__ = ["openfl","display","_ShaderParameterType","ShaderParameterType_Impl_"];
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.fromString = function(value) {
	switch(value) {
	case "bool":
		return 0;
	case "bool2":
		return 1;
	case "bool3":
		return 1;
	case "bool4":
		return 1;
	case "float":
		return 4;
	case "float2":
		return 5;
	case "float3":
		return 6;
	case "float4":
		return 7;
	case "int":
		return 8;
	case "int2":
		return 9;
	case "int3":
		return 10;
	case "int4":
		return 11;
	case "matrix2x2":
		return 12;
	case "matrix2x3":
		return 13;
	case "matrix2x4":
		return 14;
	case "matrix3x2":
		return 15;
	case "matrix3x3":
		return 16;
	case "matrix3x4":
		return 17;
	case "matrix4x2":
		return 18;
	case "matrix4x3":
		return 19;
	case "matrix4x4":
		return 20;
	default:
		return null;
	}
};
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "bool";
	case 1:
		return "bool2";
	case 2:
		return "bool3";
	case 3:
		return "bool4";
	case 4:
		return "float";
	case 5:
		return "float2";
	case 6:
		return "float3";
	case 7:
		return "float4";
	case 8:
		return "int";
	case 9:
		return "int2";
	case 10:
		return "int3";
	case 11:
		return "int4";
	case 12:
		return "matrix2x2";
	case 13:
		return "matrix2x3";
	case 14:
		return "matrix2x4";
	case 15:
		return "matrix3x2";
	case 16:
		return "matrix3x3";
	case 17:
		return "matrix3x4";
	case 18:
		return "matrix4x2";
	case 19:
		return "matrix4x3";
	case 20:
		return "matrix4x4";
	default:
		return null;
	}
};
var openfl_display__$ShaderPrecision_ShaderPrecision_$Impl_$ = {};
$hxClasses["openfl.display._ShaderPrecision.ShaderPrecision_Impl_"] = openfl_display__$ShaderPrecision_ShaderPrecision_$Impl_$;
openfl_display__$ShaderPrecision_ShaderPrecision_$Impl_$.__name__ = ["openfl","display","_ShaderPrecision","ShaderPrecision_Impl_"];
openfl_display__$ShaderPrecision_ShaderPrecision_$Impl_$.fromString = function(value) {
	switch(value) {
	case "fast":
		return 0;
	case "full":
		return 1;
	default:
		return null;
	}
};
openfl_display__$ShaderPrecision_ShaderPrecision_$Impl_$.toString = function(value) {
	switch(value) {
	case 1:
		return "full";
	case 0:
		return "fast";
	default:
		return null;
	}
};
var openfl_display_Shape = function() {
	openfl_display_DisplayObject.call(this);
};
$hxClasses["openfl.display.Shape"] = openfl_display_Shape;
openfl_display_Shape.__name__ = ["openfl","display","Shape"];
openfl_display_Shape.__super__ = openfl_display_DisplayObject;
openfl_display_Shape.prototype = $extend(openfl_display_DisplayObject.prototype,{
	get_graphics: function() {
		if(this.__graphics == null) this.__graphics = new openfl_display_Graphics(this);
		return this.__graphics;
	}
	,__class__: openfl_display_Shape
	,__properties__: $extend(openfl_display_DisplayObject.prototype.__properties__,{get_graphics:"get_graphics"})
});
var openfl_display_SimpleButton = function(upState,overState,downState,hitTestState) {
	openfl_display_InteractiveObject.call(this);
	this.enabled = true;
	this.trackAsMenu = false;
	this.useHandCursor = true;
	this.set_upState(upState != null?upState:new openfl_display_DisplayObject());
	this.set_overState(overState);
	this.set_downState(downState);
	this.set_hitTestState(hitTestState != null?hitTestState:new openfl_display_DisplayObject());
	this.addEventListener("mouseDown",$bind(this,this.__this_onMouseDown));
	this.addEventListener("mouseOut",$bind(this,this.__this_onMouseOut));
	this.addEventListener("mouseOver",$bind(this,this.__this_onMouseOver));
	this.addEventListener("mouseUp",$bind(this,this.__this_onMouseUp));
	this.set___currentState(this.upState);
	if(openfl_display_SimpleButton.__initSymbol != null) {
		var swf = openfl_display_SimpleButton.__initSWF;
		this.__symbol = openfl_display_SimpleButton.__initSymbol;
		openfl_display_SimpleButton.__initSWF = null;
		openfl_display_SimpleButton.__initSymbol = null;
		this.__fromSymbol(swf,this.__symbol);
	}
};
$hxClasses["openfl.display.SimpleButton"] = openfl_display_SimpleButton;
openfl_display_SimpleButton.__name__ = ["openfl","display","SimpleButton"];
openfl_display_SimpleButton.__super__ = openfl_display_InteractiveObject;
openfl_display_SimpleButton.prototype = $extend(openfl_display_InteractiveObject.prototype,{
	downState: null
	,enabled: null
	,hitTestState: null
	,overState: null
	,trackAsMenu: null
	,upState: null
	,useHandCursor: null
	,__currentState: null
	,__ignoreEvent: null
	,__previousStates: null
	,__soundTransform: null
	,__symbol: null
	,__fromSymbol: function(swf,symbol) {
		this.__symbol = symbol;
		if(symbol.downState != null) this.set_downState(symbol.downState.__createObject(swf));
		if(symbol.hitState != null) this.set_hitTestState(symbol.hitState.__createObject(swf));
		if(symbol.overState != null) this.set_overState(symbol.overState.__createObject(swf));
		if(symbol.upState != null) this.set_upState(symbol.upState.__createObject(swf));
	}
	,__getBounds: function(rect,matrix) {
		openfl_display_InteractiveObject.prototype.__getBounds.call(this,rect,matrix);
		if(matrix != null) {
			this.__updateTransforms(matrix);
			this.__updateChildren(true);
		}
		this.__currentState.__getBounds(rect,this.__currentState.__worldTransform);
		if(matrix != null) {
			this.__updateTransforms();
			this.__updateChildren(true);
		}
	}
	,__getRenderBounds: function(rect,matrix) {
		if(this.__scrollRect != null) {
			openfl_display_InteractiveObject.prototype.__getRenderBounds.call(this,rect,matrix);
			return;
		} else openfl_display_InteractiveObject.prototype.__getBounds.call(this,rect,matrix);
		if(matrix != null) {
			this.__updateTransforms(matrix);
			this.__updateChildren(true);
		}
		this.__currentState.__getRenderBounds(rect,this.__currentState.__worldTransform);
		if(matrix != null) {
			this.__updateTransforms();
			this.__updateChildren(true);
		}
	}
	,__getCursor: function() {
		if(this.useHandCursor && !this.__ignoreEvent) return lime_ui_MouseCursor.POINTER; else return null;
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		var hitTest = false;
		if(this.hitTestState != null) {
			var cacheTransform = this.__updateTransform(this.hitTestState);
			if(this.hitTestState.__hitTest(x,y,shapeFlag,stack,interactiveOnly,hitObject)) {
				if(stack != null) stack[stack.length - 1] = hitObject;
				hitTest = true;
			}
			this.__resetTransform(this.hitTestState,cacheTransform);
		} else if(this.__currentState != null) {
			if(!hitObject.get_visible() || this.__isMask || interactiveOnly && !this.mouseEnabled) return false;
			if(this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) return false;
			var cacheTransform1 = this.__updateTransform(this.__currentState);
			if(this.__currentState.__hitTest(x,y,shapeFlag,stack,interactiveOnly,hitObject)) hitTest = interactiveOnly;
			this.__resetTransform(this.__currentState,cacheTransform1);
		}
		if(stack != null) while(stack.length > 1 && stack[stack.length - 1] == stack[stack.length - 2]) stack.pop();
		return hitTest;
	}
	,__hitTestMask: function(x,y) {
		var hitTest = false;
		var cacheTransform = this.__updateTransform(this.__currentState);
		if(this.__currentState.__hitTestMask(x,y)) hitTest = true;
		this.__resetTransform(this.__currentState,cacheTransform);
		return hitTest;
	}
	,__renderCairo: function(renderSession) {
		if(!this.__renderable || this.__worldAlpha <= 0) return;
		renderSession.maskManager.pushObject(this);
		this.__currentState.__renderCairo(renderSession);
		renderSession.maskManager.popObject(this);
	}
	,__renderCairoMask: function(renderSession) {
		this.__currentState.__renderCairoMask(renderSession);
	}
	,__renderCanvas: function(renderSession) {
		if(!this.__renderable || this.__worldAlpha <= 0) return;
		renderSession.maskManager.pushObject(this);
		this.__currentState.__renderCanvas(renderSession);
		renderSession.maskManager.popObject(this);
	}
	,__renderCanvasMask: function(renderSession) {
		var bounds = new openfl_geom_Rectangle();
		this.__getBounds(bounds,this.__transform);
		renderSession.context.rect(0,0,bounds.width,bounds.height);
		this.__currentState.__renderCanvasMask(renderSession);
	}
	,__renderDOM: function(renderSession) {
		renderSession.maskManager.pushObject(this);
		var _g = 0;
		var _g1 = this.__previousStates;
		while(_g < _g1.get_length()) {
			var previousState = _g1.get(_g);
			++_g;
			previousState.__renderDOM(renderSession);
		}
		this.__previousStates.set_length(0);
		this.__currentState.__renderDOM(renderSession);
		renderSession.maskManager.popObject(this);
	}
	,__renderGL: function(renderSession) {
		if(!this.__renderable || this.__worldAlpha <= 0) return;
		renderSession.maskManager.pushObject(this);
		this.__currentState.__renderGL(renderSession);
		renderSession.maskManager.popObject(this);
	}
	,__resetTransform: function(state,cacheTransform) {
		state.__updateTransforms(cacheTransform);
		state.__updateChildren(false);
	}
	,__setStageReference: function(stage) {
		openfl_display_InteractiveObject.prototype.__setStageReference.call(this,stage);
		if(this.__currentState != null) this.__currentState.__setStageReference(stage);
	}
	,__updateTransform: function(state) {
		var cacheTransform = state.__worldTransform;
		var local = state.__transform;
		var parentTransform = this.__worldTransform;
		var overrideTransform = openfl_geom_Matrix.__temp;
		overrideTransform.a = local.a * parentTransform.a + local.b * parentTransform.c;
		overrideTransform.b = local.a * parentTransform.b + local.b * parentTransform.d;
		overrideTransform.c = local.c * parentTransform.a + local.d * parentTransform.c;
		overrideTransform.d = local.c * parentTransform.b + local.d * parentTransform.d;
		overrideTransform.tx = local.tx * parentTransform.a + local.ty * parentTransform.c + parentTransform.tx;
		overrideTransform.ty = local.tx * parentTransform.b + local.ty * parentTransform.d + parentTransform.ty;
		var cacheTransform1 = state.__transform;
		state.__transform = overrideTransform;
		state.__update(false,true);
		state.__transform = cacheTransform1;
		return cacheTransform1;
	}
	,__updateTransforms: function(overrideTransform) {
		openfl_display_InteractiveObject.prototype.__updateTransforms.call(this,overrideTransform);
		this.__updateTransform(this.__currentState);
	}
	,set_downState: function(downState) {
		if(this.downState != null && this.__currentState == this.downState) this.set___currentState(downState);
		return this.downState = downState;
	}
	,set_hitTestState: function(hitTestState) {
		return this.hitTestState = hitTestState;
	}
	,set_overState: function(overState) {
		if(this.overState != null && this.__currentState == this.overState) this.set___currentState(overState);
		return this.overState = overState;
	}
	,get_soundTransform: function() {
		if(this.__soundTransform == null) this.__soundTransform = new openfl_media_SoundTransform();
		return new openfl_media_SoundTransform(this.__soundTransform.volume,this.__soundTransform.pan);
	}
	,set_soundTransform: function(value) {
		this.__soundTransform = new openfl_media_SoundTransform(value.volume,value.pan);
		return value;
	}
	,set_upState: function(upState) {
		if(this.upState != null && this.__currentState == this.upState) this.set___currentState(upState);
		return this.upState = upState;
	}
	,set___currentState: function(value) {
		if(this.__currentState != null) this.__currentState.__renderParent = null;
		if(value.parent != null) value.parent.removeChild(value);
		value.__renderParent = this;
		return this.__currentState = value;
	}
	,__this_onMouseDown: function(event) {
		if(this.downState != null) this.set___currentState(this.downState);
	}
	,__this_onMouseOut: function(event) {
		this.__ignoreEvent = false;
		if(this.upState != this.__currentState) this.set___currentState(this.upState);
	}
	,__this_onMouseOver: function(event) {
		if(event.buttonDown) this.__ignoreEvent = true;
		if(this.overState != this.__currentState && this.overState != null && !this.__ignoreEvent) this.set___currentState(this.overState);
	}
	,__this_onMouseUp: function(event) {
		this.__ignoreEvent = false;
		if(this.overState != null) this.set___currentState(this.overState); else this.set___currentState(this.upState);
	}
	,__class__: openfl_display_SimpleButton
	,__properties__: $extend(openfl_display_InteractiveObject.prototype.__properties__,{set___currentState:"set___currentState",set_upState:"set_upState",set_soundTransform:"set_soundTransform",get_soundTransform:"get_soundTransform",set_overState:"set_overState",set_hitTestState:"set_hitTestState",set_downState:"set_downState"})
});
var openfl_display__$SpreadMethod_SpreadMethod_$Impl_$ = {};
$hxClasses["openfl.display._SpreadMethod.SpreadMethod_Impl_"] = openfl_display__$SpreadMethod_SpreadMethod_$Impl_$;
openfl_display__$SpreadMethod_SpreadMethod_$Impl_$.__name__ = ["openfl","display","_SpreadMethod","SpreadMethod_Impl_"];
openfl_display__$SpreadMethod_SpreadMethod_$Impl_$.fromString = function(value) {
	switch(value) {
	case "pad":
		return 0;
	case "reflect":
		return 1;
	case "repeat":
		return 2;
	default:
		return null;
	}
};
openfl_display__$SpreadMethod_SpreadMethod_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "pad";
	case 1:
		return "reflect";
	case 2:
		return "repeat";
	default:
		return null;
	}
};
var openfl_display_Stage = function(window,color) {
	openfl_display_DisplayObjectContainer.call(this);
	this.application = window.application;
	this.window = window;
	if(color == null) {
		this.__transparent = true;
		this.set_color(0);
	} else this.set_color(color);
	this.set_name(null);
	this.__deltaTime = 0;
	this.__displayState = 2;
	this.__mouseX = 0;
	this.__mouseY = 0;
	this.__lastClickTime = 0;
	this.__logicalWidth = 0;
	this.__logicalHeight = 0;
	this.__displayMatrix = new openfl_geom_Matrix();
	this.stage3Ds = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
	var x = new openfl_display_Stage3D();
	this.stage3Ds.push(x);
	this.__resize();
	this.stage = this;
	this.align = 6;
	this.allowsFullScreen = false;
	this.allowsFullScreenInteractive = false;
	this.quality = 1;
	this.scaleMode = 2;
	this.showDefaultContextMenu = true;
	this.stageFocusRect = true;
	this.__macKeyboard = /AppleWebKit/.test (navigator.userAgent) && /Mobile\/\w+/.test (navigator.userAgent) || /Mac/.test (navigator.platform);
	this.__clearBeforeRender = true;
	this.__stack = [];
	this.__rollOutStack = [];
	if(openfl_Lib.current.stage == null) this.stage.addChild(openfl_Lib.current);
};
$hxClasses["openfl.display.Stage"] = openfl_display_Stage;
openfl_display_Stage.__name__ = ["openfl","display","Stage"];
openfl_display_Stage.__interfaces__ = [lime_app_IModule];
openfl_display_Stage.__super__ = openfl_display_DisplayObjectContainer;
openfl_display_Stage.prototype = $extend(openfl_display_DisplayObjectContainer.prototype,{
	align: null
	,allowsFullScreen: null
	,allowsFullScreenInteractive: null
	,application: null
	,quality: null
	,scaleMode: null
	,showDefaultContextMenu: null
	,stage3Ds: null
	,stageFocusRect: null
	,stageHeight: null
	,stageWidth: null
	,window: null
	,__cacheFocus: null
	,__clearBeforeRender: null
	,__color: null
	,__colorSplit: null
	,__colorString: null
	,__deltaTime: null
	,__dirty: null
	,__displayMatrix: null
	,__displayState: null
	,__dragBounds: null
	,__dragObject: null
	,__dragOffsetX: null
	,__dragOffsetY: null
	,__focus: null
	,__fullscreen: null
	,__invalidated: null
	,__lastClickTime: null
	,__logicalWidth: null
	,__logicalHeight: null
	,__macKeyboard: null
	,__mouseDownLeft: null
	,__mouseDownMiddle: null
	,__mouseDownRight: null
	,__mouseOverTarget: null
	,__mouseX: null
	,__mouseY: null
	,__primaryTouch: null
	,__renderer: null
	,__rendering: null
	,__rollOutStack: null
	,__stack: null
	,__transparent: null
	,__wasDirty: null
	,addRenderer: function(renderer) {
		renderer.onRender.add((function(f,a1) {
			return function() {
				f(a1);
			};
		})($bind(this,this.render),renderer));
		renderer.onContextLost.add((function(f1,a11) {
			return function() {
				f1(a11);
			};
		})($bind(this,this.onRenderContextLost),renderer));
		renderer.onContextRestored.add((function(f2,a12) {
			return function(a2) {
				f2(a12,a2);
			};
		})($bind(this,this.onRenderContextRestored),renderer));
	}
	,addWindow: function(window) {
		if(this.window != window) return;
		window.onActivate.add((function(f,a1) {
			return function() {
				f(a1);
			};
		})($bind(this,this.onWindowActivate),window));
		window.onClose.add((function(f1,a11) {
			return function() {
				f1(a11);
			};
		})($bind(this,this.onWindowClose),window));
		window.onCreate.add((function(f2,a12) {
			return function() {
				f2(a12);
			};
		})($bind(this,this.onWindowCreate),window));
		window.onDeactivate.add((function(f3,a13) {
			return function() {
				f3(a13);
			};
		})($bind(this,this.onWindowDeactivate),window));
		window.onDropFile.add((function(f4,a14) {
			return function(a2) {
				f4(a14,a2);
			};
		})($bind(this,this.onWindowDropFile),window));
		window.onEnter.add((function(f5,a15) {
			return function() {
				f5(a15);
			};
		})($bind(this,this.onWindowEnter),window));
		window.onFocusIn.add((function(f6,a16) {
			return function() {
				f6(a16);
			};
		})($bind(this,this.onWindowFocusIn),window));
		window.onFocusOut.add((function(f7,a17) {
			return function() {
				f7(a17);
			};
		})($bind(this,this.onWindowFocusOut),window));
		window.onFullscreen.add((function(f8,a18) {
			return function() {
				f8(a18);
			};
		})($bind(this,this.onWindowFullscreen),window));
		window.onKeyDown.add((function(f9,a19) {
			return function(a21,a3) {
				f9(a19,a21,a3);
			};
		})($bind(this,this.onKeyDown),window));
		window.onKeyUp.add((function(f10,a110) {
			return function(a22,a31) {
				f10(a110,a22,a31);
			};
		})($bind(this,this.onKeyUp),window));
		window.onLeave.add((function(f11,a111) {
			return function() {
				f11(a111);
			};
		})($bind(this,this.onWindowLeave),window));
		window.onMinimize.add((function(f12,a112) {
			return function() {
				f12(a112);
			};
		})($bind(this,this.onWindowMinimize),window));
		window.onMouseDown.add((function(f13,a113) {
			return function(x,y,a23) {
				f13(a113,x,y,a23);
			};
		})($bind(this,this.onMouseDown),window));
		window.onMouseMove.add((function(f14,a114) {
			return function(x1,y1) {
				f14(a114,x1,y1);
			};
		})($bind(this,this.onMouseMove),window));
		window.onMouseMoveRelative.add((function(f15,a115) {
			return function(x2,y2) {
				f15(a115,x2,y2);
			};
		})($bind(this,this.onMouseMoveRelative),window));
		window.onMouseUp.add((function(f16,a116) {
			return function(x3,y3,a24) {
				f16(a116,x3,y3,a24);
			};
		})($bind(this,this.onMouseUp),window));
		window.onMouseWheel.add((function(f17,a117) {
			return function(a25,a32) {
				f17(a117,a25,a32);
			};
		})($bind(this,this.onMouseWheel),window));
		window.onMove.add((function(f18,a118) {
			return function(x4,y4) {
				f18(a118,x4,y4);
			};
		})($bind(this,this.onWindowMove),window));
		window.onResize.add((function(f19,a119) {
			return function(a26,a33) {
				f19(a119,a26,a33);
			};
		})($bind(this,this.onWindowResize),window));
		window.onRestore.add((function(f20,a120) {
			return function() {
				f20(a120);
			};
		})($bind(this,this.onWindowRestore),window));
		window.onTextEdit.add((function(f21,a121) {
			return function(a27,a34,a4) {
				f21(a121,a27,a34,a4);
			};
		})($bind(this,this.onTextEdit),window));
		window.onTextInput.add((function(f22,a122) {
			return function(a28) {
				f22(a122,a28);
			};
		})($bind(this,this.onTextInput),window));
		if(window.id > -1) this.onWindowCreate(window);
	}
	,registerModule: function(application) {
		application.onExit.add($bind(this,this.onModuleExit),false,0);
		application.onUpdate.add($bind(this,this.update));
		var $it0 = lime_ui_Gamepad.devices.iterator();
		while( $it0.hasNext() ) {
			var gamepad = $it0.next();
			this.__onGamepadConnect(gamepad);
		}
		lime_ui_Gamepad.onConnect.add($bind(this,this.__onGamepadConnect));
		lime_ui_Touch.onStart.add($bind(this,this.onTouchStart));
		lime_ui_Touch.onMove.add($bind(this,this.onTouchMove));
		lime_ui_Touch.onEnd.add($bind(this,this.onTouchEnd));
	}
	,removeRenderer: function(renderer) {
	}
	,removeWindow: function(window) {
	}
	,setPreloader: function(preloader) {
	}
	,unregisterModule: function(application) {
		application.onExit.remove($bind(this,this.onModuleExit));
		application.onUpdate.remove($bind(this,this.update));
		lime_ui_Gamepad.onConnect.remove($bind(this,this.__onGamepadConnect));
		lime_ui_Touch.onStart.remove($bind(this,this.onTouchStart));
		lime_ui_Touch.onMove.remove($bind(this,this.onTouchMove));
		lime_ui_Touch.onEnd.remove($bind(this,this.onTouchEnd));
	}
	,globalToLocal: function(pos) {
		return pos.clone();
	}
	,invalidate: function() {
		this.__invalidated = true;
	}
	,localToGlobal: function(pos) {
		return pos.clone();
	}
	,onGamepadAxisMove: function(gamepad,axis,value) {
		try {
			openfl_ui_GameInput.__onGamepadAxisMove(gamepad,axis,value);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onGamepadButtonDown: function(gamepad,button) {
		try {
			openfl_ui_GameInput.__onGamepadButtonDown(gamepad,button);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onGamepadButtonUp: function(gamepad,button) {
		try {
			openfl_ui_GameInput.__onGamepadButtonUp(gamepad,button);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onGamepadConnect: function(gamepad) {
		try {
			openfl_ui_GameInput.__onGamepadConnect(gamepad);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onGamepadDisconnect: function(gamepad) {
		try {
			openfl_ui_GameInput.__onGamepadDisconnect(gamepad);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onJoystickAxisMove: function(joystick,axis,value) {
	}
	,onJoystickButtonDown: function(joystick,button) {
	}
	,onJoystickButtonUp: function(joystick,button) {
	}
	,onJoystickConnect: function(joystick) {
	}
	,onJoystickDisconnect: function(joystick) {
	}
	,onJoystickHatMove: function(joystick,hat,position) {
	}
	,onJoystickTrackballMove: function(joystick,trackball,value) {
	}
	,onKeyDown: function(window,keyCode,modifier) {
		if(this.window == null || this.window != window) return;
		try {
			this.__onKey("keyDown",keyCode,modifier);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onKeyUp: function(window,keyCode,modifier) {
		if(this.window == null || this.window != window) return;
		try {
			this.__onKey("keyUp",keyCode,modifier);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onModuleExit: function(code) {
		if(this.window != null) try {
			this.__broadcastEvent(new openfl_events_Event("deactivate"));
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onMouseDown: function(window,x,y,button) {
		if(this.window == null || this.window != window) return;
		try {
			var type;
			switch(button) {
			case 1:
				type = "middleMouseDown";
				break;
			case 2:
				type = "rightMouseDown";
				break;
			default:
				type = "mouseDown";
			}
			this.__onMouse(type,x * window.__scale | 0,y * window.__scale | 0,button);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onMouseMove: function(window,x,y) {
		if(this.window == null || this.window != window) return;
		try {
			this.__onMouse("mouseMove",x * window.__scale | 0,y * window.__scale | 0,0);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onMouseMoveRelative: function(window,x,y) {
	}
	,onMouseUp: function(window,x,y,button) {
		if(this.window == null || this.window != window) return;
		try {
			var type;
			switch(button) {
			case 1:
				type = "middleMouseUp";
				break;
			case 2:
				type = "rightMouseUp";
				break;
			default:
				type = "mouseUp";
			}
			this.__onMouse(type,x * window.__scale | 0,y * window.__scale | 0,button);
			if(!this.showDefaultContextMenu && button == 2) window.onMouseUp.cancel();
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onMouseWheel: function(window,deltaX,deltaY) {
		if(this.window == null || this.window != window) return;
		try {
			this.__onMouseWheel(deltaX * window.__scale | 0,deltaY * window.__scale | 0);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onPreloadComplete: function() {
	}
	,onPreloadProgress: function(loaded,total) {
	}
	,onRenderContextLost: function(renderer) {
	}
	,onRenderContextRestored: function(renderer,context) {
	}
	,onTextEdit: function(window,text,start,length) {
	}
	,onTextInput: function(window,text) {
		if(this.window == null || this.window != window) return;
		try {
			var stack = [];
			if(this.__focus == null) this.__getInteractive(stack); else this.__focus.__getInteractive(stack);
			var event = new openfl_events_TextEvent("textInput",true,false,text);
			if(stack.length > 0) {
				stack.reverse();
				this.__fireEvent(event,stack);
			} else this.__dispatchEvent(event);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onTouchMove: function(touch) {
		try {
			this.__onTouch("touchMove",touch);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onTouchEnd: function(touch) {
		try {
			if(this.__primaryTouch == touch) this.__primaryTouch = null;
			this.__onTouch("touchEnd",touch);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onTouchStart: function(touch) {
		try {
			if(this.__primaryTouch == null) this.__primaryTouch = touch;
			this.__onTouch("touchBegin",touch);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onWindowActivate: function(window) {
		if(this.window == null || this.window != window) return;
		try {
			this.__broadcastEvent(new openfl_events_Event("activate"));
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onWindowClose: function(window) {
		if(this.window == window) this.window = null;
	}
	,onWindowCreate: function(window) {
		if(this.window == null || this.window != window) return;
		try {
			if(window.renderer != null) {
				var _g = window.renderer.context;
				switch(_g[1]) {
				case 0:
					var gl = _g[2];
					this.__renderer = new openfl__$internal_renderer_opengl_GLRenderer(this,gl);
					break;
				case 1:
					var context = _g[2];
					this.__renderer = new openfl__$internal_renderer_canvas_CanvasRenderer(this,context);
					break;
				case 2:
					var element = _g[2];
					this.__renderer = new openfl__$internal_renderer_dom_DOMRenderer(this,element);
					break;
				case 4:
					var cairo = _g[2];
					break;
				case 5:
					var ctx = _g[2];
					break;
				default:
				}
			}
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onWindowDeactivate: function(window) {
		if(this.window == null || this.window != window) return;
		try {
			this.__primaryTouch = null;
			this.__broadcastEvent(new openfl_events_Event("deactivate"));
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onWindowDropFile: function(window,file) {
	}
	,onWindowEnter: function(window) {
	}
	,onWindowFocusIn: function(window) {
		if(this.window == null || this.window != window) return;
		try {
			this.set_focus(this.__cacheFocus);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onWindowFocusOut: function(window) {
		if(this.window == null || this.window != window) return;
		try {
			var currentFocus = this.get_focus();
			this.set_focus(null);
			this.__cacheFocus = currentFocus;
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onWindowFullscreen: function(window) {
		if(this.window == null || this.window != window) return;
		try {
			this.__resize();
			if(this.__displayState == 2) {
				this.__displayState = 1;
				this.__dispatchEvent(new openfl_events_FullScreenEvent("fullScreen",false,false,false,true));
			}
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onWindowLeave: function(window) {
		if(this.window == null || this.window != window) return;
		try {
			this.__dispatchEvent(new openfl_events_Event("mouseLeave"));
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onWindowMinimize: function(window) {
		if(this.window == null || this.window != window) return;
		try {
			this.__primaryTouch = null;
			this.__broadcastEvent(new openfl_events_Event("deactivate"));
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onWindowMove: function(window,x,y) {
	}
	,onWindowResize: function(window,width,height) {
		if(this.window == null || this.window != window) return;
		try {
			this.__resize();
			if(this.__displayState != 2 && !window.__fullscreen) {
				this.__displayState = 2;
				this.__dispatchEvent(new openfl_events_FullScreenEvent("fullScreen",false,false,true,true));
			}
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onWindowRestore: function(window) {
		if(this.window == null || this.window != window) return;
		try {
			this.__broadcastEvent(new openfl_events_Event("activate"));
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,render: function(renderer) {
		if(renderer.window == null || renderer.window != this.window) return;
		try {
			if(this.application != null && this.application.__windows.length > 0) {
				if(!this.__transformDirty) {
					this.__transformDirty = true;
					openfl_display_DisplayObject.__worldTransformDirty++;
				}
				if(!this.__renderDirty) {
					this.__renderDirty = true;
					openfl_display_DisplayObject.__worldRenderDirty++;
				}
			}
			if(this.__rendering) return;
			this.__rendering = true;
			if(this.__renderer != null) this.__renderer.clear();
			this.__broadcastEvent(new openfl_events_Event("enterFrame"));
			this.__broadcastEvent(new openfl_events_Event("exitFrame"));
			if(this.__invalidated) {
				this.__invalidated = false;
				this.__broadcastEvent(new openfl_events_Event("render"));
			}
			this.__renderable = true;
			this.__enterFrame(this.__deltaTime);
			this.__deltaTime = 0;
			this.__update(false,true);
			if(this.__renderer != null) {
				if(renderer.type == lime_graphics_RendererType.CAIRO) {
					var _g = renderer.context;
					switch(_g[1]) {
					case 4:
						var cairo = _g[2];
						(js_Boot.__cast(this.__renderer , openfl__$internal_renderer_cairo_CairoRenderer)).cairo = cairo;
						this.__renderer.renderSession.cairo = cairo;
						break;
					default:
					}
				}
				this.__renderer.render();
			}
			this.__rendering = false;
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,update: function(deltaTime) {
		this.__deltaTime = deltaTime;
	}
	,__broadcastEvent: function(event) {
		if(openfl_display_DisplayObject.__broadcastEvents.exists(event.type)) {
			var dispatchers = openfl_display_DisplayObject.__broadcastEvents.get(event.type);
			var _g = 0;
			while(_g < dispatchers.length) {
				var dispatcher = dispatchers[_g];
				++_g;
				dispatcher.__dispatch(event);
			}
		}
	}
	,__drag: function(mouse) {
		var parent = this.__dragObject.parent;
		if(parent != null) parent.__getWorldTransform().__transformInversePoint(mouse);
		var x = mouse.x + this.__dragOffsetX;
		var y = mouse.y + this.__dragOffsetY;
		if(this.__dragBounds != null) {
			if(x < this.__dragBounds.x) x = this.__dragBounds.x; else if(x > this.__dragBounds.get_right()) x = this.__dragBounds.get_right();
			if(y < this.__dragBounds.y) y = this.__dragBounds.y; else if(y > this.__dragBounds.get_bottom()) y = this.__dragBounds.get_bottom();
		}
		this.__dragObject.set_x(x);
		this.__dragObject.set_y(y);
	}
	,__fireEvent: function(event,stack) {
		var target;
		var length = stack.length;
		if(length == 0) {
			event.eventPhase = 2;
			target = event.target;
			target.__dispatch(event);
		} else {
			event.eventPhase = 1;
			event.target = stack[stack.length - 1];
			var _g1 = 0;
			var _g = length - 1;
			while(_g1 < _g) {
				var i = _g1++;
				stack[i].__dispatch(event);
				if(event.__isCanceled) return;
			}
			event.eventPhase = 2;
			target = event.target;
			target.__dispatch(event);
			if(event.__isCanceled) return;
			if(event.bubbles) {
				event.eventPhase = 3;
				var i1 = length - 2;
				while(i1 >= 0) {
					stack[i1].__dispatch(event);
					if(event.__isCanceled) return;
					i1--;
				}
			}
		}
	}
	,__getInteractive: function(stack) {
		if(stack != null) stack.push(this);
		return true;
	}
	,__handleError: function(e) {
		var event = new openfl_events_UncaughtErrorEvent("uncaughtError",true,true,e);
		openfl_Lib.current.__loaderInfo.uncaughtErrorEvents.dispatchEvent(event);
	}
	,__onKey: function(type,keyCode,modifier) {
		openfl_events_MouseEvent.__altKey = lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_altKey(modifier);
		openfl_events_MouseEvent.__commandKey = lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_metaKey(modifier);
		openfl_events_MouseEvent.__ctrlKey = lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_ctrlKey(modifier);
		openfl_events_MouseEvent.__shiftKey = lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey(modifier);
		var stack = [];
		if(this.__focus == null) this.__getInteractive(stack); else this.__focus.__getInteractive(stack);
		if(stack.length > 0) {
			var keyLocation;
			switch(keyCode) {
			case 1073742048:case 1073742049:case 1073742050:case 1073742051:
				keyLocation = 1;
				break;
			case 1073742052:case 1073742053:case 1073742054:case 1073742055:
				keyLocation = 2;
				break;
			case 1073741908:case 1073741909:case 1073741910:case 1073741911:case 1073741912:case 1073741913:case 1073741914:case 1073741915:case 1073741916:case 1073741917:case 1073741918:case 1073741919:case 1073741920:case 1073741921:case 1073741922:case 1073741923:case 1073742044:
				keyLocation = 3;
				break;
			default:
				keyLocation = 0;
			}
			var keyCode1;
			switch(keyCode) {
			case 8:
				keyCode1 = 8;
				break;
			case 9:
				keyCode1 = 9;
				break;
			case 13:
				keyCode1 = 13;
				break;
			case 27:
				keyCode1 = 27;
				break;
			case 32:
				keyCode1 = 32;
				break;
			case 33:
				keyCode1 = 49;
				break;
			case 34:
				keyCode1 = 222;
				break;
			case 35:
				keyCode1 = 51;
				break;
			case 36:
				keyCode1 = 52;
				break;
			case 37:
				keyCode1 = 53;
				break;
			case 38:
				keyCode1 = 55;
				break;
			case 39:
				keyCode1 = 222;
				break;
			case 40:
				keyCode1 = 57;
				break;
			case 41:
				keyCode1 = 48;
				break;
			case 42:
				keyCode1 = 56;
				break;
			case 44:
				keyCode1 = 188;
				break;
			case 45:
				keyCode1 = 189;
				break;
			case 46:
				keyCode1 = 190;
				break;
			case 47:
				keyCode1 = 191;
				break;
			case 48:
				keyCode1 = 48;
				break;
			case 49:
				keyCode1 = 49;
				break;
			case 50:
				keyCode1 = 50;
				break;
			case 51:
				keyCode1 = 51;
				break;
			case 52:
				keyCode1 = 52;
				break;
			case 53:
				keyCode1 = 53;
				break;
			case 54:
				keyCode1 = 54;
				break;
			case 55:
				keyCode1 = 55;
				break;
			case 56:
				keyCode1 = 56;
				break;
			case 57:
				keyCode1 = 57;
				break;
			case 58:
				keyCode1 = 186;
				break;
			case 59:
				keyCode1 = 186;
				break;
			case 60:
				keyCode1 = 60;
				break;
			case 61:
				keyCode1 = 187;
				break;
			case 62:
				keyCode1 = 190;
				break;
			case 63:
				keyCode1 = 191;
				break;
			case 64:
				keyCode1 = 50;
				break;
			case 91:
				keyCode1 = 219;
				break;
			case 92:
				keyCode1 = 220;
				break;
			case 93:
				keyCode1 = 221;
				break;
			case 94:
				keyCode1 = 54;
				break;
			case 95:
				keyCode1 = 189;
				break;
			case 96:
				keyCode1 = 192;
				break;
			case 97:
				keyCode1 = 65;
				break;
			case 98:
				keyCode1 = 66;
				break;
			case 99:
				keyCode1 = 67;
				break;
			case 100:
				keyCode1 = 68;
				break;
			case 101:
				keyCode1 = 69;
				break;
			case 102:
				keyCode1 = 70;
				break;
			case 103:
				keyCode1 = 71;
				break;
			case 104:
				keyCode1 = 72;
				break;
			case 105:
				keyCode1 = 73;
				break;
			case 106:
				keyCode1 = 74;
				break;
			case 107:
				keyCode1 = 75;
				break;
			case 108:
				keyCode1 = 76;
				break;
			case 109:
				keyCode1 = 77;
				break;
			case 110:
				keyCode1 = 78;
				break;
			case 111:
				keyCode1 = 79;
				break;
			case 112:
				keyCode1 = 80;
				break;
			case 113:
				keyCode1 = 81;
				break;
			case 114:
				keyCode1 = 82;
				break;
			case 115:
				keyCode1 = 83;
				break;
			case 116:
				keyCode1 = 84;
				break;
			case 117:
				keyCode1 = 85;
				break;
			case 118:
				keyCode1 = 86;
				break;
			case 119:
				keyCode1 = 87;
				break;
			case 120:
				keyCode1 = 88;
				break;
			case 121:
				keyCode1 = 89;
				break;
			case 122:
				keyCode1 = 90;
				break;
			case 127:
				keyCode1 = 46;
				break;
			case 1073741881:
				keyCode1 = 20;
				break;
			case 1073741882:
				keyCode1 = 112;
				break;
			case 1073741883:
				keyCode1 = 113;
				break;
			case 1073741884:
				keyCode1 = 114;
				break;
			case 1073741885:
				keyCode1 = 115;
				break;
			case 1073741886:
				keyCode1 = 116;
				break;
			case 1073741887:
				keyCode1 = 117;
				break;
			case 1073741888:
				keyCode1 = 118;
				break;
			case 1073741889:
				keyCode1 = 119;
				break;
			case 1073741890:
				keyCode1 = 120;
				break;
			case 1073741891:
				keyCode1 = 121;
				break;
			case 1073741892:
				keyCode1 = 122;
				break;
			case 1073741893:
				keyCode1 = 123;
				break;
			case 1073741894:
				keyCode1 = 301;
				break;
			case 1073741895:
				keyCode1 = 145;
				break;
			case 1073741896:
				keyCode1 = 19;
				break;
			case 1073741897:
				keyCode1 = 45;
				break;
			case 1073741898:
				keyCode1 = 36;
				break;
			case 1073741899:
				keyCode1 = 33;
				break;
			case 1073741901:
				keyCode1 = 35;
				break;
			case 1073741902:
				keyCode1 = 34;
				break;
			case 1073741903:
				keyCode1 = 39;
				break;
			case 1073741904:
				keyCode1 = 37;
				break;
			case 1073741905:
				keyCode1 = 40;
				break;
			case 1073741906:
				keyCode1 = 38;
				break;
			case 1073741907:
				keyCode1 = 144;
				break;
			case 1073741908:
				keyCode1 = 111;
				break;
			case 1073741909:
				keyCode1 = 106;
				break;
			case 1073741910:
				keyCode1 = 109;
				break;
			case 1073741911:
				keyCode1 = 107;
				break;
			case 1073741912:
				keyCode1 = 108;
				break;
			case 1073741913:
				keyCode1 = 97;
				break;
			case 1073741914:
				keyCode1 = 98;
				break;
			case 1073741915:
				keyCode1 = 99;
				break;
			case 1073741916:
				keyCode1 = 100;
				break;
			case 1073741917:
				keyCode1 = 101;
				break;
			case 1073741918:
				keyCode1 = 102;
				break;
			case 1073741919:
				keyCode1 = 103;
				break;
			case 1073741920:
				keyCode1 = 104;
				break;
			case 1073741921:
				keyCode1 = 105;
				break;
			case 1073741922:
				keyCode1 = 96;
				break;
			case 1073741923:
				keyCode1 = 110;
				break;
			case 1073741925:
				keyCode1 = 302;
				break;
			case 1073741928:
				keyCode1 = 124;
				break;
			case 1073741929:
				keyCode1 = 125;
				break;
			case 1073741930:
				keyCode1 = 126;
				break;
			case 1073741982:
				keyCode1 = 13;
				break;
			case 1073742044:
				keyCode1 = 110;
				break;
			case 1073742048:
				keyCode1 = 17;
				break;
			case 1073742049:
				keyCode1 = 16;
				break;
			case 1073742050:
				keyCode1 = 18;
				break;
			case 1073742051:
				keyCode1 = 15;
				break;
			case 1073742052:
				keyCode1 = 17;
				break;
			case 1073742053:
				keyCode1 = 16;
				break;
			case 1073742054:
				keyCode1 = 18;
				break;
			case 1073742055:
				keyCode1 = 15;
				break;
			default:
				keyCode1 = keyCode;
			}
			var charCode = openfl_ui_Keyboard.__getCharCode(keyCode1,lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey(modifier));
			var event = new openfl_events_KeyboardEvent(type,true,false,charCode,keyCode1,keyLocation,this.__macKeyboard?lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_ctrlKey(modifier) || lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_metaKey(modifier):lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_ctrlKey(modifier),lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_altKey(modifier),lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey(modifier),lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_ctrlKey(modifier),lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_metaKey(modifier));
			stack.reverse();
			this.__fireEvent(event,stack);
			if(event.__preventDefault) {
				if(type == "keyDown") this.window.onKeyDown.cancel(); else this.window.onKeyUp.cancel();
			}
		}
	}
	,__onGamepadConnect: function(gamepad) {
		this.onGamepadConnect(gamepad);
		gamepad.onAxisMove.add((function(f,a1) {
			return function(a2,a3) {
				f(a1,a2,a3);
			};
		})($bind(this,this.onGamepadAxisMove),gamepad));
		gamepad.onButtonDown.add((function(f1,a11) {
			return function(a21) {
				f1(a11,a21);
			};
		})($bind(this,this.onGamepadButtonDown),gamepad));
		gamepad.onButtonUp.add((function(f2,a12) {
			return function(a22) {
				f2(a12,a22);
			};
		})($bind(this,this.onGamepadButtonUp),gamepad));
		gamepad.onDisconnect.add((function(f3,a13) {
			return function() {
				f3(a13);
			};
		})($bind(this,this.onGamepadDisconnect),gamepad));
	}
	,__onMouse: function(type,x,y,button) {
		if(button > 2) return;
		var targetPoint = new openfl_geom_Point(x,y);
		this.__displayMatrix.__transformInversePoint(targetPoint);
		this.__mouseX = targetPoint.x;
		this.__mouseY = targetPoint.y;
		var stack = [];
		var target = null;
		if(this.__hitTest(this.__mouseX,this.__mouseY,true,stack,true,this)) target = stack[stack.length - 1]; else {
			target = this;
			stack = [this];
		}
		if(target == null) target = this;
		var clickType = null;
		switch(type) {
		case "mouseDown":
			if(target.get_tabEnabled()) this.set_focus(target); else this.set_focus(null);
			this.__mouseDownLeft = target;
			break;
		case "middleMouseDown":
			this.__mouseDownMiddle = target;
			break;
		case "rightMouseDown":
			this.__mouseDownRight = target;
			break;
		case "mouseUp":
			if(this.__mouseDownLeft == target) clickType = "click";
			this.__mouseDownLeft = null;
			break;
		case "middleMouseUp":
			if(this.__mouseDownMiddle == target) clickType = "middleClick";
			this.__mouseDownMiddle = null;
			break;
		case "rightMouseUp":
			if(this.__mouseDownRight == target) clickType = "rightClick";
			this.__mouseDownRight = null;
			break;
		default:
		}
		this.__fireEvent(openfl_events_MouseEvent.__create(type,button,this.__mouseX,this.__mouseY,target == this?targetPoint:target.globalToLocal(targetPoint),target),stack);
		if(clickType != null) {
			this.__fireEvent(openfl_events_MouseEvent.__create(clickType,button,this.__mouseX,this.__mouseY,target == this?targetPoint:target.globalToLocal(targetPoint),target),stack);
			if(type == "mouseUp" && (js_Boot.__cast(target , openfl_display_InteractiveObject)).doubleClickEnabled) {
				var currentTime = openfl_Lib.getTimer();
				if(currentTime - this.__lastClickTime < 500) {
					this.__fireEvent(openfl_events_MouseEvent.__create("doubleClick",button,this.__mouseX,this.__mouseY,target == this?targetPoint:target.globalToLocal(targetPoint),target),stack);
					this.__lastClickTime = 0;
				} else this.__lastClickTime = currentTime;
			}
		}
		if(openfl_ui_Mouse.__cursor == "auto") {
			var cursor = null;
			if(this.__mouseDownLeft != null) cursor = this.__mouseDownLeft.__getCursor(); else {
				var _g = 0;
				while(_g < stack.length) {
					var target1 = stack[_g];
					++_g;
					cursor = target1.__getCursor();
					if(cursor != null) {
						lime_ui_Mouse.set_cursor(cursor);
						break;
					}
				}
			}
			if(cursor == null) lime_ui_Mouse.set_cursor(lime_ui_MouseCursor.ARROW);
		}
		var event;
		var localPoint;
		if(target != this.__mouseOverTarget) {
			if(this.__mouseOverTarget != null) {
				if(this.__mouseOverTarget == this) localPoint = targetPoint; else localPoint = this.__mouseOverTarget.globalToLocal(targetPoint);
				event = openfl_events_MouseEvent.__create("mouseOut",button,this.__mouseX,this.__mouseY,localPoint,this.__mouseOverTarget);
				this.__mouseOverTarget.__dispatchEvent(event);
			}
		}
		var _g1 = 0;
		var _g11 = this.__rollOutStack;
		while(_g1 < _g11.length) {
			var target2 = _g11[_g1];
			++_g1;
			if(HxOverrides.indexOf(stack,target2,0) == -1) {
				HxOverrides.remove(this.__rollOutStack,target2);
				localPoint = this.__mouseOverTarget.globalToLocal(targetPoint);
				event = openfl_events_MouseEvent.__create("rollOut",button,this.__mouseX,this.__mouseY,localPoint,this.__mouseOverTarget);
				event.bubbles = false;
				target2.__dispatchEvent(event);
			}
		}
		var _g2 = 0;
		while(_g2 < stack.length) {
			var target3 = stack[_g2];
			++_g2;
			if(HxOverrides.indexOf(this.__rollOutStack,target3,0) == -1) {
				if(target3.hasEventListener("rollOver")) {
					localPoint = target3.globalToLocal(targetPoint);
					event = openfl_events_MouseEvent.__create("rollOver",button,this.__mouseX,this.__mouseY,localPoint,target3);
					event.bubbles = false;
					target3.__dispatchEvent(event);
				}
				if(target3.hasEventListener("rollOut")) this.__rollOutStack.push(target3);
			}
		}
		if(target != this.__mouseOverTarget) {
			if(target != null) {
				if(target == this) localPoint = targetPoint; else localPoint = target.globalToLocal(targetPoint);
				event = openfl_events_MouseEvent.__create("mouseOver",button,this.__mouseX,this.__mouseY,localPoint,target);
				event.bubbles = true;
				target.__dispatchEvent(event);
			}
			this.__mouseOverTarget = target;
		}
		if(this.__dragObject != null) {
			this.__drag(targetPoint);
			var dropTarget = null;
			if(this.__mouseOverTarget == this.__dragObject) {
				var cacheMouseEnabled = this.__dragObject.mouseEnabled;
				var cacheMouseChildren = this.__dragObject.mouseChildren;
				this.__dragObject.mouseEnabled = false;
				this.__dragObject.mouseChildren = false;
				var stack1 = [];
				if(this.__hitTest(this.__mouseX,this.__mouseY,true,stack1,true,this)) dropTarget = stack1[stack1.length - 1];
				this.__dragObject.mouseEnabled = cacheMouseEnabled;
				this.__dragObject.mouseChildren = cacheMouseChildren;
			} else if(this.__mouseOverTarget != this) dropTarget = this.__mouseOverTarget;
			this.__dragObject.dropTarget = dropTarget;
		}
	}
	,__onMouseWheel: function(deltaX,deltaY) {
		var x = this.__mouseX;
		var y = this.__mouseY;
		var stack = [];
		var target = null;
		if(this.__hitTest(this.__mouseX,this.__mouseY,true,stack,true,this)) target = stack[stack.length - 1]; else {
			target = this;
			stack = [this];
		}
		if(target == null) target = this;
		var targetPoint = new openfl_geom_Point(x,y);
		this.__displayMatrix.__transformInversePoint(targetPoint);
		var delta = deltaY | 0;
		this.__fireEvent(openfl_events_MouseEvent.__create("mouseWheel",0,this.__mouseX,this.__mouseY,target == this?targetPoint:target.globalToLocal(targetPoint),target,delta),stack);
	}
	,__onTouch: function(type,touch) {
		var point = new openfl_geom_Point(Math.round(touch.x * this.window.__width * this.window.__scale),Math.round(touch.y * this.window.__height * this.window.__scale));
		this.__displayMatrix.__transformInversePoint(point);
		var touchX = point.x;
		var touchY = point.y;
		var __stack = [];
		if(this.__hitTest(touchX,touchY,false,__stack,true,this)) {
			var target = __stack[__stack.length - 1];
			if(target == null) target = this;
			var localPoint = target.globalToLocal(point);
			var touchEvent = openfl_events_TouchEvent.__create(type,null,touchX,touchY,localPoint,target);
			touchEvent.touchPointID = touch.id;
			touchEvent.isPrimaryTouchPoint = this.__primaryTouch == touch;
			this.__fireEvent(touchEvent,__stack);
		} else {
			var touchEvent1 = openfl_events_TouchEvent.__create(type,null,touchX,touchY,point,this);
			touchEvent1.touchPointID = touch.id;
			touchEvent1.isPrimaryTouchPoint = this.__primaryTouch == touch;
			this.__fireEvent(touchEvent1,[this.stage]);
		}
	}
	,__resize: function() {
		var cacheWidth = this.stageWidth;
		var cacheHeight = this.stageHeight;
		var windowWidth = this.window.__width * this.window.__scale | 0;
		var windowHeight = this.window.__height * this.window.__scale | 0;
		this.__logicalWidth = this.window.__width;
		this.__logicalHeight = this.window.__height;
		this.__displayMatrix.identity();
		if(this.__logicalWidth == 0 && this.__logicalHeight == 0) {
			this.stageWidth = windowWidth;
			this.stageHeight = windowHeight;
		} else {
			this.stageWidth = this.__logicalWidth;
			this.stageHeight = this.__logicalHeight;
			var scaleX = windowWidth / this.stageWidth;
			var scaleY = windowHeight / this.stageHeight;
			var targetScale = Math.min(scaleX,scaleY);
			var offsetX = Math.round((windowWidth - this.stageWidth * targetScale) / 2);
			var offsetY = Math.round((windowHeight - this.stageHeight * targetScale) / 2);
			this.__displayMatrix.scale(targetScale,targetScale);
			this.__displayMatrix.translate(offsetX,offsetY);
		}
		var _g = 0;
		var _g1 = this.stage3Ds;
		while(_g < _g1.get_length()) {
			var stage3D = _g1.get(_g);
			++_g;
			stage3D.__resize(this.stageWidth,this.stageHeight);
		}
		if(this.__renderer != null) this.__renderer.resize(windowWidth,windowHeight);
		if(this.stageWidth != cacheWidth || this.stageHeight != cacheHeight) this.__dispatchEvent(new openfl_events_Event("resize"));
	}
	,__setLogicalSize: function(width,height) {
		this.__logicalWidth = width;
		this.__logicalHeight = height;
		this.__resize();
	}
	,__startDrag: function(sprite,lockCenter,bounds) {
		if(bounds == null) this.__dragBounds = null; else this.__dragBounds = bounds.clone();
		this.__dragObject = sprite;
		if(this.__dragObject != null) {
			if(lockCenter) {
				this.__dragOffsetX = 0;
				this.__dragOffsetY = 0;
			} else {
				var mouse = new openfl_geom_Point(this.get_mouseX(),this.get_mouseY());
				var parent = this.__dragObject.parent;
				if(parent != null) parent.__getWorldTransform().__transformInversePoint(mouse);
				this.__dragOffsetX = this.__dragObject.get_x() - mouse.x;
				this.__dragOffsetY = this.__dragObject.get_y() - mouse.y;
			}
		}
	}
	,__stopDrag: function(sprite) {
		this.__dragBounds = null;
		this.__dragObject = null;
	}
	,__update: function(transformOnly,updateChildren,maskGrahpics) {
		if(transformOnly) {
			if(openfl_display_DisplayObject.__worldTransformDirty > 0) {
				openfl_display_DisplayObjectContainer.prototype.__update.call(this,true,updateChildren,maskGrahpics);
				if(updateChildren) {
					openfl_display_DisplayObject.__worldTransformDirty = 0;
					this.__dirty = true;
				}
			}
		} else if(openfl_display_DisplayObject.__worldTransformDirty > 0 || this.__dirty || openfl_display_DisplayObject.__worldRenderDirty > 0) {
			openfl_display_DisplayObjectContainer.prototype.__update.call(this,false,updateChildren,maskGrahpics);
			if(updateChildren) {
				openfl_display_DisplayObject.__worldTransformDirty = 0;
				openfl_display_DisplayObject.__worldRenderDirty = 0;
				this.__dirty = false;
			}
		}
	}
	,get_color: function() {
		return this.__color;
	}
	,set_color: function(value) {
		var r = (value & 16711680) >>> 16;
		var g = (value & 65280) >>> 8;
		var b = value & 255;
		this.__colorSplit = [r / 255,g / 255,b / 255];
		this.__colorString = "#" + StringTools.hex(value,6);
		return this.__color = value;
	}
	,get_displayState: function() {
		return this.__displayState;
	}
	,set_displayState: function(value) {
		if(this.window != null) switch(value) {
		case 2:
			if(this.window.__fullscreen) this.window.set_fullscreen(false);
			break;
		default:
			if(!this.window.__fullscreen) this.window.set_fullscreen(true);
		}
		return this.__displayState = value;
	}
	,get_focus: function() {
		return this.__focus;
	}
	,set_focus: function(value) {
		if(value != this.__focus) {
			var oldFocus = this.__focus;
			this.__focus = value;
			this.__cacheFocus = value;
			if(oldFocus != null) {
				var event = new openfl_events_FocusEvent("focusOut",true,false,this.__focus,false,0);
				var stack = [];
				oldFocus.__getInteractive(stack);
				stack.reverse();
				this.__fireEvent(event,stack);
			}
			if(this.__focus != null) {
				var event1 = new openfl_events_FocusEvent("focusIn",true,false,oldFocus,false,0);
				var stack1 = [];
				value.__getInteractive(stack1);
				stack1.reverse();
				this.__fireEvent(event1,stack1);
			}
		}
		return this.__focus;
	}
	,get_frameRate: function() {
		if(this.application != null) return this.application.backend.getFrameRate();
		return 0;
	}
	,set_frameRate: function(value) {
		if(this.application != null) return this.application.backend.setFrameRate(value);
		return value;
	}
	,get_mouseX: function() {
		return this.__mouseX;
	}
	,get_mouseY: function() {
		return this.__mouseY;
	}
	,__class__: openfl_display_Stage
	,__properties__: $extend(openfl_display_DisplayObjectContainer.prototype.__properties__,{set_frameRate:"set_frameRate",get_frameRate:"get_frameRate",set_focus:"set_focus",get_focus:"get_focus",set_displayState:"set_displayState",get_displayState:"get_displayState",set_color:"set_color",get_color:"get_color"})
});
var openfl_display_Stage3D = function() {
	openfl_events_EventDispatcher.call(this);
	this.set_x(0);
	this.set_y(0);
	this.visible = true;
};
$hxClasses["openfl.display.Stage3D"] = openfl_display_Stage3D;
openfl_display_Stage3D.__name__ = ["openfl","display","Stage3D"];
openfl_display_Stage3D.__super__ = openfl_events_EventDispatcher;
openfl_display_Stage3D.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	context3D: null
	,visible: null
	,x: null
	,y: null
	,__contextRequested: null
	,__canvas: null
	,__style: null
	,__webgl: null
	,requestContext3D: function(context3DRenderMode,profile) {
		if(profile == null) profile = 0;
		if(context3DRenderMode == null) context3DRenderMode = 0;
		this.__contextRequested = true;
		if(this.context3D != null) haxe_Timer.delay($bind(this,this.__dispatchCreate),1);
	}
	,requestContext3DMatchingProfiles: function(profiles) {
		this.requestContext3D();
	}
	,__createContext: function(stage,renderSession) {
		if(renderSession.gl != null) {
			this.context3D = new openfl_display3D_Context3D(this,renderSession);
			this.__dispatchCreate();
		} else {
			this.__canvas = window.document.createElement("canvas");
			this.__canvas.width = stage.stageWidth;
			this.__canvas.height = stage.stageHeight;
			var $window = stage.window;
			var options = { alpha : Object.prototype.hasOwnProperty.call($window.config,"background") && $window.config.background == null?true:false, antialias : Object.prototype.hasOwnProperty.call($window.config,"antialiasing")?$window.config.antialiasing > 0:false, depth : Object.prototype.hasOwnProperty.call($window.config,"depthBuffer")?$window.config.depthBuffer:true, premultipliedAlpha : true, stencil : Object.prototype.hasOwnProperty.call($window.config,"stencilBuffer")?$window.config.stencilBuffer:false, preserveDrawingBuffer : false};
			this.__webgl = js_html__$CanvasElement_CanvasUtil.getContextWebGL(this.__canvas,options);
			if(this.__webgl != null) {
				lime_graphics_opengl_GL.context = this.__webgl;
				this.context3D = new openfl_display3D_Context3D(this,renderSession);
				renderSession.element.appendChild(this.__canvas);
				this.__style = this.__canvas.style;
				this.__style.setProperty("position","absolute",null);
				this.__style.setProperty("top","0",null);
				this.__style.setProperty("left","0",null);
				this.__style.setProperty(renderSession.transformOriginProperty,"0 0 0",null);
				this.__style.setProperty("z-index","-1",null);
				this.__dispatchCreate();
			} else this.__dispatchError();
		}
	}
	,__dispatchError: function() {
		this.__contextRequested = false;
		this.dispatchEvent(new openfl_events_ErrorEvent("error",false,false,"Context3D not available"));
	}
	,__dispatchCreate: function() {
		if(this.__contextRequested) {
			this.__contextRequested = false;
			this.dispatchEvent(new openfl_events_Event("context3DCreate"));
		}
	}
	,__renderCairo: function(stage,renderSession) {
		if(!this.visible) return;
		if(this.__contextRequested) {
			this.__dispatchError();
			this.__contextRequested = false;
		}
	}
	,__renderCanvas: function(stage,renderSession) {
		if(!this.visible) return;
		if(this.__contextRequested) {
			this.__dispatchError();
			this.__contextRequested = false;
		}
	}
	,__renderDOM: function(stage,renderSession) {
		if(!this.visible) return;
		if(this.__contextRequested && this.context3D == null) this.__createContext(stage,renderSession);
		if(this.context3D != null) {
			lime_graphics_opengl_GL.context = this.__webgl;
			this.__resetContext3DStates();
		}
	}
	,__renderGL: function(stage,renderSession) {
		if(!this.visible) return;
		if(this.__contextRequested && this.context3D == null) this.__createContext(stage,renderSession);
		if(this.context3D != null) {
			this.__resetContext3DStates();
			if(this.context3D != null) {
				renderSession.gl.depthMask(true);
				renderSession.blendModeManager.setBlendMode(null);
				if(renderSession.shaderManager.currentShader != null) {
					renderSession.shaderManager.setShader(null);
					if(this.context3D.__program != null) this.context3D.__program.__use();
				}
			}
		}
	}
	,__resize: function(width,height) {
		if(this.__canvas != null) {
			this.__canvas.width = width;
			this.__canvas.height = height;
		}
	}
	,__resetContext3DStates: function() {
		this.context3D.__updateBlendFactors();
		this.context3D.__updateBackbufferViewport();
	}
	,set_x: function(value) {
		this.x = value;
		if(this.context3D != null) this.context3D.__updateBackbufferViewport();
		return value;
	}
	,set_y: function(value) {
		this.y = value;
		if(this.context3D != null) this.context3D.__updateBackbufferViewport();
		return value;
	}
	,__class__: openfl_display_Stage3D
	,__properties__: {set_y:"set_y",set_x:"set_x"}
});
var openfl_display__$StageAlign_StageAlign_$Impl_$ = {};
$hxClasses["openfl.display._StageAlign.StageAlign_Impl_"] = openfl_display__$StageAlign_StageAlign_$Impl_$;
openfl_display__$StageAlign_StageAlign_$Impl_$.__name__ = ["openfl","display","_StageAlign","StageAlign_Impl_"];
openfl_display__$StageAlign_StageAlign_$Impl_$.fromString = function(value) {
	switch(value) {
	case "bottom":
		return 0;
	case "bottomLeft":
		return 1;
	case "bottomRight":
		return 2;
	case "left":
		return 3;
	case "right":
		return 4;
	case "top":
		return 5;
	case "topLeft":
		return 6;
	case "topRight":
		return 7;
	default:
		return null;
	}
};
openfl_display__$StageAlign_StageAlign_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "bottom";
	case 1:
		return "bottomLeft";
	case 2:
		return "bottomRight";
	case 3:
		return "left";
	case 4:
		return "right";
	case 5:
		return "top";
	case 6:
		return "topLeft";
	case 7:
		return "topRight";
	default:
		return null;
	}
};
var openfl_display__$StageDisplayState_StageDisplayState_$Impl_$ = {};
$hxClasses["openfl.display._StageDisplayState.StageDisplayState_Impl_"] = openfl_display__$StageDisplayState_StageDisplayState_$Impl_$;
openfl_display__$StageDisplayState_StageDisplayState_$Impl_$.__name__ = ["openfl","display","_StageDisplayState","StageDisplayState_Impl_"];
openfl_display__$StageDisplayState_StageDisplayState_$Impl_$.fromString = function(value) {
	switch(value) {
	case "fullScreen":
		return 0;
	case "fullScreenInteractive":
		return 1;
	case "normal":
		return 2;
	default:
		return null;
	}
};
openfl_display__$StageDisplayState_StageDisplayState_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "fullScreen";
	case 1:
		return "fullScreenInteractive";
	case 2:
		return "normal";
	default:
		return null;
	}
};
var openfl_display__$StageQuality_StageQuality_$Impl_$ = {};
$hxClasses["openfl.display._StageQuality.StageQuality_Impl_"] = openfl_display__$StageQuality_StageQuality_$Impl_$;
openfl_display__$StageQuality_StageQuality_$Impl_$.__name__ = ["openfl","display","_StageQuality","StageQuality_Impl_"];
openfl_display__$StageQuality_StageQuality_$Impl_$.fromString = function(value) {
	switch(value) {
	case "best":
		return 0;
	case "high":
		return 1;
	case "low":
		return 2;
	case "medium":
		return 3;
	default:
		return null;
	}
};
openfl_display__$StageQuality_StageQuality_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "best";
	case 1:
		return "high";
	case 2:
		return "low";
	case 3:
		return "medium";
	default:
		return null;
	}
};
var openfl_display__$StageScaleMode_StageScaleMode_$Impl_$ = {};
$hxClasses["openfl.display._StageScaleMode.StageScaleMode_Impl_"] = openfl_display__$StageScaleMode_StageScaleMode_$Impl_$;
openfl_display__$StageScaleMode_StageScaleMode_$Impl_$.__name__ = ["openfl","display","_StageScaleMode","StageScaleMode_Impl_"];
openfl_display__$StageScaleMode_StageScaleMode_$Impl_$.fromString = function(value) {
	switch(value) {
	case "exactFit":
		return 0;
	case "noBorder":
		return 1;
	case "noScale":
		return 2;
	case "showAll":
		return 3;
	default:
		return null;
	}
};
openfl_display__$StageScaleMode_StageScaleMode_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "exactFit";
	case 1:
		return "noBorder";
	case 2:
		return "noScale";
	case 3:
		return "showAll";
	default:
		return null;
	}
};
var openfl_display__$TriangleCulling_TriangleCulling_$Impl_$ = {};
$hxClasses["openfl.display._TriangleCulling.TriangleCulling_Impl_"] = openfl_display__$TriangleCulling_TriangleCulling_$Impl_$;
openfl_display__$TriangleCulling_TriangleCulling_$Impl_$.__name__ = ["openfl","display","_TriangleCulling","TriangleCulling_Impl_"];
openfl_display__$TriangleCulling_TriangleCulling_$Impl_$.fromString = function(value) {
	switch(value) {
	case "negative":
		return 0;
	case "none":
		return 1;
	case "positive":
		return 2;
	default:
		return null;
	}
};
openfl_display__$TriangleCulling_TriangleCulling_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "negative";
	case 1:
		return "none";
	case 2:
		return "positive";
	default:
		return null;
	}
};
var openfl_display_Window = function(config) {
	lime_ui_Window.call(this,config);
};
$hxClasses["openfl.display.Window"] = openfl_display_Window;
openfl_display_Window.__name__ = ["openfl","display","Window"];
openfl_display_Window.__super__ = lime_ui_Window;
openfl_display_Window.prototype = $extend(lime_ui_Window.prototype,{
	create: function(application) {
		lime_ui_Window.prototype.create.call(this,application);
		this.stage = new openfl_display_Stage(this,Object.prototype.hasOwnProperty.call(this.config,"background")?this.config.background:16777215);
		if(Object.prototype.hasOwnProperty.call(this.config,"resizable") && !this.config.resizable) this.stage.__setLogicalSize(this.config.width,this.config.height);
		application.addModule(this.stage);
	}
	,__class__: openfl_display_Window
});
var openfl_display3D_Context3D = function(stage3D,renderSession) {
	this.totalGPUMemory = 0;
	this.profile = 0;
	this.enableErrorChecking = false;
	this.driverInfo = "OpenGL (Direct blitting)";
	this.backBufferWidth = 0;
	this.backBufferHeight = 0;
	openfl_events_EventDispatcher.call(this);
	this.__stage3D = stage3D;
	this.__renderSession = renderSession;
	var this1;
	this1 = new Float32Array(512);
	this.__vertexConstants = this1;
	var this2;
	this2 = new Float32Array(512);
	this.__fragmentConstants = this2;
	var array = [1.0,1.0,1.0,1.0];
	var this3;
	if(array != null) this3 = new Float32Array(array); else this3 = null;
	this.__positionScale = this3;
	this.__samplerDirty = 0;
	this.__samplerTextures = openfl__$Vector_Vector_$Impl_$.toObjectVector(null,8);
	this.__samplerStates = [];
	var _g = 0;
	while(_g < 8) {
		var i = _g++;
		this.__samplerStates[i] = new openfl__$internal_stage3D_SamplerState(9729,9729,33071,33071);
	}
	this.maxBackBufferHeight = this.maxBackBufferWidth = lime_graphics_opengl_GL.context.getParameter(3386);
	this.__backBufferAntiAlias = 0;
	this.__backBufferEnableDepthAndStencil = true;
	this.__backBufferWantsBestResolution = false;
	this.__frameCount = 0;
	this.__rttDepthAndStencil = false;
	this.__samplerDirty = 0;
	this.__stencilCompareMode = 0;
	this.__stencilRef = 0;
	this.__stencilReadMask = 255;
	this.__supportsPackedDepthStencil = true;
	this.__stats = openfl__$Vector_Vector_$Impl_$.toIntVector(null,11);
	this.__statsCache = openfl__$Vector_Vector_$Impl_$.toIntVector(null,11);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	var vendor = lime_graphics_opengl_GL.context.getParameter(7936);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	var version = lime_graphics_opengl_GL.context.getParameter(7938);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	var renderer = lime_graphics_opengl_GL.context.getParameter(7937);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	var glslVersion = lime_graphics_opengl_GL.context.getParameter(35724);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	this.driverInfo = "OpenGL" + " Vendor=" + vendor + " Version=" + version + " Renderer=" + renderer + " GLSL=" + glslVersion;
	var _g1 = 0;
	var _g2 = this.__stats.get_length();
	while(_g1 < _g2) {
		var i1 = _g1++;
		this.__stats.set(i1,0);
	}
	openfl_display3D_Context3D.__stateCache.clearSettings();
};
$hxClasses["openfl.display3D.Context3D"] = openfl_display3D_Context3D;
openfl_display3D_Context3D.__name__ = ["openfl","display3D","Context3D"];
openfl_display3D_Context3D.__super__ = openfl_events_EventDispatcher;
openfl_display3D_Context3D.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	backBufferHeight: null
	,backBufferWidth: null
	,driverInfo: null
	,enableErrorChecking: null
	,maxBackBufferHeight: null
	,maxBackBufferWidth: null
	,profile: null
	,totalGPUMemory: null
	,__backBufferAntiAlias: null
	,__backBufferEnableDepthAndStencil: null
	,__backBufferWantsBestResolution: null
	,__depthRenderBuffer: null
	,__depthStencilRenderBuffer: null
	,__fragmentConstants: null
	,__framebuffer: null
	,__frameCount: null
	,__positionScale: null
	,__program: null
	,__renderSession: null
	,__renderToTexture: null
	,__rttDepthAndStencil: null
	,__samplerDirty: null
	,__samplerTextures: null
	,__samplerStates: null
	,__scissorRectangle: null
	,__stage3D: null
	,__stats: null
	,__statsCache: null
	,__stencilCompareMode: null
	,__stencilRef: null
	,__stencilReadMask: null
	,__stencilRenderBuffer: null
	,__supportsPackedDepthStencil: null
	,__vertexConstants: null
	,clear: function(red,green,blue,alpha,depth,stencil,mask) {
		if(mask == null) mask = 7;
		if(stencil == null) stencil = 0;
		if(depth == null) depth = 1;
		if(alpha == null) alpha = 1;
		if(blue == null) blue = 0;
		if(green == null) green = 0;
		if(red == null) red = 0;
		var clearMask = 0;
		if((mask & 1) != 0) {
			clearMask |= 16384;
			lime_graphics_opengl_GL.context.clearColor(red,green,blue,alpha);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
		}
		if((mask & 2) != 0) {
			clearMask |= 256;
			lime_graphics_opengl_GL.context.clearDepth(depth);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
		}
		if((mask & 4) != 0) {
			clearMask |= 1024;
			lime_graphics_opengl_GL.context.clearStencil(stencil);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
		}
		lime_graphics_opengl_GL.context.clear(clearMask);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
	}
	,configureBackBuffer: function(width,height,antiAlias,enableDepthAndStencil,wantsBestResolution,wantsBestResolutionOnBrowserZoom) {
		if(wantsBestResolutionOnBrowserZoom == null) wantsBestResolutionOnBrowserZoom = false;
		if(wantsBestResolution == null) wantsBestResolution = false;
		if(enableDepthAndStencil == null) enableDepthAndStencil = true;
		this.__updateBackbufferViewport();
		this.backBufferWidth = width;
		this.backBufferHeight = height;
		this.__backBufferAntiAlias = antiAlias;
		this.__backBufferEnableDepthAndStencil = enableDepthAndStencil;
		this.__backBufferWantsBestResolution = wantsBestResolution;
		openfl_display3D_Context3D.__stateCache.clearSettings();
	}
	,createCubeTexture: function(size,format,optimizeForRenderToTexture,streamingLevels) {
		if(streamingLevels == null) streamingLevels = 0;
		return new openfl_display3D_textures_CubeTexture(this,size,format,optimizeForRenderToTexture,streamingLevels);
	}
	,createIndexBuffer: function(numIndices,bufferUsage) {
		if(bufferUsage == null) bufferUsage = 1;
		return new openfl_display3D_IndexBuffer3D(this,numIndices,openfl_display3D__$Context3DBufferUsage_Context3DBufferUsage_$Impl_$.toString(bufferUsage));
	}
	,createProgram: function() {
		return new openfl_display3D_Program3D(this);
	}
	,createRectangleTexture: function(width,height,format,optimizeForRenderToTexture) {
		return new openfl_display3D_textures_RectangleTexture(this,width,height,openfl_display3D__$Context3DTextureFormat_Context3DTextureFormat_$Impl_$.toString(format),optimizeForRenderToTexture);
	}
	,createTexture: function(width,height,format,optimizeForRenderToTexture,streamingLevels) {
		if(streamingLevels == null) streamingLevels = 0;
		return new openfl_display3D_textures_Texture(this,width,height,format,optimizeForRenderToTexture,streamingLevels);
	}
	,createVertexBuffer: function(numVertices,data32PerVertex,bufferUsage) {
		if(bufferUsage == null) bufferUsage = 1;
		return new openfl_display3D_VertexBuffer3D(this,numVertices,data32PerVertex,openfl_display3D__$Context3DBufferUsage_Context3DBufferUsage_$Impl_$.toString(bufferUsage));
	}
	,createVideoTexture: function() {
		return new openfl_display3D_textures_VideoTexture(this);
	}
	,dispose: function() {
	}
	,drawToBitmapData: function(destination) {
	}
	,drawTriangles: function(indexBuffer,firstIndex,numTriangles) {
		if(numTriangles == null) numTriangles = -1;
		if(firstIndex == null) firstIndex = 0;
		if(this.__program == null) return;
		this.__flushSamplerState();
		this.__program.__flush();
		var count;
		if(numTriangles == -1) count = indexBuffer.__numIndices; else count = numTriangles * 3;
		lime_graphics_opengl_GL.context.bindBuffer(34963,indexBuffer.__id);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		lime_graphics_opengl_GL.context.drawElements(4,count,indexBuffer.__elementType,firstIndex);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		this.__statsIncrement(0);
	}
	,present: function() {
		this.__statsSendToTelemetry();
		this.__statsClear(0);
		this.__frameCount++;
	}
	,setBlendFactors: function(sourceFactor,destinationFactor) {
		var updateSrc = openfl_display3D_Context3D.__stateCache.updateBlendSrcFactor(sourceFactor);
		var updateDest = openfl_display3D_Context3D.__stateCache.updateBlendDestFactor(destinationFactor);
		if(updateSrc || updateDest) this.__updateBlendFactors();
	}
	,setColorMask: function(red,green,blue,alpha) {
		lime_graphics_opengl_GL.context.colorMask(red,green,blue,alpha);
	}
	,setCulling: function(triangleFaceToCull) {
		if(openfl_display3D_Context3D.__stateCache.updateCullingMode(triangleFaceToCull)) switch(triangleFaceToCull) {
		case 3:
			lime_graphics_opengl_GL.context.disable(2884);
			break;
		case 0:
			lime_graphics_opengl_GL.context.enable(2884);
			lime_graphics_opengl_GL.context.cullFace(1028);
			break;
		case 1:
			lime_graphics_opengl_GL.context.enable(2884);
			lime_graphics_opengl_GL.context.cullFace(1029);
			break;
		case 2:
			lime_graphics_opengl_GL.context.enable(2884);
			lime_graphics_opengl_GL.context.cullFace(1032);
			break;
		default:
			throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError());
		}
	}
	,setDepthTest: function(depthMask,passCompareMode) {
		var depthTestEnabled = this.__backBufferEnableDepthAndStencil;
		if(openfl_display3D_Context3D.__stateCache.updateDepthTestEnabled(depthTestEnabled)) {
			if(depthTestEnabled) lime_graphics_opengl_GL.context.enable(2929); else lime_graphics_opengl_GL.context.disable(2929);
		}
		if(openfl_display3D_Context3D.__stateCache.updateDepthTestMask(depthMask)) lime_graphics_opengl_GL.context.depthMask(depthMask);
		if(openfl_display3D_Context3D.__stateCache.updateDepthCompareMode(passCompareMode)) switch(passCompareMode) {
		case 0:
			lime_graphics_opengl_GL.context.depthFunc(519);
			break;
		case 1:
			lime_graphics_opengl_GL.context.depthFunc(514);
			break;
		case 2:
			lime_graphics_opengl_GL.context.depthFunc(516);
			break;
		case 3:
			lime_graphics_opengl_GL.context.depthFunc(518);
			break;
		case 4:
			lime_graphics_opengl_GL.context.depthFunc(513);
			break;
		case 5:
			lime_graphics_opengl_GL.context.depthFunc(515);
			break;
		case 6:
			lime_graphics_opengl_GL.context.depthFunc(512);
			break;
		case 7:
			lime_graphics_opengl_GL.context.depthFunc(517);
			break;
		default:
			throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError());
		}
	}
	,setProgram: function(program) {
		if(program == null) throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError());
		if(openfl_display3D_Context3D.__stateCache.updateProgram3D(program)) {
			program.__use();
			program.__setPositionScale(this.__positionScale);
			this.__program = program;
			this.__samplerDirty |= this.__program.__samplerUsageMask;
			var _g = 0;
			while(_g < 8) {
				var i = _g++;
				this.__samplerStates[i].copyFrom(this.__program.__getSamplerState(i));
			}
		}
	}
	,setProgramConstantsFromByteArray: function(programType,firstRegister,numRegisters,data,byteArrayOffset) {
		if(numRegisters == 0) return;
		if(numRegisters == -1) {
			var a = openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(data) >> 2;
			numRegisters = a - byteArrayOffset;
		}
		var isVertex = programType == 1;
		var dest;
		if(isVertex) dest = this.__vertexConstants; else dest = this.__fragmentConstants;
		var floatData;
		var bytes = openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytes(data);
		var len = openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(data);
		if(len == null) floatData = new Float32Array(bytes.b.bufferValue,0); else floatData = new Float32Array(bytes.b.bufferValue,0,len);
		var outOffset = firstRegister * 4;
		var inOffset = Std["int"](_$UInt_UInt_$Impl_$.toFloat(byteArrayOffset) / _$UInt_UInt_$Impl_$.toFloat(4));
		var _g1 = 0;
		var _g = numRegisters * 4;
		while(_g1 < _g) {
			var i = _g1++;
			dest[outOffset + i] = floatData[inOffset + i];
		}
		if(this.__program != null) this.__program.__markDirty(isVertex,firstRegister,numRegisters);
	}
	,setProgramConstantsFromMatrix: function(programType,firstRegister,matrix,transposedMatrix) {
		if(transposedMatrix == null) transposedMatrix = false;
		var isVertex = programType == 1;
		var dest;
		if(isVertex) dest = this.__vertexConstants; else dest = this.__fragmentConstants;
		var source = matrix.rawData;
		var i = firstRegister * 4;
		if(transposedMatrix) {
			var idx = i++;
			var val = source.get(0);
			dest[idx] = val;
			var idx1 = i++;
			var val1 = source.get(4);
			dest[idx1] = val1;
			var idx2 = i++;
			var val2 = source.get(8);
			dest[idx2] = val2;
			var idx3 = i++;
			var val3 = source.get(12);
			dest[idx3] = val3;
			var idx4 = i++;
			var val4 = source.get(1);
			dest[idx4] = val4;
			var idx5 = i++;
			var val5 = source.get(5);
			dest[idx5] = val5;
			var idx6 = i++;
			var val6 = source.get(9);
			dest[idx6] = val6;
			var idx7 = i++;
			var val7 = source.get(13);
			dest[idx7] = val7;
			var idx8 = i++;
			var val8 = source.get(2);
			dest[idx8] = val8;
			var idx9 = i++;
			var val9 = source.get(6);
			dest[idx9] = val9;
			var idx10 = i++;
			var val10 = source.get(10);
			dest[idx10] = val10;
			var idx11 = i++;
			var val11 = source.get(14);
			dest[idx11] = val11;
			var idx12 = i++;
			var val12 = source.get(3);
			dest[idx12] = val12;
			var idx13 = i++;
			var val13 = source.get(7);
			dest[idx13] = val13;
			var idx14 = i++;
			var val14 = source.get(11);
			dest[idx14] = val14;
			var idx15 = i++;
			var val15 = source.get(15);
			dest[idx15] = val15;
		} else {
			var idx16 = i++;
			var val16 = source.get(0);
			dest[idx16] = val16;
			var idx17 = i++;
			var val17 = source.get(1);
			dest[idx17] = val17;
			var idx18 = i++;
			var val18 = source.get(2);
			dest[idx18] = val18;
			var idx19 = i++;
			var val19 = source.get(3);
			dest[idx19] = val19;
			var idx20 = i++;
			var val20 = source.get(4);
			dest[idx20] = val20;
			var idx21 = i++;
			var val21 = source.get(5);
			dest[idx21] = val21;
			var idx22 = i++;
			var val22 = source.get(6);
			dest[idx22] = val22;
			var idx23 = i++;
			var val23 = source.get(7);
			dest[idx23] = val23;
			var idx24 = i++;
			var val24 = source.get(8);
			dest[idx24] = val24;
			var idx25 = i++;
			var val25 = source.get(9);
			dest[idx25] = val25;
			var idx26 = i++;
			var val26 = source.get(10);
			dest[idx26] = val26;
			var idx27 = i++;
			var val27 = source.get(11);
			dest[idx27] = val27;
			var idx28 = i++;
			var val28 = source.get(12);
			dest[idx28] = val28;
			var idx29 = i++;
			var val29 = source.get(13);
			dest[idx29] = val29;
			var idx30 = i++;
			var val30 = source.get(14);
			dest[idx30] = val30;
			var idx31 = i++;
			var val31 = source.get(15);
			dest[idx31] = val31;
		}
		if(this.__program != null) this.__program.__markDirty(isVertex,firstRegister,4);
	}
	,setProgramConstantsFromVector: function(programType,firstRegister,data,numRegisters) {
		if(numRegisters == null) numRegisters = -1;
		if(numRegisters == 0) return;
		if(numRegisters == -1) numRegisters = data.get_length() >> 2;
		var isVertex = programType == 1;
		var dest;
		if(isVertex) dest = this.__vertexConstants; else dest = this.__fragmentConstants;
		var source = data;
		var sourceIndex = 0;
		var destIndex = firstRegister * 4;
		var _g = 0;
		while(_g < numRegisters) {
			var i = _g++;
			var idx = destIndex++;
			var val;
			var index = sourceIndex++;
			val = source.get(index);
			dest[idx] = val;
			var idx1 = destIndex++;
			var val1;
			var index1 = sourceIndex++;
			val1 = source.get(index1);
			dest[idx1] = val1;
			var idx2 = destIndex++;
			var val2;
			var index2 = sourceIndex++;
			val2 = source.get(index2);
			dest[idx2] = val2;
			var idx3 = destIndex++;
			var val3;
			var index3 = sourceIndex++;
			val3 = source.get(index3);
			dest[idx3] = val3;
		}
		if(this.__program != null) this.__program.__markDirty(isVertex,firstRegister,numRegisters);
	}
	,setRenderToBackBuffer: function() {
		lime_graphics_opengl_GL.context.bindFramebuffer(36160,null);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		this.__renderToTexture = null;
		this.__scissorRectangle = null;
		this.__updateBackbufferViewport();
		this.__updateScissorRectangle();
		this.__updateDepthAndStencilState();
		this.__positionScale[1] = 1.0;
		if(this.__program != null) this.__program.__setPositionScale(this.__positionScale);
	}
	,setRenderToTexture: function(texture,enableDepthAndStencil,antiAlias,surfaceSelector) {
		if(surfaceSelector == null) surfaceSelector = 0;
		if(antiAlias == null) antiAlias = 0;
		if(enableDepthAndStencil == null) enableDepthAndStencil = false;
		var width = 0;
		var height = 0;
		if(js_Boot.__instanceof(texture,openfl_display3D_textures_Texture)) {
			var texture2D = texture;
			width = texture2D.__width;
			height = texture2D.__height;
		} else if(js_Boot.__instanceof(texture,openfl_display3D_textures_RectangleTexture)) {
			var rectTexture = texture;
			width = rectTexture.__width;
			height = rectTexture.__height;
		} else throw new js__$Boot_HaxeError(new openfl_errors_Error("Invalid texture"));
		if(this.__framebuffer == null) {
			this.__framebuffer = lime_graphics_opengl_GL.context.createFramebuffer();
			openfl__$internal_stage3D_GLUtils.CheckGLError();
		}
		lime_graphics_opengl_GL.context.bindFramebuffer(36160,this.__framebuffer);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		lime_graphics_opengl_GL.context.framebufferTexture2D(36160,36064,3553,texture.__textureID,0);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		if(enableDepthAndStencil) {
			if(this.__supportsPackedDepthStencil) {
				if(this.__depthStencilRenderBuffer == null) {
					this.__depthStencilRenderBuffer = lime_graphics_opengl_GL.context.createRenderbuffer();
					openfl__$internal_stage3D_GLUtils.CheckGLError();
				}
				lime_graphics_opengl_GL.context.bindRenderbuffer(36161,this.__depthStencilRenderBuffer);
				openfl__$internal_stage3D_GLUtils.CheckGLError();
				lime_graphics_opengl_GL.context.renderbufferStorage(36161,34041,width,height);
				openfl__$internal_stage3D_GLUtils.CheckGLError();
				lime_graphics_opengl_GL.context.framebufferRenderbuffer(36160,33306,36161,this.__depthStencilRenderBuffer);
				openfl__$internal_stage3D_GLUtils.CheckGLError();
			} else {
				if(this.__depthRenderBuffer == null) {
					this.__depthRenderBuffer = lime_graphics_opengl_GL.context.createRenderbuffer();
					openfl__$internal_stage3D_GLUtils.CheckGLError();
				}
				if(this.__stencilRenderBuffer == null) {
					this.__stencilRenderBuffer = lime_graphics_opengl_GL.context.createRenderbuffer();
					openfl__$internal_stage3D_GLUtils.CheckGLError();
				}
				lime_graphics_opengl_GL.context.bindRenderbuffer(36161,this.__depthRenderBuffer);
				openfl__$internal_stage3D_GLUtils.CheckGLError();
				lime_graphics_opengl_GL.context.renderbufferStorage(36161,33189,width,height);
				openfl__$internal_stage3D_GLUtils.CheckGLError();
				lime_graphics_opengl_GL.context.bindRenderbuffer(36161,this.__stencilRenderBuffer);
				openfl__$internal_stage3D_GLUtils.CheckGLError();
				lime_graphics_opengl_GL.context.renderbufferStorage(36161,36168,width,height);
				openfl__$internal_stage3D_GLUtils.CheckGLError();
				lime_graphics_opengl_GL.context.framebufferRenderbuffer(36160,36096,36161,this.__depthRenderBuffer);
				openfl__$internal_stage3D_GLUtils.CheckGLError();
				lime_graphics_opengl_GL.context.framebufferRenderbuffer(36160,36128,36161,this.__stencilRenderBuffer);
				openfl__$internal_stage3D_GLUtils.CheckGLError();
			}
			lime_graphics_opengl_GL.context.bindRenderbuffer(36161,null);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
		}
		this.__setViewport(0,0,width,height);
		if(this.enableErrorChecking) {
			var code = lime_graphics_opengl_GL.context.checkFramebufferStatus(36160);
			if(code != 36053) haxe_Log.trace("Error: Context3D.setRenderToTexture status:${code} width:${texture2D.__width} height:${texture2D.__height}",{ fileName : "Context3D.hx", lineNumber : 726, className : "openfl.display3D.Context3D", methodName : "setRenderToTexture"});
		}
		this.__positionScale[1] = -1.0;
		if(this.__program != null) this.__program.__setPositionScale(this.__positionScale);
		this.__renderToTexture = texture;
		this.__scissorRectangle = null;
		this.__rttDepthAndStencil = enableDepthAndStencil;
		this.__updateScissorRectangle();
		this.__updateDepthAndStencilState();
	}
	,setSamplerStateAt: function(sampler,wrap,filter,mipfilter) {
		if(sampler < 0 || sampler > 8) throw new js__$Boot_HaxeError(new openfl_errors_Error("sampler out of range"));
		var state = this.__samplerStates[sampler];
		switch(wrap) {
		case 0:
			state.wrapModeS = 33071;
			state.wrapModeT = 33071;
			break;
		case 1:
			state.wrapModeS = 33071;
			state.wrapModeT = 10497;
			break;
		case 2:
			state.wrapModeS = 10497;
			state.wrapModeT = 10497;
			break;
		case 3:
			state.wrapModeS = 10497;
			state.wrapModeT = 33071;
			break;
		default:
			throw new js__$Boot_HaxeError(new openfl_errors_Error("wrap bad enum"));
		}
		switch(filter) {
		case 4:
			state.magFilter = 9729;
			break;
		case 5:
			state.magFilter = 9728;
			break;
		case 1:
			state.magFilter = 9729;
			break;
		case 2:
			state.magFilter = 9729;
			break;
		case 3:
			state.magFilter = 9729;
			break;
		case 0:
			state.magFilter = 9729;
			break;
		default:
			throw new js__$Boot_HaxeError(new openfl_errors_Error("filter bad enum"));
		}
		switch(mipfilter) {
		case 0:
			state.minFilter = 9987;
			break;
		case 1:
			state.minFilter = 9984;
			break;
		case 2:
			if(filter == 5) state.minFilter = 9728; else state.minFilter = 9729;
			break;
		default:
			throw new js__$Boot_HaxeError(new openfl_errors_Error("mipfiter bad enum"));
		}
	}
	,setScissorRectangle: function(rectangle) {
		if(rectangle != null) this.__scissorRectangle = rectangle.clone(); else this.__scissorRectangle = null;
		this.__updateScissorRectangle();
	}
	,setStencilActions: function(triangleFace,compareMode,actionOnBothPass,actionOnDepthFail,actionOnDepthPassStencilFail) {
		if(actionOnDepthPassStencilFail == null) actionOnDepthPassStencilFail = 5;
		if(actionOnDepthFail == null) actionOnDepthFail = 5;
		if(actionOnBothPass == null) actionOnBothPass = 5;
		if(compareMode == null) compareMode = 0;
		if(triangleFace == null) triangleFace = 2;
		this.__stencilCompareMode = compareMode;
		lime_graphics_opengl_GL.stencilOp(this.__getGLStencilAction(actionOnDepthFail),this.__getGLStencilAction(actionOnDepthPassStencilFail),this.__getGLStencilAction(actionOnBothPass));
		lime_graphics_opengl_GL.stencilFunc(this.__getGLCompareMode(this.__stencilCompareMode),this.__stencilRef,this.__stencilReadMask);
	}
	,setStencilReferenceValue: function(referenceValue,readMask,writeMask) {
		if(writeMask == null) writeMask = 255;
		if(readMask == null) readMask = 255;
		this.__stencilReadMask = readMask;
		this.__stencilRef = referenceValue;
		lime_graphics_opengl_GL.stencilFunc(this.__getGLCompareMode(this.__stencilCompareMode),this.__stencilRef,this.__stencilReadMask);
		lime_graphics_opengl_GL.context.stencilMask(writeMask);
	}
	,setTextureAt: function(sampler,texture) {
		if(this.__samplerTextures.get(sampler) != texture) {
			this.__samplerTextures.set(sampler,texture);
			this.__samplerDirty |= 1 << sampler;
		}
	}
	,setVertexBufferAt: function(index,buffer,bufferOffset,format) {
		if(format == null) format = 4;
		if(bufferOffset == null) bufferOffset = 0;
		if(buffer == null) {
			lime_graphics_opengl_GL.context.disableVertexAttribArray(index);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
			lime_graphics_opengl_GL.context.bindBuffer(34962,null);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
			return;
		}
		lime_graphics_opengl_GL.context.enableVertexAttribArray(index);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		lime_graphics_opengl_GL.context.bindBuffer(34962,buffer.__id);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		var byteOffset = bufferOffset * 4;
		switch(format) {
		case 0:
			lime_graphics_opengl_GL.context.vertexAttribPointer(index,4,5121,true,buffer.__stride,byteOffset);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
			break;
		case 4:
			lime_graphics_opengl_GL.context.vertexAttribPointer(index,4,5126,false,buffer.__stride,byteOffset);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
			break;
		case 3:
			lime_graphics_opengl_GL.context.vertexAttribPointer(index,3,5126,false,buffer.__stride,byteOffset);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
			break;
		case 2:
			lime_graphics_opengl_GL.context.vertexAttribPointer(index,2,5126,false,buffer.__stride,byteOffset);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
			break;
		case 1:
			lime_graphics_opengl_GL.context.vertexAttribPointer(index,1,5126,false,buffer.__stride,byteOffset);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
			break;
		default:
			throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError());
		}
	}
	,__flushSamplerState: function() {
		var sampler = 0;
		while(this.__samplerDirty != 0) {
			if((this.__samplerDirty & 1 << sampler) != 0) {
				if(openfl_display3D_Context3D.__stateCache.updateActiveTextureSample(sampler)) {
					lime_graphics_opengl_GL.context.activeTexture(33984 + sampler);
					openfl__$internal_stage3D_GLUtils.CheckGLError();
				}
				var texture = this.__samplerTextures.get(sampler);
				if(texture != null) {
					var target = texture.__textureTarget;
					lime_graphics_opengl_GL.bindTexture(target,texture.__getTexture());
					openfl__$internal_stage3D_GLUtils.CheckGLError();
					texture.__setSamplerState(this.__samplerStates[sampler]);
				} else {
					lime_graphics_opengl_GL.context.bindTexture(3553,null);
					openfl__$internal_stage3D_GLUtils.CheckGLError();
				}
				this.__samplerDirty &= ~(1 << sampler);
			}
			sampler++;
		}
	}
	,__getGLCompareMode: function(compareMode) {
		switch(compareMode) {
		case 0:
			return 519;
		case 1:
			return 514;
		case 2:
			return 516;
		case 3:
			return 518;
		case 4:
			return 513;
		case 5:
			return 515;
		case 6:
			return 512;
		case 7:
			return 517;
		default:
			return 514;
		}
	}
	,__getGLStencilAction: function(stencilAction) {
		switch(stencilAction) {
		case 0:
			return 7683;
		case 1:
			return 34056;
		case 2:
			return 7682;
		case 3:
			return 34055;
		case 4:
			return 5386;
		case 5:
			return 7680;
		case 6:
			return 7681;
		case 7:
			return 0;
		default:
			return 7680;
		}
	}
	,__hasGLExtension: function(name) {
		return (function($this) {
			var $r;
			var _this = lime_graphics_opengl_GL.context.getSupportedExtensions();
			$r = HxOverrides.indexOf(_this,name,0);
			return $r;
		}(this)) != -1;
	}
	,__setViewport: function(originX,originY,width,height) {
		if(openfl_display3D_Context3D.__stateCache.updateViewport(originX,originY,width,height)) {
			lime_graphics_opengl_GL.context.viewport(originX,originY,width,height);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
		}
	}
	,__statsAdd: function(stat,value) {
		var _g = stat;
		var value1 = this.__stats.get(_g) + value;
		this.__stats.set(_g,value1);
		return this.__stats.get(stat);
	}
	,__statsClear: function(stat) {
		this.__stats.set(stat,0);
	}
	,__statsDecrement: function(stat) {
		var _g = stat;
		var value = this.__stats.get(_g) - 1;
		this.__stats.set(_g,value);
	}
	,__statsIncrement: function(stat) {
		var _g = stat;
		var value = this.__stats.get(_g) + 1;
		this.__stats.set(_g,value);
	}
	,__statsSendToTelemetry: function() {
	}
	,__statsSubtract: function(stat,value) {
		var _g = stat;
		var value1 = this.__stats.get(_g) - value;
		this.__stats.set(_g,value1);
		return this.__stats.get(stat);
	}
	,__updateDepthAndStencilState: function() {
		var depthAndStencil;
		if(this.__renderToTexture != null) depthAndStencil = this.__rttDepthAndStencil; else depthAndStencil = this.__backBufferEnableDepthAndStencil;
		if(depthAndStencil) {
			lime_graphics_opengl_GL.context.enable(2929);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
			lime_graphics_opengl_GL.context.enable(2960);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
		} else {
			lime_graphics_opengl_GL.context.disable(2929);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
			lime_graphics_opengl_GL.context.disable(2960);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
		}
	}
	,__updateBlendFactors: function() {
		if(openfl_display3D_Context3D.__stateCache._srcBlendFactor == null || openfl_display3D_Context3D.__stateCache._destBlendFactor == null) return;
		var src = 1;
		var dest = 0;
		var _g = openfl_display3D_Context3D.__stateCache._srcBlendFactor;
		switch(_g) {
		case 2:
			src = 1;
			break;
		case 9:
			src = 0;
			break;
		case 7:
			src = 770;
			break;
		case 0:
			src = 772;
			break;
		case 1:
			src = 774;
			break;
		case 5:
			src = 771;
			break;
		case 3:
			src = 773;
			break;
		case 4:
			src = 775;
			break;
		default:
			throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError());
		}
		var _g1 = openfl_display3D_Context3D.__stateCache._destBlendFactor;
		switch(_g1) {
		case 2:
			dest = 1;
			break;
		case 9:
			dest = 0;
			break;
		case 7:
			dest = 770;
			break;
		case 8:
			dest = 768;
			break;
		case 0:
			dest = 772;
			break;
		case 5:
			dest = 771;
			break;
		case 6:
			dest = 769;
			break;
		case 3:
			dest = 773;
			break;
		default:
			throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError());
		}
		lime_graphics_opengl_GL.context.enable(3042);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		lime_graphics_opengl_GL.context.blendFunc(src,dest);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
	}
	,__updateScissorRectangle: function() {
		if(this.__scissorRectangle == null) {
			lime_graphics_opengl_GL.context.disable(3089);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
			return;
		}
		lime_graphics_opengl_GL.context.enable(3089);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		var height = 0;
		if(this.__renderToTexture != null) {
			if(js_Boot.__instanceof(this.__renderToTexture,openfl_display3D_textures_Texture)) {
				var texture2D = this.__renderToTexture;
				height = texture2D.__height;
			} else if(js_Boot.__instanceof(this.__renderToTexture,openfl_display3D_textures_RectangleTexture)) {
				var rectTexture = this.__renderToTexture;
				height = rectTexture.__height;
			}
		} else height = this.backBufferHeight;
		lime_graphics_opengl_GL.context.scissor(this.__scissorRectangle.x | 0,height - (this.__scissorRectangle.y | 0) - (this.__scissorRectangle.height | 0) | 0,this.__scissorRectangle.width | 0,this.__scissorRectangle.height | 0);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
	}
	,__updateBackbufferViewport: function() {
		if(this.__renderToTexture == null) this.__setViewport(this.__stage3D.x | 0,this.__stage3D.y | 0,this.backBufferWidth,this.backBufferHeight);
	}
	,set_enableErrorChecking: function(value) {
		return this.enableErrorChecking = openfl__$internal_stage3D_GLUtils.debug = value;
	}
	,__class__: openfl_display3D_Context3D
	,__properties__: {set_enableErrorChecking:"set_enableErrorChecking"}
});
var openfl_display3D__$Context3D_Context3DTelemetry_$Impl_$ = {};
$hxClasses["openfl.display3D._Context3D.Context3DTelemetry_Impl_"] = openfl_display3D__$Context3D_Context3DTelemetry_$Impl_$;
openfl_display3D__$Context3D_Context3DTelemetry_$Impl_$.__name__ = ["openfl","display3D","_Context3D","Context3DTelemetry_Impl_"];
var openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$ = {};
$hxClasses["openfl.display3D._Context3DBlendFactor.Context3DBlendFactor_Impl_"] = openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$;
openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$.__name__ = ["openfl","display3D","_Context3DBlendFactor","Context3DBlendFactor_Impl_"];
openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$.fromString = function(value) {
	switch(value) {
	case "destinationAlpha":
		return 0;
	case "destinationColor":
		return 1;
	case "one":
		return 2;
	case "oneMinusDestinationAlpha":
		return 3;
	case "oneMinusDestinationColor":
		return 4;
	case "oneMinusSourceAlpha":
		return 5;
	case "oneMinusSourceColor":
		return 6;
	case "sourceAlpha":
		return 7;
	case "sourceColor":
		return 8;
	case "zero":
		return 9;
	default:
		return null;
	}
};
openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "destinationAlpha";
	case 1:
		return "destinationColor";
	case 2:
		return "one";
	case 3:
		return "oneMinusDestinationAlpha";
	case 4:
		return "oneMinusDestinationColor";
	case 5:
		return "oneMinusSourceAlpha";
	case 6:
		return "oneMinusSourceColor";
	case 7:
		return "sourceAlpha";
	case 8:
		return "sourceColor";
	case 9:
		return "zero";
	default:
		return null;
	}
};
var openfl_display3D__$Context3DBufferUsage_Context3DBufferUsage_$Impl_$ = {};
$hxClasses["openfl.display3D._Context3DBufferUsage.Context3DBufferUsage_Impl_"] = openfl_display3D__$Context3DBufferUsage_Context3DBufferUsage_$Impl_$;
openfl_display3D__$Context3DBufferUsage_Context3DBufferUsage_$Impl_$.__name__ = ["openfl","display3D","_Context3DBufferUsage","Context3DBufferUsage_Impl_"];
openfl_display3D__$Context3DBufferUsage_Context3DBufferUsage_$Impl_$.fromString = function(value) {
	switch(value) {
	case "dynamicDraw":
		return 0;
	case "staticDraw":
		return 1;
	default:
		return null;
	}
};
openfl_display3D__$Context3DBufferUsage_Context3DBufferUsage_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "dynamicDraw";
	case 1:
		return "staticDraw";
	default:
		return null;
	}
};
var openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$ = {};
$hxClasses["openfl.display3D._Context3DCompareMode.Context3DCompareMode_Impl_"] = openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$;
openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.__name__ = ["openfl","display3D","_Context3DCompareMode","Context3DCompareMode_Impl_"];
openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.fromString = function(value) {
	switch(value) {
	case "always":
		return 0;
	case "equal":
		return 1;
	case "greater":
		return 2;
	case "greaterEqual":
		return 3;
	case "less":
		return 4;
	case "lessEqual":
		return 5;
	case "never":
		return 6;
	case "notEqual":
		return 7;
	default:
		return null;
	}
};
openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "always";
	case 1:
		return "equal";
	case 2:
		return "greater";
	case 3:
		return "greaterEqual";
	case 4:
		return "less";
	case 5:
		return "lessEqual";
	case 6:
		return "never";
	case 7:
		return "notEqual";
	default:
		return null;
	}
};
var openfl_display3D__$Context3DMipFilter_Context3DMipFilter_$Impl_$ = {};
$hxClasses["openfl.display3D._Context3DMipFilter.Context3DMipFilter_Impl_"] = openfl_display3D__$Context3DMipFilter_Context3DMipFilter_$Impl_$;
openfl_display3D__$Context3DMipFilter_Context3DMipFilter_$Impl_$.__name__ = ["openfl","display3D","_Context3DMipFilter","Context3DMipFilter_Impl_"];
openfl_display3D__$Context3DMipFilter_Context3DMipFilter_$Impl_$.fromString = function(value) {
	switch(value) {
	case "miplinear":
		return 0;
	case "mipnearest":
		return 1;
	case "mipnone":
		return 2;
	default:
		return null;
	}
};
openfl_display3D__$Context3DMipFilter_Context3DMipFilter_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "miplinear";
	case 1:
		return "mipnearest";
	case 2:
		return "mipnone";
	default:
		return null;
	}
};
var openfl_display3D__$Context3DProfile_Context3DProfile_$Impl_$ = {};
$hxClasses["openfl.display3D._Context3DProfile.Context3DProfile_Impl_"] = openfl_display3D__$Context3DProfile_Context3DProfile_$Impl_$;
openfl_display3D__$Context3DProfile_Context3DProfile_$Impl_$.__name__ = ["openfl","display3D","_Context3DProfile","Context3DProfile_Impl_"];
openfl_display3D__$Context3DProfile_Context3DProfile_$Impl_$.fromString = function(value) {
	switch(value) {
	case "baseline":
		return 0;
	case "baselineConstrained":
		return 1;
	case "baselineExtended":
		return 2;
	case "standard":
		return 3;
	case "standardConstrained":
		return 4;
	default:
		return null;
	}
};
openfl_display3D__$Context3DProfile_Context3DProfile_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "baseline";
	case 1:
		return "baselineConstrained";
	case 2:
		return "baselineExtended";
	case 3:
		return "standard";
	case 4:
		return "standardConstrained";
	default:
		return null;
	}
};
var openfl_display3D__$Context3DProgramType_Context3DProgramType_$Impl_$ = {};
$hxClasses["openfl.display3D._Context3DProgramType.Context3DProgramType_Impl_"] = openfl_display3D__$Context3DProgramType_Context3DProgramType_$Impl_$;
openfl_display3D__$Context3DProgramType_Context3DProgramType_$Impl_$.__name__ = ["openfl","display3D","_Context3DProgramType","Context3DProgramType_Impl_"];
openfl_display3D__$Context3DProgramType_Context3DProgramType_$Impl_$.fromString = function(value) {
	switch(value) {
	case "fragment":
		return 0;
	case "vertex":
		return 1;
	default:
		return null;
	}
};
openfl_display3D__$Context3DProgramType_Context3DProgramType_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "fragment";
	case 1:
		return "vertex";
	default:
		return null;
	}
};
var openfl_display3D__$Context3DRenderMode_Context3DRenderMode_$Impl_$ = {};
$hxClasses["openfl.display3D._Context3DRenderMode.Context3DRenderMode_Impl_"] = openfl_display3D__$Context3DRenderMode_Context3DRenderMode_$Impl_$;
openfl_display3D__$Context3DRenderMode_Context3DRenderMode_$Impl_$.__name__ = ["openfl","display3D","_Context3DRenderMode","Context3DRenderMode_Impl_"];
openfl_display3D__$Context3DRenderMode_Context3DRenderMode_$Impl_$.fromString = function(value) {
	switch(value) {
	case "auto":
		return 0;
	case "software":
		return 1;
	default:
		return null;
	}
};
openfl_display3D__$Context3DRenderMode_Context3DRenderMode_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "auto";
	case 1:
		return "software";
	default:
		return null;
	}
};
var openfl_display3D__$Context3DStencilAction_Context3DStencilAction_$Impl_$ = {};
$hxClasses["openfl.display3D._Context3DStencilAction.Context3DStencilAction_Impl_"] = openfl_display3D__$Context3DStencilAction_Context3DStencilAction_$Impl_$;
openfl_display3D__$Context3DStencilAction_Context3DStencilAction_$Impl_$.__name__ = ["openfl","display3D","_Context3DStencilAction","Context3DStencilAction_Impl_"];
openfl_display3D__$Context3DStencilAction_Context3DStencilAction_$Impl_$.fromString = function(value) {
	switch(value) {
	case "decrementSaturate":
		return 0;
	case "decrementWrap":
		return 1;
	case "incrementSaturate":
		return 2;
	case "incrementWrap":
		return 3;
	case "invert":
		return 4;
	case "keep":
		return 5;
	case "set":
		return 6;
	case "zero":
		return 7;
	default:
		return null;
	}
};
openfl_display3D__$Context3DStencilAction_Context3DStencilAction_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "decrementSaturate";
	case 1:
		return "decrementWrap";
	case 2:
		return "incrementSaturate";
	case 3:
		return "incrementWrap";
	case 4:
		return "invert";
	case 5:
		return "keep";
	case 6:
		return "set";
	case 7:
		return "zero";
	default:
		return null;
	}
};
var openfl_display3D__$Context3DTextureFilter_Context3DTextureFilter_$Impl_$ = {};
$hxClasses["openfl.display3D._Context3DTextureFilter.Context3DTextureFilter_Impl_"] = openfl_display3D__$Context3DTextureFilter_Context3DTextureFilter_$Impl_$;
openfl_display3D__$Context3DTextureFilter_Context3DTextureFilter_$Impl_$.__name__ = ["openfl","display3D","_Context3DTextureFilter","Context3DTextureFilter_Impl_"];
openfl_display3D__$Context3DTextureFilter_Context3DTextureFilter_$Impl_$.fromString = function(value) {
	switch(value) {
	case "anisotropic16x":
		return 0;
	case "anisotropic2x":
		return 1;
	case "anisotropic4x":
		return 2;
	case "anisotropic8x":
		return 3;
	case "linear":
		return 4;
	case "nearest":
		return 5;
	default:
		return null;
	}
};
openfl_display3D__$Context3DTextureFilter_Context3DTextureFilter_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "anisotropic16x";
	case 1:
		return "anisotropic2x";
	case 2:
		return "anisotropic4x";
	case 3:
		return "anisotropic8x";
	case 4:
		return "linear";
	case 5:
		return "nearest";
	default:
		return null;
	}
};
var openfl_display3D__$Context3DTextureFormat_Context3DTextureFormat_$Impl_$ = {};
$hxClasses["openfl.display3D._Context3DTextureFormat.Context3DTextureFormat_Impl_"] = openfl_display3D__$Context3DTextureFormat_Context3DTextureFormat_$Impl_$;
openfl_display3D__$Context3DTextureFormat_Context3DTextureFormat_$Impl_$.__name__ = ["openfl","display3D","_Context3DTextureFormat","Context3DTextureFormat_Impl_"];
openfl_display3D__$Context3DTextureFormat_Context3DTextureFormat_$Impl_$.fromString = function(value) {
	switch(value) {
	case "bgrPacked565":
		return 0;
	case "bgra":
		return 1;
	case "bgraPacked4444":
		return 2;
	case "compressed":
		return 3;
	case "compressedAlpha":
		return 4;
	case "rgbaHalfFloat":
		return 5;
	default:
		return null;
	}
};
openfl_display3D__$Context3DTextureFormat_Context3DTextureFormat_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "bgrPacked565";
	case 1:
		return "bgra";
	case 2:
		return "bgraPacked4444";
	case 3:
		return "compressed";
	case 4:
		return "compressedAlpha";
	case 5:
		return "rgbaHalfFloat";
	default:
		return null;
	}
};
var openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$ = {};
$hxClasses["openfl.display3D._Context3DTriangleFace.Context3DTriangleFace_Impl_"] = openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$;
openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$.__name__ = ["openfl","display3D","_Context3DTriangleFace","Context3DTriangleFace_Impl_"];
openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$.fromString = function(value) {
	switch(value) {
	case "back":
		return 0;
	case "front":
		return 1;
	case "frontAndBack":
		return 2;
	case "none":
		return 3;
	default:
		return null;
	}
};
openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "back";
	case 1:
		return "front";
	case 2:
		return "frontAndBack";
	case 3:
		return "none";
	default:
		return null;
	}
};
var openfl_display3D__$Context3DVertexBufferFormat_Context3DVertexBufferFormat_$Impl_$ = {};
$hxClasses["openfl.display3D._Context3DVertexBufferFormat.Context3DVertexBufferFormat_Impl_"] = openfl_display3D__$Context3DVertexBufferFormat_Context3DVertexBufferFormat_$Impl_$;
openfl_display3D__$Context3DVertexBufferFormat_Context3DVertexBufferFormat_$Impl_$.__name__ = ["openfl","display3D","_Context3DVertexBufferFormat","Context3DVertexBufferFormat_Impl_"];
openfl_display3D__$Context3DVertexBufferFormat_Context3DVertexBufferFormat_$Impl_$.fromString = function(value) {
	switch(value) {
	case "bytes4":
		return 0;
	case "float1":
		return 1;
	case "float2":
		return 2;
	case "float3":
		return 3;
	case "float4":
		return 4;
	default:
		return null;
	}
};
openfl_display3D__$Context3DVertexBufferFormat_Context3DVertexBufferFormat_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "bytes4";
	case 1:
		return "float1";
	case 2:
		return "float2";
	case 3:
		return "float3";
	case 4:
		return "float4";
	default:
		return null;
	}
};
var openfl_display3D__$Context3DWrapMode_Context3DWrapMode_$Impl_$ = {};
$hxClasses["openfl.display3D._Context3DWrapMode.Context3DWrapMode_Impl_"] = openfl_display3D__$Context3DWrapMode_Context3DWrapMode_$Impl_$;
openfl_display3D__$Context3DWrapMode_Context3DWrapMode_$Impl_$.__name__ = ["openfl","display3D","_Context3DWrapMode","Context3DWrapMode_Impl_"];
openfl_display3D__$Context3DWrapMode_Context3DWrapMode_$Impl_$.fromString = function(value) {
	switch(value) {
	case "clamp":
		return 0;
	case "clamp_u_repeat_y":
		return 1;
	case "repeat":
		return 2;
	case "repeat_u_clamp_y":
		return 3;
	default:
		return null;
	}
};
openfl_display3D__$Context3DWrapMode_Context3DWrapMode_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "clamp";
	case 1:
		return "clamp_u_repeat_y";
	case 2:
		return "repeat";
	case 3:
		return "repeat_u_clamp_y";
	default:
		return null;
	}
};
var openfl_display3D_IndexBuffer3D = function(context3D,numIndices,bufferUsage) {
	this.__context = context3D;
	this.__numIndices = numIndices;
	this.__elementType = 5123;
	this.__id = lime_graphics_opengl_GL.context.createBuffer();
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	if(openfl_display3D__$Context3DBufferUsage_Context3DBufferUsage_$Impl_$.fromString(bufferUsage) == 0) this.__usage = 35048; else this.__usage = 35044;
	this.__context.__statsIncrement(1);
	this.__memoryUsage = 0;
};
$hxClasses["openfl.display3D.IndexBuffer3D"] = openfl_display3D_IndexBuffer3D;
openfl_display3D_IndexBuffer3D.__name__ = ["openfl","display3D","IndexBuffer3D"];
openfl_display3D_IndexBuffer3D.prototype = {
	__context: null
	,__elementType: null
	,__id: null
	,__memoryUsage: null
	,__numIndices: null
	,__usage: null
	,dispose: function() {
		lime_graphics_opengl_GL.context.deleteBuffer(this.__id);
		this.__context.__statsDecrement(1);
		this.__context.__statsSubtract(6,this.__memoryUsage);
		this.__memoryUsage = 0;
	}
	,uploadFromByteArray: function(data,byteArrayOffset,startOffset,count) {
		var offset = byteArrayOffset + startOffset * 2;
		this.uploadFromTypedArray((function($this) {
			var $r;
			var buffer = openfl_utils__$ByteArray_ByteArray_$Impl_$.toArrayBuffer(data);
			var this1;
			if(buffer != null) {
				if(count == null) this1 = new Int16Array(buffer,offset); else this1 = new Int16Array(buffer,offset,count);
			} else this1 = null;
			$r = this1;
			return $r;
		}(this)));
	}
	,uploadFromTypedArray: function(data) {
		if(data == null) return;
		lime_graphics_opengl_GL.context.bindBuffer(34963,this.__id);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		lime_graphics_opengl_GL.context.bufferData(34963,data,this.__usage);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		if(data.byteLength != this.__memoryUsage) {
			this.__context.__statsAdd(6,data.byteLength - this.__memoryUsage);
			this.__memoryUsage = data.byteLength;
		}
	}
	,uploadFromVector: function(data,startOffset,count) {
		var length = startOffset + count;
		var buffer;
		var this1;
		if(count != null) this1 = new Int16Array(count); else this1 = null;
		buffer = this1;
		var _g = startOffset;
		while(_g < length) {
			var i = _g++;
			var val = data.get(i);
			buffer[i - startOffset] = val;
		}
		this.uploadFromTypedArray(buffer);
	}
	,__class__: openfl_display3D_IndexBuffer3D
};
var openfl_display3D_Program3D = function(context3D) {
	this.__context = context3D;
	this.__memUsage = 0;
	this.__samplerUsageMask = 0;
	this.__uniforms = new List();
	this.__samplerUniforms = new List();
	this.__alphaSamplerUniforms = new List();
	this.__samplerStates = openfl__$Vector_Vector_$Impl_$.toObjectVector(null,8);
};
$hxClasses["openfl.display3D.Program3D"] = openfl_display3D_Program3D;
openfl_display3D_Program3D.__name__ = ["openfl","display3D","Program3D"];
openfl_display3D_Program3D.prototype = {
	__alphaSamplerUniforms: null
	,__context: null
	,__fragmentShaderID: null
	,__fragmentSource: null
	,__fragmentUniformMap: null
	,__memUsage: null
	,__positionScale: null
	,__programID: null
	,__samplerStates: null
	,__samplerUniforms: null
	,__samplerUsageMask: null
	,__uniforms: null
	,__vertexShaderID: null
	,__vertexSource: null
	,__vertexUniformMap: null
	,dispose: function() {
		this.__deleteShaders();
	}
	,upload: function(vertexProgram,fragmentProgram) {
		var samplerStates = [];
		var glslVertex = openfl__$internal_stage3D_AGALConverter.convertToGLSL(vertexProgram,null);
		var glslFragment = openfl__$internal_stage3D_AGALConverter.convertToGLSL(fragmentProgram,samplerStates);
		this.__uploadFromGLSL(glslVertex,glslFragment);
		var _g1 = 0;
		var _g = samplerStates.length;
		while(_g1 < _g) {
			var i = _g1++;
			this.__setSamplerState(i,samplerStates[i]);
		}
	}
	,__buildUniformList: function() {
		this.__uniforms.clear();
		this.__samplerUniforms.clear();
		this.__alphaSamplerUniforms.clear();
		this.__samplerUsageMask = 0;
		var numActive = 0;
		numActive = lime_graphics_opengl_GL.context.getProgramParameter(this.__programID,35718);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		var vertexUniforms = new List();
		var fragmentUniforms = new List();
		var _g = 0;
		while(_g < numActive) {
			var i = _g++;
			var info = lime_graphics_opengl_GL.context.getActiveUniform(this.__programID,i);
			var name = info.name;
			var size = info.size;
			var uniformType = info.type;
			openfl__$internal_stage3D_GLUtils.CheckGLError();
			var uniform = new openfl_display3D__$Program3D_Uniform();
			uniform.name = name;
			uniform.size = size;
			uniform.type = uniformType;
			uniform.location = lime_graphics_opengl_GL.context.getUniformLocation(this.__programID,uniform.name);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
			var indexBracket = uniform.name.indexOf("[");
			if(indexBracket >= 0) uniform.name = uniform.name.substring(0,indexBracket);
			var _g1 = uniform.type;
			switch(_g1) {
			case 35674:
				uniform.regCount = 2;
				break;
			case 35675:
				uniform.regCount = 3;
				break;
			case 35676:
				uniform.regCount = 4;
				break;
			default:
				uniform.regCount = 1;
			}
			uniform.regCount *= uniform.size;
			this.__uniforms.add(uniform);
			if(uniform.name == "vcPositionScale") this.__positionScale = uniform; else if(StringTools.startsWith(uniform.name,"vc")) {
				uniform.regIndex = Std.parseInt(uniform.name.substring(2));
				uniform.regData = this.__context.__vertexConstants;
				vertexUniforms.add(uniform);
			} else if(StringTools.startsWith(uniform.name,"fc")) {
				uniform.regIndex = Std.parseInt(uniform.name.substring(2));
				uniform.regData = this.__context.__fragmentConstants;
				fragmentUniforms.add(uniform);
			} else if(StringTools.startsWith(uniform.name,"sampler") && !StringTools.endsWith(uniform.name,"_alpha")) {
				uniform.regIndex = Std.parseInt(uniform.name.substring(7));
				this.__samplerUniforms.add(uniform);
				var _g2 = 0;
				var _g11 = uniform.regCount;
				while(_g2 < _g11) {
					var reg = _g2++;
					this.__samplerUsageMask |= 1 << uniform.regIndex + reg;
				}
			} else if(StringTools.startsWith(uniform.name,"sampler") && StringTools.endsWith(uniform.name,"_alpha")) {
				var len = uniform.name.indexOf("_") - 7;
				uniform.regIndex = Std.parseInt(uniform.name.substring(7,7 + len)) + 4;
				this.__alphaSamplerUniforms.add(uniform);
			}
			if(openfl_display3D_Program3D.verbose) haxe_Log.trace("" + i + " name:" + uniform.name + " type:" + uniform.type + " size:" + uniform.size + " location:" + Std.string(uniform.location),{ fileName : "Program3D.hx", lineNumber : 174, className : "openfl.display3D.Program3D", methodName : "__buildUniformList"});
		}
		this.__vertexUniformMap = new openfl_display3D__$Program3D_UniformMap(Lambda.array(vertexUniforms));
		this.__fragmentUniformMap = new openfl_display3D__$Program3D_UniformMap(Lambda.array(fragmentUniforms));
	}
	,__deleteShaders: function() {
		if(this.__programID != null) this.__programID = null;
		if(this.__vertexShaderID != null) {
			lime_graphics_opengl_GL.context.deleteShader(this.__vertexShaderID);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
			this.__vertexShaderID = null;
		}
		if(this.__fragmentShaderID != null) {
			lime_graphics_opengl_GL.context.deleteShader(this.__fragmentShaderID);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
			this.__fragmentShaderID = null;
		}
		if(this.__memUsage != 0) {
			this.__context.__statsDecrement(5);
			this.__context.__statsSubtract(10,this.__memUsage);
			this.__memUsage = 0;
		}
	}
	,__flush: function() {
		this.__vertexUniformMap.flush();
		this.__fragmentUniformMap.flush();
	}
	,__getSamplerState: function(sampler) {
		return this.__samplerStates.get(sampler);
	}
	,__markDirty: function(isVertex,index,count) {
		if(isVertex) this.__vertexUniformMap.markDirty(index,count); else this.__fragmentUniformMap.markDirty(index,count);
	}
	,__setPositionScale: function(positionScale) {
		if(this.__positionScale != null) {
			lime_graphics_opengl_GL.context.uniform4fv(this.__positionScale.location,positionScale);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
		}
	}
	,__setSamplerState: function(sampler,state) {
		this.__samplerStates.set(sampler,state);
	}
	,__uploadFromGLSL: function(vertexShaderSource,fragmentShaderSource) {
		this.__deleteShaders();
		if(openfl_display3D_Program3D.verbose) {
			haxe_Log.trace(vertexShaderSource,{ fileName : "Program3D.hx", lineNumber : 278, className : "openfl.display3D.Program3D", methodName : "__uploadFromGLSL"});
			haxe_Log.trace(fragmentShaderSource,{ fileName : "Program3D.hx", lineNumber : 279, className : "openfl.display3D.Program3D", methodName : "__uploadFromGLSL"});
		}
		this.__vertexSource = vertexShaderSource;
		this.__fragmentSource = fragmentShaderSource;
		this.__vertexShaderID = lime_graphics_opengl_GL.context.createShader(35633);
		lime_graphics_opengl_GL.context.shaderSource(this.__vertexShaderID,vertexShaderSource);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		lime_graphics_opengl_GL.context.compileShader(this.__vertexShaderID);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		var shaderCompiled = lime_graphics_opengl_GL.context.getShaderParameter(this.__vertexShaderID,35713);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		if(shaderCompiled == 0) {
			var vertexInfoLog = lime_graphics_opengl_GL.context.getShaderInfoLog(this.__vertexShaderID);
			if(vertexInfoLog != null && vertexInfoLog.length != 0) haxe_Log.trace("vertex: " + vertexInfoLog,{ fileName : "Program3D.hx", lineNumber : 303, className : "openfl.display3D.Program3D", methodName : "__uploadFromGLSL"});
			throw new js__$Boot_HaxeError(new openfl_errors_Error("Error compiling vertex shader: " + vertexInfoLog));
		}
		this.__fragmentShaderID = lime_graphics_opengl_GL.context.createShader(35632);
		lime_graphics_opengl_GL.context.shaderSource(this.__fragmentShaderID,fragmentShaderSource);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		lime_graphics_opengl_GL.context.compileShader(this.__fragmentShaderID);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		var fragmentCompiled = lime_graphics_opengl_GL.context.getShaderParameter(this.__fragmentShaderID,35713);
		if(fragmentCompiled == 0) {
			var fragmentInfoLog = lime_graphics_opengl_GL.context.getShaderInfoLog(this.__fragmentShaderID);
			if(fragmentInfoLog != null && fragmentInfoLog.length != 0) haxe_Log.trace("fragment: " + fragmentInfoLog,{ fileName : "Program3D.hx", lineNumber : 326, className : "openfl.display3D.Program3D", methodName : "__uploadFromGLSL"});
			throw new js__$Boot_HaxeError(new openfl_errors_Error("Error compiling fragment shader: " + fragmentInfoLog));
		}
		this.__programID = lime_graphics_opengl_GL.context.createProgram();
		lime_graphics_opengl_GL.context.attachShader(this.__programID,this.__vertexShaderID);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		lime_graphics_opengl_GL.context.attachShader(this.__programID,this.__fragmentShaderID);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		var _g = 0;
		while(_g < 16) {
			var i = _g++;
			var name = "va" + i;
			if(vertexShaderSource.indexOf(" " + name) != -1) lime_graphics_opengl_GL.context.bindAttribLocation(this.__programID,i,name);
		}
		lime_graphics_opengl_GL.context.linkProgram(this.__programID);
		var infoLog = lime_graphics_opengl_GL.context.getProgramInfoLog(this.__programID);
		if(infoLog != null && infoLog.length != 0) haxe_Log.trace("program: ${infoLog}",{ fileName : "Program3D.hx", lineNumber : 359, className : "openfl.display3D.Program3D", methodName : "__uploadFromGLSL"});
		this.__buildUniformList();
		this.__memUsage = 1;
		this.__context.__statsIncrement(5);
		this.__context.__statsAdd(10,this.__memUsage);
	}
	,__use: function() {
		lime_graphics_opengl_GL.useProgram(this.__programID);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		this.__vertexUniformMap.markAllDirty();
		this.__fragmentUniformMap.markAllDirty();
		var _g_head = this.__samplerUniforms.h;
		var _g_val = null;
		while(_g_head != null) {
			var sampler;
			sampler = (function($this) {
				var $r;
				_g_val = _g_head[0];
				_g_head = _g_head[1];
				$r = _g_val;
				return $r;
			}(this));
			if(sampler.regCount == 1) {
				lime_graphics_opengl_GL.context.uniform1i(sampler.location,sampler.regIndex);
				openfl__$internal_stage3D_GLUtils.CheckGLError();
			} else throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("!!! TODO: uniform location on webgl"));
		}
		var _g_head1 = this.__alphaSamplerUniforms.h;
		var _g_val1 = null;
		while(_g_head1 != null) {
			var sampler1;
			sampler1 = (function($this) {
				var $r;
				_g_val1 = _g_head1[0];
				_g_head1 = _g_head1[1];
				$r = _g_val1;
				return $r;
			}(this));
			if(sampler1.regCount == 1) {
				lime_graphics_opengl_GL.context.uniform1i(sampler1.location,sampler1.regIndex);
				openfl__$internal_stage3D_GLUtils.CheckGLError();
			} else throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("!!! TODO: uniform location on webgl"));
		}
	}
	,__class__: openfl_display3D_Program3D
};
var openfl_display3D__$Program3D_Uniform = function() {
	this.isDirty = true;
};
$hxClasses["openfl.display3D._Program3D.Uniform"] = openfl_display3D__$Program3D_Uniform;
openfl_display3D__$Program3D_Uniform.__name__ = ["openfl","display3D","_Program3D","Uniform"];
openfl_display3D__$Program3D_Uniform.prototype = {
	name: null
	,location: null
	,type: null
	,size: null
	,regData: null
	,regIndex: null
	,regCount: null
	,isDirty: null
	,flush: function() {
		var index = this.regIndex * 4;
		var _g = this.type;
		switch(_g) {
		case 35674:
			lime_graphics_opengl_GL.uniformMatrix2fv(this.location,false,this.__getRegisters(index,this.size * 2 * 2));
			break;
		case 35675:
			lime_graphics_opengl_GL.uniformMatrix3fv(this.location,false,this.__getRegisters(index,this.size * 3 * 3));
			break;
		case 35676:
			lime_graphics_opengl_GL.uniformMatrix4fv(this.location,false,this.__getRegisters(index,this.size * 4 * 4));
			break;
		case 35664:
			lime_graphics_opengl_GL.uniform2fv(this.location,this.__getRegisters(index,this.regCount * 2));
			break;
		case 35665:
			lime_graphics_opengl_GL.uniform3fv(this.location,this.__getRegisters(index,this.regCount * 3));
			break;
		case 35666:
			lime_graphics_opengl_GL.uniform4fv(this.location,this.__getRegisters(index,this.regCount * 4));
			break;
		default:
			lime_graphics_opengl_GL.uniform4fv(this.location,this.__getRegisters(index,this.regCount * 4));
		}
		openfl__$internal_stage3D_GLUtils.CheckGLError();
	}
	,__getRegisters: function(index,size) {
		return this.regData.subarray(index,index + size);
	}
	,__class__: openfl_display3D__$Program3D_Uniform
};
var openfl_display3D__$Program3D_UniformMap = function(list) {
	this.__uniforms = list;
	this.__uniforms.sort(function(a,b) {
		return Reflect.compare(a.regIndex,b.regIndex);
	});
	var total = 0;
	var _g = 0;
	var _g1 = this.__uniforms;
	while(_g < _g1.length) {
		var uniform = _g1[_g];
		++_g;
		if(uniform.regIndex + uniform.regCount > total) total = uniform.regIndex + uniform.regCount;
	}
	this.__registerLookup = openfl__$Vector_Vector_$Impl_$.toObjectVector(null,total);
	var _g2 = 0;
	var _g11 = this.__uniforms;
	while(_g2 < _g11.length) {
		var uniform1 = _g11[_g2];
		++_g2;
		var _g3 = 0;
		var _g21 = uniform1.regCount;
		while(_g3 < _g21) {
			var i = _g3++;
			this.__registerLookup.set(uniform1.regIndex + i,uniform1);
		}
	}
	this.__anyDirty = this.__allDirty = true;
};
$hxClasses["openfl.display3D._Program3D.UniformMap"] = openfl_display3D__$Program3D_UniformMap;
openfl_display3D__$Program3D_UniformMap.__name__ = ["openfl","display3D","_Program3D","UniformMap"];
openfl_display3D__$Program3D_UniformMap.prototype = {
	__allDirty: null
	,__anyDirty: null
	,__registerLookup: null
	,__uniforms: null
	,flush: function() {
		if(this.__anyDirty) {
			var _g = 0;
			var _g1 = this.__uniforms;
			while(_g < _g1.length) {
				var uniform = _g1[_g];
				++_g;
				if(this.__allDirty || uniform.isDirty) {
					uniform.flush();
					uniform.isDirty = false;
				}
			}
			this.__anyDirty = this.__allDirty = false;
		}
	}
	,markAllDirty: function() {
		this.__allDirty = true;
		this.__anyDirty = true;
	}
	,markDirty: function(start,count) {
		if(this.__allDirty) return;
		var end = start + count;
		if(end > this.__registerLookup.get_length()) end = this.__registerLookup.get_length();
		var index = start;
		while(index < end) {
			var uniform = this.__registerLookup.get(index);
			if(uniform != null) {
				uniform.isDirty = true;
				this.__anyDirty = true;
				index = uniform.regIndex + uniform.regCount;
			} else index++;
		}
	}
	,__class__: openfl_display3D__$Program3D_UniformMap
};
var openfl_display3D_VertexBuffer3D = function(context3D,numVertices,dataPerVertex,bufferUsage) {
	this.__context = context3D;
	this.__numVertices = numVertices;
	this.__vertexSize = dataPerVertex;
	this.__id = lime_graphics_opengl_GL.context.createBuffer();
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	this.__stride = this.__vertexSize * 4;
	this.__memoryUsage = 0;
	if(openfl_display3D__$Context3DBufferUsage_Context3DBufferUsage_$Impl_$.fromString(bufferUsage) == 0) this.__usage = 35048; else this.__usage = 35044;
	this.__context.__statsIncrement(2);
};
$hxClasses["openfl.display3D.VertexBuffer3D"] = openfl_display3D_VertexBuffer3D;
openfl_display3D_VertexBuffer3D.__name__ = ["openfl","display3D","VertexBuffer3D"];
openfl_display3D_VertexBuffer3D.prototype = {
	__context: null
	,__data: null
	,__id: null
	,__memoryUsage: null
	,__numVertices: null
	,__stride: null
	,__usage: null
	,__vertexSize: null
	,dispose: function() {
		lime_graphics_opengl_GL.context.deleteBuffer(this.__id);
		this.__context.__statsDecrement(2);
		this.__context.__statsSubtract(7,this.__memoryUsage);
		this.__memoryUsage = 0;
	}
	,uploadFromByteArray: function(data,byteArrayOffset,startVertex,numVertices) {
		var offset = byteArrayOffset + startVertex * this.__stride;
		var length = numVertices * this.__vertexSize;
		this.uploadFromTypedArray((function($this) {
			var $r;
			var buffer = openfl_utils__$ByteArray_ByteArray_$Impl_$.toArrayBuffer(data);
			var this1;
			if(buffer != null) {
				if(length == null) this1 = new Float32Array(buffer,offset); else this1 = new Float32Array(buffer,offset,length);
			} else this1 = null;
			$r = this1;
			return $r;
		}(this)));
	}
	,uploadFromTypedArray: function(data) {
		if(data == null) return;
		lime_graphics_opengl_GL.context.bindBuffer(34962,this.__id);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		lime_graphics_opengl_GL.context.bufferData(34962,data,this.__usage);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		if(data.byteLength != this.__memoryUsage) {
			this.__context.__statsAdd(7,data.byteLength - this.__memoryUsage);
			this.__memoryUsage = data.byteLength;
		}
	}
	,uploadFromVector: function(data,startVertex,numVertices) {
		var start = startVertex * this.__vertexSize;
		var count = numVertices * this.__vertexSize;
		var length = start + count;
		var buffer;
		var this1;
		if(count != null) this1 = new Float32Array(count); else this1 = null;
		buffer = this1;
		var _g = start;
		while(_g < length) {
			var i = _g++;
			var val = data.get(i);
			buffer[i - start] = val;
		}
		this.uploadFromTypedArray(buffer);
	}
	,__class__: openfl_display3D_VertexBuffer3D
};
var openfl_display3D_textures_TextureBase = function(context,target) {
	this.__outputTextureMemoryUsage = false;
	openfl_events_EventDispatcher.call(this);
	this.__context = context;
	this.__textureTarget = target;
	this.__textureID = lime_graphics_opengl_GL.context.createTexture();
	this.__internalFormat = 6408;
	this.__format = 6408;
	this.__memoryUsage = 0;
	this.__compressedMemoryUsage = 0;
};
$hxClasses["openfl.display3D.textures.TextureBase"] = openfl_display3D_textures_TextureBase;
openfl_display3D_textures_TextureBase.__name__ = ["openfl","display3D","textures","TextureBase"];
openfl_display3D_textures_TextureBase.__super__ = openfl_events_EventDispatcher;
openfl_display3D_textures_TextureBase.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	__alphaTexture: null
	,__compressedMemoryUsage: null
	,__context: null
	,__format: null
	,__height: null
	,__internalFormat: null
	,__memoryUsage: null
	,__optimizeForRenderToTexture: null
	,__outputTextureMemoryUsage: null
	,__samplerState: null
	,__streamingLevels: null
	,__textureID: null
	,__textureTarget: null
	,__width: null
	,dispose: function() {
		if(this.__alphaTexture != null) this.__alphaTexture.dispose();
		lime_graphics_opengl_GL.context.deleteTexture(this.__textureID);
		if(this.__compressedMemoryUsage > 0) {
			this.__context.__statsDecrement(4);
			var currentCompressedMemory = this.__context.__statsSubtract(9,this.__compressedMemoryUsage);
			this.__compressedMemoryUsage = 0;
		}
		if(this.__memoryUsage > 0) {
			this.__context.__statsDecrement(3);
			var currentMemory = this.__context.__statsSubtract(8,this.__memoryUsage);
			this.__memoryUsage = 0;
		}
	}
	,__getImage: function(bitmapData) {
		var image = bitmapData.image;
		if(!bitmapData.__isValid || image == null) return null;
		lime_graphics_utils_ImageCanvasUtil.sync(image,false);
		if(image.type != lime_graphics_ImageType.DATA && !image.get_premultiplied()) lime_graphics_opengl_GL.context.pixelStorei(37441,1); else if(!image.get_premultiplied() && image.get_transparent()) {
			lime_graphics_opengl_GL.context.pixelStorei(37441,0);
			image = image.clone();
			image.set_premultiplied(true);
		}
		if(image.get_format() != 0) {
			image = image.clone();
			image.set_format(0);
			image.buffer.premultiplied = true;
		}
		return image;
	}
	,__getTexture: function() {
		return this.__textureID;
	}
	,__setSamplerState: function(state) {
		if(!state.equals(this.__samplerState)) {
			lime_graphics_opengl_GL.context.bindTexture(this.__textureTarget,this.__textureID);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
			lime_graphics_opengl_GL.context.texParameteri(this.__textureTarget,10241,state.minFilter);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
			lime_graphics_opengl_GL.context.texParameteri(this.__textureTarget,10240,state.magFilter);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
			lime_graphics_opengl_GL.context.texParameteri(this.__textureTarget,10242,state.wrapModeS);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
			lime_graphics_opengl_GL.context.texParameteri(this.__textureTarget,10243,state.wrapModeT);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
			if(state.lodBias != 0.0) {
			}
			this.__samplerState = state;
		}
	}
	,__trackCompressedMemoryUsage: function(memory) {
		if(this.__compressedMemoryUsage == 0) this.__context.__statsIncrement(4);
		this.__compressedMemoryUsage += memory;
		var currentCompressedMemory = this.__context.__statsAdd(9,memory);
		this.__trackMemoryUsage(memory);
	}
	,__trackMemoryUsage: function(memory) {
		if(this.__memoryUsage == 0) this.__context.__statsIncrement(3);
		this.__memoryUsage += memory;
		var currentMemory = this.__context.__statsAdd(8,memory);
	}
	,__class__: openfl_display3D_textures_TextureBase
});
var openfl_display3D_textures_CubeTexture = function(context,size,format,optimizeForRenderToTexture,streamingLevels) {
	openfl_display3D_textures_TextureBase.call(this,context,34067);
	this.__size = size;
	this.__optimizeForRenderToTexture = optimizeForRenderToTexture;
	this.__streamingLevels = streamingLevels;
	this.__uploadedSides = 0;
};
$hxClasses["openfl.display3D.textures.CubeTexture"] = openfl_display3D_textures_CubeTexture;
openfl_display3D_textures_CubeTexture.__name__ = ["openfl","display3D","textures","CubeTexture"];
openfl_display3D_textures_CubeTexture.__super__ = openfl_display3D_textures_TextureBase;
openfl_display3D_textures_CubeTexture.prototype = $extend(openfl_display3D_textures_TextureBase.prototype,{
	__size: null
	,__uploadedSides: null
	,uploadCompressedTextureFromByteArray: function(data,byteArrayOffset,async) {
		if(async == null) async = false;
	}
	,uploadFromBitmapData: function(source,side,miplevel,generateMipmap) {
		if(generateMipmap == null) generateMipmap = false;
		if(miplevel == null) miplevel = 0;
		lime_graphics_opengl_GL.context.bindTexture(this.__textureTarget,this.__textureID);
		var target;
		switch(side) {
		case 0:
			target = 34069;
			break;
		case 1:
			target = 34070;
			break;
		case 2:
			target = 34071;
			break;
		case 3:
			target = 34072;
			break;
		case 4:
			target = 34073;
			break;
		case 5:
			target = 34074;
			break;
		default:
			throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError());
		}
		this.__uploadedSides |= 1 << side;
		lime_graphics_opengl_GL.context.bindTexture(this.__textureTarget,null);
	}
	,uploadFromByteArray: function(data,byteArrayOffset,side,miplevel) {
		if(miplevel == null) miplevel = 0;
	}
	,__class__: openfl_display3D_textures_CubeTexture
});
var openfl_display3D_textures_RectangleTexture = function(context,width,height,format,optimizeForRenderToTexture) {
	openfl_display3D_textures_TextureBase.call(this,context,3553);
	this.__width = width;
	this.__height = height;
	this.__optimizeForRenderToTexture = optimizeForRenderToTexture;
	this.uploadFromTypedArray(null);
};
$hxClasses["openfl.display3D.textures.RectangleTexture"] = openfl_display3D_textures_RectangleTexture;
openfl_display3D_textures_RectangleTexture.__name__ = ["openfl","display3D","textures","RectangleTexture"];
openfl_display3D_textures_RectangleTexture.__super__ = openfl_display3D_textures_TextureBase;
openfl_display3D_textures_RectangleTexture.prototype = $extend(openfl_display3D_textures_TextureBase.prototype,{
	uploadFromBitmapData: function(source) {
		if(source == null) return;
		var image = this.__getImage(source);
		if(image == null) return;
		this.uploadFromTypedArray(image.get_data());
	}
	,uploadFromByteArray: function(data,byteArrayOffset) {
		if(byteArrayOffset == 0) {
			this.uploadFromTypedArray(data.b);
			return;
		}
		this.uploadFromTypedArray((function($this) {
			var $r;
			var buffer = openfl_utils__$ByteArray_ByteArray_$Impl_$.toArrayBuffer(data);
			var this1;
			if(buffer != null) this1 = new Uint8Array(buffer,byteArrayOffset); else this1 = null;
			$r = this1;
			return $r;
		}(this)));
	}
	,uploadFromTypedArray: function(data) {
		lime_graphics_opengl_GL.context.bindTexture(this.__textureTarget,this.__textureID);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		lime_graphics_opengl_GL.context.texImage2D(this.__textureTarget,0,this.__internalFormat,this.__width,this.__height,0,this.__format,5121,data);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		lime_graphics_opengl_GL.context.bindTexture(this.__textureTarget,null);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		var memUsage = this.__width * this.__height * 4;
		this.__trackMemoryUsage(memUsage);
	}
	,__class__: openfl_display3D_textures_RectangleTexture
});
var openfl_display3D_textures_Texture = function(context,width,height,format,optimizeForRenderToTexture,streamingLevels) {
	openfl_display3D_textures_TextureBase.call(this,context,3553);
	this.__width = width;
	this.__height = height;
	this.__optimizeForRenderToTexture = optimizeForRenderToTexture;
	this.__streamingLevels = streamingLevels;
	lime_graphics_opengl_GL.context.bindTexture(this.__textureTarget,this.__textureID);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	lime_graphics_opengl_GL.context.texImage2D(this.__textureTarget,0,this.__internalFormat,width,height,0,this.__format,5121,null);
	openfl__$internal_stage3D_GLUtils.CheckGLError();
	lime_graphics_opengl_GL.context.bindTexture(this.__textureTarget,null);
	this.uploadFromTypedArray(null);
};
$hxClasses["openfl.display3D.textures.Texture"] = openfl_display3D_textures_Texture;
openfl_display3D_textures_Texture.__name__ = ["openfl","display3D","textures","Texture"];
openfl_display3D_textures_Texture.__getATFVersion = function(data) {
	var signature = data.readUTFBytes(3);
	if(signature != "ATF") throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("ATF signature not found"));
	var position = data.position;
	var version = 0;
	if(_$UInt_UInt_$Impl_$.gte(data.length - data.position,5)) {
		var sig = openfl_display3D_textures_Texture.__readUInt32(data);
		if(sig == 255) version = data.readUnsignedByte(); else data.position = position;
	}
	return version;
};
openfl_display3D_textures_Texture.__readUInt24 = function(data) {
	var value;
	value = data.readUnsignedByte() << 16;
	var b = data.readUnsignedByte() << 8;
	value = value | b;
	var b1 = data.readUnsignedByte();
	value = value | b1;
	return value;
};
openfl_display3D_textures_Texture.__readUInt32 = function(data) {
	var value;
	value = data.readUnsignedByte() << 24;
	var b = data.readUnsignedByte() << 16;
	value = value | b;
	var b1 = data.readUnsignedByte() << 8;
	value = value | b1;
	var b2 = data.readUnsignedByte();
	value = value | b2;
	return value;
};
openfl_display3D_textures_Texture.__super__ = openfl_display3D_textures_TextureBase;
openfl_display3D_textures_Texture.prototype = $extend(openfl_display3D_textures_TextureBase.prototype,{
	uploadCompressedTextureFromByteArray: function(data,byteArrayOffset,async) {
		if(async == null) async = false;
		var _g = this;
		data.position = byteArrayOffset;
		var signature = data.readUTFBytes(3);
		data.position = byteArrayOffset;
		if(signature == "ATF") {
			lime_graphics_opengl_GL.context.bindTexture(this.__textureTarget,this.__textureID);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
			this.__uploadATFTextureFromByteArray(data,byteArrayOffset);
			lime_graphics_opengl_GL.context.bindTexture(this.__textureTarget,null);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
		} else {
			lime_graphics_opengl_GL.context.bindTexture(this.__textureTarget,null);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
		}
		if(async) haxe_Timer.delay(function() {
			_g.dispatchEvent(new openfl_events_Event("textureReady"));
		},1);
	}
	,uploadFromBitmapData: function(source,miplevel,generateMipmap) {
		if(generateMipmap == null) generateMipmap = false;
		if(miplevel == null) miplevel = 0;
		if(source == null) return;
		var width = this.__width >> miplevel;
		var height = this.__height >> miplevel;
		if(source.width != width || source.height != height) {
			var copy = new openfl_display_BitmapData(width,height,true,0);
			copy.draw(source);
			source = copy;
		}
		var image = this.__getImage(source);
		this.uploadFromTypedArray(image.get_data(),miplevel);
	}
	,uploadFromByteArray: function(data,byteArrayOffset,miplevel) {
		if(miplevel == null) miplevel = 0;
		if(byteArrayOffset == 0) {
			this.uploadFromTypedArray(data.b);
			return;
		}
		this.uploadFromTypedArray((function($this) {
			var $r;
			var buffer = openfl_utils__$ByteArray_ByteArray_$Impl_$.toArrayBuffer(data);
			var this1;
			if(buffer != null) this1 = new Uint8Array(buffer,byteArrayOffset); else this1 = null;
			$r = this1;
			return $r;
		}(this)),miplevel);
	}
	,uploadFromTypedArray: function(data,miplevel) {
		if(miplevel == null) miplevel = 0;
		if(data == null) return;
		var width = this.__width >> miplevel;
		var height = this.__height >> miplevel;
		lime_graphics_opengl_GL.context.bindTexture(this.__textureTarget,this.__textureID);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		lime_graphics_opengl_GL.context.texImage2D(this.__textureTarget,miplevel,this.__internalFormat,width,height,0,this.__format,5121,data);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		lime_graphics_opengl_GL.context.bindTexture(this.__textureTarget,null);
		openfl__$internal_stage3D_GLUtils.CheckGLError();
		var memUsage = width * height * 4;
		this.__trackMemoryUsage(memUsage);
	}
	,__uploadATFTextureFromByteArray: function(data,byteArrayOffset) {
		data.position = byteArrayOffset;
		var version = openfl_display3D_textures_Texture.__getATFVersion(data);
		var length;
		if(version == 0) length = openfl_display3D_textures_Texture.__readUInt24(data); else length = openfl_display3D_textures_Texture.__readUInt32(data);
		if(js_Boot.__cast(byteArrayOffset + length , Int) > openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(data)) throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("ATF length exceeds byte array length"));
		var tdata = data.readUnsignedByte();
		var type = tdata >> 7;
		if(type != 0) throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("ATF Cube maps are not supported"));
		var width = 1 << data.readUnsignedByte();
		var height = 1 << data.readUnsignedByte();
		if(width != this.__width || height != this.__height) throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("ATF width and height dont match"));
		var mipCount = data.readUnsignedByte();
		var _g = 0;
		while(_g < mipCount) {
			var level = _g++;
			var _g1 = 0;
			while(_g1 < 3) {
				var gpuFormat = _g1++;
				var blockLength;
				if(version == 0) blockLength = openfl_display3D_textures_Texture.__readUInt24(data); else blockLength = openfl_display3D_textures_Texture.__readUInt32(data);
				if(_$UInt_UInt_$Impl_$.gt(blockLength,0)) {
					if(gpuFormat == 1) {
					} else if(gpuFormat == 2) {
					}
				}
				data.position = data.position + blockLength;
			}
		}
	}
	,__class__: openfl_display3D_textures_Texture
});
var openfl_display3D_textures_VideoTexture = function(context) {
	openfl_display3D_textures_TextureBase.call(this,context,3553);
};
$hxClasses["openfl.display3D.textures.VideoTexture"] = openfl_display3D_textures_VideoTexture;
openfl_display3D_textures_VideoTexture.__name__ = ["openfl","display3D","textures","VideoTexture"];
openfl_display3D_textures_VideoTexture.__super__ = openfl_display3D_textures_TextureBase;
openfl_display3D_textures_VideoTexture.prototype = $extend(openfl_display3D_textures_TextureBase.prototype,{
	videoHeight: null
	,videoWidth: null
	,__netStream: null
	,attachNetStream: function(netStream) {
		var _g = this;
		this.__netStream = netStream;
		if(this.__netStream.__video.readyState == 4) haxe_Timer.delay(function() {
			_g.__textureReady();
		},0); else this.__netStream.__video.addEventListener("canplay",function(_) {
			_g.__textureReady();
		},false);
	}
	,__getTexture: function() {
		if(!this.__netStream.__video.paused) {
			lime_graphics_opengl_GL.context.bindTexture(this.__textureTarget,this.__textureID);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
			lime_graphics_opengl_GL.context.texImage2D(3553,0,6408,6408,5121,this.__netStream.__video);
			openfl__$internal_stage3D_GLUtils.CheckGLError();
		}
		return this.__textureID;
	}
	,__textureReady: function() {
		this.videoWidth = this.__netStream.__video.videoWidth;
		this.videoHeight = this.__netStream.__video.videoHeight;
		this.dispatchEvent(new openfl_events_Event("textureReady"));
	}
	,__class__: openfl_display3D_textures_VideoTexture
});
var openfl_errors_Error = function(message,id) {
	if(id == null) id = 0;
	if(message == null) message = "";
	this.message = message;
	this.errorID = id;
	this.name = "Error";
};
$hxClasses["openfl.errors.Error"] = openfl_errors_Error;
openfl_errors_Error.__name__ = ["openfl","errors","Error"];
openfl_errors_Error.prototype = {
	errorID: null
	,message: null
	,name: null
	,getStackTrace: function() {
		return haxe_CallStack.toString(haxe_CallStack.exceptionStack());
	}
	,toString: function() {
		if(this.message != null) return this.message; else return "Error";
	}
	,__class__: openfl_errors_Error
};
var openfl_errors_ArgumentError = function(message) {
	if(message == null) message = "";
	openfl_errors_Error.call(this,message);
	this.name = "ArgumentError";
};
$hxClasses["openfl.errors.ArgumentError"] = openfl_errors_ArgumentError;
openfl_errors_ArgumentError.__name__ = ["openfl","errors","ArgumentError"];
openfl_errors_ArgumentError.__super__ = openfl_errors_Error;
openfl_errors_ArgumentError.prototype = $extend(openfl_errors_Error.prototype,{
	__class__: openfl_errors_ArgumentError
});
var openfl_errors_IOError = function(message) {
	if(message == null) message = "";
	openfl_errors_Error.call(this,message);
	this.name = "IOError";
};
$hxClasses["openfl.errors.IOError"] = openfl_errors_IOError;
openfl_errors_IOError.__name__ = ["openfl","errors","IOError"];
openfl_errors_IOError.__super__ = openfl_errors_Error;
openfl_errors_IOError.prototype = $extend(openfl_errors_Error.prototype,{
	__class__: openfl_errors_IOError
});
var openfl_errors_EOFError = function() {
	openfl_errors_IOError.call(this,"End of file was encountered");
	this.name = "EOFError";
	this.errorID = 2030;
};
$hxClasses["openfl.errors.EOFError"] = openfl_errors_EOFError;
openfl_errors_EOFError.__name__ = ["openfl","errors","EOFError"];
openfl_errors_EOFError.__super__ = openfl_errors_IOError;
openfl_errors_EOFError.prototype = $extend(openfl_errors_IOError.prototype,{
	__class__: openfl_errors_EOFError
});
var openfl_errors_IllegalOperationError = function(message) {
	if(message == null) message = "";
	openfl_errors_Error.call(this,message,0);
	this.name = "IllegalOperationError";
};
$hxClasses["openfl.errors.IllegalOperationError"] = openfl_errors_IllegalOperationError;
openfl_errors_IllegalOperationError.__name__ = ["openfl","errors","IllegalOperationError"];
openfl_errors_IllegalOperationError.__super__ = openfl_errors_Error;
openfl_errors_IllegalOperationError.prototype = $extend(openfl_errors_Error.prototype,{
	__class__: openfl_errors_IllegalOperationError
});
var openfl_errors_RangeError = function(message) {
	if(message == null) message = "";
	openfl_errors_Error.call(this,message,0);
	this.name = "RangeError";
};
$hxClasses["openfl.errors.RangeError"] = openfl_errors_RangeError;
openfl_errors_RangeError.__name__ = ["openfl","errors","RangeError"];
openfl_errors_RangeError.__super__ = openfl_errors_Error;
openfl_errors_RangeError.prototype = $extend(openfl_errors_Error.prototype,{
	__class__: openfl_errors_RangeError
});
var openfl_errors_TypeError = function(message) {
	if(message == null) message = "";
	openfl_errors_Error.call(this,message,0);
	this.name = "TypeError";
};
$hxClasses["openfl.errors.TypeError"] = openfl_errors_TypeError;
openfl_errors_TypeError.__name__ = ["openfl","errors","TypeError"];
openfl_errors_TypeError.__super__ = openfl_errors_Error;
openfl_errors_TypeError.prototype = $extend(openfl_errors_Error.prototype,{
	__class__: openfl_errors_TypeError
});
var openfl_events_ActivityEvent = function(type,bubbles,cancelable,activating) {
	if(activating == null) activating = false;
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.activating = activating;
};
$hxClasses["openfl.events.ActivityEvent"] = openfl_events_ActivityEvent;
openfl_events_ActivityEvent.__name__ = ["openfl","events","ActivityEvent"];
openfl_events_ActivityEvent.__super__ = openfl_events_Event;
openfl_events_ActivityEvent.prototype = $extend(openfl_events_Event.prototype,{
	activating: null
	,clone: function() {
		var event = new openfl_events_ActivityEvent(this.type,this.bubbles,this.cancelable,this.activating);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("ActivityEvent",["type","bubbles","cancelable","activating"]);
	}
	,__class__: openfl_events_ActivityEvent
});
var openfl_events_TextEvent = function(type,bubbles,cancelable,text) {
	if(text == null) text = "";
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.text = text;
};
$hxClasses["openfl.events.TextEvent"] = openfl_events_TextEvent;
openfl_events_TextEvent.__name__ = ["openfl","events","TextEvent"];
openfl_events_TextEvent.__super__ = openfl_events_Event;
openfl_events_TextEvent.prototype = $extend(openfl_events_Event.prototype,{
	text: null
	,clone: function() {
		var event = new openfl_events_TextEvent(this.type,this.bubbles,this.cancelable,this.text);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("TextEvent",["type","bubbles","cancelable","text"]);
	}
	,__class__: openfl_events_TextEvent
});
var openfl_events_ErrorEvent = function(type,bubbles,cancelable,text,id) {
	if(id == null) id = 0;
	if(text == null) text = "";
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	openfl_events_TextEvent.call(this,type,bubbles,cancelable,text);
	this.errorID = id;
};
$hxClasses["openfl.events.ErrorEvent"] = openfl_events_ErrorEvent;
openfl_events_ErrorEvent.__name__ = ["openfl","events","ErrorEvent"];
openfl_events_ErrorEvent.__super__ = openfl_events_TextEvent;
openfl_events_ErrorEvent.prototype = $extend(openfl_events_TextEvent.prototype,{
	errorID: null
	,clone: function() {
		var event = new openfl_events_ErrorEvent(this.type,this.bubbles,this.cancelable,this.text,this.errorID);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("ErrorEvent",["type","bubbles","cancelable","text","errorID"]);
	}
	,__class__: openfl_events_ErrorEvent
});
var openfl_events__$EventDispatcher_DispatchIterator = function(list) {
	this.list = list;
	this.index = list.length;
};
$hxClasses["openfl.events._EventDispatcher.DispatchIterator"] = openfl_events__$EventDispatcher_DispatchIterator;
openfl_events__$EventDispatcher_DispatchIterator.__name__ = ["openfl","events","_EventDispatcher","DispatchIterator"];
openfl_events__$EventDispatcher_DispatchIterator.prototype = {
	active: null
	,index: null
	,isCopy: null
	,list: null
	,copy: function() {
		if(this.index < this.list.length && !this.isCopy) {
			this.list = this.list.slice();
			this.isCopy = true;
		}
	}
	,hasNext: function() {
		if(this.index < this.list.length) return true; else {
			this.active = false;
			return false;
		}
	}
	,next: function() {
		return this.list[this.index++];
	}
	,remove: function(listener,listIndex) {
		if(this.active) {
			if(!this.isCopy) {
				if(listIndex < this.index) this.index--;
			} else {
				var _g1 = this.index;
				var _g = this.list.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(this.list[i] == listener) {
						this.list.splice(i,1);
						break;
					}
				}
			}
		}
	}
	,reset: function(list) {
		this.list = list;
		this.active = true;
		this.index = 0;
	}
	,__class__: openfl_events__$EventDispatcher_DispatchIterator
};
var openfl_events__$EventDispatcher_Listener = function(callback,useCapture,priority) {
	this.callback = callback;
	this.useCapture = useCapture;
	this.priority = priority;
};
$hxClasses["openfl.events._EventDispatcher.Listener"] = openfl_events__$EventDispatcher_Listener;
openfl_events__$EventDispatcher_Listener.__name__ = ["openfl","events","_EventDispatcher","Listener"];
openfl_events__$EventDispatcher_Listener.prototype = {
	callback: null
	,priority: null
	,useCapture: null
	,match: function(callback,useCapture) {
		return Reflect.compareMethods(this.callback,callback) && this.useCapture == useCapture;
	}
	,__class__: openfl_events__$EventDispatcher_Listener
};
var openfl_events_FocusEvent = function(type,bubbles,cancelable,relatedObject,shiftKey,keyCode) {
	if(keyCode == null) keyCode = 0;
	if(shiftKey == null) shiftKey = false;
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.keyCode = keyCode;
	this.shiftKey = shiftKey;
	this.relatedObject = relatedObject;
};
$hxClasses["openfl.events.FocusEvent"] = openfl_events_FocusEvent;
openfl_events_FocusEvent.__name__ = ["openfl","events","FocusEvent"];
openfl_events_FocusEvent.__super__ = openfl_events_Event;
openfl_events_FocusEvent.prototype = $extend(openfl_events_Event.prototype,{
	keyCode: null
	,relatedObject: null
	,shiftKey: null
	,clone: function() {
		var event = new openfl_events_FocusEvent(this.type,this.bubbles,this.cancelable,this.relatedObject,this.shiftKey,this.keyCode);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("FocusEvent",["type","bubbles","cancelable","relatedObject","shiftKey","keyCode"]);
	}
	,__class__: openfl_events_FocusEvent
});
var openfl_events_FullScreenEvent = function(type,bubbles,cancelable,fullScreen,interactive) {
	if(interactive == null) interactive = false;
	if(fullScreen == null) fullScreen = false;
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	openfl_events_ActivityEvent.call(this,type,bubbles,cancelable);
	this.fullScreen = fullScreen;
	this.interactive = interactive;
};
$hxClasses["openfl.events.FullScreenEvent"] = openfl_events_FullScreenEvent;
openfl_events_FullScreenEvent.__name__ = ["openfl","events","FullScreenEvent"];
openfl_events_FullScreenEvent.__super__ = openfl_events_ActivityEvent;
openfl_events_FullScreenEvent.prototype = $extend(openfl_events_ActivityEvent.prototype,{
	fullScreen: null
	,interactive: null
	,clone: function() {
		var event = new openfl_events_FullScreenEvent(this.type,this.bubbles,this.cancelable,this.fullScreen,this.interactive);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("FullscreenEvent",["type","bubbles","cancelable","fullscreen","interactive"]);
	}
	,__class__: openfl_events_FullScreenEvent
});
var openfl_events_GameInputEvent = function(type,bubbles,cancelable,device) {
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = true;
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.device = device;
};
$hxClasses["openfl.events.GameInputEvent"] = openfl_events_GameInputEvent;
openfl_events_GameInputEvent.__name__ = ["openfl","events","GameInputEvent"];
openfl_events_GameInputEvent.__super__ = openfl_events_Event;
openfl_events_GameInputEvent.prototype = $extend(openfl_events_Event.prototype,{
	device: null
	,clone: function() {
		var event = new openfl_events_GameInputEvent(this.type,this.bubbles,this.cancelable,this.device);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("GameInputEvent",["type","bubbles","cancelable","device"]);
	}
	,__class__: openfl_events_GameInputEvent
});
var openfl_events_HTTPStatusEvent = function(type,bubbles,cancelable,status,redirected) {
	if(redirected == null) redirected = false;
	if(status == null) status = 0;
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	this.status = status;
	this.redirected = redirected;
	openfl_events_Event.call(this,type,bubbles,cancelable);
};
$hxClasses["openfl.events.HTTPStatusEvent"] = openfl_events_HTTPStatusEvent;
openfl_events_HTTPStatusEvent.__name__ = ["openfl","events","HTTPStatusEvent"];
openfl_events_HTTPStatusEvent.__super__ = openfl_events_Event;
openfl_events_HTTPStatusEvent.prototype = $extend(openfl_events_Event.prototype,{
	redirected: null
	,responseHeaders: null
	,responseURL: null
	,status: null
	,clone: function() {
		var event = new openfl_events_HTTPStatusEvent(this.type,this.bubbles,null,this.status,this.redirected);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("HTTPStatusEvent",["type","bubbles","cancelable","status","redirected"]);
	}
	,__class__: openfl_events_HTTPStatusEvent
});
var openfl_events_IOErrorEvent = function(type,bubbles,cancelable,text,id) {
	if(id == null) id = 0;
	if(text == null) text = "";
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = true;
	openfl_events_ErrorEvent.call(this,type,bubbles,cancelable,text,id);
};
$hxClasses["openfl.events.IOErrorEvent"] = openfl_events_IOErrorEvent;
openfl_events_IOErrorEvent.__name__ = ["openfl","events","IOErrorEvent"];
openfl_events_IOErrorEvent.__super__ = openfl_events_ErrorEvent;
openfl_events_IOErrorEvent.prototype = $extend(openfl_events_ErrorEvent.prototype,{
	clone: function() {
		var event = new openfl_events_IOErrorEvent(this.type,this.bubbles,this.cancelable,this.text,this.errorID);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("IOErrorEvent",["type","bubbles","cancelable","text","errorID"]);
	}
	,__class__: openfl_events_IOErrorEvent
});
var openfl_events_KeyboardEvent = function(type,bubbles,cancelable,charCodeValue,keyCodeValue,keyLocationValue,ctrlKeyValue,altKeyValue,shiftKeyValue,controlKeyValue,commandKeyValue) {
	if(commandKeyValue == null) commandKeyValue = false;
	if(controlKeyValue == null) controlKeyValue = false;
	if(shiftKeyValue == null) shiftKeyValue = false;
	if(altKeyValue == null) altKeyValue = false;
	if(ctrlKeyValue == null) ctrlKeyValue = false;
	if(keyCodeValue == null) keyCodeValue = 0;
	if(charCodeValue == null) charCodeValue = 0;
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.charCode = charCodeValue;
	this.keyCode = keyCodeValue;
	if(keyLocationValue != null) this.keyLocation = keyLocationValue; else this.keyLocation = 0;
	this.ctrlKey = ctrlKeyValue;
	this.altKey = altKeyValue;
	this.shiftKey = shiftKeyValue;
	this.controlKey = controlKeyValue;
	this.commandKey = commandKeyValue;
};
$hxClasses["openfl.events.KeyboardEvent"] = openfl_events_KeyboardEvent;
openfl_events_KeyboardEvent.__name__ = ["openfl","events","KeyboardEvent"];
openfl_events_KeyboardEvent.__super__ = openfl_events_Event;
openfl_events_KeyboardEvent.prototype = $extend(openfl_events_Event.prototype,{
	altKey: null
	,charCode: null
	,ctrlKey: null
	,commandKey: null
	,controlKey: null
	,keyCode: null
	,keyLocation: null
	,shiftKey: null
	,clone: function() {
		var event = new openfl_events_KeyboardEvent(this.type,this.bubbles,this.cancelable,this.charCode,this.keyCode,this.keyLocation,this.ctrlKey,this.altKey,this.shiftKey,this.controlKey,this.commandKey);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("KeyboardEvent",["type","bubbles","cancelable","charCode","keyCode","keyLocation","ctrlKey","altKey","shiftKey"]);
	}
	,__class__: openfl_events_KeyboardEvent
});
var openfl_events_MouseEvent = function(type,bubbles,cancelable,localX,localY,relatedObject,ctrlKey,altKey,shiftKey,buttonDown,delta,commandKey,clickCount) {
	if(clickCount == null) clickCount = 0;
	if(commandKey == null) commandKey = false;
	if(delta == null) delta = 0;
	if(buttonDown == null) buttonDown = false;
	if(shiftKey == null) shiftKey = false;
	if(altKey == null) altKey = false;
	if(ctrlKey == null) ctrlKey = false;
	if(localY == null) localY = 0;
	if(localX == null) localX = 0;
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = true;
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.shiftKey = shiftKey;
	this.altKey = altKey;
	this.ctrlKey = ctrlKey;
	this.bubbles = bubbles;
	this.relatedObject = relatedObject;
	this.delta = delta;
	this.localX = localX;
	this.localY = localY;
	this.buttonDown = buttonDown;
	this.commandKey = commandKey;
	this.clickCount = clickCount;
	this.stageX = NaN;
	this.stageY = NaN;
};
$hxClasses["openfl.events.MouseEvent"] = openfl_events_MouseEvent;
openfl_events_MouseEvent.__name__ = ["openfl","events","MouseEvent"];
openfl_events_MouseEvent.__create = function(type,button,stageX,stageY,local,target,delta) {
	if(delta == null) delta = 0;
	switch(type) {
	case "mouseDown":
		openfl_events_MouseEvent.__buttonDown = true;
		break;
	case "mouseUp":
		openfl_events_MouseEvent.__buttonDown = false;
		break;
	default:
	}
	var event = new openfl_events_MouseEvent(type,true,false,local.x,local.y,null,openfl_events_MouseEvent.__ctrlKey,openfl_events_MouseEvent.__altKey,openfl_events_MouseEvent.__shiftKey,openfl_events_MouseEvent.__buttonDown,delta,openfl_events_MouseEvent.__commandKey);
	event.stageX = stageX;
	event.stageY = stageY;
	event.target = target;
	return event;
};
openfl_events_MouseEvent.__super__ = openfl_events_Event;
openfl_events_MouseEvent.prototype = $extend(openfl_events_Event.prototype,{
	altKey: null
	,buttonDown: null
	,commandKey: null
	,clickCount: null
	,ctrlKey: null
	,delta: null
	,localX: null
	,localY: null
	,relatedObject: null
	,shiftKey: null
	,stageX: null
	,stageY: null
	,clone: function() {
		var event = new openfl_events_MouseEvent(this.type,this.bubbles,this.cancelable,this.localX,this.localY,this.relatedObject,this.ctrlKey,this.altKey,this.shiftKey,this.buttonDown,this.delta,this.commandKey,this.clickCount);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("MouseEvent",["type","bubbles","cancelable","localX","localY","relatedObject","ctrlKey","altKey","shiftKey","buttonDown","delta"]);
	}
	,updateAfterEvent: function() {
	}
	,__class__: openfl_events_MouseEvent
});
var openfl_events_NetStatusEvent = function(type,bubbles,cancelable,info) {
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	this.info = info;
	openfl_events_Event.call(this,type,bubbles,cancelable);
};
$hxClasses["openfl.events.NetStatusEvent"] = openfl_events_NetStatusEvent;
openfl_events_NetStatusEvent.__name__ = ["openfl","events","NetStatusEvent"];
openfl_events_NetStatusEvent.__super__ = openfl_events_Event;
openfl_events_NetStatusEvent.prototype = $extend(openfl_events_Event.prototype,{
	info: null
	,clone: function() {
		var event = new openfl_events_NetStatusEvent(this.type,this.bubbles,this.cancelable,this.info);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("NetStatusEvent",["type","bubbles","cancelable","info"]);
	}
	,__class__: openfl_events_NetStatusEvent
});
var openfl_events_ProgressEvent = function(type,bubbles,cancelable,bytesLoaded,bytesTotal) {
	if(bytesTotal == null) bytesTotal = 0;
	if(bytesLoaded == null) bytesLoaded = 0;
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.bytesLoaded = bytesLoaded;
	this.bytesTotal = bytesTotal;
};
$hxClasses["openfl.events.ProgressEvent"] = openfl_events_ProgressEvent;
openfl_events_ProgressEvent.__name__ = ["openfl","events","ProgressEvent"];
openfl_events_ProgressEvent.__super__ = openfl_events_Event;
openfl_events_ProgressEvent.prototype = $extend(openfl_events_Event.prototype,{
	bytesLoaded: null
	,bytesTotal: null
	,clone: function() {
		var event = new openfl_events_ProgressEvent(this.type,this.bubbles,this.cancelable,this.bytesLoaded,this.bytesTotal);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("ProgressEvent",["type","bubbles","cancelable","bytesLoaded","bytesTotal"]);
	}
	,__class__: openfl_events_ProgressEvent
});
var openfl_events_SecurityErrorEvent = function(type,bubbles,cancelable,text,id) {
	if(id == null) id = 0;
	if(text == null) text = "";
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	openfl_events_ErrorEvent.call(this,type,bubbles,cancelable,text,id);
};
$hxClasses["openfl.events.SecurityErrorEvent"] = openfl_events_SecurityErrorEvent;
openfl_events_SecurityErrorEvent.__name__ = ["openfl","events","SecurityErrorEvent"];
openfl_events_SecurityErrorEvent.__super__ = openfl_events_ErrorEvent;
openfl_events_SecurityErrorEvent.prototype = $extend(openfl_events_ErrorEvent.prototype,{
	clone: function() {
		var event = new openfl_events_SecurityErrorEvent(this.type,this.bubbles,this.cancelable,this.text,this.errorID);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("SecurityErrorEvent",["type","bubbles","cancelable","text","errorID"]);
	}
	,__class__: openfl_events_SecurityErrorEvent
});
var openfl_events_TimerEvent = function(type,bubbles,cancelable) {
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = false;
	openfl_events_Event.call(this,type,bubbles,cancelable);
};
$hxClasses["openfl.events.TimerEvent"] = openfl_events_TimerEvent;
openfl_events_TimerEvent.__name__ = ["openfl","events","TimerEvent"];
openfl_events_TimerEvent.__super__ = openfl_events_Event;
openfl_events_TimerEvent.prototype = $extend(openfl_events_Event.prototype,{
	clone: function() {
		var event = new openfl_events_TimerEvent(this.type,this.bubbles,this.cancelable);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("TimerEvent",["type","bubbles","cancelable"]);
	}
	,updateAfterEvent: function() {
	}
	,__class__: openfl_events_TimerEvent
});
var openfl_events_TouchEvent = function(type,bubbles,cancelable,touchPointID,isPrimaryTouchPoint,localX,localY,sizeX,sizeY,pressure,relatedObject,ctrlKey,altKey,shiftKey,commandKey,controlKey,timestamp,touchIntent,samples,isTouchPointCanceled) {
	if(isTouchPointCanceled == null) isTouchPointCanceled = false;
	if(timestamp == null) timestamp = 0;
	if(controlKey == null) controlKey = false;
	if(commandKey == null) commandKey = false;
	if(shiftKey == null) shiftKey = false;
	if(altKey == null) altKey = false;
	if(ctrlKey == null) ctrlKey = false;
	if(pressure == null) pressure = 0;
	if(sizeY == null) sizeY = 0;
	if(sizeX == null) sizeX = 0;
	if(localY == null) localY = 0;
	if(localX == null) localX = 0;
	if(isPrimaryTouchPoint == null) isPrimaryTouchPoint = false;
	if(touchPointID == null) touchPointID = 0;
	if(cancelable == null) cancelable = false;
	if(bubbles == null) bubbles = true;
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.touchPointID = touchPointID;
	this.isPrimaryTouchPoint = isPrimaryTouchPoint;
	this.localX = localX;
	this.localY = localY;
	this.sizeX = sizeX;
	this.sizeY = sizeY;
	this.pressure = pressure;
	this.relatedObject = relatedObject;
	this.ctrlKey = ctrlKey;
	this.altKey = altKey;
	this.shiftKey = shiftKey;
	this.commandKey = commandKey;
	this.controlKey = controlKey;
	this.stageX = NaN;
	this.stageY = NaN;
};
$hxClasses["openfl.events.TouchEvent"] = openfl_events_TouchEvent;
openfl_events_TouchEvent.__name__ = ["openfl","events","TouchEvent"];
openfl_events_TouchEvent.__create = function(type,touch,stageX,stageY,local,target) {
	var evt = new openfl_events_TouchEvent(type,true,false,0,true,local.x,local.y,1,1,1);
	evt.stageX = stageX;
	evt.stageY = stageY;
	evt.target = target;
	return evt;
};
openfl_events_TouchEvent.__super__ = openfl_events_Event;
openfl_events_TouchEvent.prototype = $extend(openfl_events_Event.prototype,{
	altKey: null
	,commandKey: null
	,controlKey: null
	,ctrlKey: null
	,delta: null
	,isPrimaryTouchPoint: null
	,localX: null
	,localY: null
	,pressure: null
	,relatedObject: null
	,shiftKey: null
	,sizeX: null
	,sizeY: null
	,stageX: null
	,stageY: null
	,touchPointID: null
	,clone: function() {
		var event = new openfl_events_TouchEvent(this.type,this.bubbles,this.cancelable,this.touchPointID,this.isPrimaryTouchPoint,this.localX,this.localY,this.sizeX,this.sizeY,this.pressure,this.relatedObject,this.ctrlKey,this.altKey,this.shiftKey,this.commandKey,this.controlKey);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("TouchEvent",["type","bubbles","cancelable","touchPointID","isPrimaryTouchPoint","localX","localY","sizeX","sizeY","pressure","relatedObject","ctrlKey","altKey","shiftKey","commandKey","controlKey"]);
	}
	,updateAfterEvent: function() {
	}
	,__class__: openfl_events_TouchEvent
});
var openfl_events_UncaughtErrorEvent = function(type,bubbles,cancelable,error) {
	if(cancelable == null) cancelable = true;
	if(bubbles == null) bubbles = true;
	openfl_events_ErrorEvent.call(this,type,bubbles,cancelable);
	this.error = error;
};
$hxClasses["openfl.events.UncaughtErrorEvent"] = openfl_events_UncaughtErrorEvent;
openfl_events_UncaughtErrorEvent.__name__ = ["openfl","events","UncaughtErrorEvent"];
openfl_events_UncaughtErrorEvent.__super__ = openfl_events_ErrorEvent;
openfl_events_UncaughtErrorEvent.prototype = $extend(openfl_events_ErrorEvent.prototype,{
	error: null
	,clone: function() {
		var event = new openfl_events_UncaughtErrorEvent(this.type,this.bubbles,this.cancelable,this.error);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("UncaughtErrorEvent",["type","bubbles","cancelable","error"]);
	}
	,__class__: openfl_events_UncaughtErrorEvent
});
var openfl_events_UncaughtErrorEvents = function() {
	openfl_events_EventDispatcher.call(this);
};
$hxClasses["openfl.events.UncaughtErrorEvents"] = openfl_events_UncaughtErrorEvents;
openfl_events_UncaughtErrorEvents.__name__ = ["openfl","events","UncaughtErrorEvents"];
openfl_events_UncaughtErrorEvents.__super__ = openfl_events_EventDispatcher;
openfl_events_UncaughtErrorEvents.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	__class__: openfl_events_UncaughtErrorEvents
});
var openfl_filters_BitmapFilter = function() {
	this.__numPasses = 0;
};
$hxClasses["openfl.filters.BitmapFilter"] = openfl_filters_BitmapFilter;
openfl_filters_BitmapFilter.__name__ = ["openfl","filters","BitmapFilter"];
openfl_filters_BitmapFilter.prototype = {
	__cacheObject: null
	,__numPasses: null
	,clone: function() {
		return new openfl_filters_BitmapFilter();
	}
	,__applyFilter: function(sourceBitmapData,destBitmapData,sourceRect,destPoint) {
	}
	,__initShader: function(renderSession,pass) {
		return renderSession.shaderManager.defaultShader;
	}
	,__class__: openfl_filters_BitmapFilter
};
var openfl_filters__$BlurFilter_BlurShader = function() {
	if(this.__glFragmentSource == null) this.__glFragmentSource = "varying float vAlpha;\n\t\tvarying vec2 vTexCoord;\n\t\tuniform sampler2D uImage0;\n\t\t\n\t\tvarying vec2 vBlurCoords[7];\n\t\t\n\t\tvoid main(void) {\n\t\t\t\n\t\t\tvec4 sum = vec4(0.0);\n\t\t\tsum += texture2D(uImage0, vBlurCoords[0]) * 0.00443;\n\t\t\tsum += texture2D(uImage0, vBlurCoords[1]) * 0.05399;\n\t\t\tsum += texture2D(uImage0, vBlurCoords[2]) * 0.24197;\n\t\t\tsum += texture2D(uImage0, vBlurCoords[3]) * 0.39894;\n\t\t\tsum += texture2D(uImage0, vBlurCoords[4]) * 0.24197;\n\t\t\tsum += texture2D(uImage0, vBlurCoords[5]) * 0.05399;\n\t\t\tsum += texture2D(uImage0, vBlurCoords[6]) * 0.00443;\n\t\t\t\n\t\t\tgl_FragColor = sum;\n\t\t\t\n\t\t}";
	if(this.__glVertexSource == null) this.__glVertexSource = "attribute float aAlpha;\n\t\tattribute vec4 aPosition;\n\t\tattribute vec2 aTexCoord;\n\t\tvarying float vAlpha;\n\t\tvarying vec2 vTexCoord;\n\t\t\n\t\tuniform mat4 uMatrix;\n\t\t\n\t\tuniform vec2 uRadius;\n\t\tvarying vec2 vBlurCoords[7];\n\t\tuniform vec2 uTextureSize;\n\t\t\n\t\tvoid main(void) {\n\t\t\t\n\t\t\tvAlpha = aAlpha;\n\t\t\tvTexCoord = aTexCoord;\n\t\t\tgl_Position = uMatrix * aPosition;\n\t\t\t\n\t\t\tvec2 r = uRadius / uTextureSize;\n\t\t\tvBlurCoords[0] = aTexCoord - r * 1.0;\n\t\t\tvBlurCoords[1] = aTexCoord - r * 0.75;\n\t\t\tvBlurCoords[2] = aTexCoord - r * 0.5;\n\t\t\tvBlurCoords[3] = aTexCoord;\n\t\t\tvBlurCoords[4] = aTexCoord + r * 0.5;\n\t\t\tvBlurCoords[5] = aTexCoord + r * 0.75;\n\t\t\tvBlurCoords[6] = aTexCoord + r * 1.0;\n\t\t\t\n\t\t}";
	openfl_display_Shader.call(this);
	this.get_data().uRadius.value = [0,0];
};
$hxClasses["openfl.filters._BlurFilter.BlurShader"] = openfl_filters__$BlurFilter_BlurShader;
openfl_filters__$BlurFilter_BlurShader.__name__ = ["openfl","filters","_BlurFilter","BlurShader"];
openfl_filters__$BlurFilter_BlurShader.__super__ = openfl_display_Shader;
openfl_filters__$BlurFilter_BlurShader.prototype = $extend(openfl_display_Shader.prototype,{
	__update: function() {
		this.get_data().uTextureSize.value = [this.get_data().uImage0.input.width,this.get_data().uImage0.input.height];
		openfl_display_Shader.prototype.__update.call(this);
	}
	,__class__: openfl_filters__$BlurFilter_BlurShader
});
var openfl_filters_BlurFilter = function(blurX,blurY,quality) {
	if(quality == null) quality = 1;
	if(blurY == null) blurY = 4;
	if(blurX == null) blurX = 4;
	openfl_filters_BitmapFilter.call(this);
	this.blurX = blurX;
	this.blurY = blurY;
	this.set_quality(quality);
};
$hxClasses["openfl.filters.BlurFilter"] = openfl_filters_BlurFilter;
openfl_filters_BlurFilter.__name__ = ["openfl","filters","BlurFilter"];
openfl_filters_BlurFilter.__super__ = openfl_filters_BitmapFilter;
openfl_filters_BlurFilter.prototype = $extend(openfl_filters_BitmapFilter.prototype,{
	blurX: null
	,blurY: null
	,quality: null
	,horizontalPasses: null
	,verticalPasses: null
	,clone: function() {
		return new openfl_filters_BlurFilter(this.blurX,this.blurY,this.quality);
	}
	,__initShader: function(renderSession,pass) {
		var data = openfl_filters_BlurFilter.__blurShader.get_data();
		if(pass <= this.horizontalPasses) {
			var scale = Math.pow(0.5,pass >> 1);
			data.uRadius.value[0] = this.blurX * scale;
			data.uRadius.value[1] = 0;
		} else {
			var scale1 = Math.pow(0.5,pass - this.horizontalPasses >> 1);
			data.uRadius.value[0] = 0;
			data.uRadius.value[1] = this.blurY * scale1;
		}
		return openfl_filters_BlurFilter.__blurShader;
	}
	,set_quality: function(value) {
		if(this.blurX <= 0) this.horizontalPasses = 0; else this.horizontalPasses = Math.round(this.blurX * (value / 4)) + 1;
		if(this.blurY <= 0) this.verticalPasses = 0; else this.verticalPasses = Math.round(this.blurY * (value / 4)) + 1;
		this.__numPasses = this.horizontalPasses + this.verticalPasses;
		return this.quality = value;
	}
	,__class__: openfl_filters_BlurFilter
	,__properties__: {set_quality:"set_quality"}
});
var openfl_filters__$ColorMatrixFilter_ColorMatrixShader = function() {
	if(this.__glFragmentSource == null) this.__glFragmentSource = "varying float vAlpha;\n\t\tvarying vec2 vTexCoord;\n\t\tuniform sampler2D uImage0;\n\t\t\n\t\tuniform mat4 uMultipliers;\n\t\tuniform vec4 uOffsets;\n\t\t\n\t\tvoid main(void) {\n\t\t\t\n\t\t\tvec4 color = texture2D (uImage0, vTexCoord);\n\t\t\t\n\t\t\tif (color.a == 0.0) {\n\t\t\t\t\n\t\t\t\tgl_FragColor = vec4 (0.0, 0.0, 0.0, 0.0);\n\t\t\t\t\n\t\t\t} else {\n\t\t\t\t\n\t\t\t\tcolor = vec4 (color.rgb / color.a, color.a);\n\t\t\t\tcolor = uOffsets + color * uMultipliers;\n\t\t\t\t\n\t\t\t\tgl_FragColor = vec4 (color.rgb * color.a * vAlpha, color.a * vAlpha);\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t}";
	openfl_display_Shader.call(this);
	this.get_data().uMultipliers.value = [1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1];
	this.get_data().uOffsets.value = [0,0,0,0];
};
$hxClasses["openfl.filters._ColorMatrixFilter.ColorMatrixShader"] = openfl_filters__$ColorMatrixFilter_ColorMatrixShader;
openfl_filters__$ColorMatrixFilter_ColorMatrixShader.__name__ = ["openfl","filters","_ColorMatrixFilter","ColorMatrixShader"];
openfl_filters__$ColorMatrixFilter_ColorMatrixShader.__super__ = openfl_display_Shader;
openfl_filters__$ColorMatrixFilter_ColorMatrixShader.prototype = $extend(openfl_display_Shader.prototype,{
	init: function(matrix) {
		var multipliers = this.get_data().uMultipliers.value;
		var offsets = this.get_data().uOffsets.value;
		multipliers[0] = matrix[0];
		multipliers[1] = matrix[1];
		multipliers[2] = matrix[2];
		multipliers[3] = matrix[3];
		multipliers[4] = matrix[5];
		multipliers[5] = matrix[6];
		multipliers[6] = matrix[7];
		multipliers[7] = matrix[8];
		multipliers[8] = matrix[10];
		multipliers[9] = matrix[11];
		multipliers[10] = matrix[12];
		multipliers[11] = matrix[13];
		multipliers[12] = matrix[15];
		multipliers[13] = matrix[16];
		multipliers[14] = matrix[17];
		multipliers[15] = matrix[18];
		offsets[0] = matrix[4] / 255.0;
		offsets[1] = matrix[9] / 255.0;
		offsets[2] = matrix[14] / 255.0;
		offsets[3] = matrix[19] / 255.0;
	}
	,__class__: openfl_filters__$ColorMatrixFilter_ColorMatrixShader
});
var openfl_filters_ColorMatrixFilter = function(matrix) {
	openfl_filters_BitmapFilter.call(this);
	this.set_matrix(matrix);
	this.__numPasses = 0;
};
$hxClasses["openfl.filters.ColorMatrixFilter"] = openfl_filters_ColorMatrixFilter;
openfl_filters_ColorMatrixFilter.__name__ = ["openfl","filters","ColorMatrixFilter"];
openfl_filters_ColorMatrixFilter.__super__ = openfl_filters_BitmapFilter;
openfl_filters_ColorMatrixFilter.prototype = $extend(openfl_filters_BitmapFilter.prototype,{
	matrix: null
	,clone: function() {
		return new openfl_filters_ColorMatrixFilter(this.matrix);
	}
	,__applyFilter: function(sourceBitmapData,destBitmapData,sourceRect,destPoint) {
		lime_graphics_utils_ImageCanvasUtil.convertToCanvas(sourceBitmapData.image);
		lime_graphics_utils_ImageCanvasUtil.createImageData(sourceBitmapData.image);
		lime_graphics_utils_ImageCanvasUtil.convertToCanvas(destBitmapData.image);
		lime_graphics_utils_ImageCanvasUtil.createImageData(destBitmapData.image);
		var source = sourceBitmapData.image.get_data();
		var target = destBitmapData.image.get_data();
		var offsetX = destPoint.x - sourceRect.x | 0;
		var offsetY = destPoint.y - sourceRect.y | 0;
		var sourceStride = sourceBitmapData.width * 4;
		var targetStride = destBitmapData.width * 4;
		var sourceOffset;
		var targetOffset;
		var _g1 = sourceRect.y | 0;
		var _g = sourceRect.height | 0;
		while(_g1 < _g) {
			var row = _g1++;
			var _g3 = sourceRect.x | 0;
			var _g2 = sourceRect.width | 0;
			while(_g3 < _g2) {
				var column = _g3++;
				sourceOffset = row * sourceStride + column * 4;
				targetOffset = (row + offsetX) * targetStride + (column + offsetY) * 4;
				var srcR = source[sourceOffset];
				var srcG = source[sourceOffset + 1];
				var srcB = source[sourceOffset + 2];
				var srcA = source[sourceOffset + 3];
				var val = Std["int"](_$UInt_UInt_$Impl_$.toFloat(srcR) * this.matrix[0] + _$UInt_UInt_$Impl_$.toFloat(srcG) * this.matrix[1] + _$UInt_UInt_$Impl_$.toFloat(srcB) * this.matrix[2] + _$UInt_UInt_$Impl_$.toFloat(srcA) * this.matrix[3] + this.matrix[4]);
				target[targetOffset] = val;
				var val1 = Std["int"](_$UInt_UInt_$Impl_$.toFloat(srcR) * this.matrix[5] + _$UInt_UInt_$Impl_$.toFloat(srcG) * this.matrix[6] + _$UInt_UInt_$Impl_$.toFloat(srcB) * this.matrix[7] + _$UInt_UInt_$Impl_$.toFloat(srcA) * this.matrix[8] + this.matrix[9]);
				target[targetOffset + 1] = val1;
				var val2 = Std["int"](_$UInt_UInt_$Impl_$.toFloat(srcR) * this.matrix[10] + _$UInt_UInt_$Impl_$.toFloat(srcG) * this.matrix[11] + _$UInt_UInt_$Impl_$.toFloat(srcB) * this.matrix[12] + _$UInt_UInt_$Impl_$.toFloat(srcA) * this.matrix[13] + this.matrix[14]);
				target[targetOffset + 2] = val2;
				var val3 = Std["int"](_$UInt_UInt_$Impl_$.toFloat(srcR) * this.matrix[15] + _$UInt_UInt_$Impl_$.toFloat(srcG) * this.matrix[16] + _$UInt_UInt_$Impl_$.toFloat(srcB) * this.matrix[17] + _$UInt_UInt_$Impl_$.toFloat(srcA) * this.matrix[18] + this.matrix[19]);
				target[targetOffset + 3] = val3;
			}
		}
		destBitmapData.image.dirty = true;
	}
	,__initShader: function(renderSession,pass) {
		openfl_filters_ColorMatrixFilter.__colorMatrixShader.init(this.matrix);
		return openfl_filters_ColorMatrixFilter.__colorMatrixShader;
	}
	,set_matrix: function(value) {
		if(value == null) value = [1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0];
		return this.matrix = value;
	}
	,__class__: openfl_filters_ColorMatrixFilter
	,__properties__: {set_matrix:"set_matrix"}
});
var openfl_filters_DropShadowFilter = function(distance,angle,color,alpha,blurX,blurY,strength,quality,inner,knockout,hideObject) {
	if(hideObject == null) hideObject = false;
	if(knockout == null) knockout = false;
	if(inner == null) inner = false;
	if(quality == null) quality = 1;
	if(strength == null) strength = 1;
	if(blurY == null) blurY = 4;
	if(blurX == null) blurX = 4;
	if(alpha == null) alpha = 1;
	if(color == null) color = 0;
	if(angle == null) angle = 45;
	if(distance == null) distance = 4;
	openfl_filters_BitmapFilter.call(this);
	this.distance = distance;
	this.angle = angle;
	this.color = color;
	this.alpha = alpha;
	this.blurX = blurX;
	this.blurY = blurY;
	this.strength = strength;
	this.set_quality(quality);
	this.inner = inner;
	this.set_knockout(knockout);
	this.set_hideObject(hideObject);
};
$hxClasses["openfl.filters.DropShadowFilter"] = openfl_filters_DropShadowFilter;
openfl_filters_DropShadowFilter.__name__ = ["openfl","filters","DropShadowFilter"];
openfl_filters_DropShadowFilter.__super__ = openfl_filters_BitmapFilter;
openfl_filters_DropShadowFilter.prototype = $extend(openfl_filters_BitmapFilter.prototype,{
	alpha: null
	,angle: null
	,blurX: null
	,blurY: null
	,color: null
	,distance: null
	,hideObject: null
	,inner: null
	,knockout: null
	,quality: null
	,strength: null
	,clone: function() {
		return new openfl_filters_DropShadowFilter(this.distance,this.angle,this.color,this.alpha,this.blurX,this.blurY,this.strength,this.quality,this.inner,this.knockout,this.hideObject);
	}
	,set_knockout: function(value) {
		return this.knockout = value;
	}
	,set_hideObject: function(value) {
		return this.hideObject = value;
	}
	,set_quality: function(value) {
		return this.quality = value;
	}
	,__class__: openfl_filters_DropShadowFilter
	,__properties__: {set_quality:"set_quality",set_knockout:"set_knockout",set_hideObject:"set_hideObject"}
});
var openfl_filters__$GlowFilter_GlowShader = function() {
	if(this.__glFragmentSource == null) this.__glFragmentSource = "varying float vAlpha;\n\t\tvarying vec2 vTexCoord;\n\t\tuniform sampler2D uImage0;\n\t\t\n\t\tuniform vec4 uColor;\n\t\t\n\t\tvarying vec2 vBlurCoords[7];\n\t\t\n\t\tvoid main(void) {\n\t\t\t\n\t\t\tfloat a = 0.0;\n\t\t\ta += texture2D(uImage0, vBlurCoords[0]).a * 0.00443;\n\t\t\ta += texture2D(uImage0, vBlurCoords[1]).a * 0.05399;\n\t\t\ta += texture2D(uImage0, vBlurCoords[2]).a * 0.24197;\n\t\t\ta += texture2D(uImage0, vBlurCoords[3]).a * 0.39894;\n\t\t\ta += texture2D(uImage0, vBlurCoords[4]).a * 0.24197;\n\t\t\ta += texture2D(uImage0, vBlurCoords[5]).a * 0.05399;\n\t\t\ta += texture2D(uImage0, vBlurCoords[6]).a * 0.00443;\n\t\t\ta *= uColor.a;\n\t\t\t\n\t\t\tgl_FragColor = vec4(uColor.rgb * a, a);\n\t\t\t\n\t\t}";
	if(this.__glVertexSource == null) this.__glVertexSource = "attribute float aAlpha;\n\t\tattribute vec4 aPosition;\n\t\tattribute vec2 aTexCoord;\n\t\tvarying float vAlpha;\n\t\tvarying vec2 vTexCoord;\n\t\t\n\t\tuniform mat4 uMatrix;\n\t\t\n\t\tuniform vec2 uRadius;\n\t\tvarying vec2 vBlurCoords[7];\n\t\tuniform vec2 uTextureSize;\n\t\t\n\t\tvoid main(void) {\n\t\t\t\n\t\t\tvAlpha = aAlpha;\n\t\t\tvTexCoord = aTexCoord;\n\t\t\tgl_Position = uMatrix * aPosition;\n\t\t\t\n\t\t\tvec2 r = uRadius / uTextureSize;\n\t\t\tvBlurCoords[0] = aTexCoord - r * 1.0;\n\t\t\tvBlurCoords[1] = aTexCoord - r * 0.75;\n\t\t\tvBlurCoords[2] = aTexCoord - r * 0.5;\n\t\t\tvBlurCoords[3] = aTexCoord;\n\t\t\tvBlurCoords[4] = aTexCoord + r * 0.5;\n\t\t\tvBlurCoords[5] = aTexCoord + r * 0.75;\n\t\t\tvBlurCoords[6] = aTexCoord + r * 1.0;\n\t\t\t\n\t\t}";
	openfl_display_Shader.call(this);
	this.get_data().uRadius.value = [0,0];
	this.get_data().uColor.value = [0,0,0,0];
};
$hxClasses["openfl.filters._GlowFilter.GlowShader"] = openfl_filters__$GlowFilter_GlowShader;
openfl_filters__$GlowFilter_GlowShader.__name__ = ["openfl","filters","_GlowFilter","GlowShader"];
openfl_filters__$GlowFilter_GlowShader.__super__ = openfl_display_Shader;
openfl_filters__$GlowFilter_GlowShader.prototype = $extend(openfl_display_Shader.prototype,{
	__update: function() {
		this.get_data().uTextureSize.value = [this.get_data().uImage0.input.width,this.get_data().uImage0.input.height];
		openfl_display_Shader.prototype.__update.call(this);
	}
	,__class__: openfl_filters__$GlowFilter_GlowShader
});
var openfl_filters_GlowFilter = function(color,alpha,blurX,blurY,strength,quality,inner,knockout) {
	if(knockout == null) knockout = false;
	if(inner == null) inner = false;
	if(quality == null) quality = 1;
	if(strength == null) strength = 2;
	if(blurY == null) blurY = 6;
	if(blurX == null) blurX = 6;
	if(alpha == null) alpha = 1;
	if(color == null) color = 16711680;
	openfl_filters_BitmapFilter.call(this);
	this.color = color;
	this.alpha = alpha;
	this.blurX = blurX;
	this.blurY = blurY;
	this.strength = strength;
	this.set_quality(quality);
	this.inner = inner;
	this.set_knockout(knockout);
	this.__cacheObject = true;
};
$hxClasses["openfl.filters.GlowFilter"] = openfl_filters_GlowFilter;
openfl_filters_GlowFilter.__name__ = ["openfl","filters","GlowFilter"];
openfl_filters_GlowFilter.__super__ = openfl_filters_BitmapFilter;
openfl_filters_GlowFilter.prototype = $extend(openfl_filters_BitmapFilter.prototype,{
	alpha: null
	,blurX: null
	,blurY: null
	,color: null
	,inner: null
	,knockout: null
	,quality: null
	,strength: null
	,horizontalPasses: null
	,verticalPasses: null
	,clone: function() {
		return new openfl_filters_GlowFilter(this.color,this.alpha,this.blurX,this.blurY,this.strength,this.quality,this.inner,this.knockout);
	}
	,__initShader: function(renderSession,pass) {
		var data = openfl_filters_GlowFilter.__glowShader.get_data();
		if(pass <= this.horizontalPasses) {
			var scale = Math.pow(0.5,pass >> 1);
			data.uRadius.value[0] = this.blurX * scale;
			data.uRadius.value[1] = 0;
		} else {
			var scale1 = Math.pow(0.5,pass - this.horizontalPasses >> 1);
			data.uRadius.value[0] = 0;
			data.uRadius.value[1] = this.blurY * scale1;
		}
		data.uColor.value[0] = (this.color >> 16 & 255) / 255;
		data.uColor.value[1] = (this.color >> 8 & 255) / 255;
		data.uColor.value[2] = (this.color & 255) / 255;
		data.uColor.value[3] = this.alpha;
		return openfl_filters_GlowFilter.__glowShader;
	}
	,set_knockout: function(value) {
		return this.knockout = value;
	}
	,set_quality: function(value) {
		if(this.blurX <= 0) this.horizontalPasses = 0; else this.horizontalPasses = Math.round(this.blurX * (value / 4)) + 1;
		if(this.blurY <= 0) this.verticalPasses = 0; else this.verticalPasses = Math.round(this.blurY * (value / 4)) + 1;
		this.__numPasses = this.horizontalPasses + this.verticalPasses;
		return this.quality = value;
	}
	,__class__: openfl_filters_GlowFilter
	,__properties__: {set_quality:"set_quality",set_knockout:"set_knockout"}
});
var openfl_filters__$BlurShader_$ShaderData = function(byteArray) {
	openfl_display_ShaderData.call(this,byteArray);
};
$hxClasses["openfl.filters._BlurShader_ShaderData"] = openfl_filters__$BlurShader_$ShaderData;
openfl_filters__$BlurShader_$ShaderData.__name__ = ["openfl","filters","_BlurShader_ShaderData"];
openfl_filters__$BlurShader_$ShaderData.__super__ = openfl_display_ShaderData;
openfl_filters__$BlurShader_$ShaderData.prototype = $extend(openfl_display_ShaderData.prototype,{
	uRadius: null
	,uTextureSize: null
	,__class__: openfl_filters__$BlurShader_$ShaderData
});
var openfl_filters__$ColorMatrixShader_$ShaderData = function(byteArray) {
	openfl_display_ShaderData.call(this,byteArray);
};
$hxClasses["openfl.filters._ColorMatrixShader_ShaderData"] = openfl_filters__$ColorMatrixShader_$ShaderData;
openfl_filters__$ColorMatrixShader_$ShaderData.__name__ = ["openfl","filters","_ColorMatrixShader_ShaderData"];
openfl_filters__$ColorMatrixShader_$ShaderData.__super__ = openfl_display_ShaderData;
openfl_filters__$ColorMatrixShader_$ShaderData.prototype = $extend(openfl_display_ShaderData.prototype,{
	uMultipliers: null
	,uOffsets: null
	,__class__: openfl_filters__$ColorMatrixShader_$ShaderData
});
var openfl_filters__$GlowShader_$ShaderData = function(byteArray) {
	openfl_display_ShaderData.call(this,byteArray);
};
$hxClasses["openfl.filters._GlowShader_ShaderData"] = openfl_filters__$GlowShader_$ShaderData;
openfl_filters__$GlowShader_$ShaderData.__name__ = ["openfl","filters","_GlowShader_ShaderData"];
openfl_filters__$GlowShader_$ShaderData.__super__ = openfl_display_ShaderData;
openfl_filters__$GlowShader_$ShaderData.prototype = $extend(openfl_display_ShaderData.prototype,{
	uRadius: null
	,uTextureSize: null
	,uColor: null
	,__class__: openfl_filters__$GlowShader_$ShaderData
});
var openfl_geom_Matrix3D = function(v) {
	if(v != null && v.get_length() == 16) this.rawData = v; else {
		var a = [1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0];
		var vector = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
		var _g1 = 0;
		var _g = a.length;
		while(_g1 < _g) {
			var i = _g1++;
			vector.set(i,a[i]);
		}
		this.rawData = vector;
	}
};
$hxClasses["openfl.geom.Matrix3D"] = openfl_geom_Matrix3D;
openfl_geom_Matrix3D.__name__ = ["openfl","geom","Matrix3D"];
openfl_geom_Matrix3D.create2D = function(x,y,scale,rotation) {
	if(rotation == null) rotation = 0;
	if(scale == null) scale = 1;
	var theta = rotation * Math.PI / 180.0;
	var c = Math.cos(theta);
	var s = Math.sin(theta);
	return new openfl_geom_Matrix3D((function($this) {
		var $r;
		var a = [c * scale,-s * scale,0,0,s * scale,c * scale,0,0,0,0,1,0,x,y,0,1];
		var vector = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
		{
			var _g1 = 0;
			var _g = a.length;
			while(_g1 < _g) {
				var i = _g1++;
				vector.set(i,a[i]);
			}
		}
		$r = vector;
		return $r;
	}(this)));
};
openfl_geom_Matrix3D.createABCD = function(a,b,c,d,tx,ty) {
	return new openfl_geom_Matrix3D((function($this) {
		var $r;
		var a1 = [a,b,0,0,c,d,0,0,0,0,1,0,tx,ty,0,1];
		var vector = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
		{
			var _g1 = 0;
			var _g = a1.length;
			while(_g1 < _g) {
				var i = _g1++;
				vector.set(i,a1[i]);
			}
		}
		$r = vector;
		return $r;
	}(this)));
};
openfl_geom_Matrix3D.createOrtho = function(x0,x1,y0,y1,zNear,zFar) {
	var sx = 1.0 / (x1 - x0);
	var sy = 1.0 / (y1 - y0);
	var sz = 1.0 / (zFar - zNear);
	return new openfl_geom_Matrix3D((function($this) {
		var $r;
		var a = [2.0 * sx,0,0,0,0,2.0 * sy,0,0,0,0,-2. * sz,0,-(x0 + x1) * sx,-(y0 + y1) * sy,-(zNear + zFar) * sz,1];
		var vector = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
		{
			var _g1 = 0;
			var _g = a.length;
			while(_g1 < _g) {
				var i = _g1++;
				vector.set(i,a[i]);
			}
		}
		$r = vector;
		return $r;
	}(this)));
};
openfl_geom_Matrix3D.interpolate = function(thisMat,toMat,percent) {
	var m = new openfl_geom_Matrix3D();
	var _g = 0;
	while(_g < 16) {
		var i = _g++;
		var value = thisMat.rawData.get(i) + (toMat.rawData.get(i) - thisMat.rawData.get(i)) * percent;
		m.rawData.set(i,value);
	}
	return m;
};
openfl_geom_Matrix3D.__getAxisRotation = function(x,y,z,degrees) {
	var m = new openfl_geom_Matrix3D();
	var a1 = new openfl_geom_Vector3D(x,y,z);
	var rad = -degrees * (Math.PI / 180);
	var c = Math.cos(rad);
	var s = Math.sin(rad);
	var t = 1.0 - c;
	m.rawData.set(0,c + a1.x * a1.x * t);
	m.rawData.set(5,c + a1.y * a1.y * t);
	m.rawData.set(10,c + a1.z * a1.z * t);
	var tmp1 = a1.x * a1.y * t;
	var tmp2 = a1.z * s;
	m.rawData.set(4,tmp1 + tmp2);
	m.rawData.set(1,tmp1 - tmp2);
	tmp1 = a1.x * a1.z * t;
	tmp2 = a1.y * s;
	m.rawData.set(8,tmp1 - tmp2);
	m.rawData.set(2,tmp1 + tmp2);
	tmp1 = a1.y * a1.z * t;
	tmp2 = a1.x * s;
	m.rawData.set(9,tmp1 + tmp2);
	m.rawData.set(6,tmp1 - tmp2);
	return m;
};
openfl_geom_Matrix3D.prototype = {
	rawData: null
	,append: function(lhs) {
		var m111 = this.rawData.get(0);
		var m121 = this.rawData.get(4);
		var m131 = this.rawData.get(8);
		var m141 = this.rawData.get(12);
		var m112 = this.rawData.get(1);
		var m122 = this.rawData.get(5);
		var m132 = this.rawData.get(9);
		var m142 = this.rawData.get(13);
		var m113 = this.rawData.get(2);
		var m123 = this.rawData.get(6);
		var m133 = this.rawData.get(10);
		var m143 = this.rawData.get(14);
		var m114 = this.rawData.get(3);
		var m124 = this.rawData.get(7);
		var m134 = this.rawData.get(11);
		var m144 = this.rawData.get(15);
		var m211 = lhs.rawData.get(0);
		var m221 = lhs.rawData.get(4);
		var m231 = lhs.rawData.get(8);
		var m241 = lhs.rawData.get(12);
		var m212 = lhs.rawData.get(1);
		var m222 = lhs.rawData.get(5);
		var m232 = lhs.rawData.get(9);
		var m242 = lhs.rawData.get(13);
		var m213 = lhs.rawData.get(2);
		var m223 = lhs.rawData.get(6);
		var m233 = lhs.rawData.get(10);
		var m243 = lhs.rawData.get(14);
		var m214 = lhs.rawData.get(3);
		var m224 = lhs.rawData.get(7);
		var m234 = lhs.rawData.get(11);
		var m244 = lhs.rawData.get(15);
		this.rawData.set(0,m111 * m211 + m112 * m221 + m113 * m231 + m114 * m241);
		this.rawData.set(1,m111 * m212 + m112 * m222 + m113 * m232 + m114 * m242);
		this.rawData.set(2,m111 * m213 + m112 * m223 + m113 * m233 + m114 * m243);
		this.rawData.set(3,m111 * m214 + m112 * m224 + m113 * m234 + m114 * m244);
		this.rawData.set(4,m121 * m211 + m122 * m221 + m123 * m231 + m124 * m241);
		this.rawData.set(5,m121 * m212 + m122 * m222 + m123 * m232 + m124 * m242);
		this.rawData.set(6,m121 * m213 + m122 * m223 + m123 * m233 + m124 * m243);
		this.rawData.set(7,m121 * m214 + m122 * m224 + m123 * m234 + m124 * m244);
		this.rawData.set(8,m131 * m211 + m132 * m221 + m133 * m231 + m134 * m241);
		this.rawData.set(9,m131 * m212 + m132 * m222 + m133 * m232 + m134 * m242);
		this.rawData.set(10,m131 * m213 + m132 * m223 + m133 * m233 + m134 * m243);
		this.rawData.set(11,m131 * m214 + m132 * m224 + m133 * m234 + m134 * m244);
		this.rawData.set(12,m141 * m211 + m142 * m221 + m143 * m231 + m144 * m241);
		this.rawData.set(13,m141 * m212 + m142 * m222 + m143 * m232 + m144 * m242);
		this.rawData.set(14,m141 * m213 + m142 * m223 + m143 * m233 + m144 * m243);
		this.rawData.set(15,m141 * m214 + m142 * m224 + m143 * m234 + m144 * m244);
	}
	,appendRotation: function(degrees,axis,pivotPoint) {
		var tx;
		var ty;
		var tz;
		tx = ty = tz = 0;
		if(pivotPoint != null) {
			tx = pivotPoint.x;
			ty = pivotPoint.y;
			tz = pivotPoint.z;
		}
		var radian = degrees * Math.PI / 180;
		var cos = Math.cos(radian);
		var sin = Math.sin(radian);
		var x = axis.x;
		var y = axis.y;
		var z = axis.z;
		var x2 = x * x;
		var y2 = y * y;
		var z2 = z * z;
		var ls = x2 + y2 + z2;
		if(ls != 0) {
			var l = Math.sqrt(ls);
			x /= l;
			y /= l;
			z /= l;
			x2 /= ls;
			y2 /= ls;
			z2 /= ls;
		}
		var ccos = 1 - cos;
		var m = new openfl_geom_Matrix3D();
		var d = m.rawData;
		d.set(0,x2 + (y2 + z2) * cos);
		d.set(1,x * y * ccos + z * sin);
		d.set(2,x * z * ccos - y * sin);
		d.set(4,x * y * ccos - z * sin);
		d.set(5,y2 + (x2 + z2) * cos);
		d.set(6,y * z * ccos + x * sin);
		d.set(8,x * z * ccos + y * sin);
		d.set(9,y * z * ccos - x * sin);
		d.set(10,z2 + (x2 + y2) * cos);
		d.set(12,(tx * (y2 + z2) - x * (ty * y + tz * z)) * ccos + (ty * z - tz * y) * sin);
		d.set(13,(ty * (x2 + z2) - y * (tx * x + tz * z)) * ccos + (tz * x - tx * z) * sin);
		d.set(14,(tz * (x2 + y2) - z * (tx * x + ty * y)) * ccos + (tx * y - ty * x) * sin);
		this.append(m);
	}
	,appendScale: function(xScale,yScale,zScale) {
		this.append(new openfl_geom_Matrix3D((function($this) {
			var $r;
			var a = [xScale,0.0,0.0,0.0,0.0,yScale,0.0,0.0,0.0,0.0,zScale,0.0,0.0,0.0,0.0,1.0];
			var vector = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
			{
				var _g1 = 0;
				var _g = a.length;
				while(_g1 < _g) {
					var i = _g1++;
					vector.set(i,a[i]);
				}
			}
			$r = vector;
			return $r;
		}(this))));
	}
	,appendTranslation: function(x,y,z) {
		var value = this.rawData.get(12) + x;
		this.rawData.set(12,value);
		var value1 = this.rawData.get(13) + y;
		this.rawData.set(13,value1);
		var value2 = this.rawData.get(14) + z;
		this.rawData.set(14,value2);
	}
	,clone: function() {
		return new openfl_geom_Matrix3D(this.rawData.copy());
	}
	,copyColumnFrom: function(column,vector3D) {
		switch(column) {
		case 0:
			this.rawData.set(0,vector3D.x);
			this.rawData.set(1,vector3D.y);
			this.rawData.set(2,vector3D.z);
			this.rawData.set(3,vector3D.w);
			break;
		case 1:
			this.rawData.set(4,vector3D.x);
			this.rawData.set(5,vector3D.y);
			this.rawData.set(6,vector3D.z);
			this.rawData.set(7,vector3D.w);
			break;
		case 2:
			this.rawData.set(8,vector3D.x);
			this.rawData.set(9,vector3D.y);
			this.rawData.set(10,vector3D.z);
			this.rawData.set(11,vector3D.w);
			break;
		case 3:
			this.rawData.set(12,vector3D.x);
			this.rawData.set(13,vector3D.y);
			this.rawData.set(14,vector3D.z);
			this.rawData.set(15,vector3D.w);
			break;
		default:
		}
	}
	,copyColumnTo: function(column,vector3D) {
		switch(column) {
		case 0:
			vector3D.x = this.rawData.get(0);
			vector3D.y = this.rawData.get(1);
			vector3D.z = this.rawData.get(2);
			vector3D.w = this.rawData.get(3);
			break;
		case 1:
			vector3D.x = this.rawData.get(4);
			vector3D.y = this.rawData.get(5);
			vector3D.z = this.rawData.get(6);
			vector3D.w = this.rawData.get(7);
			break;
		case 2:
			vector3D.x = this.rawData.get(8);
			vector3D.y = this.rawData.get(9);
			vector3D.z = this.rawData.get(10);
			vector3D.w = this.rawData.get(11);
			break;
		case 3:
			vector3D.x = this.rawData.get(12);
			vector3D.y = this.rawData.get(13);
			vector3D.z = this.rawData.get(14);
			vector3D.w = this.rawData.get(15);
			break;
		default:
		}
	}
	,copyFrom: function(other) {
		this.rawData = other.rawData.copy();
	}
	,copyRawDataFrom: function(vector,index,transpose) {
		if(transpose == null) transpose = false;
		if(index == null) index = 0;
		if(transpose) this.transpose();
		var length;
		var a = vector.get_length();
		length = a - index;
		var _g = 0;
		while(_g < length) {
			var i = _g++;
			var value = vector.get(i + index);
			this.rawData.set(i,value);
		}
		if(transpose) this.transpose();
	}
	,copyRawDataTo: function(vector,index,transpose) {
		if(transpose == null) transpose = false;
		if(index == null) index = 0;
		if(transpose) this.transpose();
		var _g1 = 0;
		var _g = this.rawData.get_length();
		while(_g1 < _g) {
			var i = _g1++;
			var value = this.rawData.get(i);
			vector.set(i + index,value);
		}
		if(transpose) this.transpose();
	}
	,copyRowFrom: function(row,vector3D) {
		switch(row) {
		case 0:
			this.rawData.set(0,vector3D.x);
			this.rawData.set(4,vector3D.y);
			this.rawData.set(8,vector3D.z);
			this.rawData.set(12,vector3D.w);
			break;
		case 1:
			this.rawData.set(1,vector3D.x);
			this.rawData.set(5,vector3D.y);
			this.rawData.set(9,vector3D.z);
			this.rawData.set(13,vector3D.w);
			break;
		case 2:
			this.rawData.set(2,vector3D.x);
			this.rawData.set(6,vector3D.y);
			this.rawData.set(10,vector3D.z);
			this.rawData.set(14,vector3D.w);
			break;
		case 3:
			this.rawData.set(3,vector3D.x);
			this.rawData.set(7,vector3D.y);
			this.rawData.set(11,vector3D.z);
			this.rawData.set(15,vector3D.w);
			break;
		default:
		}
	}
	,copyRowTo: function(row,vector3D) {
		switch(row) {
		case 0:
			vector3D.x = this.rawData.get(0);
			vector3D.y = this.rawData.get(4);
			vector3D.z = this.rawData.get(8);
			vector3D.w = this.rawData.get(12);
			break;
		case 1:
			vector3D.x = this.rawData.get(1);
			vector3D.y = this.rawData.get(5);
			vector3D.z = this.rawData.get(9);
			vector3D.w = this.rawData.get(13);
			break;
		case 2:
			vector3D.x = this.rawData.get(2);
			vector3D.y = this.rawData.get(6);
			vector3D.z = this.rawData.get(10);
			vector3D.w = this.rawData.get(14);
			break;
		case 3:
			vector3D.x = this.rawData.get(3);
			vector3D.y = this.rawData.get(7);
			vector3D.z = this.rawData.get(11);
			vector3D.w = this.rawData.get(15);
			break;
		default:
		}
	}
	,copyToMatrix3D: function(other) {
		other.rawData = this.rawData.copy();
	}
	,decompose: function(orientationStyle) {
		if(orientationStyle == null) orientationStyle = 1;
		var vec = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
		var m = this.clone();
		var mr = m.rawData.copy();
		var pos = new openfl_geom_Vector3D(mr.get(12),mr.get(13),mr.get(14));
		mr.set(12,0);
		mr.set(13,0);
		mr.set(14,0);
		var scale = new openfl_geom_Vector3D();
		scale.x = Math.sqrt(mr.get(0) * mr.get(0) + mr.get(1) * mr.get(1) + mr.get(2) * mr.get(2));
		scale.y = Math.sqrt(mr.get(4) * mr.get(4) + mr.get(5) * mr.get(5) + mr.get(6) * mr.get(6));
		scale.z = Math.sqrt(mr.get(8) * mr.get(8) + mr.get(9) * mr.get(9) + mr.get(10) * mr.get(10));
		if(mr.get(0) * (mr.get(5) * mr.get(10) - mr.get(6) * mr.get(9)) - mr.get(1) * (mr.get(4) * mr.get(10) - mr.get(6) * mr.get(8)) + mr.get(2) * (mr.get(4) * mr.get(9) - mr.get(5) * mr.get(8)) < 0) scale.z = -scale.z;
		var value = mr.get(0) / scale.x;
		mr.set(0,value);
		var value1 = mr.get(1) / scale.x;
		mr.set(1,value1);
		var value2 = mr.get(2) / scale.x;
		mr.set(2,value2);
		var value3 = mr.get(4) / scale.y;
		mr.set(4,value3);
		var value4 = mr.get(5) / scale.y;
		mr.set(5,value4);
		var value5 = mr.get(6) / scale.y;
		mr.set(6,value5);
		var value6 = mr.get(8) / scale.z;
		mr.set(8,value6);
		var value7 = mr.get(9) / scale.z;
		mr.set(9,value7);
		var value8 = mr.get(10) / scale.z;
		mr.set(10,value8);
		var rot = new openfl_geom_Vector3D();
		if(orientationStyle != null) switch(orientationStyle) {
		case 0:
			rot.w = Math.acos((mr.get(0) + mr.get(5) + mr.get(10) - 1) / 2);
			var len = Math.sqrt((mr.get(6) - mr.get(9)) * (mr.get(6) - mr.get(9)) + (mr.get(8) - mr.get(2)) * (mr.get(8) - mr.get(2)) + (mr.get(1) - mr.get(4)) * (mr.get(1) - mr.get(4)));
			if(len != 0) {
				rot.x = (mr.get(6) - mr.get(9)) / len;
				rot.y = (mr.get(8) - mr.get(2)) / len;
				rot.z = (mr.get(1) - mr.get(4)) / len;
			} else rot.x = rot.y = rot.z = 0;
			break;
		case 2:
			var tr = mr.get(0) + mr.get(5) + mr.get(10);
			if(tr > 0) {
				rot.w = Math.sqrt(1 + tr) / 2;
				rot.x = (mr.get(6) - mr.get(9)) / (4 * rot.w);
				rot.y = (mr.get(8) - mr.get(2)) / (4 * rot.w);
				rot.z = (mr.get(1) - mr.get(4)) / (4 * rot.w);
			} else if(mr.get(0) > mr.get(5) && mr.get(0) > mr.get(10)) {
				rot.x = Math.sqrt(1 + mr.get(0) - mr.get(5) - mr.get(10)) / 2;
				rot.w = (mr.get(6) - mr.get(9)) / (4 * rot.x);
				rot.y = (mr.get(1) + mr.get(4)) / (4 * rot.x);
				rot.z = (mr.get(8) + mr.get(2)) / (4 * rot.x);
			} else if(mr.get(5) > mr.get(10)) {
				rot.y = Math.sqrt(1 + mr.get(5) - mr.get(0) - mr.get(10)) / 2;
				rot.x = (mr.get(1) + mr.get(4)) / (4 * rot.y);
				rot.w = (mr.get(8) - mr.get(2)) / (4 * rot.y);
				rot.z = (mr.get(6) + mr.get(9)) / (4 * rot.y);
			} else {
				rot.z = Math.sqrt(1 + mr.get(10) - mr.get(0) - mr.get(5)) / 2;
				rot.x = (mr.get(8) + mr.get(2)) / (4 * rot.z);
				rot.y = (mr.get(6) + mr.get(9)) / (4 * rot.z);
				rot.w = (mr.get(1) - mr.get(4)) / (4 * rot.z);
			}
			break;
		case 1:
			rot.y = Math.asin(-mr.get(2));
			if(mr.get(2) != 1 && mr.get(2) != -1) {
				rot.x = Math.atan2(mr.get(6),mr.get(10));
				rot.z = Math.atan2(mr.get(1),mr.get(0));
			} else {
				rot.z = 0;
				rot.x = Math.atan2(mr.get(4),mr.get(5));
			}
			break;
		}
		vec.push(pos);
		vec.push(rot);
		vec.push(scale);
		return vec;
	}
	,deltaTransformVector: function(v) {
		var x = v.x;
		var y = v.y;
		var z = v.z;
		return new openfl_geom_Vector3D(x * this.rawData.get(0) + y * this.rawData.get(4) + z * this.rawData.get(8) + this.rawData.get(3),x * this.rawData.get(1) + y * this.rawData.get(5) + z * this.rawData.get(9) + this.rawData.get(7),x * this.rawData.get(2) + y * this.rawData.get(6) + z * this.rawData.get(10) + this.rawData.get(11),0);
	}
	,identity: function() {
		var a = [1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0];
		var vector = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
		var _g1 = 0;
		var _g = a.length;
		while(_g1 < _g) {
			var i = _g1++;
			vector.set(i,a[i]);
		}
		this.rawData = vector;
	}
	,interpolateTo: function(toMat,percent) {
		var _g = 0;
		while(_g < 16) {
			var i = _g++;
			var value = this.rawData.get(i) + (toMat.rawData.get(i) - this.rawData.get(i)) * percent;
			this.rawData.set(i,value);
		}
	}
	,invert: function() {
		var d = this.get_determinant();
		var invertable = Math.abs(d) > 0.00000000001;
		if(invertable) {
			d = 1 / d;
			var m11 = this.rawData.get(0);
			var m21 = this.rawData.get(4);
			var m31 = this.rawData.get(8);
			var m41 = this.rawData.get(12);
			var m12 = this.rawData.get(1);
			var m22 = this.rawData.get(5);
			var m32 = this.rawData.get(9);
			var m42 = this.rawData.get(13);
			var m13 = this.rawData.get(2);
			var m23 = this.rawData.get(6);
			var m33 = this.rawData.get(10);
			var m43 = this.rawData.get(14);
			var m14 = this.rawData.get(3);
			var m24 = this.rawData.get(7);
			var m34 = this.rawData.get(11);
			var m44 = this.rawData.get(15);
			this.rawData.set(0,d * (m22 * (m33 * m44 - m43 * m34) - m32 * (m23 * m44 - m43 * m24) + m42 * (m23 * m34 - m33 * m24)));
			this.rawData.set(1,-d * (m12 * (m33 * m44 - m43 * m34) - m32 * (m13 * m44 - m43 * m14) + m42 * (m13 * m34 - m33 * m14)));
			this.rawData.set(2,d * (m12 * (m23 * m44 - m43 * m24) - m22 * (m13 * m44 - m43 * m14) + m42 * (m13 * m24 - m23 * m14)));
			this.rawData.set(3,-d * (m12 * (m23 * m34 - m33 * m24) - m22 * (m13 * m34 - m33 * m14) + m32 * (m13 * m24 - m23 * m14)));
			this.rawData.set(4,-d * (m21 * (m33 * m44 - m43 * m34) - m31 * (m23 * m44 - m43 * m24) + m41 * (m23 * m34 - m33 * m24)));
			this.rawData.set(5,d * (m11 * (m33 * m44 - m43 * m34) - m31 * (m13 * m44 - m43 * m14) + m41 * (m13 * m34 - m33 * m14)));
			this.rawData.set(6,-d * (m11 * (m23 * m44 - m43 * m24) - m21 * (m13 * m44 - m43 * m14) + m41 * (m13 * m24 - m23 * m14)));
			this.rawData.set(7,d * (m11 * (m23 * m34 - m33 * m24) - m21 * (m13 * m34 - m33 * m14) + m31 * (m13 * m24 - m23 * m14)));
			this.rawData.set(8,d * (m21 * (m32 * m44 - m42 * m34) - m31 * (m22 * m44 - m42 * m24) + m41 * (m22 * m34 - m32 * m24)));
			this.rawData.set(9,-d * (m11 * (m32 * m44 - m42 * m34) - m31 * (m12 * m44 - m42 * m14) + m41 * (m12 * m34 - m32 * m14)));
			this.rawData.set(10,d * (m11 * (m22 * m44 - m42 * m24) - m21 * (m12 * m44 - m42 * m14) + m41 * (m12 * m24 - m22 * m14)));
			this.rawData.set(11,-d * (m11 * (m22 * m34 - m32 * m24) - m21 * (m12 * m34 - m32 * m14) + m31 * (m12 * m24 - m22 * m14)));
			this.rawData.set(12,-d * (m21 * (m32 * m43 - m42 * m33) - m31 * (m22 * m43 - m42 * m23) + m41 * (m22 * m33 - m32 * m23)));
			this.rawData.set(13,d * (m11 * (m32 * m43 - m42 * m33) - m31 * (m12 * m43 - m42 * m13) + m41 * (m12 * m33 - m32 * m13)));
			this.rawData.set(14,-d * (m11 * (m22 * m43 - m42 * m23) - m21 * (m12 * m43 - m42 * m13) + m41 * (m12 * m23 - m22 * m13)));
			this.rawData.set(15,d * (m11 * (m22 * m33 - m32 * m23) - m21 * (m12 * m33 - m32 * m13) + m31 * (m12 * m23 - m22 * m13)));
		}
		return invertable;
	}
	,pointAt: function(pos,at,up) {
		if(at == null) at = new openfl_geom_Vector3D(0,0,-1);
		if(up == null) up = new openfl_geom_Vector3D(0,-1,0);
		var dir = at.subtract(pos);
		var vup = up.clone();
		var right;
		dir.normalize();
		vup.normalize();
		var dir2 = dir.clone();
		dir2.scaleBy(vup.dotProduct(dir));
		vup = vup.subtract(dir2);
		if(vup.get_length() > 0) vup.normalize(); else if(dir.x != 0) vup = new openfl_geom_Vector3D(-dir.y,dir.x,0); else vup = new openfl_geom_Vector3D(1,0,0);
		right = vup.crossProduct(dir);
		right.normalize();
		this.rawData.set(0,right.x);
		this.rawData.set(4,right.y);
		this.rawData.set(8,right.z);
		this.rawData.set(12,0.0);
		this.rawData.set(1,vup.x);
		this.rawData.set(5,vup.y);
		this.rawData.set(9,vup.z);
		this.rawData.set(13,0.0);
		this.rawData.set(2,dir.x);
		this.rawData.set(6,dir.y);
		this.rawData.set(10,dir.z);
		this.rawData.set(14,0.0);
		this.rawData.set(3,pos.x);
		this.rawData.set(7,pos.y);
		this.rawData.set(11,pos.z);
		this.rawData.set(15,1.0);
	}
	,prepend: function(rhs) {
		var m111 = rhs.rawData.get(0);
		var m121 = rhs.rawData.get(4);
		var m131 = rhs.rawData.get(8);
		var m141 = rhs.rawData.get(12);
		var m112 = rhs.rawData.get(1);
		var m122 = rhs.rawData.get(5);
		var m132 = rhs.rawData.get(9);
		var m142 = rhs.rawData.get(13);
		var m113 = rhs.rawData.get(2);
		var m123 = rhs.rawData.get(6);
		var m133 = rhs.rawData.get(10);
		var m143 = rhs.rawData.get(14);
		var m114 = rhs.rawData.get(3);
		var m124 = rhs.rawData.get(7);
		var m134 = rhs.rawData.get(11);
		var m144 = rhs.rawData.get(15);
		var m211 = this.rawData.get(0);
		var m221 = this.rawData.get(4);
		var m231 = this.rawData.get(8);
		var m241 = this.rawData.get(12);
		var m212 = this.rawData.get(1);
		var m222 = this.rawData.get(5);
		var m232 = this.rawData.get(9);
		var m242 = this.rawData.get(13);
		var m213 = this.rawData.get(2);
		var m223 = this.rawData.get(6);
		var m233 = this.rawData.get(10);
		var m243 = this.rawData.get(14);
		var m214 = this.rawData.get(3);
		var m224 = this.rawData.get(7);
		var m234 = this.rawData.get(11);
		var m244 = this.rawData.get(15);
		this.rawData.set(0,m111 * m211 + m112 * m221 + m113 * m231 + m114 * m241);
		this.rawData.set(1,m111 * m212 + m112 * m222 + m113 * m232 + m114 * m242);
		this.rawData.set(2,m111 * m213 + m112 * m223 + m113 * m233 + m114 * m243);
		this.rawData.set(3,m111 * m214 + m112 * m224 + m113 * m234 + m114 * m244);
		this.rawData.set(4,m121 * m211 + m122 * m221 + m123 * m231 + m124 * m241);
		this.rawData.set(5,m121 * m212 + m122 * m222 + m123 * m232 + m124 * m242);
		this.rawData.set(6,m121 * m213 + m122 * m223 + m123 * m233 + m124 * m243);
		this.rawData.set(7,m121 * m214 + m122 * m224 + m123 * m234 + m124 * m244);
		this.rawData.set(8,m131 * m211 + m132 * m221 + m133 * m231 + m134 * m241);
		this.rawData.set(9,m131 * m212 + m132 * m222 + m133 * m232 + m134 * m242);
		this.rawData.set(10,m131 * m213 + m132 * m223 + m133 * m233 + m134 * m243);
		this.rawData.set(11,m131 * m214 + m132 * m224 + m133 * m234 + m134 * m244);
		this.rawData.set(12,m141 * m211 + m142 * m221 + m143 * m231 + m144 * m241);
		this.rawData.set(13,m141 * m212 + m142 * m222 + m143 * m232 + m144 * m242);
		this.rawData.set(14,m141 * m213 + m142 * m223 + m143 * m233 + m144 * m243);
		this.rawData.set(15,m141 * m214 + m142 * m224 + m143 * m234 + m144 * m244);
	}
	,prependRotation: function(degrees,axis,pivotPoint) {
		var tx;
		var ty;
		var tz;
		tx = ty = tz = 0;
		if(pivotPoint != null) {
			tx = pivotPoint.x;
			ty = pivotPoint.y;
			tz = pivotPoint.z;
		}
		var radian = degrees * Math.PI / 180;
		var cos = Math.cos(radian);
		var sin = Math.sin(radian);
		var x = axis.x;
		var y = axis.y;
		var z = axis.z;
		var x2 = x * x;
		var y2 = y * y;
		var z2 = z * z;
		var ls = x2 + y2 + z2;
		if(ls != 0) {
			var l = Math.sqrt(ls);
			x /= l;
			y /= l;
			z /= l;
			x2 /= ls;
			y2 /= ls;
			z2 /= ls;
		}
		var ccos = 1 - cos;
		var m = new openfl_geom_Matrix3D();
		var d = m.rawData;
		d.set(0,x2 + (y2 + z2) * cos);
		d.set(1,x * y * ccos + z * sin);
		d.set(2,x * z * ccos - y * sin);
		d.set(4,x * y * ccos - z * sin);
		d.set(5,y2 + (x2 + z2) * cos);
		d.set(6,y * z * ccos + x * sin);
		d.set(8,x * z * ccos + y * sin);
		d.set(9,y * z * ccos - x * sin);
		d.set(10,z2 + (x2 + y2) * cos);
		d.set(12,(tx * (y2 + z2) - x * (ty * y + tz * z)) * ccos + (ty * z - tz * y) * sin);
		d.set(13,(ty * (x2 + z2) - y * (tx * x + tz * z)) * ccos + (tz * x - tx * z) * sin);
		d.set(14,(tz * (x2 + y2) - z * (tx * x + ty * y)) * ccos + (tx * y - ty * x) * sin);
		this.prepend(m);
	}
	,prependScale: function(xScale,yScale,zScale) {
		this.prepend(new openfl_geom_Matrix3D((function($this) {
			var $r;
			var a = [xScale,0.0,0.0,0.0,0.0,yScale,0.0,0.0,0.0,0.0,zScale,0.0,0.0,0.0,0.0,1.0];
			var vector = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
			{
				var _g1 = 0;
				var _g = a.length;
				while(_g1 < _g) {
					var i = _g1++;
					vector.set(i,a[i]);
				}
			}
			$r = vector;
			return $r;
		}(this))));
	}
	,prependTranslation: function(x,y,z) {
		var m = new openfl_geom_Matrix3D();
		m.set_position(new openfl_geom_Vector3D(x,y,z));
		this.prepend(m);
	}
	,recompose: function(components,orientationStyle) {
		if(components.get_length() < 3 || components.get(2).x == 0 || components.get(2).y == 0 || components.get(2).z == 0) return false;
		if(orientationStyle == null) orientationStyle = 1;
		this.identity();
		var scale = [];
		scale[0] = scale[1] = scale[2] = components.get(2).x;
		scale[4] = scale[5] = scale[6] = components.get(2).y;
		scale[8] = scale[9] = scale[10] = components.get(2).z;
		if(orientationStyle != null) switch(orientationStyle) {
		case 1:
			var cx = Math.cos(components.get(1).x);
			var cy = Math.cos(components.get(1).y);
			var cz = Math.cos(components.get(1).z);
			var sx = Math.sin(components.get(1).x);
			var sy = Math.sin(components.get(1).y);
			var sz = Math.sin(components.get(1).z);
			this.rawData.set(0,cy * cz * scale[0]);
			this.rawData.set(1,cy * sz * scale[1]);
			this.rawData.set(2,-sy * scale[2]);
			this.rawData.set(3,0);
			this.rawData.set(4,(sx * sy * cz - cx * sz) * scale[4]);
			this.rawData.set(5,(sx * sy * sz + cx * cz) * scale[5]);
			this.rawData.set(6,sx * cy * scale[6]);
			this.rawData.set(7,0);
			this.rawData.set(8,(cx * sy * cz + sx * sz) * scale[8]);
			this.rawData.set(9,(cx * sy * sz - sx * cz) * scale[9]);
			this.rawData.set(10,cx * cy * scale[10]);
			this.rawData.set(11,0);
			var value = components.get(0).x;
			this.rawData.set(12,value);
			var value1 = components.get(0).y;
			this.rawData.set(13,value1);
			var value2 = components.get(0).z;
			this.rawData.set(14,value2);
			this.rawData.set(15,1);
			break;
		default:
			var x = components.get(1).x;
			var y = components.get(1).y;
			var z = components.get(1).z;
			var w = components.get(1).w;
			if(orientationStyle == 0) {
				x *= Math.sin(w / 2);
				y *= Math.sin(w / 2);
				z *= Math.sin(w / 2);
				w = Math.cos(w / 2);
			}
			this.rawData.set(0,(1 - 2 * y * y - 2 * z * z) * scale[0]);
			this.rawData.set(1,(2 * x * y + 2 * w * z) * scale[1]);
			this.rawData.set(2,(2 * x * z - 2 * w * y) * scale[2]);
			this.rawData.set(3,0);
			this.rawData.set(4,(2 * x * y - 2 * w * z) * scale[4]);
			this.rawData.set(5,(1 - 2 * x * x - 2 * z * z) * scale[5]);
			this.rawData.set(6,(2 * y * z + 2 * w * x) * scale[6]);
			this.rawData.set(7,0);
			this.rawData.set(8,(2 * x * z + 2 * w * y) * scale[8]);
			this.rawData.set(9,(2 * y * z - 2 * w * x) * scale[9]);
			this.rawData.set(10,(1 - 2 * x * x - 2 * y * y) * scale[10]);
			this.rawData.set(11,0);
			var value3 = components.get(0).x;
			this.rawData.set(12,value3);
			var value4 = components.get(0).y;
			this.rawData.set(13,value4);
			var value5 = components.get(0).z;
			this.rawData.set(14,value5);
			this.rawData.set(15,1);
		} else {
			var x = components.get(1).x;
			var y = components.get(1).y;
			var z = components.get(1).z;
			var w = components.get(1).w;
			if(orientationStyle == 0) {
				x *= Math.sin(w / 2);
				y *= Math.sin(w / 2);
				z *= Math.sin(w / 2);
				w = Math.cos(w / 2);
			}
			this.rawData.set(0,(1 - 2 * y * y - 2 * z * z) * scale[0]);
			this.rawData.set(1,(2 * x * y + 2 * w * z) * scale[1]);
			this.rawData.set(2,(2 * x * z - 2 * w * y) * scale[2]);
			this.rawData.set(3,0);
			this.rawData.set(4,(2 * x * y - 2 * w * z) * scale[4]);
			this.rawData.set(5,(1 - 2 * x * x - 2 * z * z) * scale[5]);
			this.rawData.set(6,(2 * y * z + 2 * w * x) * scale[6]);
			this.rawData.set(7,0);
			this.rawData.set(8,(2 * x * z + 2 * w * y) * scale[8]);
			this.rawData.set(9,(2 * y * z - 2 * w * x) * scale[9]);
			this.rawData.set(10,(1 - 2 * x * x - 2 * y * y) * scale[10]);
			this.rawData.set(11,0);
			var value3 = components.get(0).x;
			this.rawData.set(12,value3);
			var value4 = components.get(0).y;
			this.rawData.set(13,value4);
			var value5 = components.get(0).z;
			this.rawData.set(14,value5);
			this.rawData.set(15,1);
		}
		if(components.get(2).x == 0) this.rawData.set(0,1e-15);
		if(components.get(2).y == 0) this.rawData.set(5,1e-15);
		if(components.get(2).z == 0) this.rawData.set(10,1e-15);
		return !(components.get(2).x == 0 || components.get(2).y == 0 || components.get(2).y == 0);
	}
	,transformVector: function(v) {
		var x = v.x;
		var y = v.y;
		var z = v.z;
		return new openfl_geom_Vector3D(x * this.rawData.get(0) + y * this.rawData.get(4) + z * this.rawData.get(8) + this.rawData.get(12),x * this.rawData.get(1) + y * this.rawData.get(5) + z * this.rawData.get(9) + this.rawData.get(13),x * this.rawData.get(2) + y * this.rawData.get(6) + z * this.rawData.get(10) + this.rawData.get(14),x * this.rawData.get(3) + y * this.rawData.get(7) + z * this.rawData.get(11) + this.rawData.get(15));
	}
	,transformVectors: function(vin,vout) {
		var i = 0;
		var x;
		var y;
		var z;
		while(i + 3 <= vin.get_length()) {
			x = vin.get(i);
			y = vin.get(i + 1);
			z = vin.get(i + 2);
			var value = x * this.rawData.get(0) + y * this.rawData.get(4) + z * this.rawData.get(8) + this.rawData.get(12);
			vout.set(i,value);
			var value1 = x * this.rawData.get(1) + y * this.rawData.get(5) + z * this.rawData.get(9) + this.rawData.get(13);
			vout.set(i + 1,value1);
			var value2 = x * this.rawData.get(2) + y * this.rawData.get(6) + z * this.rawData.get(10) + this.rawData.get(14);
			vout.set(i + 2,value2);
			i += 3;
		}
	}
	,transpose: function() {
		var oRawData = this.rawData.copy();
		var value = oRawData.get(4);
		this.rawData.set(1,value);
		var value1 = oRawData.get(8);
		this.rawData.set(2,value1);
		var value2 = oRawData.get(12);
		this.rawData.set(3,value2);
		var value3 = oRawData.get(1);
		this.rawData.set(4,value3);
		var value4 = oRawData.get(9);
		this.rawData.set(6,value4);
		var value5 = oRawData.get(13);
		this.rawData.set(7,value5);
		var value6 = oRawData.get(2);
		this.rawData.set(8,value6);
		var value7 = oRawData.get(6);
		this.rawData.set(9,value7);
		var value8 = oRawData.get(14);
		this.rawData.set(11,value8);
		var value9 = oRawData.get(3);
		this.rawData.set(12,value9);
		var value10 = oRawData.get(7);
		this.rawData.set(13,value10);
		var value11 = oRawData.get(11);
		this.rawData.set(14,value11);
	}
	,get_determinant: function() {
		return (this.rawData.get(0) * this.rawData.get(5) - this.rawData.get(4) * this.rawData.get(1)) * (this.rawData.get(10) * this.rawData.get(15) - this.rawData.get(14) * this.rawData.get(11)) - (this.rawData.get(0) * this.rawData.get(9) - this.rawData.get(8) * this.rawData.get(1)) * (this.rawData.get(6) * this.rawData.get(15) - this.rawData.get(14) * this.rawData.get(7)) + (this.rawData.get(0) * this.rawData.get(13) - this.rawData.get(12) * this.rawData.get(1)) * (this.rawData.get(6) * this.rawData.get(11) - this.rawData.get(10) * this.rawData.get(7)) + (this.rawData.get(4) * this.rawData.get(9) - this.rawData.get(8) * this.rawData.get(5)) * (this.rawData.get(2) * this.rawData.get(15) - this.rawData.get(14) * this.rawData.get(3)) - (this.rawData.get(4) * this.rawData.get(13) - this.rawData.get(12) * this.rawData.get(5)) * (this.rawData.get(2) * this.rawData.get(11) - this.rawData.get(10) * this.rawData.get(3)) + (this.rawData.get(8) * this.rawData.get(13) - this.rawData.get(12) * this.rawData.get(9)) * (this.rawData.get(2) * this.rawData.get(7) - this.rawData.get(6) * this.rawData.get(3));
	}
	,get_position: function() {
		return new openfl_geom_Vector3D(this.rawData.get(12),this.rawData.get(13),this.rawData.get(14));
	}
	,set_position: function(val) {
		this.rawData.set(12,val.x);
		this.rawData.set(13,val.y);
		this.rawData.set(14,val.z);
		return val;
	}
	,__class__: openfl_geom_Matrix3D
	,__properties__: {set_position:"set_position",get_position:"get_position",get_determinant:"get_determinant"}
};
var openfl_geom__$Orientation3D_Orientation3D_$Impl_$ = {};
$hxClasses["openfl.geom._Orientation3D.Orientation3D_Impl_"] = openfl_geom__$Orientation3D_Orientation3D_$Impl_$;
openfl_geom__$Orientation3D_Orientation3D_$Impl_$.__name__ = ["openfl","geom","_Orientation3D","Orientation3D_Impl_"];
openfl_geom__$Orientation3D_Orientation3D_$Impl_$.fromString = function(value) {
	switch(value) {
	case "axisAngle":
		return 0;
	case "eulerAngles":
		return 1;
	case "quaternion":
		return 2;
	default:
		return null;
	}
};
openfl_geom__$Orientation3D_Orientation3D_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "axisAngle";
	case 1:
		return "eulerAngles";
	case 2:
		return "quaternion";
	default:
		return null;
	}
};
var openfl_geom_Transform = function(displayObject) {
	this.__colorTransform = new openfl_geom_ColorTransform();
	this.concatenatedColorTransform = new openfl_geom_ColorTransform();
	this.pixelBounds = new openfl_geom_Rectangle();
	this.__displayObject = displayObject;
	this.__hasMatrix = true;
};
$hxClasses["openfl.geom.Transform"] = openfl_geom_Transform;
openfl_geom_Transform.__name__ = ["openfl","geom","Transform"];
openfl_geom_Transform.prototype = {
	concatenatedColorTransform: null
	,pixelBounds: null
	,__colorTransform: null
	,__displayObject: null
	,__hasMatrix: null
	,__hasMatrix3D: null
	,get_colorTransform: function() {
		return this.__colorTransform;
	}
	,set_colorTransform: function(value) {
		if(!this.__colorTransform.__equals(value)) {
			this.__colorTransform = value;
			if(value != null) this.__displayObject.set_alpha(value.alphaMultiplier);
			this.__displayObject.__setRenderDirty();
		}
		return this.__colorTransform;
	}
	,get_concatenatedMatrix: function() {
		if(this.__hasMatrix) return this.__displayObject.__getWorldTransform().clone();
		return null;
	}
	,get_matrix: function() {
		if(this.__hasMatrix) return this.__displayObject.__transform.clone();
		return null;
	}
	,set_matrix: function(value) {
		if(value == null) {
			this.__hasMatrix = false;
			return null;
		}
		this.__hasMatrix = true;
		this.__hasMatrix3D = false;
		if(this.__displayObject != null) {
			var rotation = 180 / Math.PI * Math.atan2(value.d,value.c) - 90;
			if(rotation != this.__displayObject.__rotation) {
				this.__displayObject.__rotation = rotation;
				var radians = rotation * (Math.PI / 180);
				this.__displayObject.__rotationSine = Math.sin(radians);
				this.__displayObject.__rotationCosine = Math.cos(radians);
			}
			this.__displayObject.__transform.copyFrom(value);
			this.__displayObject.__setTransformDirty();
		}
		return value;
	}
	,get_matrix3D: function() {
		if(this.__hasMatrix3D) {
			var matrix = this.__displayObject.__transform;
			return new openfl_geom_Matrix3D((function($this) {
				var $r;
				var a = [matrix.a,matrix.b,0.0,0.0,matrix.c,matrix.d,0.0,0.0,0.0,0.0,1.0,0.0,matrix.tx,matrix.ty,0.0,1.0];
				var vector = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
				{
					var _g1 = 0;
					var _g = a.length;
					while(_g1 < _g) {
						var i = _g1++;
						vector.set(i,a[i]);
					}
				}
				$r = vector;
				return $r;
			}(this)));
		}
		return null;
	}
	,set_matrix3D: function(value) {
		if(value == null) {
			this.__hasMatrix3D = false;
			return null;
		}
		this.__hasMatrix = false;
		this.__hasMatrix3D = true;
		if(this.__displayObject != null) {
			var rotation = 180 / Math.PI * Math.atan2(value.rawData.get(5),value.rawData.get(4)) - 90;
			if(rotation != this.__displayObject.__rotation) {
				this.__displayObject.__rotation = rotation;
				var radians = rotation * (Math.PI / 180);
				this.__displayObject.__rotationSine = Math.sin(radians);
				this.__displayObject.__rotationCosine = Math.cos(radians);
			}
			this.__displayObject.__transform.a = value.rawData.get(0);
			this.__displayObject.__transform.b = value.rawData.get(1);
			this.__displayObject.__transform.c = value.rawData.get(5);
			this.__displayObject.__transform.d = value.rawData.get(6);
			this.__displayObject.__transform.tx = value.rawData.get(12);
			this.__displayObject.__transform.ty = value.rawData.get(13);
			this.__displayObject.__setTransformDirty();
		}
		return value;
	}
	,__class__: openfl_geom_Transform
	,__properties__: {set_matrix3D:"set_matrix3D",get_matrix3D:"get_matrix3D",set_matrix:"set_matrix",get_matrix:"get_matrix",get_concatenatedMatrix:"get_concatenatedMatrix",set_colorTransform:"set_colorTransform",get_colorTransform:"get_colorTransform"}
};
var openfl_geom_Vector3D = function(x,y,z,w) {
	if(w == null) w = 0;
	if(z == null) z = 0;
	if(y == null) y = 0;
	if(x == null) x = 0;
	this.w = w;
	this.x = x;
	this.y = y;
	this.z = z;
};
$hxClasses["openfl.geom.Vector3D"] = openfl_geom_Vector3D;
openfl_geom_Vector3D.__name__ = ["openfl","geom","Vector3D"];
openfl_geom_Vector3D.__properties__ = {get_Z_AXIS:"get_Z_AXIS",get_Y_AXIS:"get_Y_AXIS",get_X_AXIS:"get_X_AXIS"}
openfl_geom_Vector3D.angleBetween = function(a,b) {
	var la = a.get_length();
	var lb = b.get_length();
	var dot = a.dotProduct(b);
	if(la != 0) dot /= la;
	if(lb != 0) dot /= lb;
	return Math.acos(dot);
};
openfl_geom_Vector3D.distance = function(pt1,pt2) {
	var x = pt2.x - pt1.x;
	var y = pt2.y - pt1.y;
	var z = pt2.z - pt1.z;
	return Math.sqrt(x * x + y * y + z * z);
};
openfl_geom_Vector3D.get_X_AXIS = function() {
	return new openfl_geom_Vector3D(1,0,0);
};
openfl_geom_Vector3D.get_Y_AXIS = function() {
	return new openfl_geom_Vector3D(0,1,0);
};
openfl_geom_Vector3D.get_Z_AXIS = function() {
	return new openfl_geom_Vector3D(0,0,1);
};
openfl_geom_Vector3D.prototype = {
	w: null
	,x: null
	,y: null
	,z: null
	,add: function(a) {
		return new openfl_geom_Vector3D(this.x + a.x,this.y + a.y,this.z + a.z);
	}
	,clone: function() {
		return new openfl_geom_Vector3D(this.x,this.y,this.z,this.w);
	}
	,copyFrom: function(sourceVector3D) {
		this.x = sourceVector3D.x;
		this.y = sourceVector3D.y;
		this.z = sourceVector3D.z;
	}
	,crossProduct: function(a) {
		return new openfl_geom_Vector3D(this.y * a.z - this.z * a.y,this.z * a.x - this.x * a.z,this.x * a.y - this.y * a.x,1);
	}
	,decrementBy: function(a) {
		this.x -= a.x;
		this.y -= a.y;
		this.z -= a.z;
	}
	,dotProduct: function(a) {
		return this.x * a.x + this.y * a.y + this.z * a.z;
	}
	,equals: function(toCompare,allFour) {
		if(allFour == null) allFour = false;
		return this.x == toCompare.x && this.y == toCompare.y && this.z == toCompare.z && (!allFour || this.w == toCompare.w);
	}
	,incrementBy: function(a) {
		this.x += a.x;
		this.y += a.y;
		this.z += a.z;
	}
	,nearEquals: function(toCompare,tolerance,allFour) {
		if(allFour == null) allFour = false;
		return Math.abs(this.x - toCompare.x) < tolerance && Math.abs(this.y - toCompare.y) < tolerance && Math.abs(this.z - toCompare.z) < tolerance && (!allFour || Math.abs(this.w - toCompare.w) < tolerance);
	}
	,negate: function() {
		this.x *= -1;
		this.y *= -1;
		this.z *= -1;
	}
	,normalize: function() {
		var l = this.get_length();
		if(l != 0) {
			this.x /= l;
			this.y /= l;
			this.z /= l;
		}
		return l;
	}
	,project: function() {
		this.x /= this.w;
		this.y /= this.w;
		this.z /= this.w;
	}
	,scaleBy: function(s) {
		this.x *= s;
		this.y *= s;
		this.z *= s;
	}
	,setTo: function(xa,ya,za) {
		this.x = xa;
		this.y = ya;
		this.z = za;
	}
	,subtract: function(a) {
		return new openfl_geom_Vector3D(this.x - a.x,this.y - a.y,this.z - a.z);
	}
	,toString: function() {
		return "Vector3D(" + this.x + ", " + this.y + ", " + this.z + ")";
	}
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
	}
	,get_lengthSquared: function() {
		return this.x * this.x + this.y * this.y + this.z * this.z;
	}
	,__class__: openfl_geom_Vector3D
	,__properties__: {get_lengthSquared:"get_lengthSquared",get_length:"get_length"}
};
var openfl_media_ID3Info = function() {
};
$hxClasses["openfl.media.ID3Info"] = openfl_media_ID3Info;
openfl_media_ID3Info.__name__ = ["openfl","media","ID3Info"];
openfl_media_ID3Info.prototype = {
	album: null
	,artist: null
	,comment: null
	,genre: null
	,songName: null
	,track: null
	,year: null
	,__class__: openfl_media_ID3Info
};
var openfl_media_Sound = function(stream,context) {
	openfl_events_EventDispatcher.call(this,this);
	this.bytesLoaded = 0;
	this.bytesTotal = 0;
	this.isBuffering = false;
	this.url = null;
	if(stream != null) this.load(stream,context);
};
$hxClasses["openfl.media.Sound"] = openfl_media_Sound;
openfl_media_Sound.__name__ = ["openfl","media","Sound"];
openfl_media_Sound.fromAudioBuffer = function(buffer) {
	var sound = new openfl_media_Sound();
	sound.__buffer = buffer;
	return sound;
};
openfl_media_Sound.fromFile = function(path) {
	return openfl_media_Sound.fromAudioBuffer(lime_audio_AudioBuffer.fromFile(path));
};
openfl_media_Sound.__super__ = openfl_events_EventDispatcher;
openfl_media_Sound.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	bytesLoaded: null
	,bytesTotal: null
	,isBuffering: null
	,url: null
	,__buffer: null
	,close: function() {
		if(this.__buffer != null) this.__buffer.dispose();
	}
	,load: function(stream,context) {
		var _g = this;
		this.url = stream.url;
		var defaultLibrary = lime_utils_Assets.getLibrary("default");
		if(defaultLibrary != null && defaultLibrary.cachedAudioBuffers.exists(this.url)) this.AudioBuffer_onURLLoad(defaultLibrary.cachedAudioBuffers.get(this.url)); else lime_audio_AudioBuffer.loadFromFile(this.url).onComplete($bind(this,this.AudioBuffer_onURLLoad)).onError(function(_) {
			_g.AudioBuffer_onURLLoad(null);
		});
	}
	,loadCompressedDataFromByteArray: function(bytes,bytesLength,forcePlayAsMusic) {
		if(forcePlayAsMusic == null) forcePlayAsMusic = false;
		this.__buffer = lime_audio_AudioBuffer.fromBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytes(bytes));
	}
	,loadPCMFromByteArray: function(bytes,samples,format,stereo,sampleRate) {
		if(sampleRate == null) sampleRate = 44100;
		if(stereo == null) stereo = true;
		this.__buffer = lime_audio_AudioBuffer.fromBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytes(bytes));
	}
	,play: function(startTime,loops,sndTransform) {
		if(loops == null) loops = 0;
		if(startTime == null) startTime = 0.0;
		if(openfl_media_SoundMixer.__soundChannels.length >= 32) return null;
		if(sndTransform == null) sndTransform = new openfl_media_SoundTransform(); else sndTransform = sndTransform.clone();
		var pan = openfl_media_SoundMixer.__soundTransform.pan + sndTransform.pan;
		if(pan > 1) pan = 1;
		if(pan < -1) pan = -1;
		var volume = openfl_media_SoundMixer.__soundTransform.volume * sndTransform.volume;
		var source = new lime_audio_AudioSource(this.__buffer);
		source.offset = startTime | 0;
		if(loops > 1) source.set_loops(loops - 1);
		source.set_gain(volume);
		var position = source.get_position();
		position.x = pan;
		position.z = -1 * Math.sqrt(1 - Math.pow(pan,2));
		source.set_position(position);
		return new openfl_media_SoundChannel(source,sndTransform);
	}
	,get_id3: function() {
		return new openfl_media_ID3Info();
	}
	,get_length: function() {
		if(this.__buffer != null) return Std["int"](this.__buffer.get_src().duration() * 1000);
		return 0;
	}
	,AudioBuffer_onURLLoad: function(buffer) {
		if(buffer == null) this.dispatchEvent(new openfl_events_IOErrorEvent("ioError")); else {
			this.__buffer = buffer;
			this.dispatchEvent(new openfl_events_Event("complete"));
		}
	}
	,__class__: openfl_media_Sound
	,__properties__: {get_length:"get_length",get_id3:"get_id3"}
});
var openfl_media_SoundChannel = function(source,soundTransform) {
	openfl_events_EventDispatcher.call(this,this);
	this.leftPeak = 1;
	this.rightPeak = 1;
	if(soundTransform != null) this.__soundTransform = soundTransform; else this.__soundTransform = new openfl_media_SoundTransform();
	if(source != null) {
		this.__source = source;
		this.__source.onComplete.add($bind(this,this.source_onComplete));
		this.__isValid = true;
		this.__source.play();
	}
	openfl_media_SoundMixer.__registerSoundChannel(this);
};
$hxClasses["openfl.media.SoundChannel"] = openfl_media_SoundChannel;
openfl_media_SoundChannel.__name__ = ["openfl","media","SoundChannel"];
openfl_media_SoundChannel.__super__ = openfl_events_EventDispatcher;
openfl_media_SoundChannel.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	leftPeak: null
	,rightPeak: null
	,__isValid: null
	,__soundTransform: null
	,__source: null
	,stop: function() {
		openfl_media_SoundMixer.__unregisterSoundChannel(this);
		if(!this.__isValid) return;
		this.__source.stop();
		this.__dispose();
	}
	,__dispose: function() {
		if(!this.__isValid) return;
		this.__source.dispose();
		this.__isValid = false;
	}
	,__updateTransform: function() {
		this.set_soundTransform(this.get_soundTransform());
	}
	,get_position: function() {
		if(!this.__isValid) return 0;
		return this.__source.get_currentTime() + this.__source.offset;
	}
	,set_position: function(value) {
		if(!this.__isValid) return 0;
		this.__source.set_currentTime((value | 0) - this.__source.offset);
		return value;
	}
	,get_soundTransform: function() {
		return this.__soundTransform.clone();
	}
	,set_soundTransform: function(value) {
		if(value != null) {
			this.__soundTransform.pan = value.pan;
			this.__soundTransform.volume = value.volume;
			var pan = openfl_media_SoundMixer.__soundTransform.pan + this.__soundTransform.pan;
			if(pan < -1) pan = -1;
			if(pan > 1) pan = 1;
			var volume = openfl_media_SoundMixer.__soundTransform.volume * this.__soundTransform.volume;
			if(this.__isValid) {
				this.__source.set_gain(volume);
				var position = this.__source.get_position();
				position.x = pan;
				position.z = -1 * Math.sqrt(1 - Math.pow(pan,2));
				this.__source.set_position(position);
				return value;
			}
		}
		return value;
	}
	,source_onComplete: function() {
		openfl_media_SoundMixer.__unregisterSoundChannel(this);
		this.__dispose();
		this.dispatchEvent(new openfl_events_Event("soundComplete"));
	}
	,__class__: openfl_media_SoundChannel
	,__properties__: {set_soundTransform:"set_soundTransform",get_soundTransform:"get_soundTransform",set_position:"set_position",get_position:"get_position"}
});
var openfl_media_SoundLoaderContext = function(bufferTime,checkPolicyFile) {
	if(checkPolicyFile == null) checkPolicyFile = false;
	if(bufferTime == null) bufferTime = 1000;
	this.bufferTime = bufferTime;
	this.checkPolicyFile = checkPolicyFile;
};
$hxClasses["openfl.media.SoundLoaderContext"] = openfl_media_SoundLoaderContext;
openfl_media_SoundLoaderContext.__name__ = ["openfl","media","SoundLoaderContext"];
openfl_media_SoundLoaderContext.prototype = {
	bufferTime: null
	,checkPolicyFile: null
	,__class__: openfl_media_SoundLoaderContext
};
var openfl_media_SoundTransform = function(vol,panning) {
	if(panning == null) panning = 0;
	if(vol == null) vol = 1;
	this.volume = vol;
	this.pan = panning;
	this.leftToLeft = 0;
	this.leftToRight = 0;
	this.rightToLeft = 0;
	this.rightToRight = 0;
};
$hxClasses["openfl.media.SoundTransform"] = openfl_media_SoundTransform;
openfl_media_SoundTransform.__name__ = ["openfl","media","SoundTransform"];
openfl_media_SoundTransform.prototype = {
	leftToLeft: null
	,leftToRight: null
	,pan: null
	,rightToLeft: null
	,rightToRight: null
	,volume: null
	,clone: function() {
		return new openfl_media_SoundTransform(this.volume,this.pan);
	}
	,__class__: openfl_media_SoundTransform
};
var openfl_media_SoundMixer = function() { };
$hxClasses["openfl.media.SoundMixer"] = openfl_media_SoundMixer;
openfl_media_SoundMixer.__name__ = ["openfl","media","SoundMixer"];
openfl_media_SoundMixer.__properties__ = {set_soundTransform:"set_soundTransform",get_soundTransform:"get_soundTransform"}
openfl_media_SoundMixer.areSoundsInaccessible = function() {
	return false;
};
openfl_media_SoundMixer.stopAll = function() {
	var _g = 0;
	var _g1 = openfl_media_SoundMixer.__soundChannels;
	while(_g < _g1.length) {
		var channel = _g1[_g];
		++_g;
		channel.stop();
	}
};
openfl_media_SoundMixer.__registerSoundChannel = function(soundChannel) {
	openfl_media_SoundMixer.__soundChannels.push(soundChannel);
};
openfl_media_SoundMixer.__unregisterSoundChannel = function(soundChannel) {
	HxOverrides.remove(openfl_media_SoundMixer.__soundChannels,soundChannel);
};
openfl_media_SoundMixer.get_soundTransform = function() {
	return openfl_media_SoundMixer.__soundTransform;
};
openfl_media_SoundMixer.set_soundTransform = function(value) {
	openfl_media_SoundMixer.__soundTransform = value.clone();
	var _g = 0;
	var _g1 = openfl_media_SoundMixer.__soundChannels;
	while(_g < _g1.length) {
		var channel = _g1[_g];
		++_g;
		channel.__updateTransform();
	}
	return value;
};
var openfl_net_NetConnection = function() {
	openfl_events_EventDispatcher.call(this);
};
$hxClasses["openfl.net.NetConnection"] = openfl_net_NetConnection;
openfl_net_NetConnection.__name__ = ["openfl","net","NetConnection"];
openfl_net_NetConnection.__super__ = openfl_events_EventDispatcher;
openfl_net_NetConnection.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	connect: function(command,_,_1,_2,_3,_4) {
		if(command != null) throw new js__$Boot_HaxeError("Error: Can only connect in \"HTTP streaming\" mode");
		this.dispatchEvent(new openfl_events_NetStatusEvent("netStatus",false,true,{ code : "connectSuccess"}));
	}
	,__class__: openfl_net_NetConnection
});
var openfl_net_NetStream = function(connection,peerID) {
	openfl_events_EventDispatcher.call(this);
	this.__connection = connection;
	this.__video = window.document.createElement("video");
	this.__video.addEventListener("error",$bind(this,this.video_onError),false);
	this.__video.addEventListener("waiting",$bind(this,this.video_onWaiting),false);
	this.__video.addEventListener("ended",$bind(this,this.video_onEnd),false);
	this.__video.addEventListener("pause",$bind(this,this.video_onPause),false);
	this.__video.addEventListener("seeking",$bind(this,this.video_onSeeking),false);
	this.__video.addEventListener("playing",$bind(this,this.video_onPlaying),false);
	this.__video.addEventListener("timeupdate",$bind(this,this.video_onTimeUpdate),false);
	this.__video.addEventListener("loadstart",$bind(this,this.video_onLoadStart),false);
	this.__video.addEventListener("stalled",$bind(this,this.video_onStalled),false);
	this.__video.addEventListener("durationchanged",$bind(this,this.video_onDurationChanged),false);
	this.__video.addEventListener("canplay",$bind(this,this.video_onCanPlay),false);
	this.__video.addEventListener("canplaythrough",$bind(this,this.video_onCanPlayThrough),false);
	this.__video.addEventListener("loadedmetadata",$bind(this,this.video_onLoadMetaData),false);
};
$hxClasses["openfl.net.NetStream"] = openfl_net_NetStream;
openfl_net_NetStream.__name__ = ["openfl","net","NetStream"];
openfl_net_NetStream.__super__ = openfl_events_EventDispatcher;
openfl_net_NetStream.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	audioCodec: null
	,bufferLength: null
	,bufferTime: null
	,bytesLoaded: null
	,bytesTotal: null
	,checkPolicyFile: null
	,client: null
	,currentFPS: null
	,decodedFrames: null
	,liveDelay: null
	,objectEncoding: null
	,soundTransform: null
	,time: null
	,videoCode: null
	,__connection: null
	,__timer: null
	,__video: null
	,close: function() {
		this.__video.pause();
		this.__video.src = "";
		this.time = 0;
	}
	,pause: function() {
		this.__video.pause();
	}
	,play: function(url,_,_1,_2,_3,_4) {
		this.__video.src = url;
		this.__video.play();
	}
	,requestVideoStatus: function() {
		var _g = this;
		if(this.__timer == null) this.__timer = new haxe_Timer(1);
		this.__timer.run = function() {
			if(_g.__video.paused) _g.__playStatus("NetStream.Play.pause"); else _g.__playStatus("NetStream.Play.playing");
			_g.__timer.stop();
		};
	}
	,resume: function() {
		this.__video.play();
	}
	,seek: function(time) {
		if(time < 0) time = 0; else if(time > this.__video.duration) time = this.__video.duration;
		this.__video.currentTime = time;
	}
	,togglePause: function() {
		if(this.__video.paused) this.__video.play(); else this.__video.pause();
	}
	,__playStatus: function(code) {
		if(this.client != null) try {
			var handler = this.client.onPlayStatus;
			handler({ code : code, duration : this.__video.duration, position : this.__video.currentTime, speed : this.__video.playbackRate, start : this.__video.startTime});
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
		}
	}
	,video_onCanPlay: function(event) {
		this.__playStatus("NetStream.Play.canplay");
	}
	,video_onCanPlayThrough: function(event) {
		this.__playStatus("NetStream.Play.canplaythrough");
	}
	,video_onDurationChanged: function(event) {
		this.__playStatus("NetStream.Play.durationchanged");
	}
	,video_onEnd: function(event) {
		this.__connection.dispatchEvent(new openfl_events_NetStatusEvent("netStatus",false,false,{ code : "NetStream.Play.Stop"}));
		this.__playStatus("NetStream.Play.Complete");
	}
	,video_onError: function(event) {
		this.__connection.dispatchEvent(new openfl_events_NetStatusEvent("netStatus",false,false,{ code : "NetStream.Play.Stop"}));
		this.__playStatus("NetStream.Play.error");
	}
	,video_onLoadMetaData: function(event) {
		if(this.client != null) try {
			var handler = this.client.onMetaData;
			handler({ width : this.__video.videoWidth, height : this.__video.videoHeight, duration : this.__video.duration});
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
		}
	}
	,video_onLoadStart: function(event) {
		this.__playStatus("NetStream.Play.loadstart");
	}
	,video_onPause: function(event) {
		this.__playStatus("NetStream.Play.pause");
	}
	,video_onPlaying: function(event) {
		this.__connection.dispatchEvent(new openfl_events_NetStatusEvent("netStatus",false,false,{ code : "NetStream.Play.Start"}));
		this.__playStatus("NetStream.Play.playing");
	}
	,video_onSeeking: function(event) {
		this.__playStatus("NetStream.Play.seeking");
	}
	,video_onStalled: function(event) {
		this.__playStatus("NetStream.Play.stalled");
	}
	,video_onTimeUpdate: function(event) {
		this.time = this.__video.currentTime;
		this.__playStatus("NetStream.Play.timeupdate");
	}
	,video_onWaiting: function(event) {
		this.__playStatus("NetStream.Play.waiting");
	}
	,get_speed: function() {
		return this.__video.playbackRate;
	}
	,set_speed: function(value) {
		return this.__video.playbackRate = value;
	}
	,__class__: openfl_net_NetStream
	,__properties__: {set_speed:"set_speed",get_speed:"get_speed"}
});
var openfl_net_URLLoader = function(request) {
	openfl_events_EventDispatcher.call(this);
	this.bytesLoaded = 0;
	this.bytesTotal = 0;
	this.dataFormat = 1;
	if(request != null) this.load(request);
};
$hxClasses["openfl.net.URLLoader"] = openfl_net_URLLoader;
openfl_net_URLLoader.__name__ = ["openfl","net","URLLoader"];
openfl_net_URLLoader.__super__ = openfl_events_EventDispatcher;
openfl_net_URLLoader.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	bytesLoaded: null
	,bytesTotal: null
	,data: null
	,dataFormat: null
	,__httpRequest: null
	,close: function() {
		if(this.__httpRequest != null) this.__httpRequest.cancel();
	}
	,load: function(request) {
		var _g = this;
		if(this.dataFormat == 0) {
			var httpRequest = new lime_net__$HTTPRequest_$openfl_$utils_$ByteArray();
			this.__prepareRequest(httpRequest,request);
			httpRequest.load().onProgress($bind(this,this.httpRequest_onProgress)).onError($bind(this,this.httpRequest_onError)).onComplete(function(data) {
				_g.data = data;
				var event = new openfl_events_Event("complete");
				_g.dispatchEvent(event);
			});
		} else {
			var httpRequest1 = new lime_net__$HTTPRequest_$String();
			this.__prepareRequest(httpRequest1,request);
			httpRequest1.load().onProgress($bind(this,this.httpRequest_onProgress)).onError($bind(this,this.httpRequest_onError)).onComplete(function(data1) {
				_g.data = data1;
				var event1 = new openfl_events_Event("complete");
				_g.dispatchEvent(event1);
			});
		}
	}
	,__prepareRequest: function(httpRequest,request) {
		this.__httpRequest = httpRequest;
		this.__httpRequest.uri = request.url;
		var _g = request.method;
		switch(_g) {
		case "DELETE":
			this.__httpRequest.method = "DELETE";
			break;
		case "HEAD":
			this.__httpRequest.method = "HEAD";
			break;
		case "OPTIONS":
			this.__httpRequest.method = "OPTIONS";
			break;
		case "POST":
			this.__httpRequest.method = "POST";
			break;
		case "PUT":
			this.__httpRequest.method = "PUT";
			break;
		default:
			this.__httpRequest.method = "GET";
		}
		if(request.data != null) {
			if(js_Boot.__instanceof(request.data,openfl_net_URLVariables)) {
				var fields = Reflect.fields(request.data);
				var _g1 = 0;
				while(_g1 < fields.length) {
					var field = fields[_g1];
					++_g1;
					var value = Reflect.field(request.data,field);
					this.__httpRequest.formData.set(field,value);
				}
			} else if(js_Boot.__instanceof(request.data,haxe_io_Bytes)) this.__httpRequest.data = request.data; else this.__httpRequest.data = haxe_io_Bytes.ofString(Std.string(request.data));
		}
		this.__httpRequest.contentType = request.contentType;
		if(request.requestHeaders != null) {
			var _g2 = 0;
			var _g11 = request.requestHeaders;
			while(_g2 < _g11.length) {
				var header = _g11[_g2];
				++_g2;
				this.__httpRequest.headers.push(new lime_net_HTTPRequestHeader(header.name,header.value));
			}
		}
		this.__httpRequest.userAgent = request.userAgent;
	}
	,httpRequest_onError: function(error) {
		if(error == 403) {
			var event = new openfl_events_SecurityErrorEvent("securityError");
			this.dispatchEvent(event);
		} else {
			var event1 = new openfl_events_IOErrorEvent("ioError");
			this.dispatchEvent(event1);
		}
	}
	,httpRequest_onProgress: function(bytesLoaded,bytesTotal) {
		var event = new openfl_events_ProgressEvent("progress");
		event.bytesLoaded = bytesLoaded;
		event.bytesTotal = bytesTotal;
		this.dispatchEvent(event);
	}
	,__class__: openfl_net_URLLoader
});
var openfl_net__$URLLoaderDataFormat_URLLoaderDataFormat_$Impl_$ = {};
$hxClasses["openfl.net._URLLoaderDataFormat.URLLoaderDataFormat_Impl_"] = openfl_net__$URLLoaderDataFormat_URLLoaderDataFormat_$Impl_$;
openfl_net__$URLLoaderDataFormat_URLLoaderDataFormat_$Impl_$.__name__ = ["openfl","net","_URLLoaderDataFormat","URLLoaderDataFormat_Impl_"];
openfl_net__$URLLoaderDataFormat_URLLoaderDataFormat_$Impl_$.fromString = function(value) {
	switch(value) {
	case "binary":
		return 0;
	case "text":
		return 1;
	case "variables":
		return 2;
	default:
		return null;
	}
};
openfl_net__$URLLoaderDataFormat_URLLoaderDataFormat_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "binary";
	case 1:
		return "text";
	case 2:
		return "variables";
	default:
		return null;
	}
};
var openfl_net_URLRequest = function(url) {
	if(url != null) this.url = url;
	this.requestHeaders = [];
	this.method = "GET";
	this.contentType = null;
};
$hxClasses["openfl.net.URLRequest"] = openfl_net_URLRequest;
openfl_net_URLRequest.__name__ = ["openfl","net","URLRequest"];
openfl_net_URLRequest.prototype = {
	contentType: null
	,data: null
	,method: null
	,requestHeaders: null
	,url: null
	,userAgent: null
	,__class__: openfl_net_URLRequest
};
var openfl_net_URLRequestHeader = function(name,value) {
	if(value == null) value = "";
	if(name == null) name = "";
	this.name = name;
	this.value = value;
};
$hxClasses["openfl.net.URLRequestHeader"] = openfl_net_URLRequestHeader;
openfl_net_URLRequestHeader.__name__ = ["openfl","net","URLRequestHeader"];
openfl_net_URLRequestHeader.prototype = {
	name: null
	,value: null
	,__class__: openfl_net_URLRequestHeader
};
var openfl_net_URLVariables = function(source) {
	if(source != null) this.decode(source);
};
$hxClasses["openfl.net.URLVariables"] = openfl_net_URLVariables;
openfl_net_URLVariables.__name__ = ["openfl","net","URLVariables"];
openfl_net_URLVariables.prototype = {
	decode: function(source) {
		var fields = Reflect.fields(this);
		var _g = 0;
		while(_g < fields.length) {
			var f = fields[_g];
			++_g;
			Reflect.deleteField(this,f);
		}
		var fields1 = source.split(";").join("&").split("&");
		var _g1 = 0;
		while(_g1 < fields1.length) {
			var f1 = fields1[_g1];
			++_g1;
			var eq = f1.indexOf("=");
			if(eq > 0) Reflect.setField(this,StringTools.urlDecode(HxOverrides.substr(f1,0,eq)),StringTools.urlDecode(HxOverrides.substr(f1,eq + 1,null))); else if(eq != 0) Reflect.setField(this,decodeURIComponent(f1.split("+").join(" ")),"");
		}
	}
	,toString: function() {
		var result = [];
		var fields = Reflect.fields(this);
		var _g = 0;
		while(_g < fields.length) {
			var f = fields[_g];
			++_g;
			result.push(encodeURIComponent(f) + "=" + StringTools.urlEncode(Reflect.field(this,f)));
		}
		return result.join("&");
	}
	,__class__: openfl_net_URLVariables
};
var openfl_system_ApplicationDomain = function(parentDomain) {
	if(parentDomain != null) this.parentDomain = parentDomain; else this.parentDomain = openfl_system_ApplicationDomain.currentDomain;
};
$hxClasses["openfl.system.ApplicationDomain"] = openfl_system_ApplicationDomain;
openfl_system_ApplicationDomain.__name__ = ["openfl","system","ApplicationDomain"];
openfl_system_ApplicationDomain.prototype = {
	parentDomain: null
	,getDefinition: function(name) {
		return Type.resolveClass(name);
	}
	,hasDefinition: function(name) {
		return Type.resolveClass(name) != null;
	}
	,__class__: openfl_system_ApplicationDomain
};
var openfl_system_LoaderContext = function(checkPolicyFile,applicationDomain,securityDomain) {
	if(checkPolicyFile == null) checkPolicyFile = false;
	this.checkPolicyFile = checkPolicyFile;
	this.securityDomain = securityDomain;
	this.applicationDomain = applicationDomain;
	this.allowCodeImport = true;
	this.allowLoadBytesCodeExecution = true;
};
$hxClasses["openfl.system.LoaderContext"] = openfl_system_LoaderContext;
openfl_system_LoaderContext.__name__ = ["openfl","system","LoaderContext"];
openfl_system_LoaderContext.prototype = {
	allowCodeImport: null
	,allowLoadBytesCodeExecution: null
	,applicationDomain: null
	,checkPolicyFile: null
	,securityDomain: null
	,__class__: openfl_system_LoaderContext
};
var openfl_system_SecurityDomain = function() {
};
$hxClasses["openfl.system.SecurityDomain"] = openfl_system_SecurityDomain;
openfl_system_SecurityDomain.__name__ = ["openfl","system","SecurityDomain"];
openfl_system_SecurityDomain.prototype = {
	__class__: openfl_system_SecurityDomain
};
var openfl_text__$AntiAliasType_AntiAliasType_$Impl_$ = {};
$hxClasses["openfl.text._AntiAliasType.AntiAliasType_Impl_"] = openfl_text__$AntiAliasType_AntiAliasType_$Impl_$;
openfl_text__$AntiAliasType_AntiAliasType_$Impl_$.__name__ = ["openfl","text","_AntiAliasType","AntiAliasType_Impl_"];
openfl_text__$AntiAliasType_AntiAliasType_$Impl_$.fromString = function(value) {
	switch(value) {
	case "advanced":
		return 0;
	case "normal":
		return 1;
	default:
		return null;
	}
};
openfl_text__$AntiAliasType_AntiAliasType_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "advanced";
	case 1:
		return "normal";
	default:
		return null;
	}
};
var openfl_text__$FontStyle_FontStyle_$Impl_$ = {};
$hxClasses["openfl.text._FontStyle.FontStyle_Impl_"] = openfl_text__$FontStyle_FontStyle_$Impl_$;
openfl_text__$FontStyle_FontStyle_$Impl_$.__name__ = ["openfl","text","_FontStyle","FontStyle_Impl_"];
openfl_text__$FontStyle_FontStyle_$Impl_$.fromString = function(value) {
	switch(value) {
	case "bold":
		return 0;
	case "boldItalic":
		return 1;
	case "italic":
		return 2;
	case "regular":
		return 3;
	default:
		return null;
	}
};
openfl_text__$FontStyle_FontStyle_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "bold";
	case 1:
		return "boldItalic";
	case 2:
		return "italic";
	case 3:
		return "regular";
	default:
		return null;
	}
};
var openfl_text__$FontType_FontType_$Impl_$ = {};
$hxClasses["openfl.text._FontType.FontType_Impl_"] = openfl_text__$FontType_FontType_$Impl_$;
openfl_text__$FontType_FontType_$Impl_$.__name__ = ["openfl","text","_FontType","FontType_Impl_"];
openfl_text__$FontType_FontType_$Impl_$.fromString = function(value) {
	switch(value) {
	case "device":
		return 0;
	case "embedded":
		return 1;
	case "embeddedCFF":
		return 2;
	default:
		return null;
	}
};
openfl_text__$FontType_FontType_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "device";
	case 1:
		return "embedded";
	case 2:
		return "embeddedCFF";
	default:
		return null;
	}
};
var openfl_text__$GridFitType_GridFitType_$Impl_$ = {};
$hxClasses["openfl.text._GridFitType.GridFitType_Impl_"] = openfl_text__$GridFitType_GridFitType_$Impl_$;
openfl_text__$GridFitType_GridFitType_$Impl_$.__name__ = ["openfl","text","_GridFitType","GridFitType_Impl_"];
openfl_text__$GridFitType_GridFitType_$Impl_$.fromString = function(value) {
	switch(value) {
	case "none":
		return 0;
	case "pixel":
		return 1;
	case "subpixel":
		return 2;
	default:
		return null;
	}
};
openfl_text__$GridFitType_GridFitType_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "none";
	case 1:
		return "pixel";
	case 2:
		return "subpixel";
	default:
		return null;
	}
};
var openfl_text_TextField = function() {
	openfl_display_InteractiveObject.call(this);
	this.__caretIndex = -1;
	this.__displayAsPassword = false;
	this.__graphics = new openfl_display_Graphics(this);
	this.__textEngine = new openfl__$internal_text_TextEngine(this);
	this.__layoutDirty = true;
	this.__offsetX = 0;
	this.__offsetY = 0;
	this.__tabEnabled = true;
	this.__mouseWheelEnabled = true;
	this.__text = "";
	if(openfl_text_TextField.__defaultTextFormat == null) {
		openfl_text_TextField.__defaultTextFormat = new openfl_text_TextFormat("Times New Roman",12,0,false,false,false,"","",3,0,0,0,0);
		openfl_text_TextField.__defaultTextFormat.blockIndent = 0;
		openfl_text_TextField.__defaultTextFormat.bullet = false;
		openfl_text_TextField.__defaultTextFormat.letterSpacing = 0;
		openfl_text_TextField.__defaultTextFormat.kerning = false;
	}
	this.__textFormat = openfl_text_TextField.__defaultTextFormat.clone();
	var x = new openfl__$internal_text_TextFormatRange(this.__textFormat,0,0);
	this.__textEngine.textFormatRanges.push(x);
	this.addEventListener("mouseDown",$bind(this,this.this_onMouseDown));
};
$hxClasses["openfl.text.TextField"] = openfl_text_TextField;
openfl_text_TextField.__name__ = ["openfl","text","TextField"];
openfl_text_TextField.__super__ = openfl_display_InteractiveObject;
openfl_text_TextField.prototype = $extend(openfl_display_InteractiveObject.prototype,{
	__bounds: null
	,__caretIndex: null
	,__cursorTimer: null
	,__dirty: null
	,__displayAsPassword: null
	,__inputEnabled: null
	,__isHTML: null
	,__layoutDirty: null
	,__mouseWheelEnabled: null
	,__offsetX: null
	,__offsetY: null
	,__selectionIndex: null
	,__showCursor: null
	,__symbol: null
	,__text: null
	,__textEngine: null
	,__textFormat: null
	,__div: null
	,appendText: function(text) {
		this.__text += text;
		((function($this) {
			var $r;
			var index = $this.__textEngine.textFormatRanges.get_length() - 1;
			$r = $this.__textEngine.textFormatRanges.get(index);
			return $r;
		}(this))).end = this.__text.length;
		this.__dirty = true;
		this.__layoutDirty = true;
	}
	,getCharBoundaries: function(charIndex) {
		if(charIndex < 0 || charIndex > this.__text.length - 1) return null;
		this.__updateLayout();
		var _g = 0;
		var _g1 = this.__textEngine.layoutGroups;
		while(_g < _g1.get_length()) {
			var group = _g1.get(_g);
			++_g;
			if(charIndex >= group.startIndex && charIndex <= group.endIndex) {
				var x = group.offsetX;
				var _g3 = 0;
				var _g2 = charIndex - group.startIndex;
				while(_g3 < _g2) {
					var i = _g3++;
					x += group.advances[i];
				}
				return new openfl_geom_Rectangle(x,group.offsetY,group.advances[charIndex - group.startIndex],group.ascent + group.descent);
			}
		}
		return null;
	}
	,getCharIndexAtPoint: function(x,y) {
		if(x <= 2 || x > this.get_width() + 4 || y <= 0 || y > this.get_height() + 4) return -1;
		this.__updateLayout();
		x += this.get_scrollH();
		var _g1 = 0;
		var _g = this.get_scrollV() - 1;
		while(_g1 < _g) {
			var i = _g1++;
			y += this.__textEngine.lineHeights.get(i);
		}
		var _g2 = 0;
		var _g11 = this.__textEngine.layoutGroups;
		while(_g2 < _g11.get_length()) {
			var group = _g11.get(_g2);
			++_g2;
			if(y >= group.offsetY && y <= group.offsetY + group.height) {
				if(x >= group.offsetX && x <= group.offsetX + group.width) {
					var advance = 0.0;
					var _g3 = 0;
					var _g21 = group.advances.length;
					while(_g3 < _g21) {
						var i1 = _g3++;
						advance += group.advances[i1];
						if(x <= group.offsetX + advance) return group.startIndex + i1;
					}
					return group.endIndex;
				}
			}
		}
		return -1;
	}
	,getFirstCharInParagraph: function(charIndex) {
		if(charIndex < 0 || charIndex > this.__text.length - 1) return 0;
		var index = this.__textEngine.getLineBreakIndex();
		var startIndex = 0;
		while(index > -1) {
			if(index <= charIndex) startIndex = index + 1; else if(index > charIndex) break;
			index = this.__textEngine.getLineBreakIndex(index + 1);
		}
		return startIndex;
	}
	,getLineIndexAtPoint: function(x,y) {
		this.__updateLayout();
		if(x <= 2 || x > this.get_width() + 4 || y <= 0 || y > this.get_height() + 4) return -1;
		var _g1 = 0;
		var _g = this.get_scrollV() - 1;
		while(_g1 < _g) {
			var i = _g1++;
			y += this.__textEngine.lineHeights.get(i);
		}
		var _g2 = 0;
		var _g11 = this.__textEngine.layoutGroups;
		while(_g2 < _g11.get_length()) {
			var group = _g11.get(_g2);
			++_g2;
			if(y >= group.offsetY && y <= group.offsetY + group.height) return group.lineIndex;
		}
		return -1;
	}
	,getLineIndexOfChar: function(charIndex) {
		if(charIndex < 0 || charIndex > this.__text.length - 1) return -1;
		this.__updateLayout();
		var _g = 0;
		var _g1 = this.__textEngine.layoutGroups;
		while(_g < _g1.get_length()) {
			var group = _g1.get(_g);
			++_g;
			if(group.startIndex <= charIndex && group.endIndex >= charIndex) return group.lineIndex;
		}
		return -1;
	}
	,getLineLength: function(lineIndex) {
		this.__updateLayout();
		if(lineIndex < 0 || lineIndex > this.__textEngine.numLines - 1) return 0;
		var startIndex = -1;
		var endIndex = -1;
		var _g = 0;
		var _g1 = this.__textEngine.layoutGroups;
		while(_g < _g1.get_length()) {
			var group = _g1.get(_g);
			++_g;
			if(group.lineIndex == lineIndex) {
				if(startIndex == -1) startIndex = group.startIndex;
			} else if(group.lineIndex == lineIndex + 1) {
				endIndex = group.startIndex;
				break;
			}
		}
		if(endIndex == -1) endIndex = this.__text.length;
		return endIndex - startIndex;
	}
	,getLineMetrics: function(lineIndex) {
		this.__updateLayout();
		var ascender = this.__textEngine.lineAscents.get(lineIndex);
		var descender = this.__textEngine.lineDescents.get(lineIndex);
		var leading = this.__textEngine.lineLeadings.get(lineIndex);
		var lineHeight = this.__textEngine.lineHeights.get(lineIndex);
		var lineWidth = this.__textEngine.lineWidths.get(lineIndex);
		var margin;
		var _g = this.__textFormat.align;
		switch(_g) {
		case 3:case 2:case 5:
			margin = 2;
			break;
		case 4:case 1:
			margin = this.__textEngine.width - lineWidth - 2;
			break;
		case 0:
			margin = (this.__textEngine.width - lineWidth) / 2;
			break;
		}
		return new openfl_text_TextLineMetrics(margin,lineWidth,lineHeight,ascender,descender,leading);
	}
	,getLineOffset: function(lineIndex) {
		this.__updateLayout();
		if(lineIndex < 0 || lineIndex > this.__textEngine.numLines - 1) return -1;
		var _g = 0;
		var _g1 = this.__textEngine.layoutGroups;
		while(_g < _g1.get_length()) {
			var group = _g1.get(_g);
			++_g;
			if(group.lineIndex == lineIndex) return group.startIndex;
		}
		return 0;
	}
	,getLineText: function(lineIndex) {
		this.__updateLayout();
		if(lineIndex < 0 || lineIndex > this.__textEngine.numLines - 1) return null;
		var startIndex = -1;
		var endIndex = -1;
		var _g = 0;
		var _g1 = this.__textEngine.layoutGroups;
		while(_g < _g1.get_length()) {
			var group = _g1.get(_g);
			++_g;
			if(group.lineIndex == lineIndex) {
				if(startIndex == -1) startIndex = group.startIndex;
			} else if(group.lineIndex == lineIndex + 1) {
				endIndex = group.startIndex;
				break;
			}
		}
		if(endIndex == -1) endIndex = this.__text.length;
		return this.__textEngine.text.substring(startIndex,endIndex);
	}
	,getParagraphLength: function(charIndex) {
		if(charIndex < 0 || charIndex > this.__text.length - 1) return 0;
		var startIndex = this.getFirstCharInParagraph(charIndex);
		var endIndex = this.__textEngine.getLineBreakIndex(charIndex) + 1;
		if(endIndex == 0) endIndex = this.__text.length;
		return endIndex - startIndex;
	}
	,getTextFormat: function(beginIndex,endIndex) {
		if(endIndex == null) endIndex = 0;
		if(beginIndex == null) beginIndex = 0;
		var format = null;
		var _g = 0;
		var _g1 = this.__textEngine.textFormatRanges;
		while(_g < _g1.get_length()) {
			var group = _g1.get(_g);
			++_g;
			if(group.start <= beginIndex && group.end >= beginIndex || group.start <= endIndex && group.end >= endIndex) {
				if(format == null) format = group.format.clone(); else {
					if(group.format.font != format.font) format.font = null;
					if(group.format.size != format.size) format.size = null;
					if(group.format.color != format.color) format.color = null;
					if(group.format.bold != format.bold) format.bold = null;
					if(group.format.italic != format.italic) format.italic = null;
					if(group.format.underline != format.underline) format.underline = null;
					if(group.format.url != format.url) format.url = null;
					if(group.format.target != format.target) format.target = null;
					if(group.format.align != format.align) format.align = null;
					if(group.format.leftMargin != format.leftMargin) format.leftMargin = null;
					if(group.format.rightMargin != format.rightMargin) format.rightMargin = null;
					if(group.format.indent != format.indent) format.indent = null;
					if(group.format.leading != format.leading) format.leading = null;
					if(group.format.blockIndent != format.blockIndent) format.blockIndent = null;
					if(group.format.bullet != format.bullet) format.bullet = null;
					if(group.format.kerning != format.kerning) format.kerning = null;
					if(group.format.letterSpacing != format.letterSpacing) format.letterSpacing = null;
					if(group.format.tabStops != format.tabStops) format.tabStops = null;
				}
			}
		}
		return format;
	}
	,replaceSelectedText: function(value) {
		if(value == "" && this.__selectionIndex == this.__caretIndex) return;
		var startIndex;
		if(this.__caretIndex < this.__selectionIndex) startIndex = this.__caretIndex; else startIndex = this.__selectionIndex;
		var endIndex;
		if(this.__caretIndex > this.__selectionIndex) endIndex = this.__caretIndex; else endIndex = this.__selectionIndex;
		this.replaceText(startIndex,endIndex,value);
		var i = startIndex + value.length;
		this.setSelection(i,i);
	}
	,replaceText: function(beginIndex,endIndex,newText) {
		if(endIndex < beginIndex || beginIndex < 0 || endIndex > this.__text.length || newText == null) return;
		this.__updateText(this.__text.substring(0,beginIndex) + newText + this.__text.substring(endIndex));
		var offset = newText.length - (endIndex - beginIndex);
		var i = 0;
		var range;
		while(i < this.__textEngine.textFormatRanges.get_length()) {
			range = this.__textEngine.textFormatRanges.get(i);
			if(range.start <= beginIndex && range.end >= endIndex) {
				range.end += offset;
				i++;
			} else if(range.start >= beginIndex && range.end <= endIndex) {
				if(i > 0) this.__textEngine.textFormatRanges.splice(i,1); else {
					range.start = 0;
					range.end = 0;
				}
				offset -= range.end - range.start;
			} else if(range.start > beginIndex && range.start <= endIndex) {
				range.start += offset;
				i++;
			} else i++;
		}
		this.__dirty = true;
		this.__layoutDirty = true;
	}
	,setSelection: function(beginIndex,endIndex) {
		this.__selectionIndex = beginIndex;
		this.__caretIndex = endIndex;
	}
	,setTextFormat: function(format,beginIndex,endIndex) {
		if(endIndex == null) endIndex = 0;
		if(beginIndex == null) beginIndex = 0;
		if(format.font != null) this.__textFormat.font = format.font;
		if(format.size != null) this.__textFormat.size = format.size;
		if(format.color != null) this.__textFormat.color = format.color;
		if(format.bold != null) this.__textFormat.bold = format.bold;
		if(format.italic != null) this.__textFormat.italic = format.italic;
		if(format.underline != null) this.__textFormat.underline = format.underline;
		if(format.url != null) this.__textFormat.url = format.url;
		if(format.target != null) this.__textFormat.target = format.target;
		if(format.align != null) this.__textFormat.align = format.align;
		if(format.leftMargin != null) this.__textFormat.leftMargin = format.leftMargin;
		if(format.rightMargin != null) this.__textFormat.rightMargin = format.rightMargin;
		if(format.indent != null) this.__textFormat.indent = format.indent;
		if(format.leading != null) this.__textFormat.leading = format.leading;
		if(format.blockIndent != null) this.__textFormat.blockIndent = format.blockIndent;
		if(format.bullet != null) this.__textFormat.bullet = format.bullet;
		if(format.kerning != null) this.__textFormat.kerning = format.kerning;
		if(format.letterSpacing != null) this.__textFormat.letterSpacing = format.letterSpacing;
		if(format.tabStops != null) this.__textFormat.tabStops = format.tabStops;
		this.__dirty = true;
		this.__layoutDirty = true;
	}
	,__updateTransforms: function(overrideTransform) {
		openfl_display_InteractiveObject.prototype.__updateTransforms.call(this,overrideTransform);
		this.__renderTransform.__translateTransformed(this.__offsetX,this.__offsetY);
	}
	,__fromSymbol: function(swf,symbol) {
		this.__symbol = symbol;
		this.set_width(symbol.width);
		this.set_height(symbol.height);
		this.__offsetX = symbol.x;
		this.__offsetY = symbol.y;
		this.set_multiline(symbol.multiline);
		this.set_wordWrap(symbol.wordWrap);
		this.set_displayAsPassword(symbol.password);
		if(symbol.border) {
			this.set_border(true);
			this.set_background(true);
		}
		this.set_selectable(symbol.selectable);
		if(symbol.input) this.set_type(1);
		var format = new openfl_text_TextFormat();
		if(symbol.color != null) format.color = symbol.color & 16777215;
		format.size = Math.round(symbol.fontHeight / 20);
		var font = swf.symbols.h[symbol.fontID];
		if(font != null) {
		}
		format.font = symbol.fontName;
		var found = false;
		var _g = format.font;
		if(_g == null) found = true; else switch(_g) {
		case "_sans":case "_serif":case "_typewriter":case "":
			found = true;
			break;
		default:
			var _g1 = 0;
			var _g2 = openfl_text_Font.enumerateFonts();
			while(_g1 < _g2.length) {
				var font1 = _g2[_g1];
				++_g1;
				if(font1.name == format.font) {
					found = true;
					break;
				}
			}
		}
		if(found) this.set_embedFonts(true); else lime_utils_Log.warn("Could not find required font \"" + format.font + "\", it has not been embedded",{ fileName : "TextField.hx", lineNumber : 666, className : "openfl.text.TextField", methodName : "__fromSymbol"});
		if(symbol.align != null) {
			if(symbol.align == "center") format.align = 0; else if(symbol.align == "right") format.align = 4; else if(symbol.align == "justify") format.align = 2;
			format.leftMargin = symbol.leftMargin / 20 | 0;
			format.rightMargin = symbol.rightMargin / 20 | 0;
			format.indent = symbol.indent / 20 | 0;
			format.leading = symbol.leading / 20 | 0;
			if(this.get_embedFonts()) format.leading += 4;
		}
		this.set_defaultTextFormat(format);
		if(symbol.text != null) {
			if(symbol.html) this.set_htmlText(symbol.text); else this.set_text(symbol.text);
		}
	}
	,__getAttributeMatch: function(regex) {
		if(regex.matched(2) != null) return regex.matched(2); else return regex.matched(3);
	}
	,__getBounds: function(rect,matrix) {
		this.__updateLayout();
		var bounds = openfl_geom_Rectangle.__temp;
		bounds.copyFrom(this.__textEngine.bounds);
		bounds.x += this.__offsetX;
		bounds.y += this.__offsetY;
		bounds.__transform(bounds,matrix);
		rect.__expand(bounds.x,bounds.y,bounds.width,bounds.height);
	}
	,__getCursor: function() {
		if(this.__textEngine.selectable) return lime_ui_MouseCursor.TEXT; else return null;
	}
	,__getPosition: function(x,y) {
		this.__updateLayout();
		x += this.get_scrollH();
		var _g1 = 0;
		var _g = this.get_scrollV() - 1;
		while(_g1 < _g) {
			var i = _g1++;
			y += this.__textEngine.lineHeights.get(i);
		}
		if(y > this.__textEngine.textHeight) y = this.__textEngine.textHeight;
		var firstGroup = true;
		var group;
		var nextGroup;
		var _g11 = 0;
		var _g2 = this.__textEngine.layoutGroups.get_length();
		while(_g11 < _g2) {
			var i1 = _g11++;
			group = this.__textEngine.layoutGroups.get(i1);
			if(i1 < this.__textEngine.layoutGroups.get_length() - 1) nextGroup = this.__textEngine.layoutGroups.get(i1 + 1); else nextGroup = null;
			if(firstGroup) {
				if(y < group.offsetY) y = group.offsetY;
				if(x < group.offsetX) x = group.offsetX;
				firstGroup = false;
			}
			if(y >= group.offsetY && y <= group.offsetY + group.height || nextGroup == null) {
				if(x >= group.offsetX && x <= group.offsetX + group.width || (nextGroup == null || nextGroup.lineIndex != group.lineIndex)) {
					var advance = 0.0;
					var _g3 = 0;
					var _g21 = group.advances.length;
					while(_g3 < _g21) {
						var i2 = _g3++;
						advance += group.advances[i2];
						if(x <= group.offsetX + advance) {
							if(x <= group.offsetX + (advance - group.advances[i2]) + group.advances[i2] / 2) return group.startIndex + i2; else if(group.startIndex + i2 < group.endIndex) return group.startIndex + i2 + 1; else return group.endIndex;
						}
					}
					return group.endIndex;
				}
			}
		}
		return this.__text.length;
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(!hitObject.get_visible() || this.__isMask || interactiveOnly && !this.mouseEnabled) return false;
		if(this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) return false;
		this.__getRenderTransform();
		this.__updateLayout();
		var px = this.__renderTransform.__transformInverseX(x,y);
		var py = this.__renderTransform.__transformInverseY(x,y);
		if(this.__textEngine.bounds.contains(px,py)) {
			if(stack != null) stack.push(hitObject);
			return true;
		}
		return false;
	}
	,__hitTestMask: function(x,y) {
		this.__getRenderTransform();
		this.__updateLayout();
		var px = this.__renderTransform.__transformInverseX(x,y);
		var py = this.__renderTransform.__transformInverseY(x,y);
		if(this.__textEngine.bounds.contains(px,py)) return true;
		return false;
	}
	,__renderCairo: function(renderSession) {
		openfl__$internal_renderer_cairo_CairoTextField.render(this,renderSession,this.__worldTransform);
		openfl_display_InteractiveObject.prototype.__renderCairo.call(this,renderSession);
	}
	,__renderCanvas: function(renderSession) {
		openfl__$internal_renderer_canvas_CanvasTextField.render(this,renderSession,this.__worldTransform);
		if(this.__textEngine.antiAliasType == 0 && this.__textEngine.gridFitType == 1) {
			var smoothingEnabled = renderSession.context.imageSmoothingEnabled;
			if(smoothingEnabled) {
				renderSession.context.mozImageSmoothingEnabled = false;
				renderSession.context.msImageSmoothingEnabled = false;
				renderSession.context.imageSmoothingEnabled = false;
			}
			openfl_display_InteractiveObject.prototype.__renderCanvas.call(this,renderSession);
			if(smoothingEnabled) {
				renderSession.context.mozImageSmoothingEnabled = true;
				renderSession.context.msImageSmoothingEnabled = true;
				renderSession.context.imageSmoothingEnabled = true;
			}
		} else openfl_display_InteractiveObject.prototype.__renderCanvas.call(this,renderSession);
	}
	,__renderDOM: function(renderSession) {
		openfl__$internal_renderer_dom_DOMTextField.render(this,renderSession);
	}
	,__renderGL: function(renderSession) {
		openfl__$internal_renderer_canvas_CanvasTextField.render(this,renderSession,this.__worldTransform);
		openfl_display_InteractiveObject.prototype.__renderGL.call(this,renderSession);
	}
	,__startCursorTimer: function() {
		this.__cursorTimer = haxe_Timer.delay($bind(this,this.__startCursorTimer),600);
		this.__showCursor = !this.__showCursor;
		this.__dirty = true;
	}
	,__startTextInput: function() {
		if(this.__caretIndex < 0) {
			this.__caretIndex = this.__text.length;
			this.__selectionIndex = this.__caretIndex;
		}
		if(this.stage != null) {
			this.stage.window.backend.setEnableTextEvents(true);
			if(!this.__inputEnabled) {
				this.stage.window.backend.setEnableTextEvents(true);
				if(!this.stage.window.onTextInput.has($bind(this,this.window_onTextInput))) {
					this.stage.window.onTextInput.add($bind(this,this.window_onTextInput));
					this.stage.window.onKeyDown.add($bind(this,this.window_onKeyDown));
				}
				this.__inputEnabled = true;
				this.__startCursorTimer();
			}
		}
	}
	,__stopCursorTimer: function() {
		if(this.__cursorTimer != null) {
			this.__cursorTimer.stop();
			this.__cursorTimer = null;
		}
		if(this.__showCursor) {
			this.__showCursor = false;
			this.__dirty = true;
		}
	}
	,__stopTextInput: function() {
		if(this.__inputEnabled && this.stage != null) {
			this.stage.window.backend.setEnableTextEvents(false);
			this.stage.window.onTextInput.remove($bind(this,this.window_onTextInput));
			this.stage.window.onKeyDown.remove($bind(this,this.window_onKeyDown));
			this.__inputEnabled = false;
			this.__stopCursorTimer();
		}
	}
	,__updateLayout: function() {
		if(this.__layoutDirty) {
			var cacheWidth = this.__textEngine.width;
			var cacheHeight = this.__textEngine.height;
			this.__textEngine.update();
			if(this.__textEngine.autoSize != 2) {
				if(this.__textEngine.width != cacheWidth) {
					var _g = this.__textEngine.autoSize;
					switch(_g) {
					case 3:
						var _g1 = this;
						_g1.set_x(_g1.get_x() + (cacheWidth - this.__textEngine.width));
						break;
					case 0:
						var _g11 = this;
						_g11.set_x(_g11.get_x() + (cacheWidth - this.__textEngine.width) / 2);
						break;
					default:
					}
				}
				this.__textEngine.getBounds();
			}
			this.__layoutDirty = false;
		}
	}
	,__updateText: function(value) {
		this.__text = value;
		if(this.__text.length < this.__caretIndex) this.__selectionIndex = this.__caretIndex = this.__text.length;
		if(!this.__displayAsPassword) this.__textEngine.text = this.__text; else {
			var length = this.get_text().length;
			var mask = "";
			var _g = 0;
			while(_g < length) {
				var i = _g++;
				mask += "*";
			}
			this.__textEngine.text = mask;
		}
	}
	,get_antiAliasType: function() {
		return this.__textEngine.antiAliasType;
	}
	,set_antiAliasType: function(value) {
		if(value != this.__textEngine.antiAliasType) {
		}
		return this.__textEngine.antiAliasType = value;
	}
	,get_autoSize: function() {
		return this.__textEngine.autoSize;
	}
	,set_autoSize: function(value) {
		if(value != this.__textEngine.autoSize) {
			this.__dirty = true;
			this.__layoutDirty = true;
		}
		return this.__textEngine.autoSize = value;
	}
	,get_background: function() {
		return this.__textEngine.background;
	}
	,set_background: function(value) {
		if(value != this.__textEngine.background) this.__dirty = true;
		return this.__textEngine.background = value;
	}
	,get_backgroundColor: function() {
		return this.__textEngine.backgroundColor;
	}
	,set_backgroundColor: function(value) {
		if(value != this.__textEngine.backgroundColor) this.__dirty = true;
		return this.__textEngine.backgroundColor = value;
	}
	,get_border: function() {
		return this.__textEngine.border;
	}
	,set_border: function(value) {
		if(value != this.__textEngine.border) this.__dirty = true;
		return this.__textEngine.border = value;
	}
	,get_borderColor: function() {
		return this.__textEngine.borderColor;
	}
	,set_borderColor: function(value) {
		if(value != this.__textEngine.borderColor) this.__dirty = true;
		return this.__textEngine.borderColor = value;
	}
	,get_bottomScrollV: function() {
		this.__updateLayout();
		return this.__textEngine.bottomScrollV;
	}
	,get_caretIndex: function() {
		return this.__caretIndex;
	}
	,get_defaultTextFormat: function() {
		return this.__textFormat.clone();
	}
	,set_defaultTextFormat: function(value) {
		this.__textFormat.__merge(value);
		this.__layoutDirty = true;
		this.__dirty = true;
		return value;
	}
	,get_displayAsPassword: function() {
		return this.__displayAsPassword;
	}
	,set_displayAsPassword: function(value) {
		if(value != this.__displayAsPassword) {
			this.__dirty = true;
			this.__layoutDirty = true;
			this.__displayAsPassword = value;
			this.__updateText(this.__text);
		}
		return value;
	}
	,get_embedFonts: function() {
		return this.__textEngine.embedFonts;
	}
	,set_embedFonts: function(value) {
		return this.__textEngine.embedFonts = value;
	}
	,get_gridFitType: function() {
		return this.__textEngine.gridFitType;
	}
	,set_gridFitType: function(value) {
		return this.__textEngine.gridFitType = value;
	}
	,get_height: function() {
		this.__updateLayout();
		return this.__textEngine.height * Math.abs(this.get_scaleY());
	}
	,set_height: function(value) {
		if(value != this.__textEngine.height) {
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
			this.__dirty = true;
			this.__layoutDirty = true;
			this.__textEngine.height = value;
		}
		return this.__textEngine.height * Math.abs(this.get_scaleY());
	}
	,get_htmlText: function() {
		return this.__text;
	}
	,set_htmlText: function(value) {
		if(!this.__isHTML || this.__text != value) {
			this.__dirty = true;
			this.__layoutDirty = true;
		}
		this.__isHTML = true;
		if(this.__div == null) {
			value = openfl_text_TextField.__regexBreakTag.replace(value,"\n");
			value = openfl_text_TextField.__regexEntities[0].replace(value,"\"");
			value = openfl_text_TextField.__regexEntities[1].replace(value,"'");
			value = openfl_text_TextField.__regexEntities[2].replace(value,"&");
			var segments = value.split("<");
			if(segments.length == 1) {
				value = openfl_text_TextField.__regexHTMLTag.replace(value,"");
				if(this.__textEngine.textFormatRanges.get_length() > 1) {
					var len = this.__textEngine.textFormatRanges.get_length() - 1;
					this.__textEngine.textFormatRanges.splice(1,len);
				}
				value = openfl_text_TextField.__regexEntities[3].replace(value,"<");
				value = openfl_text_TextField.__regexEntities[4].replace(value,">");
				var range = this.__textEngine.textFormatRanges.get(0);
				range.format = this.__textFormat;
				range.start = 0;
				range.end = value.length;
				this.__updateText(value);
				return value;
			} else {
				var len1 = this.__textEngine.textFormatRanges.get_length();
				this.__textEngine.textFormatRanges.splice(0,len1);
				value = "";
				var segment;
				var _g1 = 0;
				var _g = segments.length;
				while(_g1 < _g) {
					var i = _g1++;
					segment = segments[i];
					segment = openfl_text_TextField.__regexEntities[3].replace(segment,"<");
					segment = openfl_text_TextField.__regexEntities[4].replace(segment,">");
					segments[i] = segment;
				}
				var formatStack = [this.__textFormat.clone()];
				var sub;
				var noLineBreak = false;
				var _g2 = 0;
				while(_g2 < segments.length) {
					var segment1 = segments[_g2];
					++_g2;
					if(segment1 == "") continue;
					var isClosingTag = HxOverrides.substr(segment1,0,1) == "/";
					var tagEndIndex = segment1.indexOf(">");
					var start = tagEndIndex + 1;
					var spaceIndex = segment1.indexOf(" ");
					var tagName = segment1.substring(isClosingTag?1:0,spaceIndex > -1 && spaceIndex < tagEndIndex?spaceIndex:tagEndIndex);
					var format;
					if(isClosingTag) {
						formatStack.pop();
						format = formatStack[formatStack.length - 1].clone();
						if(tagName.toLowerCase() == "p" && this.__textEngine.textFormatRanges.get_length() > 0) {
							value += "\n";
							noLineBreak = true;
						}
						if(start < segment1.length) {
							sub = HxOverrides.substr(segment1,start,null);
							var x = new openfl__$internal_text_TextFormatRange(format,value.length,value.length + sub.length);
							this.__textEngine.textFormatRanges.push(x);
							value += sub;
							noLineBreak = false;
						}
					} else {
						format = formatStack[formatStack.length - 1].clone();
						if(tagEndIndex > -1) {
							var _g11 = tagName.toLowerCase();
							switch(_g11) {
							case "p":
								if(this.__textEngine.textFormatRanges.get_length() > 0 && !noLineBreak) value += "\n";
								if(openfl_text_TextField.__regexAlign.match(segment1)) format.align = openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$.fromString(this.__getAttributeMatch(openfl_text_TextField.__regexAlign).toLowerCase());
								break;
							case "font":
								if(openfl_text_TextField.__regexFace.match(segment1)) format.font = this.__getAttributeMatch(openfl_text_TextField.__regexFace);
								if(openfl_text_TextField.__regexColor.match(segment1)) format.color = Std.parseInt("0x" + this.__getAttributeMatch(openfl_text_TextField.__regexColor));
								if(openfl_text_TextField.__regexSize.match(segment1)) {
									var sizeAttr = this.__getAttributeMatch(openfl_text_TextField.__regexSize);
									var firstChar = HxOverrides.cca(sizeAttr,0);
									if(firstChar == 43 || firstChar == 45) {
										var parentFormat;
										if(formatStack.length >= 2) parentFormat = formatStack[formatStack.length - 2]; else parentFormat = this.__textFormat;
										format.size = parentFormat.size + Std.parseInt(sizeAttr);
									} else format.size = Std.parseInt(sizeAttr);
								}
								break;
							case "b":
								format.bold = true;
								break;
							case "u":
								format.underline = true;
								break;
							case "i":case "em":
								format.italic = true;
								break;
							case "textformat":
								if(openfl_text_TextField.__regexBlockIndent.match(segment1)) format.blockIndent = Std.parseInt(this.__getAttributeMatch(openfl_text_TextField.__regexBlockIndent));
								if(openfl_text_TextField.__regexIndent.match(segment1)) format.indent = Std.parseInt(this.__getAttributeMatch(openfl_text_TextField.__regexIndent));
								if(openfl_text_TextField.__regexLeading.match(segment1)) format.leading = Std.parseInt(this.__getAttributeMatch(openfl_text_TextField.__regexLeading));
								if(openfl_text_TextField.__regexLeftMargin.match(segment1)) format.leftMargin = Std.parseInt(this.__getAttributeMatch(openfl_text_TextField.__regexLeftMargin));
								if(openfl_text_TextField.__regexRightMargin.match(segment1)) format.rightMargin = Std.parseInt(this.__getAttributeMatch(openfl_text_TextField.__regexRightMargin));
								if(openfl_text_TextField.__regexTabStops.match(segment1)) {
									var values = this.__getAttributeMatch(openfl_text_TextField.__regexTabStops).split(" ");
									var tabStops = [];
									var _g21 = 0;
									while(_g21 < values.length) {
										var stop = values[_g21];
										++_g21;
										tabStops.push(Std.parseInt(stop));
									}
									format.tabStops = tabStops;
								}
								break;
							}
							formatStack.push(format);
							if(start < segment1.length) {
								sub = segment1.substring(start);
								var x1 = new openfl__$internal_text_TextFormatRange(format,value.length,value.length + sub.length);
								this.__textEngine.textFormatRanges.push(x1);
								value += sub;
								noLineBreak = false;
							}
						} else {
							var x2 = new openfl__$internal_text_TextFormatRange(format,value.length,value.length + segment1.length);
							this.__textEngine.textFormatRanges.push(x2);
							value += segment1;
							noLineBreak = false;
						}
					}
				}
				if(this.__textEngine.textFormatRanges.get_length() == 0) {
					var x3 = new openfl__$internal_text_TextFormatRange(formatStack[0],0,0);
					this.__textEngine.textFormatRanges.push(x3);
				}
			}
		}
		this.__updateText(value);
		return value;
	}
	,get_length: function() {
		if(this.__text != null) return this.__text.length;
		return 0;
	}
	,get_maxChars: function() {
		return this.__textEngine.maxChars;
	}
	,set_maxChars: function(value) {
		if(value != this.__textEngine.maxChars) {
			this.__dirty = true;
			this.__layoutDirty = true;
		}
		return this.__textEngine.maxChars = value;
	}
	,get_maxScrollH: function() {
		this.__updateLayout();
		return this.__textEngine.maxScrollH;
	}
	,get_maxScrollV: function() {
		this.__updateLayout();
		return this.__textEngine.maxScrollV;
	}
	,get_mouseWheelEnabled: function() {
		return this.__mouseWheelEnabled;
	}
	,set_mouseWheelEnabled: function(value) {
		return this.__mouseWheelEnabled = value;
	}
	,get_multiline: function() {
		return this.__textEngine.multiline;
	}
	,set_multiline: function(value) {
		if(value != this.__textEngine.multiline) {
			this.__dirty = true;
			this.__layoutDirty = true;
		}
		return this.__textEngine.multiline = value;
	}
	,get_numLines: function() {
		this.__updateLayout();
		return this.__textEngine.numLines;
	}
	,get_restrict: function() {
		return this.__textEngine.restrict;
	}
	,set_restrict: function(value) {
		return this.__textEngine.restrict = value;
	}
	,get_scrollH: function() {
		return this.__textEngine.scrollH;
	}
	,set_scrollH: function(value) {
		this.__updateLayout();
		if(value > this.__textEngine.maxScrollH) value = this.__textEngine.maxScrollH;
		if(value < 0) value = 0;
		if(value != this.__textEngine.scrollH) this.__dirty = true;
		return this.__textEngine.scrollH = value;
	}
	,get_scrollV: function() {
		return this.__textEngine.scrollV;
	}
	,set_scrollV: function(value) {
		this.__updateLayout();
		if(value > this.__textEngine.maxScrollV) value = this.__textEngine.maxScrollV;
		if(value < 1) value = 1;
		if(value != this.__textEngine.scrollV) this.__dirty = true;
		return this.__textEngine.scrollV = value;
	}
	,get_selectable: function() {
		return this.__textEngine.selectable;
	}
	,set_selectable: function(value) {
		if(value != this.__textEngine.selectable && this.get_type() == 1) {
			if(this.stage != null && this.stage.get_focus() == this) this.__startTextInput(); else if(!value) this.__stopTextInput();
		}
		return this.__textEngine.selectable = value;
	}
	,get_selectionBeginIndex: function() {
		return Std["int"](Math.min(this.__caretIndex,this.__selectionIndex));
	}
	,get_selectionEndIndex: function() {
		return Std["int"](Math.max(this.__caretIndex,this.__selectionIndex));
	}
	,get_sharpness: function() {
		return this.__textEngine.sharpness;
	}
	,set_sharpness: function(value) {
		if(value != this.__textEngine.sharpness) this.__dirty = true;
		return this.__textEngine.sharpness = value;
	}
	,get_text: function() {
		return this.__text;
	}
	,set_text: function(value) {
		if(this.__isHTML || this.__text != value) {
			this.__dirty = true;
			this.__layoutDirty = true;
		} else return value;
		if(this.__textEngine.textFormatRanges.get_length() > 1) {
			var len = this.__textEngine.textFormatRanges.get_length() - 1;
			this.__textEngine.textFormatRanges.splice(1,len);
		}
		var range = this.__textEngine.textFormatRanges.get(0);
		range.format = this.__textFormat;
		range.start = 0;
		range.end = value.length;
		this.__isHTML = false;
		this.__updateText(value);
		return value;
	}
	,get_textColor: function() {
		return this.__textFormat.color;
	}
	,set_textColor: function(value) {
		if(value != this.__textFormat.color) this.__dirty = true;
		var _g = 0;
		var _g1 = this.__textEngine.textFormatRanges;
		while(_g < _g1.get_length()) {
			var range = _g1.get(_g);
			++_g;
			range.format.color = value;
		}
		return this.__textFormat.color = value;
	}
	,get_textWidth: function() {
		this.__updateLayout();
		return this.__textEngine.textWidth;
	}
	,get_textHeight: function() {
		this.__updateLayout();
		return this.__textEngine.textHeight;
	}
	,get_type: function() {
		return this.__textEngine.type;
	}
	,set_type: function(value) {
		if(value != this.__textEngine.type) {
			if(value == 1) {
				this.addEventListener("focusIn",$bind(this,this.this_onFocusIn));
				this.addEventListener("focusOut",$bind(this,this.this_onFocusOut));
				this.addEventListener("addedToStage",$bind(this,this.this_onAddedToStage));
				this.this_onFocusIn(null);
			} else {
				this.removeEventListener("focusIn",$bind(this,this.this_onFocusIn));
				this.removeEventListener("focusOut",$bind(this,this.this_onFocusOut));
				this.removeEventListener("addedToStage",$bind(this,this.this_onAddedToStage));
				this.__stopTextInput();
			}
			this.__dirty = true;
		}
		return this.__textEngine.type = value;
	}
	,get_width: function() {
		this.__updateLayout();
		return this.__textEngine.width * Math.abs(this.get_scaleX());
	}
	,set_width: function(value) {
		if(value != this.__textEngine.width) {
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
			this.__dirty = true;
			this.__layoutDirty = true;
			this.__textEngine.width = value;
		}
		return this.__textEngine.width * Math.abs(this.get_scaleX());
	}
	,get_wordWrap: function() {
		return this.__textEngine.wordWrap;
	}
	,set_wordWrap: function(value) {
		if(value != this.__textEngine.wordWrap) {
			this.__dirty = true;
			this.__layoutDirty = true;
		}
		return this.__textEngine.wordWrap = value;
	}
	,stage_onMouseMove: function(event) {
		if(this.stage == null) return;
		if(this.__textEngine.selectable && this.__selectionIndex >= 0) {
			this.__updateLayout();
			var position = this.__getPosition(this.get_mouseX(),this.get_mouseY());
			if(position != this.__caretIndex) {
				this.__caretIndex = position;
				this.__dirty = true;
			}
		}
	}
	,stage_onMouseUp: function(event) {
		if(this.stage == null) return;
		this.stage.removeEventListener("mouseMove",$bind(this,this.stage_onMouseMove));
		this.stage.removeEventListener("mouseUp",$bind(this,this.stage_onMouseUp));
		if(this.stage.get_focus() == this) {
			this.__getWorldTransform();
			this.__updateLayout();
			var px = this.__worldTransform.__transformInverseX(this.get_x(),this.get_y());
			var py = this.__worldTransform.__transformInverseY(this.get_x(),this.get_y());
			var upPos = this.__getPosition(this.get_mouseX(),this.get_mouseY());
			var leftPos;
			var rightPos;
			leftPos = Std["int"](Math.min(this.__selectionIndex,upPos));
			rightPos = Std["int"](Math.max(this.__selectionIndex,upPos));
			this.__selectionIndex = leftPos;
			this.__caretIndex = rightPos;
			if(this.__inputEnabled) {
				this.this_onFocusIn(null);
				this.__stopCursorTimer();
				this.__startCursorTimer();
			}
		}
	}
	,this_onAddedToStage: function(event) {
		this.this_onFocusIn(null);
	}
	,this_onFocusIn: function(event) {
		if(this.get_selectable() && this.get_type() == 1 && this.stage != null && this.stage.get_focus() == this) this.__startTextInput();
	}
	,this_onFocusOut: function(event) {
		this.__stopTextInput();
	}
	,this_onMouseDown: function(event) {
		if(!this.get_selectable()) return;
		this.__updateLayout();
		this.__caretIndex = this.__getPosition(this.get_mouseX(),this.get_mouseY());
		this.__selectionIndex = this.__caretIndex;
		this.__dirty = true;
		this.stage.addEventListener("mouseMove",$bind(this,this.stage_onMouseMove));
		this.stage.addEventListener("mouseUp",$bind(this,this.stage_onMouseUp));
	}
	,window_onKeyDown: function(key,modifier) {
		switch(key) {
		case 13:case 1073741912:
			if(this.__textEngine.multiline) {
				this.replaceSelectedText("\n");
				this.dispatchEvent(new openfl_events_Event("change",true));
			}
			break;
		case 8:
			if(this.__selectionIndex == this.__caretIndex && this.__caretIndex > 0) this.__selectionIndex = this.__caretIndex - 1;
			if(this.__selectionIndex != this.__caretIndex) {
				this.replaceSelectedText("");
				this.__selectionIndex = this.__caretIndex;
				this.dispatchEvent(new openfl_events_Event("change",true));
			}
			break;
		case 127:
			if(this.__selectionIndex == this.__caretIndex && this.__caretIndex < this.__text.length) this.__selectionIndex = this.__caretIndex + 1;
			if(this.__selectionIndex != this.__caretIndex) {
				this.replaceSelectedText("");
				this.__selectionIndex = this.__caretIndex;
				this.dispatchEvent(new openfl_events_Event("change",true));
			}
			break;
		case 1073741904:
			if(lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey(modifier)) {
				if(this.__caretIndex > 0) this.__caretIndex--;
			} else {
				if(this.__selectionIndex == this.__caretIndex) {
					if(this.__caretIndex > 0) this.__caretIndex--;
				} else this.__caretIndex = Std["int"](Math.min(this.__caretIndex,this.__selectionIndex));
				this.__selectionIndex = this.__caretIndex;
			}
			this.__stopCursorTimer();
			this.__startCursorTimer();
			break;
		case 1073741903:
			if(lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey(modifier)) {
				if(this.__caretIndex < this.__text.length) this.__caretIndex++;
			} else {
				if(this.__selectionIndex == this.__caretIndex) {
					if(this.__caretIndex < this.__text.length) this.__caretIndex++;
				} else this.__caretIndex = Std["int"](Math.max(this.__caretIndex,this.__selectionIndex));
				this.__selectionIndex = this.__caretIndex;
			}
			this.__stopCursorTimer();
			this.__startCursorTimer();
			break;
		case 99:
			if(lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_metaKey(modifier) || lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_ctrlKey(modifier)) lime_system_Clipboard.set_text(this.__text.substring(this.__caretIndex,this.__selectionIndex));
			break;
		case 120:
			if(lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_metaKey(modifier) || lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_ctrlKey(modifier)) {
				lime_system_Clipboard.set_text(this.__text.substring(this.__caretIndex,this.__selectionIndex));
				if(this.__caretIndex != this.__selectionIndex) {
					this.replaceSelectedText("");
					this.dispatchEvent(new openfl_events_Event("change",true));
				}
			}
			break;
		case 97:
			if(lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_metaKey(modifier) || lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_ctrlKey(modifier)) {
				this.__caretIndex = this.__text.length;
				this.__selectionIndex = 0;
			}
			break;
		default:
		}
	}
	,window_onTextInput: function(value) {
		this.replaceSelectedText(value);
		this.dispatchEvent(new openfl_events_Event("change",true));
	}
	,__class__: openfl_text_TextField
	,__properties__: $extend(openfl_display_InteractiveObject.prototype.__properties__,{set_wordWrap:"set_wordWrap",get_wordWrap:"get_wordWrap",set_type:"set_type",get_type:"get_type",get_textWidth:"get_textWidth",get_textHeight:"get_textHeight",set_textColor:"set_textColor",get_textColor:"get_textColor",set_text:"set_text",get_text:"get_text",set_sharpness:"set_sharpness",get_sharpness:"get_sharpness",get_selectionEndIndex:"get_selectionEndIndex",get_selectionBeginIndex:"get_selectionBeginIndex",set_selectable:"set_selectable",get_selectable:"get_selectable",set_scrollV:"set_scrollV",get_scrollV:"get_scrollV",set_scrollH:"set_scrollH",get_scrollH:"get_scrollH",set_restrict:"set_restrict",get_restrict:"get_restrict",get_numLines:"get_numLines",set_multiline:"set_multiline",get_multiline:"get_multiline",set_mouseWheelEnabled:"set_mouseWheelEnabled",get_mouseWheelEnabled:"get_mouseWheelEnabled",get_maxScrollV:"get_maxScrollV",get_maxScrollH:"get_maxScrollH",set_maxChars:"set_maxChars",get_maxChars:"get_maxChars",get_length:"get_length",set_htmlText:"set_htmlText",get_htmlText:"get_htmlText",set_gridFitType:"set_gridFitType",get_gridFitType:"get_gridFitType",set_embedFonts:"set_embedFonts",get_embedFonts:"get_embedFonts",set_displayAsPassword:"set_displayAsPassword",get_displayAsPassword:"get_displayAsPassword",set_defaultTextFormat:"set_defaultTextFormat",get_defaultTextFormat:"get_defaultTextFormat",get_caretIndex:"get_caretIndex",get_bottomScrollV:"get_bottomScrollV",set_borderColor:"set_borderColor",get_borderColor:"get_borderColor",set_border:"set_border",get_border:"get_border",set_backgroundColor:"set_backgroundColor",get_backgroundColor:"get_backgroundColor",set_background:"set_background",get_background:"get_background",set_autoSize:"set_autoSize",get_autoSize:"get_autoSize",set_antiAliasType:"set_antiAliasType",get_antiAliasType:"get_antiAliasType"})
});
var openfl_text__$TextFieldAutoSize_TextFieldAutoSize_$Impl_$ = {};
$hxClasses["openfl.text._TextFieldAutoSize.TextFieldAutoSize_Impl_"] = openfl_text__$TextFieldAutoSize_TextFieldAutoSize_$Impl_$;
openfl_text__$TextFieldAutoSize_TextFieldAutoSize_$Impl_$.__name__ = ["openfl","text","_TextFieldAutoSize","TextFieldAutoSize_Impl_"];
openfl_text__$TextFieldAutoSize_TextFieldAutoSize_$Impl_$.fromString = function(value) {
	switch(value) {
	case "center":
		return 0;
	case "left":
		return 1;
	case "none":
		return 2;
	case "right":
		return 3;
	default:
		return null;
	}
};
openfl_text__$TextFieldAutoSize_TextFieldAutoSize_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "center";
	case 1:
		return "left";
	case 2:
		return "none";
	case 3:
		return "right";
	default:
		return null;
	}
};
var openfl_text__$TextFieldType_TextFieldType_$Impl_$ = {};
$hxClasses["openfl.text._TextFieldType.TextFieldType_Impl_"] = openfl_text__$TextFieldType_TextFieldType_$Impl_$;
openfl_text__$TextFieldType_TextFieldType_$Impl_$.__name__ = ["openfl","text","_TextFieldType","TextFieldType_Impl_"];
openfl_text__$TextFieldType_TextFieldType_$Impl_$.fromString = function(value) {
	switch(value) {
	case "dynamic":
		return 0;
	case "input":
		return 1;
	default:
		return null;
	}
};
openfl_text__$TextFieldType_TextFieldType_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "dynamic";
	case 1:
		return "input";
	default:
		return null;
	}
};
var openfl_text_TextFormat = function(font,size,color,bold,italic,underline,url,target,align,leftMargin,rightMargin,indent,leading) {
	this.font = font;
	this.size = size;
	this.color = color;
	this.bold = bold;
	this.italic = italic;
	this.underline = underline;
	this.url = url;
	this.target = target;
	this.align = align;
	this.leftMargin = leftMargin;
	this.rightMargin = rightMargin;
	this.indent = indent;
	this.leading = leading;
};
$hxClasses["openfl.text.TextFormat"] = openfl_text_TextFormat;
openfl_text_TextFormat.__name__ = ["openfl","text","TextFormat"];
openfl_text_TextFormat.prototype = {
	align: null
	,blockIndent: null
	,bold: null
	,bullet: null
	,color: null
	,font: null
	,indent: null
	,italic: null
	,kerning: null
	,leading: null
	,leftMargin: null
	,letterSpacing: null
	,rightMargin: null
	,size: null
	,tabStops: null
	,target: null
	,underline: null
	,url: null
	,clone: function() {
		var newFormat = new openfl_text_TextFormat(this.font,this.size,this.color,this.bold,this.italic,this.underline,this.url,this.target);
		newFormat.align = this.align;
		newFormat.leftMargin = this.leftMargin;
		newFormat.rightMargin = this.rightMargin;
		newFormat.indent = this.indent;
		newFormat.leading = this.leading;
		newFormat.blockIndent = this.blockIndent;
		newFormat.bullet = this.bullet;
		newFormat.kerning = this.kerning;
		newFormat.letterSpacing = this.letterSpacing;
		newFormat.tabStops = this.tabStops;
		return newFormat;
	}
	,__merge: function(format) {
		if(format.font != null) this.font = format.font;
		if(format.size != null) this.size = format.size;
		if(format.color != null) this.color = format.color;
		if(format.bold != null) this.bold = format.bold;
		if(format.italic != null) this.italic = format.italic;
		if(format.underline != null) this.underline = format.underline;
		if(format.url != null) this.url = format.url;
		if(format.target != null) this.target = format.target;
		if(format.align != null) this.align = format.align;
		if(format.leftMargin != null) this.leftMargin = format.leftMargin;
		if(format.rightMargin != null) this.rightMargin = format.rightMargin;
		if(format.indent != null) this.indent = format.indent;
		if(format.leading != null) this.leading = format.leading;
		if(format.blockIndent != null) this.blockIndent = format.blockIndent;
		if(format.bullet != null) this.bullet = format.bullet;
		if(format.kerning != null) this.kerning = format.kerning;
		if(format.letterSpacing != null) this.letterSpacing = format.letterSpacing;
		if(format.tabStops != null) this.tabStops = format.tabStops;
	}
	,__class__: openfl_text_TextFormat
};
var openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$ = {};
$hxClasses["openfl.text._TextFormatAlign.TextFormatAlign_Impl_"] = openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$;
openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$.__name__ = ["openfl","text","_TextFormatAlign","TextFormatAlign_Impl_"];
openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$.fromString = function(value) {
	switch(value) {
	case "center":
		return 0;
	case "end":
		return 1;
	case "justify":
		return 2;
	case "left":
		return 3;
	case "right":
		return 4;
	case "start":
		return 5;
	default:
		return null;
	}
};
openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "center";
	case 1:
		return "end";
	case 2:
		return "justify";
	case 3:
		return "left";
	case 4:
		return "right";
	case 5:
		return "start";
	default:
		return null;
	}
};
var openfl_text_TextLineMetrics = function(x,width,height,ascent,descent,leading) {
	this.x = x;
	this.width = width;
	this.height = height;
	this.ascent = ascent;
	this.descent = descent;
	this.leading = leading;
};
$hxClasses["openfl.text.TextLineMetrics"] = openfl_text_TextLineMetrics;
openfl_text_TextLineMetrics.__name__ = ["openfl","text","TextLineMetrics"];
openfl_text_TextLineMetrics.prototype = {
	ascent: null
	,descent: null
	,height: null
	,leading: null
	,width: null
	,x: null
	,__class__: openfl_text_TextLineMetrics
};
var openfl_ui_GameInput = function() {
	openfl_events_EventDispatcher.call(this);
	openfl_ui_GameInput.__instances.push(this);
};
$hxClasses["openfl.ui.GameInput"] = openfl_ui_GameInput;
openfl_ui_GameInput.__name__ = ["openfl","ui","GameInput"];
openfl_ui_GameInput.getDeviceAt = function(index) {
	if(index >= 0 && index < openfl_ui_GameInput.__deviceList.length) return openfl_ui_GameInput.__deviceList[index];
	return null;
};
openfl_ui_GameInput.__getDevice = function(gamepad) {
	if(gamepad == null) return null;
	if(!(openfl_ui_GameInput.__devices.h.__keys__[gamepad.__id__] != null)) {
		var device = new openfl_ui_GameInputDevice(gamepad.get_guid(),gamepad.get_name());
		openfl_ui_GameInput.__deviceList.push(device);
		openfl_ui_GameInput.__devices.set(gamepad,device);
		openfl_ui_GameInput.numDevices = openfl_ui_GameInput.__deviceList.length;
	}
	return openfl_ui_GameInput.__devices.h[gamepad.__id__];
};
openfl_ui_GameInput.__onGamepadAxisMove = function(gamepad,axis,value) {
	var device = openfl_ui_GameInput.__getDevice(gamepad);
	if(device == null) return;
	if(device.enabled) {
		if(!device.__axis.h.hasOwnProperty(axis)) {
			var control1 = new openfl_ui_GameInputControl(device,"AXIS_" + (function($this) {
				var $r;
				switch(axis) {
				case 0:
					$r = "LEFT_X";
					break;
				case 1:
					$r = "LEFT_Y";
					break;
				case 2:
					$r = "RIGHT_X";
					break;
				case 3:
					$r = "RIGHT_Y";
					break;
				case 4:
					$r = "TRIGGER_LEFT";
					break;
				case 5:
					$r = "TRIGGER_RIGHT";
					break;
				default:
					$r = "UNKNOWN (" + axis + ")";
				}
				return $r;
			}(this)),-1,1);
			device.__axis.h[axis] = control1;
			device.__controls.push(control1);
		}
		var control = device.__axis.h[axis];
		control.value = value;
		control.dispatchEvent(new openfl_events_Event("change"));
	}
};
openfl_ui_GameInput.__onGamepadButtonDown = function(gamepad,button) {
	var device = openfl_ui_GameInput.__getDevice(gamepad);
	if(device == null) return;
	if(device.enabled) {
		if(!device.__button.h.hasOwnProperty(button)) {
			var control1 = new openfl_ui_GameInputControl(device,"BUTTON_" + (function($this) {
				var $r;
				switch(button) {
				case 0:
					$r = "A";
					break;
				case 1:
					$r = "B";
					break;
				case 2:
					$r = "X";
					break;
				case 3:
					$r = "Y";
					break;
				case 4:
					$r = "BACK";
					break;
				case 5:
					$r = "GUIDE";
					break;
				case 6:
					$r = "START";
					break;
				case 7:
					$r = "LEFT_STICK";
					break;
				case 8:
					$r = "RIGHT_STICK";
					break;
				case 9:
					$r = "LEFT_SHOULDER";
					break;
				case 10:
					$r = "RIGHT_SHOULDER";
					break;
				case 11:
					$r = "DPAD_UP";
					break;
				case 12:
					$r = "DPAD_DOWN";
					break;
				case 13:
					$r = "DPAD_LEFT";
					break;
				case 14:
					$r = "DPAD_RIGHT";
					break;
				default:
					$r = "UNKNOWN (" + button + ")";
				}
				return $r;
			}(this)),0,1);
			device.__button.h[button] = control1;
			device.__controls.push(control1);
		}
		var control = device.__button.h[button];
		control.value = 1;
		control.dispatchEvent(new openfl_events_Event("change"));
	}
};
openfl_ui_GameInput.__onGamepadButtonUp = function(gamepad,button) {
	var device = openfl_ui_GameInput.__getDevice(gamepad);
	if(device == null) return;
	if(device.enabled) {
		if(!device.__button.h.hasOwnProperty(button)) {
			var control1 = new openfl_ui_GameInputControl(device,"BUTTON_" + (function($this) {
				var $r;
				switch(button) {
				case 0:
					$r = "A";
					break;
				case 1:
					$r = "B";
					break;
				case 2:
					$r = "X";
					break;
				case 3:
					$r = "Y";
					break;
				case 4:
					$r = "BACK";
					break;
				case 5:
					$r = "GUIDE";
					break;
				case 6:
					$r = "START";
					break;
				case 7:
					$r = "LEFT_STICK";
					break;
				case 8:
					$r = "RIGHT_STICK";
					break;
				case 9:
					$r = "LEFT_SHOULDER";
					break;
				case 10:
					$r = "RIGHT_SHOULDER";
					break;
				case 11:
					$r = "DPAD_UP";
					break;
				case 12:
					$r = "DPAD_DOWN";
					break;
				case 13:
					$r = "DPAD_LEFT";
					break;
				case 14:
					$r = "DPAD_RIGHT";
					break;
				default:
					$r = "UNKNOWN (" + button + ")";
				}
				return $r;
			}(this)),0,1);
			device.__button.h[button] = control1;
			device.__controls.push(control1);
		}
		var control = device.__button.h[button];
		control.value = 0;
		control.dispatchEvent(new openfl_events_Event("change"));
	}
};
openfl_ui_GameInput.__onGamepadConnect = function(gamepad) {
	var device = openfl_ui_GameInput.__getDevice(gamepad);
	if(device == null) return;
	var _g = 0;
	var _g1 = openfl_ui_GameInput.__instances;
	while(_g < _g1.length) {
		var instance = _g1[_g];
		++_g;
		instance.dispatchEvent(new openfl_events_GameInputEvent("deviceAdded",null,null,device));
	}
};
openfl_ui_GameInput.__onGamepadDisconnect = function(gamepad) {
	var device = openfl_ui_GameInput.__devices.h[gamepad.__id__];
	if(device != null) {
		if(openfl_ui_GameInput.__devices.h.__keys__[gamepad.__id__] != null) {
			var x = openfl_ui_GameInput.__devices.h[gamepad.__id__];
			HxOverrides.remove(openfl_ui_GameInput.__deviceList,x);
			openfl_ui_GameInput.__devices.remove(gamepad);
		}
		openfl_ui_GameInput.numDevices = openfl_ui_GameInput.__deviceList.length;
		var _g = 0;
		var _g1 = openfl_ui_GameInput.__instances;
		while(_g < _g1.length) {
			var instance = _g1[_g];
			++_g;
			instance.dispatchEvent(new openfl_events_GameInputEvent("deviceRemoved",null,null,device));
		}
	}
};
openfl_ui_GameInput.__super__ = openfl_events_EventDispatcher;
openfl_ui_GameInput.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	__class__: openfl_ui_GameInput
});
var openfl_ui_GameInputControl = function(device,id,minValue,maxValue,value) {
	if(value == null) value = 0;
	openfl_events_EventDispatcher.call(this);
	this.device = device;
	this.id = id;
	this.minValue = minValue;
	this.maxValue = maxValue;
	this.value = value;
};
$hxClasses["openfl.ui.GameInputControl"] = openfl_ui_GameInputControl;
openfl_ui_GameInputControl.__name__ = ["openfl","ui","GameInputControl"];
openfl_ui_GameInputControl.__super__ = openfl_events_EventDispatcher;
openfl_ui_GameInputControl.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	device: null
	,id: null
	,maxValue: null
	,minValue: null
	,value: null
	,__class__: openfl_ui_GameInputControl
});
var openfl_ui_GameInputDevice = function(id,name) {
	this.__controls = [];
	this.__button = new haxe_ds_IntMap();
	this.__axis = new haxe_ds_IntMap();
	this.id = id;
	this.name = name;
	var control;
	var _g = 0;
	while(_g < 6) {
		var i = _g++;
		control = new openfl_ui_GameInputControl(this,"AXIS_" + i,-1,1);
		this.__axis.h[i] = control;
		this.__controls.push(control);
	}
	var _g1 = 0;
	while(_g1 < 15) {
		var i1 = _g1++;
		control = new openfl_ui_GameInputControl(this,"BUTTON_" + i1,0,1);
		this.__button.h[i1] = control;
		this.__controls.push(control);
	}
};
$hxClasses["openfl.ui.GameInputDevice"] = openfl_ui_GameInputDevice;
openfl_ui_GameInputDevice.__name__ = ["openfl","ui","GameInputDevice"];
openfl_ui_GameInputDevice.prototype = {
	enabled: null
	,id: null
	,name: null
	,sampleInterval: null
	,__axis: null
	,__button: null
	,__controls: null
	,__gamepad: null
	,getCachedSamples: function(data,append) {
		if(append == null) append = false;
		return 0;
	}
	,getControlAt: function(i) {
		if(i >= 0 && i < this.__controls.length) return this.__controls[i];
		return null;
	}
	,startCachingSamples: function(numSamples,controls) {
	}
	,stopCachingSamples: function() {
	}
	,get_numControls: function() {
		return this.__controls.length;
	}
	,__class__: openfl_ui_GameInputDevice
	,__properties__: {get_numControls:"get_numControls"}
};
var openfl_ui_Keyboard = function() { };
$hxClasses["openfl.ui.Keyboard"] = openfl_ui_Keyboard;
openfl_ui_Keyboard.__name__ = ["openfl","ui","Keyboard"];
openfl_ui_Keyboard.isAccessible = function() {
	return false;
};
openfl_ui_Keyboard.__convertKeyCode = function(key) {
	switch(key) {
	case 8:
		return 8;
	case 9:
		return 9;
	case 13:
		return 13;
	case 27:
		return 27;
	case 32:
		return 32;
	case 33:
		return 49;
	case 34:
		return 222;
	case 35:
		return 51;
	case 36:
		return 52;
	case 37:
		return 53;
	case 38:
		return 55;
	case 39:
		return 222;
	case 40:
		return 57;
	case 41:
		return 48;
	case 42:
		return 56;
	case 44:
		return 188;
	case 45:
		return 189;
	case 46:
		return 190;
	case 47:
		return 191;
	case 48:
		return 48;
	case 49:
		return 49;
	case 50:
		return 50;
	case 51:
		return 51;
	case 52:
		return 52;
	case 53:
		return 53;
	case 54:
		return 54;
	case 55:
		return 55;
	case 56:
		return 56;
	case 57:
		return 57;
	case 58:
		return 186;
	case 59:
		return 186;
	case 60:
		return 60;
	case 61:
		return 187;
	case 62:
		return 190;
	case 63:
		return 191;
	case 64:
		return 50;
	case 91:
		return 219;
	case 92:
		return 220;
	case 93:
		return 221;
	case 94:
		return 54;
	case 95:
		return 189;
	case 96:
		return 192;
	case 97:
		return 65;
	case 98:
		return 66;
	case 99:
		return 67;
	case 100:
		return 68;
	case 101:
		return 69;
	case 102:
		return 70;
	case 103:
		return 71;
	case 104:
		return 72;
	case 105:
		return 73;
	case 106:
		return 74;
	case 107:
		return 75;
	case 108:
		return 76;
	case 109:
		return 77;
	case 110:
		return 78;
	case 111:
		return 79;
	case 112:
		return 80;
	case 113:
		return 81;
	case 114:
		return 82;
	case 115:
		return 83;
	case 116:
		return 84;
	case 117:
		return 85;
	case 118:
		return 86;
	case 119:
		return 87;
	case 120:
		return 88;
	case 121:
		return 89;
	case 122:
		return 90;
	case 127:
		return 46;
	case 1073741881:
		return 20;
	case 1073741882:
		return 112;
	case 1073741883:
		return 113;
	case 1073741884:
		return 114;
	case 1073741885:
		return 115;
	case 1073741886:
		return 116;
	case 1073741887:
		return 117;
	case 1073741888:
		return 118;
	case 1073741889:
		return 119;
	case 1073741890:
		return 120;
	case 1073741891:
		return 121;
	case 1073741892:
		return 122;
	case 1073741893:
		return 123;
	case 1073741894:
		return 301;
	case 1073741895:
		return 145;
	case 1073741896:
		return 19;
	case 1073741897:
		return 45;
	case 1073741898:
		return 36;
	case 1073741899:
		return 33;
	case 1073741901:
		return 35;
	case 1073741902:
		return 34;
	case 1073741903:
		return 39;
	case 1073741904:
		return 37;
	case 1073741905:
		return 40;
	case 1073741906:
		return 38;
	case 1073741907:
		return 144;
	case 1073741908:
		return 111;
	case 1073741909:
		return 106;
	case 1073741910:
		return 109;
	case 1073741911:
		return 107;
	case 1073741912:
		return 108;
	case 1073741913:
		return 97;
	case 1073741914:
		return 98;
	case 1073741915:
		return 99;
	case 1073741916:
		return 100;
	case 1073741917:
		return 101;
	case 1073741918:
		return 102;
	case 1073741919:
		return 103;
	case 1073741920:
		return 104;
	case 1073741921:
		return 105;
	case 1073741922:
		return 96;
	case 1073741923:
		return 110;
	case 1073741925:
		return 302;
	case 1073741928:
		return 124;
	case 1073741929:
		return 125;
	case 1073741930:
		return 126;
	case 1073741982:
		return 13;
	case 1073742044:
		return 110;
	case 1073742048:
		return 17;
	case 1073742049:
		return 16;
	case 1073742050:
		return 18;
	case 1073742051:
		return 15;
	case 1073742052:
		return 17;
	case 1073742053:
		return 16;
	case 1073742054:
		return 18;
	case 1073742055:
		return 15;
	default:
		return key;
	}
};
openfl_ui_Keyboard.__getCharCode = function(key,shift) {
	if(shift == null) shift = false;
	if(!shift) {
		switch(key) {
		case 8:
			return 8;
		case 9:
			return 9;
		case 13:
			return 13;
		case 27:
			return 27;
		case 32:
			return 32;
		case 186:
			return 59;
		case 187:
			return 61;
		case 188:
			return 44;
		case 189:
			return 45;
		case 190:
			return 46;
		case 191:
			return 47;
		case 192:
			return 96;
		case 219:
			return 91;
		case 220:
			return 92;
		case 221:
			return 93;
		case 222:
			return 39;
		}
		if(key >= 48 && key <= 57) return key - 48 + 48;
		if(key >= 65 && key <= 90) return key - 65 + 97;
	} else {
		switch(key) {
		case 48:
			return 41;
		case 49:
			return 33;
		case 50:
			return 64;
		case 51:
			return 35;
		case 52:
			return 36;
		case 53:
			return 37;
		case 54:
			return 94;
		case 55:
			return 38;
		case 56:
			return 42;
		case 57:
			return 40;
		case 186:
			return 58;
		case 187:
			return 43;
		case 188:
			return 60;
		case 189:
			return 95;
		case 190:
			return 62;
		case 191:
			return 63;
		case 192:
			return 126;
		case 219:
			return 123;
		case 220:
			return 124;
		case 221:
			return 125;
		case 222:
			return 34;
		}
		if(key >= 65 && key <= 90) return key - 65 + 65;
	}
	if(key >= 96 && key <= 105) return key - 96 + 48;
	switch(key) {
	case 106:
		return 42;
	case 107:
		return 43;
	case 108:
		return 44;
	case 110:
		return 45;
	case 111:
		return 46;
	case 46:
		return 127;
	case 13:
		return 13;
	case 8:
		return 8;
	}
	return 0;
};
openfl_ui_Keyboard.__getKeyLocation = function(key) {
	switch(key) {
	case 1073742048:case 1073742049:case 1073742050:case 1073742051:
		return 1;
	case 1073742052:case 1073742053:case 1073742054:case 1073742055:
		return 2;
	case 1073741908:case 1073741909:case 1073741910:case 1073741911:case 1073741912:case 1073741913:case 1073741914:case 1073741915:case 1073741916:case 1073741917:case 1073741918:case 1073741919:case 1073741920:case 1073741921:case 1073741922:case 1073741923:case 1073742044:
		return 3;
	default:
		return 0;
	}
};
var openfl_ui_Mouse = function() { };
$hxClasses["openfl.ui.Mouse"] = openfl_ui_Mouse;
openfl_ui_Mouse.__name__ = ["openfl","ui","Mouse"];
openfl_ui_Mouse.__properties__ = {set_cursor:"set_cursor",get_cursor:"get_cursor"}
openfl_ui_Mouse.hide = function() {
	lime_ui_Mouse.hide();
};
openfl_ui_Mouse.show = function() {
	lime_ui_Mouse.show();
};
openfl_ui_Mouse.get_cursor = function() {
	return openfl_ui_Mouse.__cursor;
};
openfl_ui_Mouse.set_cursor = function(value) {
	switch(value) {
	case "arrow":
		lime_ui_Mouse.set_cursor(lime_ui_MouseCursor.ARROW);
		break;
	case "button":
		lime_ui_Mouse.set_cursor(lime_ui_MouseCursor.POINTER);
		break;
	case "hand":
		lime_ui_Mouse.set_cursor(lime_ui_MouseCursor.MOVE);
		break;
	case "ibeam":
		lime_ui_Mouse.set_cursor(lime_ui_MouseCursor.TEXT);
		break;
	default:
	}
	return openfl_ui_Mouse.__cursor = value;
};
var openfl_ui_Multitouch = function() { };
$hxClasses["openfl.ui.Multitouch"] = openfl_ui_Multitouch;
openfl_ui_Multitouch.__name__ = ["openfl","ui","Multitouch"];
openfl_ui_Multitouch.__properties__ = {get_supportsTouchEvents:"get_supportsTouchEvents"}
openfl_ui_Multitouch.get_supportsTouchEvents = function() {
	if(('ontouchstart' in document.documentElement) || (window.DocumentTouch && document instanceof DocumentTouch)) return true;
	return false;
};
var openfl_ui__$MultitouchInputMode_MultitouchInputMode_$Impl_$ = {};
$hxClasses["openfl.ui._MultitouchInputMode.MultitouchInputMode_Impl_"] = openfl_ui__$MultitouchInputMode_MultitouchInputMode_$Impl_$;
openfl_ui__$MultitouchInputMode_MultitouchInputMode_$Impl_$.__name__ = ["openfl","ui","_MultitouchInputMode","MultitouchInputMode_Impl_"];
openfl_ui__$MultitouchInputMode_MultitouchInputMode_$Impl_$.fromString = function(value) {
	switch(value) {
	case "gesture":
		return 0;
	case "none":
		return 1;
	case "touchPoint":
		return 2;
	default:
		return null;
	}
};
openfl_ui__$MultitouchInputMode_MultitouchInputMode_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "gesture";
	case 1:
		return "none";
	case 2:
		return "touchPoint";
	default:
		return null;
	}
};
var openfl_utils__$ByteArray_ByteArray_$Impl_$ = {};
$hxClasses["openfl.utils._ByteArray.ByteArray_Impl_"] = openfl_utils__$ByteArray_ByteArray_$Impl_$;
openfl_utils__$ByteArray_ByteArray_$Impl_$.__name__ = ["openfl","utils","_ByteArray","ByteArray_Impl_"];
openfl_utils__$ByteArray_ByteArray_$Impl_$.__properties__ = {set_length:"set_length",get_length:"get_length"}
openfl_utils__$ByteArray_ByteArray_$Impl_$._new = function(length) {
	if(length == null) length = 0;
	return new openfl_utils_ByteArrayData(length);
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.get = function(this1,index) {
	return this1.b[index];
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.set = function(this1,index,value) {
	this1.__resize(index + 1);
	this1.b[index] = value & 255;
	return value;
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.fromArrayBuffer = function(buffer) {
	if(buffer == null) return null;
	return openfl_utils_ByteArrayData.fromBytes(haxe_io_Bytes.ofData(buffer));
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes = function(bytes) {
	if(bytes == null) return null;
	if(js_Boot.__instanceof(bytes,openfl_utils_ByteArrayData)) return bytes; else return openfl_utils_ByteArrayData.fromBytes(bytes);
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytesData = function(bytesData) {
	if(bytesData == null) return null;
	return openfl_utils_ByteArrayData.fromBytes(haxe_io_Bytes.ofData(bytesData));
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.fromFile = function(path) {
	return openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(lime_utils__$Bytes_Bytes_$Impl_$.fromFile(path));
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.fromLimeBytes = function(bytes) {
	return openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(bytes);
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.toArrayBuffer = function(byteArray) {
	return byteArray.b.bufferValue;
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytes = function(byteArray) {
	return byteArray;
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytesData = function(byteArray) {
	return byteArray.b.bufferValue;
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.toLimeBytes = function(byteArray) {
	return openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytes(byteArray)));
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length = function(this1) {
	return this1.length;
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.set_length = function(this1,value) {
	if(value > 0) this1.__resize(value);
	this1.length = value;
	return value;
};
var openfl_utils_IDataOutput = function() { };
$hxClasses["openfl.utils.IDataOutput"] = openfl_utils_IDataOutput;
openfl_utils_IDataOutput.__name__ = ["openfl","utils","IDataOutput"];
openfl_utils_IDataOutput.prototype = {
	get_endian: null
	,set_endian: null
	,objectEncoding: null
	,writeBoolean: null
	,writeByte: null
	,writeBytes: null
	,writeDouble: null
	,writeFloat: null
	,writeInt: null
	,writeMultiByte: null
	,writeShort: null
	,writeUTF: null
	,writeUTFBytes: null
	,writeUnsignedInt: null
	,__class__: openfl_utils_IDataOutput
	,__properties__: {set_endian:"set_endian",get_endian:"get_endian"}
};
var openfl_utils_IDataInput = function() { };
$hxClasses["openfl.utils.IDataInput"] = openfl_utils_IDataInput;
openfl_utils_IDataInput.__name__ = ["openfl","utils","IDataInput"];
openfl_utils_IDataInput.prototype = {
	get_bytesAvailable: null
	,get_endian: null
	,set_endian: null
	,objectEncoding: null
	,readBoolean: null
	,readByte: null
	,readBytes: null
	,readDouble: null
	,readFloat: null
	,readInt: null
	,readMultiByte: null
	,readShort: null
	,readUnsignedByte: null
	,readUnsignedInt: null
	,readUnsignedShort: null
	,readUTF: null
	,readUTFBytes: null
	,__class__: openfl_utils_IDataInput
	,__properties__: {set_endian:"set_endian",get_endian:"get_endian",get_bytesAvailable:"get_bytesAvailable"}
};
var openfl_utils_ByteArrayData = function(length) {
	if(length == null) length = 0;
	var bytes = new haxe_io_Bytes(new ArrayBuffer(length));
	haxe_io_Bytes.call(this,bytes.b.buffer);
	this.__length = length;
	this.__endian = 0;
	this.position = 0;
};
$hxClasses["openfl.utils.ByteArrayData"] = openfl_utils_ByteArrayData;
openfl_utils_ByteArrayData.__name__ = ["openfl","utils","ByteArrayData"];
openfl_utils_ByteArrayData.__interfaces__ = [openfl_utils_IDataOutput,openfl_utils_IDataInput];
openfl_utils_ByteArrayData.fromBytes = function(bytes) {
	var result = new openfl_utils_ByteArrayData();
	result.__fromBytes(bytes);
	return result;
};
openfl_utils_ByteArrayData.__super__ = haxe_io_Bytes;
openfl_utils_ByteArrayData.prototype = $extend(haxe_io_Bytes.prototype,{
	objectEncoding: null
	,position: null
	,__endian: null
	,__length: null
	,clear: function() {
		this.length = 0;
		this.position = 0;
	}
	,compress: function(algorithm) {
		if(algorithm == null) algorithm = 2;
		if(this.__length > this.length) {
			var cacheLength = this.length;
			this.length = this.__length;
			var data = new haxe_io_Bytes(new ArrayBuffer(cacheLength));
			data.blit(0,this,0,cacheLength);
			this.b = data.b;
			this.__length = data.length;
			this.data = data.data;
			this.length = cacheLength;
		}
		var bytes;
		switch(algorithm) {
		case 0:
			bytes = lime_utils_compress_Deflate.compress(this);
			break;
		case 1:
			bytes = lime_utils_compress_LZMA.compress(this);
			break;
		default:
			bytes = lime_utils_compress_Zlib.compress(this);
		}
		if(bytes != null) {
			this.b = bytes.b;
			this.__length = bytes.length;
			this.data = bytes.data;
			this.length = this.__length;
			this.position = this.length;
		}
	}
	,deflate: function() {
		this.compress(0);
	}
	,inflate: function() {
		this.uncompress(0);
	}
	,readBoolean: function() {
		if(this.position < this.length) return this.get(this.position++) != 0; else {
			throw new js__$Boot_HaxeError(new openfl_errors_EOFError());
			return false;
		}
	}
	,readByte: function() {
		var value = this.readUnsignedByte();
		if((value & 128) != 0) return value - 256; else return value;
	}
	,readBytes: function(bytes,offset,length) {
		if(length == null) length = 0;
		if(offset == null) offset = 0;
		if(length == 0) length = this.length - this.position;
		if(this.position + length > this.length) throw new js__$Boot_HaxeError(new openfl_errors_EOFError());
		if(bytes.length < offset + length) bytes.__resize(offset + length);
		bytes.blit(offset,this,this.position,length);
		this.position += length;
	}
	,readDouble: function() {
		var ch1 = this.readInt();
		var ch2 = this.readInt();
		if(this.__endian == 1) return haxe_io_FPHelper.i64ToDouble(ch1,ch2); else return haxe_io_FPHelper.i64ToDouble(ch2,ch1);
	}
	,readFloat: function() {
		return haxe_io_FPHelper.i32ToFloat(this.readInt());
	}
	,readInt: function() {
		var ch1 = this.readUnsignedByte();
		var ch2 = this.readUnsignedByte();
		var ch3 = this.readUnsignedByte();
		var ch4 = this.readUnsignedByte();
		if(this.__endian == 1) return ch4 << 24 | ch3 << 16 | ch2 << 8 | ch1; else return ch1 << 24 | ch2 << 16 | ch3 << 8 | ch4;
	}
	,readMultiByte: function(length,charSet) {
		return this.readUTFBytes(length);
	}
	,readShort: function() {
		var ch1 = this.readUnsignedByte();
		var ch2 = this.readUnsignedByte();
		var value;
		if(this.__endian == 1) value = ch2 << 8 | ch1; else value = ch1 << 8 | ch2;
		if((value & 32768) != 0) return value - 65536; else return value;
	}
	,readUnsignedByte: function() {
		if(this.position < this.length) return this.get(this.position++); else {
			throw new js__$Boot_HaxeError(new openfl_errors_EOFError());
			return 0;
		}
	}
	,readUnsignedInt: function() {
		var ch1 = this.readUnsignedByte();
		var ch2 = this.readUnsignedByte();
		var ch3 = this.readUnsignedByte();
		var ch4 = this.readUnsignedByte();
		if(this.__endian == 1) return ch4 << 24 | ch3 << 16 | ch2 << 8 | ch1; else return ch1 << 24 | ch2 << 16 | ch3 << 8 | ch4;
	}
	,readUnsignedShort: function() {
		var ch1 = this.readUnsignedByte();
		var ch2 = this.readUnsignedByte();
		if(this.__endian == 1) return (ch2 << 8) + ch1; else return ch1 << 8 | ch2;
	}
	,readUTF: function() {
		var bytesCount = this.readUnsignedShort();
		return this.readUTFBytes(bytesCount);
	}
	,readUTFBytes: function(length) {
		if(this.position + length > this.length) throw new js__$Boot_HaxeError(new openfl_errors_EOFError());
		this.position += length;
		return this.getString(this.position - length,length);
	}
	,uncompress: function(algorithm) {
		if(algorithm == null) algorithm = 2;
		if(this.__length > this.length) {
			var cacheLength = this.length;
			this.length = this.__length;
			var data = new haxe_io_Bytes(new ArrayBuffer(cacheLength));
			data.blit(0,this,0,cacheLength);
			this.b = data.b;
			this.__length = data.length;
			this.data = data.data;
			this.length = cacheLength;
		}
		var bytes;
		switch(algorithm) {
		case 0:
			bytes = lime_utils_compress_Deflate.decompress(this);
			break;
		case 1:
			bytes = lime_utils_compress_LZMA.decompress(this);
			break;
		default:
			bytes = lime_utils_compress_Zlib.decompress(this);
		}
		if(bytes != null) {
			this.b = bytes.b;
			this.__length = bytes.length;
			this.data = bytes.data;
			this.length = this.__length;
			this.position = this.__length;
		}
	}
	,writeBoolean: function(value) {
		this.writeByte(value?1:0);
	}
	,writeByte: function(value) {
		this.__resize(this.position + 1);
		this.set(this.position++,value & 255);
	}
	,writeBytes: function(bytes,offset,length) {
		if(length == null) length = 0;
		if(offset == null) offset = 0;
		if(openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(bytes) == 0) return;
		if(length == 0) {
			var a = openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(bytes);
			length = a - offset;
		}
		this.__resize(this.position + length);
		this.blit(this.position,bytes,offset,length);
		this.position = this.position + length;
	}
	,writeDouble: function(value) {
		var int64 = haxe_io_FPHelper.doubleToI64(value);
		if(this.__endian == 1) {
			this.writeInt(int64.low);
			this.writeInt(int64.high);
		} else {
			this.writeInt(int64.high);
			this.writeInt(int64.low);
		}
	}
	,writeFloat: function(value) {
		var $int = haxe_io_FPHelper.floatToI32(value);
		this.writeInt($int);
	}
	,writeInt: function(value) {
		this.__resize(this.position + 4);
		if(this.__endian == 1) {
			this.set(this.position++,value & 255);
			this.set(this.position++,value >> 8 & 255);
			this.set(this.position++,value >> 16 & 255);
			this.set(this.position++,value >> 24 & 255);
		} else {
			this.set(this.position++,value >> 24 & 255);
			this.set(this.position++,value >> 16 & 255);
			this.set(this.position++,value >> 8 & 255);
			this.set(this.position++,value & 255);
		}
	}
	,writeMultiByte: function(value,charSet) {
		this.writeUTFBytes(value);
	}
	,writeShort: function(value) {
		this.__resize(this.position + 2);
		if(this.__endian == 1) {
			this.set(this.position++,value);
			this.set(this.position++,value >> 8);
		} else {
			this.set(this.position++,value >> 8);
			this.set(this.position++,value);
		}
	}
	,writeUnsignedInt: function(value) {
		this.writeInt(value);
	}
	,writeUTF: function(value) {
		var bytes = haxe_io_Bytes.ofString(value);
		this.writeShort(bytes.length);
		this.writeBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(bytes));
	}
	,writeUTFBytes: function(value) {
		var bytes = haxe_io_Bytes.ofString(value);
		this.writeBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(haxe_io_Bytes.ofString(value)));
	}
	,__fromBytes: function(bytes) {
		this.b = bytes.b;
		this.__length = bytes.length;
		this.data = bytes.data;
		this.length = bytes.length;
	}
	,__resize: function(size) {
		if(size > this.__length) {
			var bytes = new haxe_io_Bytes(new ArrayBuffer((size + 1) * 3 >> 1));
			var cacheLength = this.length;
			this.length = this.__length;
			bytes.blit(0,this,0,this.__length);
			this.length = cacheLength;
			this.b = bytes.b;
			this.__length = bytes.length;
			this.data = bytes.data;
		}
		if(this.length < size) this.length = size;
	}
	,__setData: function(bytes) {
		this.b = bytes.b;
		this.__length = bytes.length;
		this.data = bytes.data;
	}
	,get_bytesAvailable: function() {
		return this.length - this.position;
	}
	,get_endian: function() {
		return this.__endian;
	}
	,set_endian: function(value) {
		return this.__endian = value;
	}
	,__class__: openfl_utils_ByteArrayData
	,__properties__: {set_endian:"set_endian",get_endian:"get_endian",get_bytesAvailable:"get_bytesAvailable"}
});
var openfl_utils__$CompressionAlgorithm_CompressionAlgorithm_$Impl_$ = {};
$hxClasses["openfl.utils._CompressionAlgorithm.CompressionAlgorithm_Impl_"] = openfl_utils__$CompressionAlgorithm_CompressionAlgorithm_$Impl_$;
openfl_utils__$CompressionAlgorithm_CompressionAlgorithm_$Impl_$.__name__ = ["openfl","utils","_CompressionAlgorithm","CompressionAlgorithm_Impl_"];
openfl_utils__$CompressionAlgorithm_CompressionAlgorithm_$Impl_$.fromString = function(value) {
	switch(value) {
	case "deflate":
		return 0;
	case "lzma":
		return 1;
	case "zlib":
		return 2;
	default:
		return null;
	}
};
openfl_utils__$CompressionAlgorithm_CompressionAlgorithm_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "deflate";
	case 1:
		return "lzma";
	case 2:
		return "zlib";
	default:
		return null;
	}
};
var openfl_utils__$Endian_Endian_$Impl_$ = {};
$hxClasses["openfl.utils._Endian.Endian_Impl_"] = openfl_utils__$Endian_Endian_$Impl_$;
openfl_utils__$Endian_Endian_$Impl_$.__name__ = ["openfl","utils","_Endian","Endian_Impl_"];
openfl_utils__$Endian_Endian_$Impl_$.fromString = function(value) {
	switch(value) {
	case "bigEndian":
		return 0;
	case "littleEndian":
		return 1;
	default:
		return null;
	}
};
openfl_utils__$Endian_Endian_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "bigEndian";
	case 1:
		return "littleEndian";
	default:
		return null;
	}
};
var openfl_utils__$Object_Object_$Impl_$ = {};
$hxClasses["openfl.utils._Object.Object_Impl_"] = openfl_utils__$Object_Object_$Impl_$;
openfl_utils__$Object_Object_$Impl_$.__name__ = ["openfl","utils","_Object","Object_Impl_"];
openfl_utils__$Object_Object_$Impl_$._new = function() {
	return { };
};
openfl_utils__$Object_Object_$Impl_$.hasOwnProperty = function(this1,name) {
	return this1 != null && Object.prototype.hasOwnProperty.call(this1,name);
};
openfl_utils__$Object_Object_$Impl_$.isPrototypeOf = function(this1,theClass) {
	var c;
	if(this1 == null) c = null; else c = js_Boot.getClass(this1);
	while(c != null) {
		if(c == theClass) return true;
		c = Type.getSuperClass(c);
	}
	return false;
};
openfl_utils__$Object_Object_$Impl_$.iterator = function(this1) {
	var fields = Reflect.fields(this1);
	if(fields == null) fields = [];
	return HxOverrides.iter(fields);
};
openfl_utils__$Object_Object_$Impl_$.propertyIsEnumerable = function(this1,name) {
	return this1 != null && Object.prototype.hasOwnProperty.call(this1,name) && Std["is"](Reflect.field(this1,name),haxe_lang_Iterable);
};
openfl_utils__$Object_Object_$Impl_$.toLocaleString = function(this1) {
	return Std.string(this1);
};
openfl_utils__$Object_Object_$Impl_$.toString = function(this1) {
	return Std.string(this1);
};
openfl_utils__$Object_Object_$Impl_$.valueOf = function(this1) {
	return this1;
};
openfl_utils__$Object_Object_$Impl_$.__get = function(this1,key) {
	return Reflect.field(this1,key);
};
openfl_utils__$Object_Object_$Impl_$.__set = function(this1,key,value) {
	this1[key] = value;
	return value;
};
var haxe_lang_Iterator = function() { };
$hxClasses["haxe.lang.Iterator"] = haxe_lang_Iterator;
haxe_lang_Iterator.__name__ = ["haxe","lang","Iterator"];
haxe_lang_Iterator.prototype = {
	hasNext: null
	,next: null
	,__class__: haxe_lang_Iterator
};
var haxe_lang_Iterable = function() { };
$hxClasses["haxe.lang.Iterable"] = haxe_lang_Iterable;
haxe_lang_Iterable.__name__ = ["haxe","lang","Iterable"];
haxe_lang_Iterable.prototype = {
	iterator: null
	,__class__: haxe_lang_Iterable
};
var scenario_Event = function(g,vid,idx) {
	this.game = g;
	this.id = vid;
	this.index = idx;
	this.name = "unnamed event";
	this.location = null;
	this.locationKnown = false;
	this.notes = [];
	this.npc = [];
};
$hxClasses["scenario.Event"] = scenario_Event;
scenario_Event.__name__ = ["scenario","Event"];
scenario_Event.prototype = {
	game: null
	,info: null
	,num: null
	,isHidden: null
	,id: null
	,index: null
	,name: null
	,location: null
	,locationKnown: null
	,notes: null
	,npc: null
	,learnClue: function() {
		if(this.notesKnown()) return false;
		var note = null;
		var _g = 0;
		var _g1 = this.notes;
		while(_g < _g1.length) {
			var n = _g1[_g];
			++_g;
			if(!n.isKnown) {
				n.clues++;
				if(n.clues >= 4) {
					n.isKnown = true;
					note = n;
				}
				break;
			}
		}
		this.game.timeline.update();
		this.game.player.game.log("You have gained a clue for event " + this.num + ".",_$TextColor.COLOR_TIMELINE);
		if(note != null) {
			this.game.player.game.log(note.text,_$TextColor.COLOR_TIMELINE);
			var idx = -1;
			var _g11 = 0;
			var _g2 = this.notes.length;
			while(_g11 < _g2) {
				var i = _g11++;
				if(this.notes[i] == note) idx = i;
			}
			if(this.info.onLearnNote != null) this.info.onLearnNote(this.game,idx);
		}
		return true;
	}
	,learnNPC: function() {
		var rnd2 = Std.random(100);
		var type = "";
		if(rnd2 < 33) type = "name"; else if(rnd2 < 67) type = "job"; else type = "area";
		var _g = 0;
		var _g1 = this.npc;
		while(_g < _g1.length) {
			var n = _g1[_g];
			++_g;
			if(!n.nameKnown || !n.jobKnown) {
				if(!n.nameKnown && !n.jobKnown) if(Std.random(2) == 0) type = "name"; else type = "job"; else if(!n.nameKnown) type = "name"; else if(!n.jobKnown) type = "job";
				break;
			}
		}
		var _g2 = 0;
		var _g11 = this.npc;
		while(_g2 < _g11.length) {
			var n1 = _g11[_g2];
			++_g2;
			if(type == "name" && !n1.nameKnown || type == "job" && !n1.jobKnown || type == "area" && !n1.areaKnown) {
				if(type == "name") n1.nameKnown = true; else if(type == "job") n1.jobKnown = true; else if(type == "area") n1.areaKnown = true;
				this.game.timeline.update();
				this.game.player.game.log("You have gained a clue about an event " + this.num + " participant.",_$TextColor.COLOR_TIMELINE);
				this.game.goals.complete(_$Goal.GOAL_LEARN_NPC);
				return true;
			}
		}
		return false;
	}
	,learnNote: function() {
		if(this.notesKnown()) return false;
		var note = null;
		var _g = 0;
		var _g1 = this.notes;
		while(_g < _g1.length) {
			var n = _g1[_g];
			++_g;
			if(!n.isKnown) {
				n.isKnown = true;
				note = n;
				break;
			}
		}
		this.game.timeline.update();
		this.game.player.game.log("You have gained a major clue for event " + this.num + ".",_$TextColor.COLOR_TIMELINE);
		this.game.player.game.log(note.text,_$TextColor.COLOR_TIMELINE);
		var idx = -1;
		var _g11 = 0;
		var _g2 = this.notes.length;
		while(_g11 < _g2) {
			var i = _g11++;
			if(this.notes[i] == note) idx = i;
		}
		if(this.info.onLearnNote != null) this.info.onLearnNote(this.game,idx);
		return true;
	}
	,learnLocation: function() {
		if(this.location == null || this.locationKnown) return false;
		this.locationKnown = true;
		this.game.timeline.update();
		this.game.player.game.log("You have gained the location for event " + this.num + ".",_$TextColor.COLOR_TIMELINE);
		if(this.info.onLearnLocation != null) this.info.onLearnLocation(this.game);
		return true;
	}
	,npcNamesOrJobsKnown: function() {
		var _g = 0;
		var _g1 = this.npc;
		while(_g < _g1.length) {
			var n = _g1[_g];
			++_g;
			if(!n.nameKnown && !n.jobKnown) return false;
		}
		return true;
	}
	,npcFullyKnown: function() {
		var _g = 0;
		var _g1 = this.npc;
		while(_g < _g1.length) {
			var n = _g1[_g];
			++_g;
			if(!n.nameKnown || !n.jobKnown || !n.areaKnown || !n.statusKnown) return false;
		}
		return true;
	}
	,npcSomethingKnown: function() {
		var _g = 0;
		var _g1 = this.npc;
		while(_g < _g1.length) {
			var n = _g1[_g];
			++_g;
			if(!n.nameKnown && !n.jobKnown && !n.areaKnown && !n.statusKnown) continue;
			return true;
		}
		return false;
	}
	,npcCanResearch: function() {
		var _g = 0;
		var _g1 = this.npc;
		while(_g < _g1.length) {
			var n = _g1[_g];
			++_g;
			if(!n.nameKnown && !n.jobKnown && !n.areaKnown && !n.statusKnown) continue; else if(n.nameKnown && n.jobKnown && n.areaKnown && n.statusKnown) continue;
			return true;
		}
		return false;
	}
	,notesSomethingKnown: function() {
		var _g = 0;
		var _g1 = this.notes;
		while(_g < _g1.length) {
			var n = _g1[_g];
			++_g;
			if(n.isKnown || n.clues > 0) return true;
		}
		return false;
	}
	,notesKnown: function() {
		var _g = 0;
		var _g1 = this.notes;
		while(_g < _g1.length) {
			var n = _g1[_g];
			++_g;
			if(!n.isKnown) return false;
		}
		return true;
	}
	,toString: function() {
		return "event " + this.index + ", num: " + this.num + ", id: " + this.id + ", " + this.name + "\n" + "  locationKnown: " + Std.string(this.locationKnown) + "\n" + "  location: { " + Std.string(this.location) + " }\n" + "  notes: " + Std.string(this.notes) + "\n" + "  NPCs: " + Std.string(this.npc) + "\n";
	}
	,__class__: scenario_Event
};
var scenario_NPC = function(g) {
	this.game = g;
	this.name = const_NameConst.getHumanName();
	this.nameKnown = false;
	this.type = "civilian";
	this.job = null;
	this.jobKnown = false;
	this.area = null;
	this.areaKnown = false;
	this.isDead = false;
	this.statusKnown = false;
	this.memoryKnown = false;
	this.event = null;
	this.ai = null;
	this.id = scenario_NPC._maxID++;
};
$hxClasses["scenario.NPC"] = scenario_NPC;
scenario_NPC.__name__ = ["scenario","NPC"];
scenario_NPC.prototype = {
	game: null
	,name: null
	,nameKnown: null
	,type: null
	,job: null
	,jobKnown: null
	,area: null
	,areaKnown: null
	,isDead: null
	,statusKnown: null
	,memoryKnown: null
	,event: null
	,ai: null
	,id: null
	,research: function() {
		if(!this.nameKnown) {
			this.nameKnown = true;
			this.game.player.game.log("You have found out a name: " + this.name + ".",_$TextColor.COLOR_TIMELINE);
			return true;
		}
		if(!this.jobKnown) {
			this.jobKnown = true;
			this.game.player.game.log("You have found out the job and photo of " + this.name + ".",_$TextColor.COLOR_TIMELINE);
			return true;
		}
		if(!this.areaKnown) {
			this.areaKnown = true;
			this.game.player.game.log("You have found out the location of " + this.name + ".",_$TextColor.COLOR_TIMELINE);
			return true;
		}
		if(!this.statusKnown) {
			this.statusKnown = true;
			this.game.player.game.log("You have found out that " + this.name + " is " + (this.isDead?"dead":"alive") + ".",_$TextColor.COLOR_TIMELINE);
			return true;
		}
		return false;
	}
	,toString: function() {
		return "{ " + this.name + ", " + this.job + ", (" + this.area.x + "," + this.area.y + "), dead: " + Std.string(this.isDead) + ", statusKnown: " + Std.string(this.statusKnown) + ", event: " + (this.event != null?this.event.id:"null") + " }";
	}
	,__class__: scenario_NPC
};
var scenario_GoalsAlienCrashLanding = function() { };
$hxClasses["scenario.GoalsAlienCrashLanding"] = scenario_GoalsAlienCrashLanding;
scenario_GoalsAlienCrashLanding.__name__ = ["scenario","GoalsAlienCrashLanding"];
var scenario_Location = function(vid) {
	this.id = vid;
	this.hasName = false;
	this.name = "-";
};
$hxClasses["scenario.Location"] = scenario_Location;
scenario_Location.__name__ = ["scenario","Location"];
scenario_Location.prototype = {
	id: null
	,name: null
	,hasName: null
	,area: null
	,toString: function() {
		return "id: " + this.id + ", name: " + this.name + ", hasName: " + Std.string(this.hasName) + ", (" + this.area.x + "," + this.area.y + ")";
	}
	,__class__: scenario_Location
};
var scenario_Scenario = function() {
	this.name = "unnamed scenario";
	this.startEvent = "";
	this.playerStartEvent = "";
	this.defaultAlertness = 0;
	this.defaultInterest = 0;
	this.names = new haxe_ds_StringMap();
	this.flow = new haxe_ds_StringMap();
	this.goals = new haxe_ds_EnumValueMap();
};
$hxClasses["scenario.Scenario"] = scenario_Scenario;
scenario_Scenario.__name__ = ["scenario","Scenario"];
scenario_Scenario.prototype = {
	name: null
	,startEvent: null
	,playerStartEvent: null
	,defaultInterest: null
	,defaultAlertness: null
	,names: null
	,flow: null
	,goals: null
	,__class__: scenario_Scenario
};
var scenario_ScenarioAlienCrashLanding = function() {
	scenario_Scenario.call(this);
	this.name = "Alien Crash Landing";
	this.startEvent = "alienMission";
	this.playerStartEvent = "parasiteTransportation";
	this.defaultAlertness = 50;
	this.defaultInterest = 10;
	this.goals = scenario_GoalsAlienCrashLanding.map;
	var _g = new haxe_ds_StringMap();
	_g.set("facility1",["%tree1% %geo1% %lab1%"]);
	_g.set("facility2",["%tree1% %geo1% %lab1%"]);
	_g.set("facility3",["%tree1% %geo1% %lab1%"]);
	_g.set("base1",["Area %num1%%num2%","%baseA1% %baseB1%"]);
	_g.set("shipCode",["OBJ-%num1%%num2%","UFO-%num1%%num2%-%greek1%","SAUCE-%num1%%num1%"]);
	_g.set("alienCode",["ET-%letter1%%num1%%num2%","ETO-%num1%%num2%%letter1%","XBO-%num1%%num2%"]);
	_g.set("parasiteCode",["AO-%letter1%%letter2%%num1%%num2%","OUO-%num1%%num2%","LF-%greek1%-%greek2%"]);
	this.names = _g;
	var _g1 = new haxe_ds_StringMap();
	_g1.set("alienMission",{ name : "alien mission", next : "shipSpottedCiv", isHidden : true, init : function(timeline) {
		var tmp_0 = "abduction";
		var tmp_1 = "infiltration";
		var tmp_2 = "research";
		var type = "abduction";
		timeline.setVar("alienMissionType",type);
		var ev = timeline._eventsMap.get("alienMission");
		ev.notes[0].text += " The mission type was " + type + ".";
	}, notes : ["You have received your mission details at the HQ."]});
	var value = { name : "alien ship spotted by civilians", next : "shipSpottedMil", notes : ["UFO was spotted by civilian witnesses.","Media has published some reports about UFO sighting.","Ufologists have recorded the information about UFO sighting.","Independent experts and conspiracy theorists may have some knowledge about the events."], location : { type : _$AreaType.AREA_GROUND}, npc : (function($this) {
		var $r;
		var _g2 = new haxe_ds_StringMap();
		if(__map_reserved.civilian != null) _g2.setReserved("civilian",20); else _g2.h["civilian"] = 20;
		if(__map_reserved["reporter:civilian"] != null) _g2.setReserved("reporter:civilian",5); else _g2.h["reporter:civilian"] = 5;
		if(__map_reserved["ufologist:civilian"] != null) _g2.setReserved("ufologist:civilian",5); else _g2.h["ufologist:civilian"] = 5;
		if(__map_reserved["conspirologist:civilian"] != null) _g2.setReserved("conspirologist:civilian",3); else _g2.h["conspirologist:civilian"] = 3;
		$r = _g2;
		return $r;
	}(this))};
	if(__map_reserved.shipSpottedCiv != null) _g1.setReserved("shipSpottedCiv",value); else _g1.h["shipSpottedCiv"] = value;
	var value1 = { name : "alien ship spotted by military", next : "dogfight", notes : ["Radars from a military base have spotted the moving signature.","Radio requests were left unanswered.","An interceptor was scrambled."], location : { type : _$AreaType.AREA_MILITARY_BASE, id : "base1", name : "%base1%", near : "shipSpottedCiv"}, npc : (function($this) {
		var $r;
		var _g3 = new haxe_ds_StringMap();
		if(__map_reserved.soldier != null) _g3.setReserved("soldier",20); else _g3.h["soldier"] = 20;
		$r = _g3;
		return $r;
	}(this))};
	if(__map_reserved.shipSpottedMil != null) _g1.setReserved("shipSpottedMil",value1); else _g1.h["shipSpottedMil"] = value1;
	var value2 = { name : "dogfight with alien ship", nextOR : (function($this) {
		var $r;
		var _g4 = new haxe_ds_StringMap();
		if(__map_reserved.shipLanded != null) _g4.setReserved("shipLanded",30); else _g4.h["shipLanded"] = 30;
		if(__map_reserved.shipShotDown != null) _g4.setReserved("shipShotDown",70); else _g4.h["shipShotDown"] = 70;
		$r = _g4;
		return $r;
	}(this)), notes : ["The interceptor pilot described the dogfight in detail.","A veteran pilot, he said it was unlike anything he's ever seen before.","The plane suffered heavy damage in a fight.","The pilot is on psychic evaluation and extended leave."], npc : (function($this) {
		var $r;
		var _g5 = new haxe_ds_StringMap();
		if(__map_reserved.soldier != null) _g5.setReserved("soldier",5); else _g5.h["soldier"] = 5;
		$r = _g5;
		return $r;
	}(this))};
	if(__map_reserved.dogfight != null) _g1.setReserved("dogfight",value2); else _g1.h["dogfight"] = value2;
	var value3 = { name : "alien ship safely landed", next : "shipLandingInvestigation", init : function(timeline1) {
		timeline1.setVar("shipLanded",true);
	}, notes : ["The pilot did not manage to shoot UFO down but it was tracked by a second plane until it landed."], location : { near : "shipSpottedCiv", interest : 25}, npc : (function($this) {
		var $r;
		var _g6 = new haxe_ds_StringMap();
		if(__map_reserved.soldier != null) _g6.setReserved("soldier",10); else _g6.h["soldier"] = 10;
		$r = _g6;
		return $r;
	}(this))};
	if(__map_reserved.shipLanded != null) _g1.setReserved("shipLanded",value3); else _g1.h["shipLanded"] = value3;
	var value4 = { name : "alien ship shot down by military", next : "crashLandingInvestigation", init : function(timeline2) {
		timeline2.setVar("shipShotDown",true);
	}, notes : ["The pilot managed to shoot down the UFO."], location : { near : "shipSpottedCiv", interest : 25}, npc : (function($this) {
		var $r;
		var _g7 = new haxe_ds_StringMap();
		if(__map_reserved.soldier != null) _g7.setReserved("soldier",10); else _g7.h["soldier"] = 10;
		$r = _g7;
		return $r;
	}(this))};
	if(__map_reserved.shipShotDown != null) _g1.setReserved("shipShotDown",value4); else _g1.h["shipShotDown"] = value4;
	var value5 = { name : "alien ship landing investigation", next : "alienShipTransportation", notes : ["The military personnel formed a cordon surrounding the scene.","Agents proceeded to study the landing scene and gather evidence.","The agents made the decision to move all objects on the scene to a secure facility."], location : { sameAs : "shipLanded"}, npc : (function($this) {
		var $r;
		var _g8 = new haxe_ds_StringMap();
		if(__map_reserved.soldier != null) _g8.setReserved("soldier",20); else _g8.h["soldier"] = 20;
		if(__map_reserved.agent != null) _g8.setReserved("agent",5); else _g8.h["agent"] = 5;
		$r = _g8;
		return $r;
	}(this))};
	if(__map_reserved.shipLandingInvestigation != null) _g1.setReserved("shipLandingInvestigation",value5); else _g1.h["shipLandingInvestigation"] = value5;
	var value6 = { name : "alien ship crash landing investigation", next : "alienShipTransportation", notes : ["The military personnel formed a cordon surrounding the scene.","Agents proceeded to study the scene and gather evidence.","The agents made the decision to move all evidence recovered on the scene to a secure facility."], location : { sameAs : "shipShotDown"}, npc : (function($this) {
		var $r;
		var _g9 = new haxe_ds_StringMap();
		if(__map_reserved.soldier != null) _g9.setReserved("soldier",20); else _g9.h["soldier"] = 20;
		if(__map_reserved.agent != null) _g9.setReserved("agent",5); else _g9.h["agent"] = 5;
		$r = _g9;
		return $r;
	}(this))};
	if(__map_reserved.crashLandingInvestigation != null) _g1.setReserved("crashLandingInvestigation",value6); else _g1.h["crashLandingInvestigation"] = value6;
	var value7 = { name : "alien ship transported to secret facility", next : "alienShipStudy", notes : ["Everything recovered from the scene was successfully transported to %facility1%","The largest object has received a speficic codename for future reference: %shipCode%."], npc : (function($this) {
		var $r;
		var _g10 = new haxe_ds_StringMap();
		if(__map_reserved.agent != null) _g10.setReserved("agent",5); else _g10.h["agent"] = 5;
		$r = _g10;
		return $r;
	}(this))};
	if(__map_reserved.alienShipTransportation != null) _g1.setReserved("alienShipTransportation",value7); else _g1.h["alienShipTransportation"] = value7;
	var value8 = { name : "study of an alien ship", next : "alienCaptureMission", notes : ["Studying %shipCode% has proved to be extremely difficult.","The technology that produced %shipCode% is much more advanced than the one available to human civilization.","Strange metallic alloy that forms the outer layer of %shipCode% is unknown to science.","Scientists have been unable to determine if it is indeed a flying vessel."], location : { type : _$AreaType.AREA_FACILITY, name : "%facility1%"}, npc : (function($this) {
		var $r;
		var _g11 = new haxe_ds_StringMap();
		if(__map_reserved["researcher:civilian"] != null) _g11.setReserved("researcher:civilian",10); else _g11.h["researcher:civilian"] = 10;
		if(__map_reserved.agent != null) _g11.setReserved("agent",5); else _g11.h["agent"] = 5;
		$r = _g11;
		return $r;
	}(this)), onLearnLocation : function(game) {
		game.goals.complete(_$Goal.SCENARIO_ALIEN_FIND_SHIP);
	}};
	if(__map_reserved.alienShipStudy != null) _g1.setReserved("alienShipStudy",value8); else _g1.h["alienShipStudy"] = value8;
	var value9 = { name : "alien capture mission", nextOR : (function($this) {
		var $r;
		var _g12 = new haxe_ds_StringMap();
		if(__map_reserved.alienCaptured != null) _g12.setReserved("alienCaptured",30); else _g12.h["alienCaptured"] = 30;
		if(__map_reserved.alienKilled != null) _g12.setReserved("alienKilled",70); else _g12.h["alienKilled"] = 70;
		$r = _g12;
		return $r;
	}(this)), notes : ["It was determined that %shipCode% could have pilot and/or crew onboard.","Multiple teams of agents were sent to capture or kill the pilot.","The primary goal of the mission was capturing the pilot alive."], location : { near : "shipSpottedCiv"}, npc : (function($this) {
		var $r;
		var _g13 = new haxe_ds_StringMap();
		if(__map_reserved.agent != null) _g13.setReserved("agent",10); else _g13.h["agent"] = 10;
		$r = _g13;
		return $r;
	}(this))};
	if(__map_reserved.alienCaptureMission != null) _g1.setReserved("alienCaptureMission",value9); else _g1.h["alienCaptureMission"] = value9;
	var value10 = { name : "live alien was captured", next : "liveAlienTransportation", notes : ["Fortunately, the %shipCode% pilot survived the capture mission.","The pilot was not human.","The pilot was a grey humanoid of unknown origin."], location : { sameAs : "alienCaptureMission"}, npc : (function($this) {
		var $r;
		var _g14 = new haxe_ds_StringMap();
		if(__map_reserved.agent != null) _g14.setReserved("agent",5); else _g14.h["agent"] = 5;
		$r = _g14;
		return $r;
	}(this))};
	if(__map_reserved.alienCaptured != null) _g1.setReserved("alienCaptured",value10); else _g1.h["alienCaptured"] = value10;
	var value11 = { name : "alien was killed during capture attempt", next : "deadAlienTransportation", notes : ["Unfortunately, during the capture attempt the %shipCode% pilot was shot dead.","The pilot was not human.","The pilot was a grey humanoid of unknown origin."], location : { sameAs : "alienCaptureMission"}, npc : (function($this) {
		var $r;
		var _g15 = new haxe_ds_StringMap();
		if(__map_reserved.agent != null) _g15.setReserved("agent",5); else _g15.h["agent"] = 5;
		$r = _g15;
		return $r;
	}(this))};
	if(__map_reserved.alienKilled != null) _g1.setReserved("alienKilled",value11); else _g1.h["alienKilled"] = value11;
	var value12 = { name : "live alien was tranported to secret facility", next : "liveAlienStudy", init : function(timeline3) {
		timeline3.setVar("alienIsAlive",1);
	}, notes : ["The captured organism was transported to %facility2% for further study.","Captured organism has received a special code: %alienCode%"], npc : (function($this) {
		var $r;
		var _g16 = new haxe_ds_StringMap();
		if(__map_reserved.agent != null) _g16.setReserved("agent",2); else _g16.h["agent"] = 2;
		$r = _g16;
		return $r;
	}(this))};
	if(__map_reserved.liveAlienTransportation != null) _g1.setReserved("liveAlienTransportation",value12); else _g1.h["liveAlienTransportation"] = value12;
	var value13 = { name : "alien remains were transported to secret facility", next : "deadAlienStudy", init : function(timeline4) {
		timeline4.setVar("alienIsDead",1);
	}, notes : ["The acquired cadaver was transported to %facility2% for further study.","The body of possibly extraterrestrial origins has received a special code: %alienCode%."], npc : (function($this) {
		var $r;
		var _g17 = new haxe_ds_StringMap();
		if(__map_reserved.agent != null) _g17.setReserved("agent",2); else _g17.h["agent"] = 2;
		$r = _g17;
		return $r;
	}(this))};
	if(__map_reserved.deadAlienTransportation != null) _g1.setReserved("deadAlienTransportation",value13); else _g1.h["deadAlienTransportation"] = value13;
	var value14 = { name : "study of a live alien", next : "parasiteRemoval", notes : ["Preliminary examinations confirmed the extraterrestrial origins of %alienCode% organism.","Studies have shown that %alienCode% actually consists of two separate organisms.","One of the organisms is parasitic in nature. It has received a unique codename: %parasiteCode%.","It is unclear whether the host organism of %alienCode% has any intelligence."], location : { id : "facility2", type : _$AreaType.AREA_FACILITY, name : "%facility2%"}, npc : (function($this) {
		var $r;
		var _g18 = new haxe_ds_StringMap();
		if(__map_reserved["researcher:civilian"] != null) _g18.setReserved("researcher:civilian",10); else _g18.h["researcher:civilian"] = 10;
		if(__map_reserved.agent != null) _g18.setReserved("agent",2); else _g18.h["agent"] = 2;
		$r = _g18;
		return $r;
	}(this)), onLearnNote : function(game1,noteID) {
		game1.goals.receive(_$Goal.SCENARIO_ALIEN_FIND_SHIP);
		game1.goals.receive(_$Goal.SCENARIO_ALIEN_SAVE_ALIEN);
	}};
	if(__map_reserved.liveAlienStudy != null) _g1.setReserved("liveAlienStudy",value14); else _g1.h["liveAlienStudy"] = value14;
	var value15 = { name : "study of alien remains", next : "parasiteRemoval", notes : ["Preliminary examinations confirmed the extraterrestrial origins of %alienCode% cadaver.","Studies have shown that %alienCode% remains actually consist of two separate organisms.","One of the organisms is still functioning and is parasitic in nature.","The parasite organism has received a unique codename: %parasiteCode%.","It is unclear whether the host organism of %alienCode% had any intelligence."], location : { id : "facility2", type : _$AreaType.AREA_FACILITY, name : "%facility2%"}, npc : (function($this) {
		var $r;
		var _g19 = new haxe_ds_StringMap();
		if(__map_reserved["researcher:civilian"] != null) _g19.setReserved("researcher:civilian",5); else _g19.h["researcher:civilian"] = 5;
		$r = _g19;
		return $r;
	}(this)), onLearnNote : function(game2,noteID1) {
		game2.goals.receive(_$Goal.SCENARIO_ALIEN_FIND_SHIP);
	}};
	if(__map_reserved.deadAlienStudy != null) _g1.setReserved("deadAlienStudy",value15); else _g1.h["deadAlienStudy"] = value15;
	var value16 = { name : "parasite removal", next : "parasiteTransportation", notes : ["The decision has been made to try to separate organisms surgically.","Separation was successful and %parasiteCode% was scheduled for transportation to %facility3%.","The specialist performing the operation speculated that separation was a violent shock for both %alienCode% and %parasiteCode% nervous systems and mental capacity."], location : { id : "facility2", type : _$AreaType.AREA_FACILITY, name : "%facility2%"}, npc : (function($this) {
		var $r;
		var _g20 = new haxe_ds_StringMap();
		if(__map_reserved["researcher:civilian"] != null) _g20.setReserved("researcher:civilian",5); else _g20.h["researcher:civilian"] = 5;
		$r = _g20;
		return $r;
	}(this))};
	if(__map_reserved.parasiteRemoval != null) _g1.setReserved("parasiteRemoval",value16); else _g1.h["parasiteRemoval"] = value16;
	var value17 = { name : "parasite transportation", notes : ["During %parasiteCode% transportation to %facility3% the containment protocol has been breached and the specimen managed to escape.","Current location of %parasiteCode% specimen is unknown.","Teams of field specialists have been scrambled to the area."], location : { interest : 50}, npc : (function($this) {
		var $r;
		var _g21 = new haxe_ds_StringMap();
		if(__map_reserved.agent != null) _g21.setReserved("agent",2); else _g21.h["agent"] = 2;
		$r = _g21;
		return $r;
	}(this))};
	if(__map_reserved.parasiteTransportation != null) _g1.setReserved("parasiteTransportation",value17); else _g1.h["parasiteTransportation"] = value17;
	this.flow = _g1;
};
$hxClasses["scenario.ScenarioAlienCrashLanding"] = scenario_ScenarioAlienCrashLanding;
scenario_ScenarioAlienCrashLanding.__name__ = ["scenario","ScenarioAlienCrashLanding"];
scenario_ScenarioAlienCrashLanding.__super__ = scenario_Scenario;
scenario_ScenarioAlienCrashLanding.prototype = $extend(scenario_Scenario.prototype,{
	__class__: scenario_ScenarioAlienCrashLanding
});
var scenario_Timeline = function(g) {
	this.game = g;
	this._eventsMap = new haxe_ds_StringMap();
	this._eventsList = [];
	this._locationsList = new List();
	this._variables = new haxe_ds_StringMap();
	this._names = new haxe_ds_StringMap();
};
$hxClasses["scenario.Timeline"] = scenario_Timeline;
scenario_Timeline.__name__ = ["scenario","Timeline"];
scenario_Timeline.prototype = {
	game: null
	,scenario: null
	,_eventsMap: null
	,_eventsList: null
	,_locationsList: null
	,_names: null
	,_variables: null
	,iterator: function() {
		return HxOverrides.iter(this._eventsList);
	}
	,learnClue: function(event,isPhysical) {
		var e = event;
		if(Std.random(100) < 30) {
			var index = event.index;
			var mod;
			if(Std.random(2) == 0) mod = 1; else mod = -1;
			mod = -1;
			while(true) {
				index += mod;
				if(index < 0 || index >= this._eventsList.length) break;
				if(this._eventsList[index].isHidden) continue;
				e = this._eventsList[index];
				break;
			}
		}
		var ret = false;
		if(!Lambda.has(this.game.goals._listCompleted,_$Goal.GOAL_LEARN_CLUE)) {
			ret = e.learnClue();
			if(ret) this.game.goals.complete(_$Goal.GOAL_LEARN_CLUE);
			return ret;
		}
		var t = null;
		if(e != event && e.location != null && !e.locationKnown) t = "location"; else {
			var types = [];
			var weights = [];
			if(!e.notesKnown()) {
				if(isPhysical) {
					types.push("note");
					weights.push(5);
				}
				types.push("clue");
				weights.push(30);
			}
			if(e.location != null && !e.locationKnown) {
				types.push("location");
				weights.push(20);
			}
			if(!e.npcFullyKnown()) {
				types.push("npc");
				weights.push(45);
			}
			var max = 0;
			var _g = 0;
			while(_g < weights.length) {
				var w = weights[_g];
				++_g;
				max += w;
			}
			var rnd = Std.random(max);
			var cnt = 0;
			var _g1 = 0;
			var _g2 = weights.length;
			while(_g1 < _g2) {
				var i = _g1++;
				cnt += weights[i];
				if(rnd < cnt) {
					t = types[i];
					break;
				}
			}
		}
		if(t == "location") ret = e.learnLocation(); else if(t == "clue") ret = e.learnClue(); else if(t == "npc") ret = e.learnNPC(); else if(t == "note") ret = e.learnNote();
		return ret;
	}
	,unlock: function() {
		var e = this._eventsMap.get(this.scenario.playerStartEvent);
		e.locationKnown = true;
		this.update();
	}
	,update: function() {
		var n = 1;
		var _g = 0;
		var _g1 = this._eventsList;
		while(_g < _g1.length) {
			var event = _g1[_g];
			++_g;
			if(event.locationKnown || event.npcSomethingKnown() || event.notesSomethingKnown()) event.num = n++;
		}
	}
	,parseNames: function() {
		var $it0 = this.scenario.names.keys();
		while( $it0.hasNext() ) {
			var key = $it0.next();
			var tmp = this.scenario.names.get(key);
			var name = tmp[Std.random(tmp.length)];
			name = const_NameConst.generate(name);
			this._names.set(key,name);
		}
	}
	,initLocation: function(eventID,eventInfo,info,event) {
		if(info == null) return null;
		if(info.id == null) info.id = eventID;
		var loc = this.getLocation(info.id);
		if(loc != null) {
			loc.area.events.push(event);
			return loc;
		}
		if(info.sameAs != null) {
			var tmp = this._eventsMap.get(info.sameAs);
			if(tmp.location == null) throw new js__$Boot_HaxeError("" + Std.string(info) + ": event " + info.sameAs + " does not have location.");
			tmp.location.area.events.push(event);
			return tmp.location;
		}
		var location = new scenario_Location(info.id);
		if(info.name != null) {
			location.name = this.parse(info.name);
			location.hasName = true;
		}
		if(info.type == null) {
			var tmp1 = [_$AreaType.AREA_CITY_LOW,_$AreaType.AREA_CITY_MEDIUM,_$AreaType.AREA_CITY_HIGH];
			info.type = tmp1[Std.random(tmp1.length)];
		}
		var region = this.game.world._list.h[0];
		var area = null;
		if(info.near != null) {
			var tmp2 = this._eventsMap.get(info.near);
			area = region.getRandomAround(tmp2.location.area,{ minRadius : 2, maxRadius : 5});
			area.setType(info.type);
		}
		area = region.getRandomWithType(info.type,true);
		if(area == null) area = region.spawnArea(info.type,true);
		location.area = area;
		area.events.push(event);
		area.set_alertness(info.alertness != null?info.alertness:this.scenario.defaultAlertness);
		area.set_interest(info.interest != null?info.interest:this.scenario.defaultInterest);
		if(location.hasName) area.name = location.name;
		this._locationsList.add(location);
		return location;
	}
	,initNPC: function(eventID,eventInfo,npc,event) {
		var total = 0;
		var $it0 = new haxe_ds__$StringMap_StringMapIterator(npc,npc.arrayKeys());
		while( $it0.hasNext() ) {
			var n = $it0.next();
			total += n;
		}
		var $it1 = npc.keys();
		while( $it1.hasNext() ) {
			var typeExt = $it1.next();
			var max;
			max = __map_reserved[typeExt] != null?npc.getReserved(typeExt):npc.h[typeExt];
			if(max > 3) max = (max / 2 | 0) + Std.random(max / 2 | 0);
			var job = typeExt;
			var type = typeExt;
			if(typeExt.indexOf(":") >= 0) {
				var len = typeExt.indexOf(":");
				job = HxOverrides.substr(typeExt,0,len);
				var pos = typeExt.indexOf(":") + 1;
				type = HxOverrides.substr(typeExt,pos,null);
			}
			var _g = 0;
			while(_g < max) {
				var i = _g++;
				var npc1 = new scenario_NPC(this.game);
				npc1.event = event;
				npc1.job = job;
				npc1.type = type;
				var region = this.game.world._list.h[0];
				if(npc1.type == "soldier") npc1.area = region.getRandomWithType(_$AreaType.AREA_MILITARY_BASE,false); else if(event.location != null) npc1.area = region.getRandomAround(event.location.area,{ isInhabited : true, minRadius : 1, maxRadius : 5}); else {
					var tmp = [_$AreaType.AREA_CITY_LOW,_$AreaType.AREA_CITY_MEDIUM,_$AreaType.AREA_CITY_HIGH];
					var type1 = tmp[Std.random(tmp.length)];
					npc1.area = region.getRandomWithType(type1,false);
				}
				npc1.area.npc.add(npc1);
				if(total > 3) if(Std.random(100) < 50) npc1.isDead = true; else npc1.isDead = false;
				event.npc.push(npc1);
			}
		}
	}
	,init: function() {
		this.scenario = new scenario_ScenarioAlienCrashLanding();
		this.parseNames();
		var n = 1;
		var curID = this.scenario.startEvent;
		var curInfo = this.scenario.flow.get(this.scenario.startEvent);
		while(true) {
			var event = new scenario_Event(this.game,curID,this._eventsList.length);
			event.info = curInfo;
			event.num = n++;
			event.name = curInfo.name;
			event.isHidden = curInfo.isHidden == true;
			this._eventsMap.set(curID,event);
			this._eventsList.push(event);
			if(curInfo.notes != null) {
				var _g = 0;
				var _g1 = curInfo.notes;
				while(_g < _g1.length) {
					var n1 = _g1[_g];
					++_g;
					event.notes.push({ text : this.parse(n1), isKnown : false, clues : 0});
				}
			}
			event.location = this.initLocation(curID,curInfo,curInfo.location,event);
			if(curInfo.npc != null) this.initNPC(curID,curInfo,curInfo.npc,event);
			if(curInfo.init != null) curInfo.init(this);
			if(curInfo.next == null && curInfo.nextOR == null) break;
			if(curInfo.next != null) curID = curInfo.next; else if(curInfo.nextOR != null) {
				var sum = 0;
				var $it0 = curInfo.nextOR.iterator();
				while( $it0.hasNext() ) {
					var ch = $it0.next();
					sum += ch;
				}
				var offset = 0;
				var rnd = Std.random(sum);
				var nextID = "";
				var $it1 = curInfo.nextOR.keys();
				while( $it1.hasNext() ) {
					var key = $it1.next();
					var val = curInfo.nextOR.get(key);
					if(rnd < offset + val) {
						nextID = key;
						break;
					}
					offset += val;
				}
				if(curID == nextID) throw new js__$Boot_HaxeError("Could not pick a random next event in: " + curInfo.nextOR.toString());
				curID = nextID;
			}
			curInfo = this.scenario.flow.get(curID);
			if(curInfo == null) throw new js__$Boot_HaxeError("No such event in scenario: " + curID);
		}
		this.game.info("Timeline variables: " + this._variables.toString());
	}
	,parse: function(s) {
		var $it0 = this._names.keys();
		while( $it0.hasNext() ) {
			var n = $it0.next();
			if(s.indexOf(n) >= 0) s = StringTools.replace(s,"%" + n + "%",this._names.get(n));
		}
		return s;
	}
	,getLocation: function(id) {
		var _g_head = this._locationsList.h;
		var _g_val = null;
		while(_g_head != null) {
			var l;
			l = (function($this) {
				var $r;
				_g_val = _g_head[0];
				_g_head = _g_head[1];
				$r = _g_val;
				return $r;
			}(this));
			if(l.id == id) return l;
		}
		return null;
	}
	,getRandomEvent: function() {
		var arr = Lambda.array(this._eventsMap);
		return arr[Std.random(arr.length)];
	}
	,getEventByIndex: function(idx) {
		return this._eventsList[idx];
	}
	,getEvent: function(id) {
		return this._eventsMap.get(id);
	}
	,setVar: function(key,value) {
		var value1 = value;
		this._variables.set(key,value1);
	}
	,getStringVar: function(key) {
		return this._variables.get(key);
	}
	,getIntVar: function(key) {
		var val = this._variables.get(key);
		if(val != null) return val; else return 0;
	}
	,getDynamicVar: function(key) {
		return this._variables.get(key);
	}
	,getStartEvent: function() {
		return this._eventsMap.get(this.scenario.playerStartEvent);
	}
	,getGoals: function() {
		return this.scenario.goals;
	}
	,__class__: scenario_Timeline
};
function $iterator(o) { if( o instanceof Array ) return function() { return HxOverrides.iter(o); }; return typeof(o.iterator) == 'function' ? $bind(o,o.iterator) : o.iterator; }
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
if(Array.prototype.indexOf) HxOverrides.indexOf = function(a,o,i) {
	return Array.prototype.indexOf.call(a,o,i);
};
$hxClasses.Math = Math;
String.prototype.__class__ = $hxClasses.String = String;
String.__name__ = ["String"];
$hxClasses.Array = Array;
Array.__name__ = ["Array"];
Date.prototype.__class__ = $hxClasses.Date = Date;
Date.__name__ = ["Date"];
var Int = $hxClasses.Int = { __name__ : ["Int"]};
var Dynamic = $hxClasses.Dynamic = { __name__ : ["Dynamic"]};
var Float = $hxClasses.Float = Number;
Float.__name__ = ["Float"];
var Bool = $hxClasses.Bool = Boolean;
Bool.__ename__ = ["Bool"];
var Class = $hxClasses.Class = { __name__ : ["Class"]};
var Enum = { };
var __map_reserved = {}
var ArrayBuffer = $global.ArrayBuffer || js_html_compat_ArrayBuffer;
if(ArrayBuffer.prototype.slice == null) ArrayBuffer.prototype.slice = js_html_compat_ArrayBuffer.sliceImpl;
var DataView = $global.DataView || js_html_compat_DataView;
var Uint8Array = $global.Uint8Array || js_html_compat_Uint8Array._new;
var this1;
this1 = new Uint32Array(256);
lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16 = this1;
var _g = 0;
while(_g < 256) {
	var i = _g++;
	var val = Math.ceil(i * 257.003921568627447);
	lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[i] = val;
}
var this2;
this2 = new Uint8Array(510);
lime_math_color__$RGBA_RGBA_$Impl_$.__clamp = this2;
var _g1 = 0;
while(_g1 < 255) {
	var i1 = _g1++;
	lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[i1] = i1;
}
var _g11 = 255;
var _g2 = 511;
while(_g11 < _g2) {
	var i2 = _g11++;
	lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[i2] = 255;
}
lime_system_CFFI.available = false;
lime_system_CFFI.enabled = false;
lime_utils_Log.level = 3;
if(typeof console == "undefined") {
	console = {}
}
if(console.log == null) console.log = function() {
};
openfl_ui_Multitouch.maxTouchPoints = 2;
openfl_ui_Multitouch.supportedGestures = null;
openfl_ui_Multitouch.supportsGestureEvents = false;
openfl_ui_Multitouch.inputMode = 2;
openfl_display_DisplayObject.__broadcastEvents = new haxe_ds_StringMap();
openfl_display_DisplayObject.__instanceCount = 0;
openfl_display_DisplayObject.__worldRenderDirty = 0;
openfl_display_DisplayObject.__worldTransformDirty = 0;
AreaView.maxSize = 120;
Const.FONT = "font/Orkney-Regular.otf";
Const.LAYER_MOUSE = 0;
Const.LAYER_UI = 1;
Const.LAYER_EFFECT = 5;
Const.LAYER_AI = 10;
Const.LAYER_OBJECT = 20;
Const.LAYER_TILES = 30;
Const.TILE_WIDTH = 32;
Const.TILE_HEIGHT = 32;
Const.TEXT_COLORS = (function($this) {
	var $r;
	var _g = new haxe_ds_EnumValueMap();
	_g.set(_$TextColor.COLOR_DEFAULT,"#FFFFFF");
	_g.set(_$TextColor.COLOR_DEBUG,"#555555");
	_g.set(_$TextColor.COLOR_ALERT,"#FF0000");
	_g.set(_$TextColor.COLOR_EVOLUTION,"#00FFFF");
	_g.set(_$TextColor.COLOR_AREA,"#00AA00");
	_g.set(_$TextColor.COLOR_ORGAN,"#DDDD00");
	_g.set(_$TextColor.COLOR_WORLD,"#FF9900");
	_g.set(_$TextColor.COLOR_HINT,"#A020F0");
	_g.set(_$TextColor.COLOR_TIMELINE,"#F03378");
	_g.set(_$TextColor.COLOR_MESSAGE,"#1CD450");
	_g.set(_$TextColor.COLOR_GOAL,"#4788FF");
	$r = _g;
	return $r;
}(this));
Const.FRAME_EMPTY = 0;
Const.FRAME_ALERT1 = 1;
Const.FRAME_ALERT2 = 2;
Const.FRAME_ALERT3 = 3;
Const.FRAME_ALERTED = 4;
Const.FRAME_PANIC = 5;
Const.FRAME_PARALYSIS = 6;
Const.FRAME_EVENT_UNKNOWN = 1;
Const.FRAME_EVENT_KNOWN = 2;
Const.FRAME_EVENT_NPC = 3;
Const.FRAME_HABITAT = 4;
Const.FRAME_SEWER_HATCH = 0;
Const.FRAME_PAPER = 1;
Const.FRAME_BOOK = 2;
Const.FRAME_EVENT_OBJECT = 3;
Const.FRAME_PICKUP = 4;
Const.FRAME_PANIC_GAS = 0;
Const.FRAME_PARALYSIS_GAS = 1;
Const.ROW_ALERT = 0;
Const.ROW_REGION_ICON = 1;
Const.ROW_OBJECT = 2;
Const.ROW_EFFECT = 3;
Const.ROW_PARASITE = 4;
Const.ROW_HUMAN = 5;
Const.ROW_DOG = 6;
Const.ROW_CIVILIAN = 7;
Const.ROW_POLICE = 8;
Const.ROW_SOLDIER = 9;
Const.ROW_AGENT = 10;
Const.ROW_BLACKOPS = 11;
Const.ROW_SECURITY = 12;
Const.ROW_BIOMINERAL = 16;
Const.ROW_ASSIMILATION = 17;
Const.FRAME_DEFAULT = 0;
Const.FRAME_BODY = 1;
Const.FRAME_MASK_POSSESSED = 2;
Const.FRAME_MASK_REGION = 3;
Const.TILE_HIDDEN = 0;
Const.TILE_GROUND = 1;
Const.TILE_BUILDING = 2;
Const.TILE_ROCK = 3;
Const.TILE_TREE = 4;
Const.TILE_WALL = 5;
Const.TILE_REGION_ROW = 8;
Const.TILE_REGION_GROUND = 0;
Const.TILE_REGION_CITY_LOW = 1;
Const.TILE_REGION_CITY_MEDIUM = 2;
Const.TILE_REGION_CITY_HIGH = 3;
Const.TILE_REGION_MILITARY_BASE = 4;
Const.TILE_REGION_FACILITY = 5;
Const.TILE_CITY_ROW = 16;
Const.TILE_ROAD = Const.TILE_CITY_ROW;
Const.TILE_WALKWAY = Const.TILE_CITY_ROW + 1;
Const.TILE_CROSSWALKV = Const.TILE_CITY_ROW + 2;
Const.TILE_CROSSWALKH = Const.TILE_CITY_ROW + 3;
Const.TILE_CITY_WALKABLE = [true];
Const.TILE_WALKABLE = [false,true,false,false,false,false,false,false,true,true,true,true,true,true,false,false,true,true,true,true,false,false,false,false];
Const.TILE_TYPE = ["hidden","ground","building","rock","tree","wall"];
Const.TILE_WALKABLE_REGION = [true,true,true,true,true,true];
Const.dirx = [-1,-1,-1,0,0,1,1,1];
Const.diry = [-1,0,1,-1,1,-1,0,1];
Const.PLAYER_ACTIONS = (function($this) {
	var $r;
	var _g = new haxe_ds_StringMap();
	_g.set("attachHost",{ id : "attachHost", type : _$PlayerActionType.ACTION_AREA, name : "Attach To Host", energy : 0});
	_g.set("detach",{ id : "detach", type : _$PlayerActionType.ACTION_AREA, name : "Detach", energy : 0});
	_g.set("hardenGrip",{ id : "hardenGrip", type : _$PlayerActionType.ACTION_AREA, name : "Harden Grip", energy : 5});
	_g.set("invadeHost",{ id : "invadeHost", type : _$PlayerActionType.ACTION_AREA, name : "Invade Host", energy : 10});
	_g.set("reinforceControl",{ id : "reinforceControl", type : _$PlayerActionType.ACTION_AREA, name : "Reinforce Control", energy : 5});
	_g.set("doNothing",{ id : "doNothing", type : _$PlayerActionType.ACTION_AREA, name : "Do Nothing", energy : 0});
	_g.set("leaveHost",{ id : "leaveHost", type : _$PlayerActionType.ACTION_AREA, name : "Leave Host", energy : 0});
	_g.set("learnObject",{ id : "learnObject", type : _$PlayerActionType.ACTION_AREA, name : "Learn About Object", energy : 10});
	_g.set("leaveArea",{ id : "leaveArea", type : _$PlayerActionType.ACTION_AREA, name : "Leave Area", energy : 0});
	_g.set("move",{ id : "move", type : _$PlayerActionType.ACTION_AREA, name : "Movement", energy : 0});
	_g.set("enterArea",{ id : "enterArea", type : _$PlayerActionType.ACTION_REGION, name : "Enter Area", energy : 0});
	$r = _g;
	return $r;
}(this));
openfl_text_Font.__registeredFonts = [];
aPath_Node.adjacent = [[1,0],[1,-1],[0,-1],[-1,-1],[-1,0],[-1,1],[0,1],[1,1]];
ai_AI._maxID = 0;
ai_AI.VIEW_DISTANCE = 10;
ai_AI.HEAR_DISTANCE = 15;
ai_AI.ALERTED_TIMER = 10;
ai_AI.DESPAWN_TIMER = 5;
js_Boot.__toStr = {}.toString;
openfl_geom_Point.__temp = new openfl_geom_Point();
lime_math_Matrix3.__identity = new lime_math_Matrix3();
openfl_geom_Matrix.__identity = new openfl_geom_Matrix();
openfl_geom_Matrix.__matrix3 = new lime_math_Matrix3();
openfl_geom_Matrix.__temp = new openfl_geom_Matrix();
openfl_geom_Rectangle.__temp = new openfl_geom_Rectangle();
com_haxepunk_HXP.VERSION = "2.6.0";
com_haxepunk_HXP.INT_MIN_VALUE = -2147483648;
com_haxepunk_HXP.INT_MAX_VALUE = 2147483647;
com_haxepunk_HXP.blackColor = 0;
com_haxepunk_HXP.frameRate = 0;
com_haxepunk_HXP.rate = 1;
com_haxepunk_HXP.defaultFont = "font/04B_03__.ttf";
com_haxepunk_HXP.camera = new openfl_geom_Point();
com_haxepunk_HXP.tweener = new com_haxepunk_Tweener();
com_haxepunk_HXP.focused = false;
com_haxepunk_HXP.orientations = [];
com_haxepunk_HXP.randomSeed = 0;
com_haxepunk_HXP.log = Reflect.makeVarArgs(function(data) {
	if(com_haxepunk_HXP._console != null) com_haxepunk_HXP._console.log(data);
});
com_haxepunk_HXP.watch = Reflect.makeVarArgs(function(properties) {
	if(com_haxepunk_HXP._console != null) com_haxepunk_HXP._console.watch(properties);
});
com_haxepunk_HXP._bitmap = new haxe_ds_StringMap();
com_haxepunk_HXP._seed = 0;
com_haxepunk_HXP._volume = 1;
com_haxepunk_HXP._pan = 0;
com_haxepunk_HXP.point = new openfl_geom_Point();
com_haxepunk_HXP.point2 = new openfl_geom_Point();
com_haxepunk_HXP.zero = new openfl_geom_Point();
com_haxepunk_HXP.rect = new openfl_geom_Rectangle();
com_haxepunk_HXP.matrix = new openfl_geom_Matrix();
com_haxepunk_HXP.sprite = new openfl_display_Sprite();
com_haxepunk_Entity._EMPTY = new com_haxepunk_Entity();
com_haxepunk_Sfx._sounds = new haxe_ds_StringMap();
com_haxepunk_Sfx._typePlaying = new haxe_ds_StringMap();
com_haxepunk_Sfx._typeTransforms = new haxe_ds_StringMap();
com_haxepunk_debug_Console.BIG_WIDTH_THRESHOLD = 420;
com_haxepunk_graphics_Image.TINTING_MULTIPLY = 0.0;
com_haxepunk_graphics_Image.TINTING_COLORIZE = 1.0;
com_haxepunk_graphics_Image._flips = new haxe_ds_ObjectMap();
com_haxepunk_graphics_Text.tag_re = new EReg("<([^>]+)>([^(?:</)]+)</[^>]+>","g");
com_haxepunk_graphics_atlas_Atlas.smooth = false;
com_haxepunk_graphics_atlas_AtlasData._dataPool = new haxe_ds_StringMap();
com_haxepunk_graphics_atlas_AtlasData._uniqueId = 0;
com_haxepunk_graphics_atlas__$BlendMode_BlendMode_$Impl_$.Add = 0;
com_haxepunk_graphics_atlas__$BlendMode_BlendMode_$Impl_$.Multiply = 9;
com_haxepunk_graphics_atlas__$BlendMode_BlendMode_$Impl_$.Normal = 10;
com_haxepunk_graphics_atlas__$BlendMode_BlendMode_$Impl_$.Screen = 12;
com_haxepunk_graphics_atlas__$BlendMode_BlendMode_$Impl_$.Subtract = 14;
com_haxepunk_graphics_atlas__$HardwareRenderer_TextureShader.VERTEX_SHADER = "// HaxePunk HardwareRenderer texture vertex shader\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\nattribute vec4 aPosition;\nattribute vec4 aColor;\nattribute vec2 aTexCoord;\nvarying vec2 vTexCoord;\nvarying vec4 vColor;\nuniform mat4 uMatrix;\n\nvoid main(void) {\n\tvColor = aColor;\n\tvTexCoord = aTexCoord;\n\tgl_Position = uMatrix * aPosition;\n}";
com_haxepunk_graphics_atlas__$HardwareRenderer_TextureShader.FRAGMENT_SHADER = "// HaxePunk HardwareRenderer texture fragment shader\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\nvarying vec4 vColor;\nvarying vec2 vTexCoord;\nuniform sampler2D uImage0;\n\nvoid main(void) {\n\tvec4 color = texture2D(uImage0, vTexCoord);\n\tif (color.a == 0.0) {\n\t\tgl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\n\t} else {\n\t\tgl_FragColor = vec4(color.rgb / color.a, color.a) * vColor;\n\t}\n}";
com_haxepunk_graphics_atlas__$HardwareRenderer_ColorShader.VERTEX_SHADER = "// HaxePunk HardwareRenderer color vertex shader\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\nattribute vec4 aPosition;\nattribute vec4 aColor;\nvarying vec4 vColor;\nuniform mat4 uMatrix;\n\nvoid main(void) {\n\tvColor = aColor;\n\tgl_Position = uMatrix * aPosition;\n}";
com_haxepunk_graphics_atlas__$HardwareRenderer_ColorShader.FRAGMENT_SHADER = "// HaxePunk HardwareRenderer color fragment shader\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\nvarying vec4 vColor;\n\nvoid main(void) {\n\tgl_FragColor = clamp(vColor, 0.0, 1.0);\n\t//gl_FragColor = vec4(1.0, 1.0, 1.0, 1.0);\n}";
com_haxepunk_graphics_atlas_HardwareRenderer.FLOAT32_BYTES = 4;
com_haxepunk_graphics_atlas_HardwareRenderer._point = new openfl_geom_Point();
com_haxepunk_graphics_atlas_HardwareRenderer._f32 = (function($this) {
	var $r;
	var this1;
	this1 = new Float32Array(16);
	$r = this1;
	return $r;
}(this));
com_haxepunk_masks_Polygon.EPSILON = 0.000000001;
com_haxepunk_masks_Polygon.firstProj = new com_haxepunk_math_Projection();
com_haxepunk_masks_Polygon.secondProj = new com_haxepunk_math_Projection();
com_haxepunk_masks_Polygon.vertical = new openfl_geom_Point(0,1);
com_haxepunk_masks_Polygon.horizontal = new openfl_geom_Point(1,0);
com_haxepunk_masks_SlopedGrid._emptyTile = { type : com_haxepunk_masks_TileType.Empty};
openfl_events_Event.ACTIVATE = "activate";
openfl_events_Event.ADDED = "added";
openfl_events_Event.ADDED_TO_STAGE = "addedToStage";
openfl_events_Event.CANCEL = "cancel";
openfl_events_Event.CHANGE = "change";
openfl_events_Event.CLEAR = "clear";
openfl_events_Event.CLOSE = "close";
openfl_events_Event.COMPLETE = "complete";
openfl_events_Event.CONNECT = "connect";
openfl_events_Event.CONTEXT3D_CREATE = "context3DCreate";
openfl_events_Event.COPY = "copy";
openfl_events_Event.CUT = "cut";
openfl_events_Event.DEACTIVATE = "deactivate";
openfl_events_Event.ENTER_FRAME = "enterFrame";
openfl_events_Event.EXIT_FRAME = "exitFrame";
openfl_events_Event.FRAME_CONSTRUCTED = "frameConstructed";
openfl_events_Event.FRAME_LABEL = "frameLabel";
openfl_events_Event.FULLSCREEN = "fullScreen";
openfl_events_Event.ID3 = "id3";
openfl_events_Event.INIT = "init";
openfl_events_Event.MOUSE_LEAVE = "mouseLeave";
openfl_events_Event.OPEN = "open";
openfl_events_Event.PASTE = "paste";
openfl_events_Event.REMOVED = "removed";
openfl_events_Event.REMOVED_FROM_STAGE = "removedFromStage";
openfl_events_Event.RENDER = "render";
openfl_events_Event.RESIZE = "resize";
openfl_events_Event.SCROLL = "scroll";
openfl_events_Event.SELECT = "select";
openfl_events_Event.SELECT_ALL = "selectAll";
openfl_events_Event.SOUND_COMPLETE = "soundComplete";
openfl_events_Event.TAB_CHILDREN_CHANGE = "tabChildrenChange";
openfl_events_Event.TAB_ENABLED_CHANGE = "tabEnabledChange";
openfl_events_Event.TAB_INDEX_CHANGE = "tabIndexChange";
openfl_events_Event.TEXTURE_READY = "textureReady";
openfl_events_Event.UNLOAD = "unload";
com_haxepunk_tweens_TweenEvent.START = "start";
com_haxepunk_tweens_TweenEvent.UPDATE = "update";
com_haxepunk_tweens_TweenEvent.FINISH = "finish";
com_haxepunk_utils_Draw._matrix = new openfl_geom_Matrix();
com_haxepunk_utils__$Gesture_Gesture_$Impl_$.TAP = 1;
com_haxepunk_utils__$Gesture_Gesture_$Impl_$.DOUBLE_TAP = 2;
com_haxepunk_utils__$Gesture_Gesture_$Impl_$.LONG_PRESS = 3;
com_haxepunk_utils__$Gesture_Gesture_$Impl_$.MOVE = 4;
com_haxepunk_utils__$Gesture_Gesture_$Impl_$.PINCH = 5;
com_haxepunk_utils__$Gesture_Gesture_$Impl_$.TWO_FINGER_TAP = 6;
com_haxepunk_utils__$Gesture_Gesture_$Impl_$.longPressTime = 0.5;
com_haxepunk_utils__$Gesture_Gesture_$Impl_$.doubleTapTime = 0.5;
com_haxepunk_utils__$Gesture_Gesture_$Impl_$.deadZone = 5;
com_haxepunk_utils__$Gesture_Gesture_$Impl_$.enabled = false;
com_haxepunk_utils__$Gesture_Gesture_$Impl_$.gestures = new haxe_ds_IntMap();
com_haxepunk_utils__$Gesture_Gesture_$Impl_$._lastTap = 0;
com_haxepunk_utils_HaxelibInfo.$name = "HaxePunk";
com_haxepunk_utils_HaxelibInfo.license = "MIT";
com_haxepunk_utils_HaxelibInfo.tags = ["flash","game","cpp","openfl"];
com_haxepunk_utils_HaxelibInfo.description = "A Haxe port of the FlashPunk AS3 engine.";
com_haxepunk_utils_HaxelibInfo.contributors = ["heardtheword","_ibilon","bendmorris"];
com_haxepunk_utils_HaxelibInfo.releasenote = "See CHANGELOG.md";
com_haxepunk_utils_HaxelibInfo.version = "2.6.0";
com_haxepunk_utils_HaxelibInfo.url = "http://haxepunk.com";
com_haxepunk_utils_HaxelibInfo.install = { munit : "", mcover : ""};
com_haxepunk_utils_HaxelibInfo.dependencies = { openfl : "", lime : ""};
com_haxepunk_utils_Input.keyString = "";
com_haxepunk_utils_Input.multiTouchSupported = false;
com_haxepunk_utils_Input.kKeyStringMax = 100;
com_haxepunk_utils_Input._enabled = false;
com_haxepunk_utils_Input._key = new haxe_ds_IntMap();
com_haxepunk_utils_Input._keyNum = 0;
com_haxepunk_utils_Input._press = [];
com_haxepunk_utils_Input._pressNum = 0;
com_haxepunk_utils_Input._release = [];
com_haxepunk_utils_Input._releaseNum = 0;
com_haxepunk_utils_Input._mouseWheelDelta = 0;
com_haxepunk_utils_Input._touches = new haxe_ds_IntMap();
com_haxepunk_utils_Input._touchOrder = [];
com_haxepunk_utils_Input._joysticks = new haxe_ds_IntMap();
com_haxepunk_utils_Input._control = new haxe_ds_StringMap();
com_haxepunk_utils_Input._nativeCorrection = new haxe_ds_StringMap();
com_haxepunk_utils_Joystick.deadZone = 0.15;
com_haxepunk_utils_OUYA_$GAMEPAD.O_BUTTON = 0;
com_haxepunk_utils_OUYA_$GAMEPAD.U_BUTTON = 1;
com_haxepunk_utils_OUYA_$GAMEPAD.Y_BUTTON = 2;
com_haxepunk_utils_OUYA_$GAMEPAD.A_BUTTON = 3;
com_haxepunk_utils_OUYA_$GAMEPAD.LB_BUTTON = 4;
com_haxepunk_utils_OUYA_$GAMEPAD.RB_BUTTON = 5;
com_haxepunk_utils_OUYA_$GAMEPAD.BACK_BUTTON = 20;
com_haxepunk_utils_OUYA_$GAMEPAD.START_BUTTON = 20;
com_haxepunk_utils_OUYA_$GAMEPAD.LEFT_ANALOGUE_BUTTON = 6;
com_haxepunk_utils_OUYA_$GAMEPAD.RIGHT_ANALOGUE_BUTTON = 7;
com_haxepunk_utils_OUYA_$GAMEPAD.LEFT_TRIGGER_BUTTON = 12;
com_haxepunk_utils_OUYA_$GAMEPAD.RIGHT_TRIGGER_BUTTON = 13;
com_haxepunk_utils_OUYA_$GAMEPAD.DPAD_UP = 8;
com_haxepunk_utils_OUYA_$GAMEPAD.DPAD_DOWN = 9;
com_haxepunk_utils_OUYA_$GAMEPAD.DPAD_LEFT = 10;
com_haxepunk_utils_OUYA_$GAMEPAD.DPAD_RIGHT = 11;
com_haxepunk_utils_OUYA_$GAMEPAD.HOME_BUTTON = 16777234;
com_haxepunk_utils_OUYA_$GAMEPAD.LEFT_ANALOGUE_X = 0;
com_haxepunk_utils_OUYA_$GAMEPAD.LEFT_ANALOGUE_Y = 1;
com_haxepunk_utils_OUYA_$GAMEPAD.RIGHT_ANALOGUE_X = 5;
com_haxepunk_utils_OUYA_$GAMEPAD.RIGHT_ANALOGUE_Y = 4;
com_haxepunk_utils_OUYA_$GAMEPAD.LEFT_TRIGGER = 2;
com_haxepunk_utils_OUYA_$GAMEPAD.RIGHT_TRIGGER = 3;
com_haxepunk_utils_XBOX_$GAMEPAD.A_BUTTON = 10;
com_haxepunk_utils_XBOX_$GAMEPAD.B_BUTTON = 11;
com_haxepunk_utils_XBOX_$GAMEPAD.X_BUTTON = 12;
com_haxepunk_utils_XBOX_$GAMEPAD.Y_BUTTON = 13;
com_haxepunk_utils_XBOX_$GAMEPAD.LB_BUTTON = 8;
com_haxepunk_utils_XBOX_$GAMEPAD.RB_BUTTON = 9;
com_haxepunk_utils_XBOX_$GAMEPAD.BACK_BUTTON = 5;
com_haxepunk_utils_XBOX_$GAMEPAD.START_BUTTON = 4;
com_haxepunk_utils_XBOX_$GAMEPAD.LEFT_ANALOGUE_BUTTON = 6;
com_haxepunk_utils_XBOX_$GAMEPAD.RIGHT_ANALOGUE_BUTTON = 7;
com_haxepunk_utils_XBOX_$GAMEPAD.XBOX_BUTTON = 14;
com_haxepunk_utils_XBOX_$GAMEPAD.DPAD_UP = 0;
com_haxepunk_utils_XBOX_$GAMEPAD.DPAD_DOWN = 1;
com_haxepunk_utils_XBOX_$GAMEPAD.DPAD_LEFT = 2;
com_haxepunk_utils_XBOX_$GAMEPAD.DPAD_RIGHT = 3;
com_haxepunk_utils_XBOX_$GAMEPAD.LEFT_ANALOGUE_X = 0;
com_haxepunk_utils_XBOX_$GAMEPAD.LEFT_ANALOGUE_Y = 1;
com_haxepunk_utils_XBOX_$GAMEPAD.RIGHT_ANALOGUE_X = 2;
com_haxepunk_utils_XBOX_$GAMEPAD.RIGHT_ANALOGUE_Y = 3;
com_haxepunk_utils_XBOX_$GAMEPAD.LEFT_TRIGGER = 4;
com_haxepunk_utils_XBOX_$GAMEPAD.RIGHT_TRIGGER = 5;
com_haxepunk_utils_ROCK_$PS3_$GAMEPAD.TRIANGLE_BUTTON = 12;
com_haxepunk_utils_ROCK_$PS3_$GAMEPAD.CIRCLE_BUTTON = 13;
com_haxepunk_utils_ROCK_$PS3_$GAMEPAD.X_BUTTON = 14;
com_haxepunk_utils_ROCK_$PS3_$GAMEPAD.SQUARE_BUTTON = 15;
com_haxepunk_utils_ROCK_$PS3_$GAMEPAD.L1_BUTTON = 10;
com_haxepunk_utils_ROCK_$PS3_$GAMEPAD.R1_BUTTON = 11;
com_haxepunk_utils_ROCK_$PS3_$GAMEPAD.L2_BUTTON = 8;
com_haxepunk_utils_ROCK_$PS3_$GAMEPAD.R2_BUTTON = 9;
com_haxepunk_utils_ROCK_$PS3_$GAMEPAD.SELECT_BUTTON = 0;
com_haxepunk_utils_ROCK_$PS3_$GAMEPAD.START_BUTTON = 3;
com_haxepunk_utils_ROCK_$PS3_$GAMEPAD.PS_BUTTON = 16;
com_haxepunk_utils_ROCK_$PS3_$GAMEPAD.LEFT_ANALOGUE_BUTTON = 1;
com_haxepunk_utils_ROCK_$PS3_$GAMEPAD.RIGHT_ANALOGUE_BUTTON = 2;
com_haxepunk_utils_ROCK_$PS3_$GAMEPAD.DPAD_UP = 4;
com_haxepunk_utils_ROCK_$PS3_$GAMEPAD.DPAD_DOWN = 6;
com_haxepunk_utils_ROCK_$PS3_$GAMEPAD.DPAD_LEFT = 7;
com_haxepunk_utils_ROCK_$PS3_$GAMEPAD.DPAD_RIGHT = 5;
com_haxepunk_utils_ROCK_$PS3_$GAMEPAD.LEFT_ANALOGUE_X = 0;
com_haxepunk_utils_ROCK_$PS3_$GAMEPAD.LEFT_ANALOGUE_Y = 1;
com_haxepunk_utils_ROCK_$PS3_$GAMEPAD.TRIANGLE_BUTTON_PRESSURE = 16;
com_haxepunk_utils_ROCK_$PS3_$GAMEPAD.CIRCLE_BUTTON_PRESSURE = 17;
com_haxepunk_utils_ROCK_$PS3_$GAMEPAD.X_BUTTON_PRESSURE = 18;
com_haxepunk_utils_ROCK_$PS3_$GAMEPAD.SQUARE_BUTTON_PRESSURE = 19;
com_haxepunk_utils_ROCK_$PS3_$GAMEPAD.RIGHT_ANALOGUE_X = 2;
com_haxepunk_utils_ROCK_$PS3_$GAMEPAD.RIGHT_ANALOGUE_Y = 3;
com_haxepunk_utils_PS3_$GAMEPAD.TRIANGLE_BUTTON = 12;
com_haxepunk_utils_PS3_$GAMEPAD.CIRCLE_BUTTON = 13;
com_haxepunk_utils_PS3_$GAMEPAD.X_BUTTON = 14;
com_haxepunk_utils_PS3_$GAMEPAD.SQUARE_BUTTON = 15;
com_haxepunk_utils_PS3_$GAMEPAD.L1_BUTTON = 10;
com_haxepunk_utils_PS3_$GAMEPAD.R1_BUTTON = 11;
com_haxepunk_utils_PS3_$GAMEPAD.L2_BUTTON = 8;
com_haxepunk_utils_PS3_$GAMEPAD.R2_BUTTON = 9;
com_haxepunk_utils_PS3_$GAMEPAD.SELECT_BUTTON = 0;
com_haxepunk_utils_PS3_$GAMEPAD.START_BUTTON = 3;
com_haxepunk_utils_PS3_$GAMEPAD.PS_BUTTON = 16;
com_haxepunk_utils_PS3_$GAMEPAD.LEFT_ANALOGUE_BUTTON = 1;
com_haxepunk_utils_PS3_$GAMEPAD.RIGHT_ANALOGUE_BUTTON = 2;
com_haxepunk_utils_PS3_$GAMEPAD.DPAD_UP = 4;
com_haxepunk_utils_PS3_$GAMEPAD.DPAD_DOWN = 6;
com_haxepunk_utils_PS3_$GAMEPAD.DPAD_LEFT = 7;
com_haxepunk_utils_PS3_$GAMEPAD.DPAD_RIGHT = 5;
com_haxepunk_utils_PS3_$GAMEPAD.LEFT_ANALOGUE_X = 0;
com_haxepunk_utils_PS3_$GAMEPAD.LEFT_ANALOGUE_Y = 1;
com_haxepunk_utils_PS3_$GAMEPAD.TRIANGLE_BUTTON_PRESSURE = 16;
com_haxepunk_utils_PS3_$GAMEPAD.CIRCLE_BUTTON_PRESSURE = 17;
com_haxepunk_utils_PS3_$GAMEPAD.X_BUTTON_PRESSURE = 18;
com_haxepunk_utils_PS3_$GAMEPAD.SQUARE_BUTTON_PRESSURE = 19;
com_haxepunk_utils_PS3_$GAMEPAD.RIGHT_ANALOGUE_X = 2;
com_haxepunk_utils_PS3_$GAMEPAD.RIGHT_ANALOGUE_Y = 3;
com_haxepunk_utils_Key.ANY = -1;
com_haxepunk_utils_Key.LEFT = 37;
com_haxepunk_utils_Key.UP = 38;
com_haxepunk_utils_Key.RIGHT = 39;
com_haxepunk_utils_Key.DOWN = 40;
com_haxepunk_utils_Key.ENTER = 13;
com_haxepunk_utils_Key.COMMAND = 15;
com_haxepunk_utils_Key.CONTROL = 17;
com_haxepunk_utils_Key.SPACE = 32;
com_haxepunk_utils_Key.SHIFT = 16;
com_haxepunk_utils_Key.BACKSPACE = 8;
com_haxepunk_utils_Key.CAPS_LOCK = 20;
com_haxepunk_utils_Key.DELETE = 46;
com_haxepunk_utils_Key.END = 35;
com_haxepunk_utils_Key.ESCAPE = 27;
com_haxepunk_utils_Key.HOME = 36;
com_haxepunk_utils_Key.INSERT = 45;
com_haxepunk_utils_Key.TAB = 9;
com_haxepunk_utils_Key.PAGE_DOWN = 34;
com_haxepunk_utils_Key.PAGE_UP = 33;
com_haxepunk_utils_Key.LEFT_SQUARE_BRACKET = 219;
com_haxepunk_utils_Key.RIGHT_SQUARE_BRACKET = 221;
com_haxepunk_utils_Key.TILDE = 192;
com_haxepunk_utils_Key.A = 65;
com_haxepunk_utils_Key.B = 66;
com_haxepunk_utils_Key.C = 67;
com_haxepunk_utils_Key.D = 68;
com_haxepunk_utils_Key.E = 69;
com_haxepunk_utils_Key.F = 70;
com_haxepunk_utils_Key.G = 71;
com_haxepunk_utils_Key.H = 72;
com_haxepunk_utils_Key.I = 73;
com_haxepunk_utils_Key.J = 74;
com_haxepunk_utils_Key.K = 75;
com_haxepunk_utils_Key.L = 76;
com_haxepunk_utils_Key.M = 77;
com_haxepunk_utils_Key.N = 78;
com_haxepunk_utils_Key.O = 79;
com_haxepunk_utils_Key.P = 80;
com_haxepunk_utils_Key.Q = 81;
com_haxepunk_utils_Key.R = 82;
com_haxepunk_utils_Key.S = 83;
com_haxepunk_utils_Key.T = 84;
com_haxepunk_utils_Key.U = 85;
com_haxepunk_utils_Key.V = 86;
com_haxepunk_utils_Key.W = 87;
com_haxepunk_utils_Key.X = 88;
com_haxepunk_utils_Key.Y = 89;
com_haxepunk_utils_Key.Z = 90;
com_haxepunk_utils_Key.F1 = 112;
com_haxepunk_utils_Key.F2 = 113;
com_haxepunk_utils_Key.F3 = 114;
com_haxepunk_utils_Key.F4 = 115;
com_haxepunk_utils_Key.F5 = 116;
com_haxepunk_utils_Key.F6 = 117;
com_haxepunk_utils_Key.F7 = 118;
com_haxepunk_utils_Key.F8 = 119;
com_haxepunk_utils_Key.F9 = 120;
com_haxepunk_utils_Key.F10 = 121;
com_haxepunk_utils_Key.F11 = 122;
com_haxepunk_utils_Key.F12 = 123;
com_haxepunk_utils_Key.F13 = 124;
com_haxepunk_utils_Key.F14 = 125;
com_haxepunk_utils_Key.F15 = 126;
com_haxepunk_utils_Key.DIGIT_0 = 48;
com_haxepunk_utils_Key.DIGIT_1 = 49;
com_haxepunk_utils_Key.DIGIT_2 = 50;
com_haxepunk_utils_Key.DIGIT_3 = 51;
com_haxepunk_utils_Key.DIGIT_4 = 52;
com_haxepunk_utils_Key.DIGIT_5 = 53;
com_haxepunk_utils_Key.DIGIT_6 = 54;
com_haxepunk_utils_Key.DIGIT_7 = 55;
com_haxepunk_utils_Key.DIGIT_8 = 56;
com_haxepunk_utils_Key.DIGIT_9 = 57;
com_haxepunk_utils_Key.NUMPAD_0 = 96;
com_haxepunk_utils_Key.NUMPAD_1 = 97;
com_haxepunk_utils_Key.NUMPAD_2 = 98;
com_haxepunk_utils_Key.NUMPAD_3 = 99;
com_haxepunk_utils_Key.NUMPAD_4 = 100;
com_haxepunk_utils_Key.NUMPAD_5 = 101;
com_haxepunk_utils_Key.NUMPAD_6 = 102;
com_haxepunk_utils_Key.NUMPAD_7 = 103;
com_haxepunk_utils_Key.NUMPAD_8 = 104;
com_haxepunk_utils_Key.NUMPAD_9 = 105;
com_haxepunk_utils_Key.NUMPAD_ADD = 107;
com_haxepunk_utils_Key.NUMPAD_DECIMAL = 110;
com_haxepunk_utils_Key.NUMPAD_DIVIDE = 111;
com_haxepunk_utils_Key.NUMPAD_ENTER = 108;
com_haxepunk_utils_Key.NUMPAD_MULTIPLY = 106;
com_haxepunk_utils_Key.NUMPAD_SUBTRACT = 109;
const_EvolutionConst.paths = [{ id : _$Path.PATH_PROTECTION, name : "Protection"},{ id : _$Path.PATH_CONTROL, name : "Control"},{ id : _$Path.PATH_ATTACK, name : "Attack"},{ id : _$Path.PATH_CONCEAL, name : "Concealment"},{ id : _$Path.PATH_SPECIAL, name : "Special"}];
const_EvolutionConst.improvements = [{ path : _$Path.PATH_CONCEAL, id : _$Improv.IMP_DECAY_ACCEL, name : "Decay acceleration", note : "Special bacteria and enzymes accelerate autolysis and putrefaction allowing significantly more efficient tissue decomposition of the host body after death", noteFunc : function(l) {
	return "Bodies will disappear in " + l.turns + " turns";
}, organ : { name : "Decay accelerant cysts", note : "Cysts of special bacteria and enzymes spread throughout the body to accelerate its decay after death", gp : 75}, levelNotes : ["Only natural decomposition occurs","Host body takes a lot of time to decompose","Host body takes some time to decompose","Host body takes a little time to decompose"], levelParams : [{ turns : 1000},{ turns : 10},{ turns : 5},{ turns : 2}]},{ path : _$Path.PATH_PROTECTION, id : _$Improv.IMP_PROT_COVER, name : "Protective cover", note : "Heavy epidermis keratinization and dermis densification later allows for an armor-like body cover on the host with the downside of significantly altered host appearance", noteFunc : function(l1) {
	return "Host armor bonus (minus to damage): " + l1.armor + "\n" + "AI alertness bonus: " + l1.alertness;
}, organ : { name : "Protective cover", note : "Armor-like host body cover providing protection against damage at the expense of appearance", gp : 150}, levelNotes : ["Normal host skin","Pigmented skin layer looks grayish to the eye","Collagen fibres running through the dermis layer","Heavily keratinized and densified skin provides the body with an effective armor"], levelParams : [{ armor : 0, alertness : 0},{ armor : 1, alertness : 1},{ armor : 2, alertness : 5},{ armor : 3, alertness : 10}]},{ path : _$Path.PATH_PROTECTION, id : _$Improv.IMP_WOUND_REGEN, name : "Stem cell reservoirs", note : "Microreservoirs of adult stem cells form in many tissues of the host body greatly increasing the efficacy and speed of wound healing process", noteFunc : function(l2) {
	return l2.turns + " turns to restore 1 health of host and parasite";
}, organ : { name : "Stem cell reservoirs", note : "Microreservoirs of adult stem cells that increase wound recovery speed", gp : 120}, levelNotes : ["Normal wound recovery","Wound recovery speed is slightly increased","Wound recovery speed is moderately increased","Wound recovery speed is greatly increased"], levelParams : [{ turns : 100},{ turns : 20},{ turns : 10},{ turns : 5}]},{ path : _$Path.PATH_PROTECTION, id : _$Improv.IMP_HEALTH, name : "Antibody generators", note : "Direct synthesis of antibodies through specialized biofactories increases the responce speed of adaptive immune system adding to overall host health", noteFunc : function(l3) {
	return "+" + l3.health + " health to host";
}, organ : { name : "Antibody generators", note : "Specialized producers of antibodies that increase overall host health", gp : 80}, levelNotes : ["Normal health","Health is slightly increased","Health is moderately increased","Health is greatly increased"], levelParams : [{ health : 0},{ health : 1},{ health : 2},{ health : 3}]},{ path : _$Path.PATH_PROTECTION, id : _$Improv.IMP_ENERGY, name : "??Host energy bonus", note : "Grown body feature gives a bonus to maximum host energy", noteFunc : function(l4) {
	return "Host maximum energy multiplier: " + l4.hostEnergyMod + "\nRestores energy to maximum on completion";
}, organ : { name : "??Host energy bonus", note : "Gives a bonus to maximum host energy", gp : 200}, levelNotes : ["(todo fluff)","(todo fluff)","(todo fluff)","(todo fluff)"], levelParams : [{ hostEnergyMod : 1.0},{ hostEnergyMod : 1.25},{ hostEnergyMod : 1.50},{ hostEnergyMod : 2.0}]},{ path : _$Path.PATH_ATTACK, id : _$Improv.IMP_MUSCLE, name : "Microvascular networks", note : "Neovascularization within muscles enhances the ability to move waste products out and maintain contraction reducing the accumulated metabolic fatigue which results in increased host strength", noteFunc : function(l5) {
	return "+" + l5.strength + " strength to host";
}, organ : { name : "Microvascular networks", note : "Functional miscrovascular networks throughout the muscle tissue enhance host body strength", gp : 120}, levelNotes : ["Normal host strength","Basic muscle neovascularization","Enhanced muscle neovascularization","Improved neovascularization with additional substrate storage"], levelParams : [{ strength : 0},{ strength : 1},{ strength : 2},{ strength : 3}]},{ path : _$Path.PATH_ATTACK, id : _$Improv.IMP_ACID_SPIT, name : "??Acid spit", note : "Grown body feature gives the host an ability to spit acid on an NPC", noteFunc : function(l6) {
	return "Spit damage: " + l6.minDamage + "-" + l6.maxDamage + "\nSpit range: " + l6.range;
}, organ : { name : "??Acid spit", note : "Gives the host an ability to spit acid on an NPC", gp : 150, action : { id : "acidSpit", type : _$PlayerActionType.ACTION_ORGAN, name : "??Acid spit", energy : 10}}, levelNotes : ["(todo fluff)","(todo fluff)","(todo fluff)","(todo fluff)"], levelParams : [{ minDamage : 0, maxDamage : 0, range : 0},{ minDamage : 1, maxDamage : 2, range : 1},{ minDamage : 1, maxDamage : 3, range : 2},{ minDamage : 1, maxDamage : 4, range : 3}]},{ path : _$Path.PATH_ATTACK, id : _$Improv.IMP_SLIME_SPIT, name : "??Slime spit", note : "Grown body feature gives the host an ability to spit slime on an NPC to slow them down)", noteFunc : function(l7) {
	return "Slime strength: " + l7.strength + "\nSpit range: " + l7.range;
}, organ : { name : "??Slime spit", note : "Gives the host an ability to spit slime on an NPC to slow them down", gp : 100, action : { id : "slimeSpit", type : _$PlayerActionType.ACTION_ORGAN, name : "??Slime spit", energy : 10}}, levelNotes : ["(todo fluff)","(todo fluff)","(todo fluff)","(todo fluff)"], levelParams : [{ strength : 0, range : 0},{ strength : 10, range : 1},{ strength : 20, range : 2},{ strength : 30, range : 3}]},{ path : _$Path.PATH_ATTACK, id : _$Improv.IMP_PARALYSIS_SPIT, name : "??Paralysis spit", note : "Grown body feature gives the host an ability to paralyze an NPC", noteFunc : function(l8) {
	return "Paralysis effect time: " + l8.time + "\nSpit range: " + l8.range;
}, organ : { name : "??Paralysis spit", note : "Gives the host an ability to paralyze an NPC", gp : 100, action : { id : "paralysisSpit", type : _$PlayerActionType.ACTION_ORGAN, name : "??Paralysis spit", energy : 5}}, levelNotes : ["(todo fluff)","(todo fluff)","(todo fluff)","(todo fluff)"], levelParams : [{ time : 0, range : 0},{ time : 3, range : 1},{ time : 4, range : 2},{ time : 5, range : 3}]},{ path : _$Path.PATH_ATTACK, id : _$Improv.IMP_PANIC_GAS, name : "??Panic gas", note : "Grown body feature gives the host an ability to emit a cloud of panic gas that will make NPCs run away", noteFunc : function(l9) {
	return "Cloud range: " + l9.range + "\nCloud dissipation time: " + l9.timeout + "\nPanic effect time: " + l9.time;
}, organ : { name : "??Panic gas", note : "Gives the host an ability to emit a cloud of panic gas that will make NPCs run away", gp : 150, hasTimeout : true, action : { id : "panicGas", type : _$PlayerActionType.ACTION_ORGAN, name : "??Panic gas", energy : 10}}, levelNotes : ["(todo fluff)","(todo fluff)","(todo fluff)","(todo fluff)"], levelParams : [{ range : 0, timeout : 0, time : 0},{ range : 2, timeout : 20, time : 3},{ range : 3, timeout : 10, time : 5},{ range : 4, timeout : 5, time : 10}]},{ path : _$Path.PATH_ATTACK, id : _$Improv.IMP_PARALYSIS_GAS, name : "??Paralysis gas", note : "Grown body feature gives the host an ability to emit a cloud of paralytic gas", noteFunc : function(l10) {
	return "Cloud range: " + l10.range + "\nCloud dissipation time: " + l10.timeout + "\nParalysis effect time: " + l10.time;
}, organ : { name : "??Paralysis gas", note : "Gives the host an ability to emit a cloud of paralytic gas", gp : 175, hasTimeout : true, action : { id : "paralysisGas", type : _$PlayerActionType.ACTION_ORGAN, name : "??Paralysis gas", energy : 12}}, levelNotes : ["(todo fluff)","(todo fluff)","(todo fluff)","(todo fluff)"], levelParams : [{ range : 0, timeout : 0, time : 0},{ range : 2, timeout : 20, time : 3},{ range : 3, timeout : 10, time : 5},{ range : 4, timeout : 5, time : 10}]},{ path : _$Path.PATH_CONTROL, id : _$Improv.IMP_ATTACH, name : "??Attach efficiency", note : "Improves base grip on attach to host", noteFunc : function(l11) {
	return "Base attach grip: " + l11.attachHoldBase;
}, levelNotes : ["(todo fluff)","(todo fluff)","(todo fluff)","(todo fluff)"], levelParams : [{ attachHoldBase : 10},{ attachHoldBase : 15},{ attachHoldBase : 20},{ attachHoldBase : 25}]},{ path : _$Path.PATH_CONTROL, id : _$Improv.IMP_HARDEN_GRIP, name : "??Hold efficiency", note : "Improves base grip on harden grip action", noteFunc : function(l12) {
	return "Base harden grip: " + l12.attachHoldBase;
}, levelNotes : ["(todo fluff)","(todo fluff)","(todo fluff)","(todo fluff)"], levelParams : [{ attachHoldBase : 20},{ attachHoldBase : 25},{ attachHoldBase : 30},{ attachHoldBase : 35}]},{ path : _$Path.PATH_CONTROL, id : _$Improv.IMP_REINFORCE, name : "??Control efficiency", note : "Improves base control on reinforce control action", noteFunc : function(l13) {
	return "Base reinforce control: " + l13.reinforceControlBase;
}, levelNotes : ["(todo fluff)","(todo fluff)","(todo fluff)","(todo fluff)"], levelParams : [{ reinforceControlBase : 20},{ reinforceControlBase : 25},{ reinforceControlBase : 30},{ reinforceControlBase : 35}]},{ path : _$Path.PATH_SPECIAL, id : _$Improv.IMP_BRAIN_PROBE, name : "Brain probe", note : "Allows probing host brain to learn its contents", noteFunc : function(l14) {
	return "Human society knowledge multiplier: " + l14.humanSociety + "\nBase host energy cost: " + l14.hostEnergyBase + "\nBase host health cost: " + l14.hostHealthBase + "\nHost skills learning multiplier: " + l14.hostSkillsMod + (l14.hostAttrsMod == 1?"\nProbe shows host attributes":"");
}, levelNotes : ["Cannot probe host brain","Access with severe problems (basic knowledge)","Limited access with some problems (extensive knowledge and basic skills)","Full access"], levelParams : [{ humanSociety : 0, hostEnergyBase : 0, hostHealthBase : 0, hostHealthMod : 0, hostSkillsMod : 0, hostAttrsMod : 0},{ humanSociety : 0.25, hostEnergyBase : 20, hostHealthBase : 3, hostHealthMod : 2, hostSkillsMod : 0, hostAttrsMod : 0},{ humanSociety : 0.5, hostEnergyBase : 10, hostHealthBase : 1, hostHealthMod : 1, hostSkillsMod : 0.25, hostAttrsMod : 0},{ humanSociety : 1.0, hostEnergyBase : 5, hostHealthBase : 0, hostHealthMod : 1, hostSkillsMod : 0.5, hostAttrsMod : 1}], action : { id : "probeBrain", type : _$PlayerActionType.ACTION_AREA, name : "Probe Brain", energyFunc : function(player) {
	if(player.host == null) return -1;
	var level = player.evolutionManager.getLevel(_$Improv.IMP_BRAIN_PROBE);
	if(level == 0) return -1;
	var params = player.evolutionManager.getParams(_$Improv.IMP_BRAIN_PROBE);
	return params.hostEnergyBase + player.host.get_psyche();
}}, onUpgrade : function(level1,game,player1) {
	if(level1 == 1) game.goals.complete(_$Goal.GOAL_EVOLVE_PROBE); else if(level1 == 2) game.goals.complete(_$Goal.GOAL_PROBE_BRAIN_ADVANCED);
}},{ path : _$Path.PATH_SPECIAL, id : _$Improv.IMP_CAMO_LAYER, name : "Camouflage layer", note : "Allows the covering of parasite body with a self-regenerating camouflage layer that looks like host skin and clothing", noteFunc : function(l15) {
	return "AI alertness multiplier: " + l15.alertness;
}, organ : { name : "Camouflage layer", note : "Self-regenerating camouflage layer that covers parasite body changing its appearance", gp : 100, onGrow : function(game1,player2) {
	game1.goals.complete(_$Goal.GOAL_GROW_CAMO);
}}, levelNotes : ["A perfectly visible huge purple blob on head and upper body of the host","Streaks of purple running through the partly grown camouflage layer","Parasite body is mostly covered by camouflage layer","Camouflage layer fully covers the parasite. Only close inspection will alert bystanders"], levelParams : [{ alertness : 3},{ alertness : 2},{ alertness : 1},{ alertness : 0.5}], onUpgrade : function(level2,game2,player3) {
	if(level2 == 1) game2.goals.complete(_$Goal.GOAL_EVOLVE_CAMO);
}},{ path : _$Path.PATH_SPECIAL, id : _$Improv.IMP_DOPAMINE, name : "Dopamine regulation", note : "Removes the need to reinforce control of the host.", levelNotes : ["(fluff)","(fluff)","(fluff)","(fluff)"], levelParams : [{ },{ },{ },{ }], onUpgrade : function(level3,game3,player4) {
	if(level3 == 1) game3.goals.complete(_$Goal.GOAL_EVOLVE_DOPAMINE);
}},{ path : _$Path.PATH_SPECIAL, id : _$Improv.IMP_MICROHABITAT, name : "Microhabitat", note : "Gives the player an ability to build microhabitats", noteFunc : function(l16) {
	return "Maximum number of microhabitats: " + l16.numHabitats + "\nMicrohabitat detection chance: " + l16.detectionChance + "%";
}, levelNotes : ["(todo fluff)","(todo fluff)","(todo fluff)","(todo fluff)"], levelParams : [{ numHabitats : 0, detectionChance : 0},{ numHabitats : 1, detectionChance : 1},{ numHabitats : 2, detectionChance : 0.5},{ numHabitats : 4, detectionChance : 0.25}], onUpgrade : function(level4,game4,player5) {
	if(level4 == 1) game4.goals.complete(_$Goal.GOAL_EVOLVE_MICROHABITAT);
}},{ path : _$Path.PATH_SPECIAL, id : _$Improv.IMP_BIOMINERAL, name : "Biomineral formation", note : "Gives the player an ability to supply microhabitat with energy. Being near the formation increases the speed of organ growth and evolution.", noteFunc : function(l17) {
	return "Energy units per formation: " + l17.energy + "\nBonus organ and evolution points: +" + l17.evolutionBonus + "%";
}, levelNotes : ["(todo fluff)","(todo fluff)","(todo fluff)","(todo fluff)"], organ : { name : "Biomineral mold", note : "Mold for a biomineral formation. You can only grow that in a habitat. Host and its inventory will be destroyed.", gp : 200, action : { id : "formBiomineral", type : _$PlayerActionType.ACTION_ORGAN, name : "Produce biomineral formation", energy : 0}, onAction : function(game5,player6) {
	if(!game5.area.isHabitat) {
		game5.log("This action only works in habitat.",_$TextColor.COLOR_HINT);
		return false;
	}
	return game5.area.habitat.putBiomineral();
}}, levelParams : [{ energy : 0, evolutionBonus : 0},{ energy : 1, evolutionBonus : 10},{ energy : 2, evolutionBonus : 20},{ energy : 3, evolutionBonus : 25}]},{ path : _$Path.PATH_SPECIAL, id : _$Improv.IMP_ASSIMILATION, name : "Assimilation cavity", note : "Gives the player an ability to assimilate hosts", levelNotes : ["(todo fluff)","(todo fluff)","(todo fluff)","(todo fluff)"], organ : { name : "Assimilation mold", note : "Mold for an assimilation cavity. You can only grow that in a habitat. Host and its inventory will be destroyed.", gp : 200, action : { id : "formAssimilation", type : _$PlayerActionType.ACTION_ORGAN, name : "Form assimilation cavity", energy : 0}, onAction : function(game6,player7) {
	if(!game6.area.isHabitat) {
		game6.log("Only works in habitat.",_$TextColor.COLOR_HINT);
		return false;
	}
	return game6.area.habitat.putAssimilation();
}}, levelParams : [{ },{ },{ },{ }]}];
const_EvolutionConst.epCostImprovement = [100,200,500,1000];
const_EvolutionConst.epCostPath = [100,200,500,1000,2000,5000];
const_Goals.map = (function($this) {
	var $r;
	var _g = new haxe_ds_EnumValueMap();
	_g.set(_$Goal.GOAL_INVADE_HOST,{ id : _$Goal.GOAL_INVADE_HOST, name : "Find and invade a host", note : "You need to find and invade a host or you will die from the lack of energy.", messageComplete : "The bipedal hosts look like a dominant life form. They may be more useful.", onComplete : function(game,player) {
		game.goals.receive(_$Goal.GOAL_INVADE_HUMAN);
	}});
	_g.set(_$Goal.GOAL_INVADE_HUMAN,{ id : _$Goal.GOAL_INVADE_HUMAN, name : "Find and invade a bipedal host", note : "You need to find and invade a bipedal host", messageComplete : "This host is intelligent. I need to evolve and understand it further.", onComplete : function(game1,player1) {
		player1.evolutionManager.state = 1;
		player1.evolutionManager.addImprov(_$Improv.IMP_BRAIN_PROBE);
		game1.goals.receive(_$Goal.GOAL_EVOLVE_PROBE);
	}});
	_g.set(_$Goal.GOAL_EVOLVE_PROBE,{ id : _$Goal.GOAL_EVOLVE_PROBE, name : "Evolve brain probe", note : "You need to evolve the brain probe improvement.", messageComplete : "I can probe the brain of this host now. I should also evolve further.", onComplete : function(game2,player2) {
		player2.evolutionManager.state = 2;
		game2.player.vars.organsEnabled = true;
		game2.goals.receive(_$Goal.GOAL_PROBE_BRAIN);
		game2.goals.receive(_$Goal.GOAL_EVOLVE_ORGAN);
	}});
	_g.set(_$Goal.GOAL_EVOLVE_CAMO,{ id : _$Goal.GOAL_EVOLVE_CAMO, name : "Evolve camouflage layer", note : "You need to evolve the camouflage layer improvement.", messageReceive : "These areas are much more dangerous to me. I need to be less visible on the host body.", onReceive : function(game3,player3) {
		player3.evolutionManager.addImprov(_$Improv.IMP_CAMO_LAYER);
	}, onComplete : function(game4,player4) {
		game4.goals.receive(_$Goal.GOAL_GROW_CAMO);
	}});
	_g.set(_$Goal.GOAL_GROW_CAMO,{ id : _$Goal.GOAL_GROW_CAMO, name : "Grow camouflage layer", note : "You need to grow the camouflage layer body feature."});
	_g.set(_$Goal.GOAL_EVOLVE_DOPAMINE,{ id : _$Goal.GOAL_EVOLVE_DOPAMINE, name : "Evolve dopamine regulation", note : "You need to evolve the dopamine regulation improvement.", messageReceive : "The addiction to chemicals of this host can be useful to me.", onReceive : function(game5,player5) {
		player5.evolutionManager.addImprov(_$Improv.IMP_DOPAMINE);
	}, onComplete : function(game6,player6) {
		player6.skills.addID(_$Skill.KNOW_DOPAMINE,100);
	}});
	_g.set(_$Goal.GOAL_EVOLVE_ORGAN,{ id : _$Goal.GOAL_EVOLVE_ORGAN, name : "Evolve any body feature", note : "You need to evolve any body feature.", messageComplete : "Evolving allows me to force changes in the host body. I should try it now.", onComplete : function(game7,player7) {
		game7.goals.receive(_$Goal.GOAL_GROW_ORGAN);
	}});
	_g.set(_$Goal.GOAL_GROW_ORGAN,{ id : _$Goal.GOAL_GROW_ORGAN, name : "Grow any body feature", note : "You need to grow any body feature.", messageComplete : "Growing body features and evolving is very inefficient in a hostile environment. I need a microhabitat.", onComplete : function(game8,player8) {
		player8.evolutionManager.addImprov(_$Improv.IMP_MICROHABITAT);
		game8.goals.receive(_$Goal.GOAL_EVOLVE_MICROHABITAT);
	}});
	_g.set(_$Goal.GOAL_EVOLVE_MICROHABITAT,{ id : _$Goal.GOAL_EVOLVE_MICROHABITAT, name : "Evolve the microhabitat knowledge", note : "You need to evolve the knowledge of microhabitat.", messageComplete : "Now that I have the knowledge I must find a place somewhere in the sewers for a habitat.", onComplete : function(game9,player9) {
		player9.skills.addID(_$Skill.KNOW_HABITAT,100);
		game9.goals.receive(_$Goal.GOAL_CREATE_HABITAT);
	}});
	_g.set(_$Goal.GOAL_CREATE_HABITAT,{ id : _$Goal.GOAL_CREATE_HABITAT, name : "Create a new habitat", note : "You need to create a microhabitat.", messageComplete : "My microhabitat is complete. It allows me some degree of calm and safety.", onComplete : function(game10,player10) {
		player10.evolutionManager.addImprov(_$Improv.IMP_BIOMINERAL);
		game10.goals.receive(_$Goal.GOAL_PUT_BIOMINERAL);
	}});
	_g.set(_$Goal.GOAL_PUT_BIOMINERAL,{ id : _$Goal.GOAL_PUT_BIOMINERAL, name : "Construct biomineral formation", note : "You need to evolve, grow and construct a biomineral formation. It can only be constructed in a habitat.", messageReceive : "I can improve it further. But I will need energy for that.", messageComplete : "Ah, yes. I can feel the energy surge. A little more and I can begin the assimilation process.", onComplete : function(game11,player11) {
		player11.evolutionManager.addImprov(_$Improv.IMP_ASSIMILATION);
		game11.goals.receive(_$Goal.GOAL_PUT_ASSIMILATION);
	}});
	_g.set(_$Goal.GOAL_PUT_ASSIMILATION,{ id : _$Goal.GOAL_PUT_ASSIMILATION, name : "Construct assimilation cavity", note : "You need to evolve, grow and construct the assimilation cavity. You can only construct it in a habitat.", messageComplete : "Finally. I can begin the host assimilation process."});
	_g.set(_$Goal.GOAL_PROBE_BRAIN,{ id : _$Goal.GOAL_PROBE_BRAIN, name : "Probe the host brain", note : "You need to probe the brain of any host.", messageComplete : "Some of the objects the hosts carry can be useful. There are also functional objects around.", onComplete : function(game12,player12) {
		game12.player.vars.inventoryEnabled = true;
		game12.goals.receive(_$Goal.GOAL_LEARN_ITEMS);
	}});
	_g.set(_$Goal.GOAL_LEARN_ITEMS,{ id : _$Goal.GOAL_LEARN_ITEMS, name : "Learn about any item", note : "You need to learn information about any item.", messageComplete : "I can learn how to use items effectively by probing the host brain for more.", onComplete : function(game13,player13) {
		game13.player.vars.skillsEnabled = true;
		var level = player13.evolutionManager.getLevel(_$Improv.IMP_BRAIN_PROBE);
		if(level >= 2) game13.goals.receive(_$Goal.GOAL_LEARN_SKILLS); else game13.goals.receive(_$Goal.GOAL_PROBE_BRAIN_ADVANCED);
	}});
	_g.set(_$Goal.GOAL_PROBE_BRAIN_ADVANCED,{ id : _$Goal.GOAL_PROBE_BRAIN_ADVANCED, name : "Improve the brain probe", note : "Your brain probe is not advanced enough to gain information about host skills. You need to improve it.", messageComplete : "My brain probe has improved significantly.", onComplete : function(game14,player14) {
		game14.goals.receive(_$Goal.GOAL_LEARN_SKILLS);
	}});
	_g.set(_$Goal.GOAL_LEARN_SKILLS,{ id : _$Goal.GOAL_LEARN_SKILLS, name : "Use the brain probe to learn any skill", note : "Probe the host brain to learn useful skills."});
	_g.set(_$Goal.GOAL_LEARN_SOCIETY,{ id : _$Goal.GOAL_LEARN_SOCIETY, name : "Learn more about the human society", note : "Probe host brains to raise the human society knowledge to 25%. This might require multiple hosts.", messageReceive : "The humans have evolved a large and intricate society. I must study it some more.", messageComplete : "What am I? What is my purpose? I must know. I remember a place vaguely. I should travel there.", onComplete : function(game15,player15) {
		player15.vars.timelineEnabled = true;
		game15.timeline.unlock();
		game15.goals.receive(_$Goal.GOAL_TRAVEL_EVENT);
	}});
	_g.set(_$Goal.GOAL_TRAVEL_EVENT,{ id : _$Goal.GOAL_TRAVEL_EVENT, name : "Travel to the location you remember", note : "Find the location you remember on region map and travel there.", messageComplete : "I found the location. There should be some clues here.", onComplete : function(game16,player16) {
		game16.goals.receive(_$Goal.GOAL_LEARN_CLUE);
	}});
	_g.set(_$Goal.GOAL_LEARN_CLUE,{ id : _$Goal.GOAL_LEARN_CLUE, name : "Find a clue", note : "Find any clue about the events that happened in this location", messageComplete : "The chain of events that led to my current state is long. There were many humans involved.", onComplete : function(game17,player17) {
		player17.vars.npcEnabled = true;
		game17.goals.receive(_$Goal.GOAL_LEARN_NPC);
	}});
	_g.set(_$Goal.GOAL_LEARN_NPC,{ id : _$Goal.GOAL_LEARN_NPC, name : "Learn a clue about any human", note : "Find a clue about any event participant.", messageComplete : "I can investigate the involved humans further by using their computational devices.", onComplete : function(game18,player18) {
		player18.vars.searchEnabled = true;
		game18.goals.receive(_$Goal.GOAL_USE_COMPUTER);
	}});
	_g.set(_$Goal.GOAL_USE_COMPUTER,{ id : _$Goal.GOAL_USE_COMPUTER, name : "Use a computer", note : "Find a laptop or mobile phone and use it successfully. You can only do that in a habitat."});
	$r = _g;
	return $r;
}(this));
objects_AreaObject._maxID = 0;
const_ItemsConst.fists = { id : "fists", name : "fists", type : "weapon", unknown : "fists", weapon : { isRanged : false, skill : _$Skill.SKILL_FISTS, minDamage : 1, maxDamage : 3, verb1 : "punch", verb2 : "punches", type : _$WeaponType.WEAPON_BLUNT}};
const_ItemsConst.items = [{ id : "baton", name : "baton", type : "weapon", unknown : "hard elongated object", weapon : { isRanged : false, skill : _$Skill.SKILL_BATON, minDamage : 1, maxDamage : 6, verb1 : "hit", verb2 : "hits", type : _$WeaponType.WEAPON_BLUNT}},{ id : "stunner", name : "stunner", type : "weapon", unknown : "hard elongated object", weapon : { isRanged : false, skill : _$Skill.SKILL_FISTS, minDamage : 2, maxDamage : 8, verb1 : "stun", verb2 : "stuns", type : _$WeaponType.WEAPON_STUN}},{ id : "pistol", name : "pistol", type : "weapon", unknown : "metallic object with a handle", weapon : { isRanged : true, skill : _$Skill.SKILL_PISTOL, minDamage : 1, maxDamage : 10, verb1 : "shoot", verb2 : "shoots", type : _$WeaponType.WEAPON_KINETIC}},{ id : "assaultRifle", name : "assault rifle", type : "weapon", unknown : "elongated metallic object with a handle", weapon : { isRanged : true, skill : _$Skill.SKILL_RIFLE, minDamage : 2, maxDamage : 12, verb1 : "shoot", verb2 : "shoots", type : _$WeaponType.WEAPON_KINETIC}},{ id : "combatShotgun", name : "combat shotgun", type : "weapon", unknown : "elongated metallic object with a handle", weapon : { isRanged : true, skill : _$Skill.SKILL_SHOTGUN, minDamage : 4, maxDamage : 24, verb1 : "shoot", verb2 : "shoots", type : _$WeaponType.WEAPON_KINETIC}},{ id : "paper", names : ["piece of paper","report","document","note","dossier","sheet of paper","page"], type : "readable", unknown : "rectangular thin object with markings", areaObjectClass : objects_Paper},{ id : "book", names : ["notebook","diary","journal","logbook","organizer","book"], type : "readable", unknown : "rectangular object with lots of markings", areaObjectClass : objects_Book},{ id : "mobilePhone", name : "mobile phone", type : "phone", unknown : "small plastic object"},{ id : "smartphone", name : "smartphone", type : "computer", unknown : "small plastic object"},{ id : "laptop", name : "laptop", type : "computer", unknown : "rectangular plastic object"},{ id : "money", name : "money", type : "junk", unknown : "a pack of soft thin objects"},{ id : "wallet", name : "wallet", type : "junk", unknown : "small leather object"},{ id : "cigarettes", name : "cigarettes", type : "junk", unknown : "small container full of thin cylinders"}];
const_NameConst.types = ["greek","tree","geo","lab","baseA","baseB"];
const_NameConst.greek = ["Alpha","Beta","Gamma","Delta","Epsilon","Zeta","Eta","Theta","Iota","Kappa","Lambda","Mu","Nu","Xi","Omicron","Pi","Rho","Sigma","Tau","Upsilon","Phi","Chi","Psi","Omega"];
const_NameConst.baseA = ["Trueman","Howard","Russell","Stewart","Riley","Foster","James","Stokes","Morris","Dillon","Laurens","Gordon","Raleigh"];
const_NameConst.baseB = ["Fort","Battery","Armory","Camp","Air Force Base","Medical Depot","Army Air Field","Air Force Station"];
const_NameConst.geo = ["Hill","Ridge","Bed","Basin","Valley","Hills","Mountain","Heights","Terrace","Woods","Range","Hollow","Grove"];
const_NameConst.tree = ["Oak","Pine","Redwood","Elm","Magnolia","Dogwood","Cottonwood","Pinyon","Birch","Maple","Hemlock","Aspen","Hemlock"];
const_NameConst.lab = ["Test Center","Testing Bureau","Defense Lab","Laboratory","Testing Grounds","Research Center","Research Lab"];
const_NameConst.maleFirst = ["Aaron","Adam","Alan","Albert","Alex","Alexander","Alfred","Allen","Alvin","Andrew","Anthony","Antonio","Arthur","Barry","Benjamin","Bernard","Bill","Billy","Bobby","Bradley","Brandon","Brent","Brian","Bruce","Bryan","Calvin","Carl","Carlos","Chad","Charles","Charlie","Chris","Christopher","Clarence","Clifford","Clyde","Corey","Craig","Curtis","Dale","Dan","Daniel","Danny","Darrell","David","Dean","Dennis","Derek","Derrick","Don","Donald","Douglas","Dustin","Earl","Eddie","Edward","Edwin","Eric","Ernest","Eugene","Floyd","Francis","Francisco","Frank","Fred","Frederick","Gary","Gene","George","Gerald","Gilbert","Glen","Glenn","Gordon","Greg","Gregory","Harold","Harry","Hector","Henry","Herbert","Herman","Howard","Jack","Jacob","James","Jason","Jay","Jeff","Jeffery","Jeffrey","Jeremy","Jerome","Jerry","Jesse","Jesus","Jim","Jimmy","Joe","Joel","John","Johnny","Jon","Jonathan","Jorge","Jose","Joseph","Joshua","Juan","Justin","Keith","Kenneth","Kevin","Kyle","Larry","Lawrence","Lee","Leo","Leon","Leonard","Leroy","Lester","Lewis","Lloyd","Louis","Luis","Manuel","Marcus","Mario","Mark","Martin","Marvin","Matthew","Maurice","Melvin","Michael","Micheal","Miguel","Mike","Nathan","Nicholas","Norman","Oscar","Patrick","Paul","Pedro","Peter","Philip","Phillip","Ralph","Ramon","Randall","Randy","Ray","Raymond","Ricardo","Richard","Rick","Ricky","Robert","Roberto","Rodney","Roger","Ronald","Ronnie","Roy","Russell","Ryan","Sam","Samuel","Scott","Sean","Shane","Shawn","Stanley","Stephen","Steve","Steven","Terry","Theodore","Thomas","Tim","Timothy","Todd","Tom","Tommy","Tony","Travis","Troy","Tyler","Vernon","Victor","Vincent","Walter","Warren","Wayne","Wesley","William","Willie","Zachary"];
const_NameConst.femaleFirst = ["Alice","Alicia","Alma","Amanda","Amber","Amy","Ana","Andrea","Angela","Anita","Ann","Anna","Anne","Annette","Annie","April","Ashley","Audrey","Barbara","Beatrice","Bernice","Bertha","Beth","Betty","Beverly","Bonnie","Brenda","Brittany","Carmen","Carol","Carolyn","Carrie","Catherine","Cathy","Charlotte","Cheryl","Christina","Christine","Cindy","Clara","Connie","Crystal","Cynthia","Dana","Danielle","Darlene","Dawn","Debbie","Deborah","Debra","Denise","Diana","Diane","Dolores","Donna","Doris","Dorothy","Edith","Edna","Elaine","Eleanor","Elizabeth","Ellen","Elsie","Emily","Emma","Erica","Erin","Esther","Ethel","Eva","Evelyn","Florence","Frances","Gail","Geraldine","Gladys","Gloria","Grace","Hazel","Heather","Helen","Holly","Ida","Irene","Jacqueline","Jamie","Jane","Janet","Janice","Jean","Jeanette","Jeanne","Jennifer","Jessica","Jill","Joan","Joann","Joanne","Josephine","Joyce","Juanita","Judith","Judy","Julia","Julie","June","Karen","Katherine","Kathleen","Kathryn","Kathy","Katie","Kelly","Kim","Kimberly","Kristen","Laura","Lauren","Laurie","Leslie","Lillian","Linda","Lisa","Lois","Loretta","Lori","Lorraine","Louise","Lucille","Lynn","Margaret","Maria","Marie","Marilyn","Marion","Marjorie","Martha","Mary","Megan","Melanie","Melissa","Michele","Michelle","Mildred","Monica","Nancy","Nicole","Norma","Pamela","Patricia","Paula","Pauline","Peggy","Phyllis","Rachel","Rebecca","Regina","Renee","Rhonda","Rita","Roberta","Robin","Rosa","Rose","Ruby","Ruth","Sally","Samantha","Sandra","Sara","Sarah","Shannon","Sharon","Sheila","Sherry","Shirley","Stacy","Stephanie","Sue","Susan","Suzanne","Sylvia","Tammy","Teresa","Thelma","Theresa","Tiffany","Tina","Tracy","Valerie","Vanessa","Veronica","Victoria","Virginia","Vivian","Wanda","Wendy","Yolanda","Yvonne"];
const_NameConst.last = ["Adams","Alexander","Allen","Anderson","Andrews","Armstrong","Arnold","Bailey","Baker","Barnes","Bell","Bennett","Berry","Bishop","Black","Boyd","Bradley","Brooks","Brown","Bryant","Burke","Burns","Butler","Campbell","Carlson","Carpenter","Carr","Carroll","Carter","Chapman","Clark","Cole","Coleman","Collins","Cook","Cooper","Cox","Crawford","Cunningham","Davidson","Davis","Day","Dean","Dixon","Duncan","Dunn","Edwards","Elliott","Ellis","Evans","Ferguson","Fisher","Ford","Foster","Fox","Freeman","Gardner","Gibson","Gilbert","Gordon","Graham","Gray","Green","Griffin","Hall","Hamilton","Hansen","Hanson","Harris","Harrison","Hart","Hayes","Henderson","Henry","Hicks","Hill","Hoffman","Holmes","Howard","Howell","Hudson","Hughes","Hunt","Hunter","Jackson","Jacobs","James","Jenkins","Jensen","Johnson","Johnston","Jones","Jordan","Keller","Kelley","Kelly","Kennedy","King","Knight","Lane","Larson","Lawrence","Lawson","Lee","Lewis","Long","Lynch","Marshall","Martin","Mason","May","Mcdonald","Meyer","Miller","Mills","Mitchell","Moore","Morgan","Morris","Morrison","Murphy","Murray","Myers","Nelson","Nichols","Obrien","Olson","Owens","Palmer","Parker","Patterson","Payne","Perkins","Perry","Peters","Peterson","Phillips","Pierce","Porter","Powell","Price","Ray","Reed","Reynolds","Rice","Richards","Richardson","Riley","Roberts","Robertson","Robinson","Rogers","Rose","Ross","Russell","Ryan","Sanders","Schmidt","Schneider","Schultz","Scott","Shaw","Simmons","Simpson","Smith","Snyder","Spencer","Stephens","Stevens","Stewart","Stone","Sullivan","Taylor","Thomas","Thompson","Tucker","Turner","Wagner","Walker","Wallace","Walsh","Walters","Ward","Warren","Watson","Weaver","Webb","Weber","Welch","Wells","West","Wheeler","White","Williams","Williamson","Wilson","Wood","Woods","Wright","Young"];
const_SkillsConst.skills = [{ id : _$Skill.SKILL_FISTS, name : "fists", defaultLevel : 50},{ id : _$Skill.SKILL_BATON, name : "baton", defaultLevel : 40},{ id : _$Skill.SKILL_PISTOL, name : "pistol", defaultLevel : 20},{ id : _$Skill.SKILL_RIFLE, name : "rifle", defaultLevel : 25},{ id : _$Skill.SKILL_SHOTGUN, name : "shotgun", defaultLevel : 30},{ id : _$Skill.SKILL_COMPUTER, name : "computer use", defaultLevel : 0},{ id : _$Skill.KNOW_SMOKING, name : "smoking", defaultLevel : 0, isKnowledge : true, isBool : true},{ id : _$Skill.KNOW_SHOPPING, name : "shopping", defaultLevel : 0, isKnowledge : true, isBool : true},{ id : _$Skill.KNOW_SOCIETY, name : "human society", defaultLevel : 0, isKnowledge : true},{ id : _$Skill.KNOW_DOPAMINE, name : "dopamine regulation", defaultLevel : 0, isKnowledge : true, isBool : true},{ id : _$Skill.KNOW_HABITAT, name : "microhabitat", defaultLevel : 0, isKnowledge : true, isBool : true}];
const_TraitsConst.traits = [{ id : _$AITraitType.TRAIT_DRUG_ADDICT, name : "drug addict", note : "Addicted to drugs."}];
const_WorldConst.areas = (function($this) {
	var $r;
	var _g = new haxe_ds_EnumValueMap();
	{
		var value = { id : _$AreaType.AREA_GROUND, type : "wilderness", name : "Uninhabited area", width : 100, height : 100, canEnter : true, isInhabited : false, commonAI : 0, uncommonAI : 0, buildingChance : 0.0, lawResponceTime : 0, lawResponceAmount : 0, lawResponceEnabled : false, isHighRisk : false, ai : (function($this) {
			var $r;
			var _g1 = new haxe_ds_StringMap();
			if(__map_reserved.dog != null) _g1.setReserved("dog",5); else _g1.h["dog"] = 5;
			$r = _g1;
			return $r;
		}($this)), objects : []};
		_g.set(_$AreaType.AREA_GROUND,value);
	}
	{
		var value1 = { id : _$AreaType.AREA_CITY_LOW, type : "city", name : "Low-density city area", width : 100, height : 100, canEnter : true, isInhabited : true, commonAI : 10, uncommonAI : 5, buildingChance : 0.05, lawResponceTime : 10, lawResponceAmount : 2, lawResponceEnabled : true, isHighRisk : false, ai : (function($this) {
			var $r;
			var _g2 = new haxe_ds_StringMap();
			if(__map_reserved.dog != null) _g2.setReserved("dog",20); else _g2.h["dog"] = 20;
			if(__map_reserved.civilian != null) _g2.setReserved("civilian",75); else _g2.h["civilian"] = 75;
			if(__map_reserved.police != null) _g2.setReserved("police",5); else _g2.h["police"] = 5;
			$r = _g2;
			return $r;
		}($this)), objects : [{ id : "sewer_hatch", amount : 10}]};
		_g.set(_$AreaType.AREA_CITY_LOW,value1);
	}
	{
		var value2 = { id : _$AreaType.AREA_CITY_MEDIUM, type : "city", name : "Medium-density city area", width : 100, height : 100, canEnter : true, isInhabited : true, commonAI : 20, uncommonAI : 10, buildingChance : 0.15, lawResponceTime : 5, lawResponceAmount : 2, lawResponceEnabled : true, isHighRisk : false, ai : (function($this) {
			var $r;
			var _g3 = new haxe_ds_StringMap();
			if(__map_reserved.dog != null) _g3.setReserved("dog",15); else _g3.h["dog"] = 15;
			if(__map_reserved.civilian != null) _g3.setReserved("civilian",75); else _g3.h["civilian"] = 75;
			if(__map_reserved.police != null) _g3.setReserved("police",10); else _g3.h["police"] = 10;
			$r = _g3;
			return $r;
		}($this)), objects : [{ id : "sewer_hatch", amount : 20}]};
		_g.set(_$AreaType.AREA_CITY_MEDIUM,value2);
	}
	{
		var value3 = { id : _$AreaType.AREA_CITY_HIGH, type : "city", name : "High-density city area", width : 100, height : 100, canEnter : true, isInhabited : true, commonAI : 30, uncommonAI : 15, buildingChance : 0.30, lawResponceTime : 3, lawResponceAmount : 3, lawResponceEnabled : true, isHighRisk : true, ai : (function($this) {
			var $r;
			var _g4 = new haxe_ds_StringMap();
			if(__map_reserved.dog != null) _g4.setReserved("dog",5); else _g4.h["dog"] = 5;
			if(__map_reserved.civilian != null) _g4.setReserved("civilian",70); else _g4.h["civilian"] = 70;
			if(__map_reserved.police != null) _g4.setReserved("police",25); else _g4.h["police"] = 25;
			$r = _g4;
			return $r;
		}($this)), objects : [{ id : "sewer_hatch", amount : 20}]};
		_g.set(_$AreaType.AREA_CITY_HIGH,value3);
	}
	{
		var value4 = { id : _$AreaType.AREA_MILITARY_BASE, type : "militaryBase", name : "Military base", width : 50, height : 50, canEnter : true, isInhabited : true, commonAI : 10, uncommonAI : 0, buildingChance : 0.006, lawResponceTime : 0, lawResponceAmount : 0, lawResponceEnabled : false, isHighRisk : true, ai : (function($this) {
			var $r;
			var _g5 = new haxe_ds_StringMap();
			if(__map_reserved.soldier != null) _g5.setReserved("soldier",100); else _g5.h["soldier"] = 100;
			$r = _g5;
			return $r;
		}($this)), objects : [{ id : "sewer_hatch", amount : 5}]};
		_g.set(_$AreaType.AREA_MILITARY_BASE,value4);
	}
	{
		var value5 = { id : _$AreaType.AREA_FACILITY, type : "facility", name : "Facility", width : 50, height : 50, canEnter : true, isInhabited : true, commonAI : 10, uncommonAI : 0, buildingChance : 0.006, lawResponceTime : 5, lawResponceAmount : 2, lawResponceEnabled : true, isHighRisk : true, ai : (function($this) {
			var $r;
			var _g6 = new haxe_ds_StringMap();
			if(__map_reserved.civilian != null) _g6.setReserved("civilian",90); else _g6.h["civilian"] = 90;
			if(__map_reserved.security != null) _g6.setReserved("security",10); else _g6.h["security"] = 10;
			$r = _g6;
			return $r;
		}($this)), objects : [{ id : "sewer_hatch", amount : 5}]};
		_g.set(_$AreaType.AREA_FACILITY,value5);
	}
	{
		var value6 = { id : _$AreaType.AREA_HABITAT, type : "habitat", name : "Habitat area", width : 20, height : 20, canEnter : true, isInhabited : false, commonAI : 0, uncommonAI : 0, buildingChance : 0, lawResponceTime : 10, lawResponceAmount : 4, lawResponceEnabled : true, isHighRisk : false, ai : new haxe_ds_StringMap(), objects : []};
		_g.set(_$AreaType.AREA_HABITAT,value6);
	}
	$r = _g;
	return $r;
}(this));
const_WorldConst.regions = [{ id : "city"}];
const_WorldConst.REGION_CITY = "city";
entities_TextWindow._emptyList = new List();
entities_HUD.cnt = 0;
entities_MouseEntity.CURSOR_DEFAULT = 0;
entities_MouseEntity.CURSOR_ATTACK = 1;
entities_MouseEntity.CURSOR_DEBUG = 2;
entities_MouseEntity.MODE_DEFAULT = 0;
entities_MouseEntity.MODE_DEBUG = 1;
entities_MouseEntity.CURSOR_WIDTH = 24;
entities_MouseEntity.CURSOR_HEIGHT = 24;
game_AreaGame._maxID = 0;
game_AreaGenerator.TEMP_BUILDING = 0;
game_AreaGenerator.TEMP_ROAD = 1;
game_AreaGenerator.TEMP_ALLEY = 2;
game_AreaGenerator.TEMP_ALLEYTEMP = 3;
game_AreaGenerator.TEMP_ACTUAL_BUILDING = 4;
game_AreaGenerator.TEMP_WALKWAY = 5;
game_Player.HOST_CONTROL_BASE = 10;
game_RegionGame._maxID = 0;
haxe_Serializer.USE_CACHE = false;
haxe_Serializer.USE_ENUM_INDEX = false;
haxe_Serializer.BASE64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:";
haxe_Unserializer.DEFAULT_RESOLVER = Type;
haxe_Unserializer.BASE64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:";
haxe_ds_ObjectMap.count = 0;
haxe_io_FPHelper.i64tmp = (function($this) {
	var $r;
	var x = new haxe__$Int64__$_$_$Int64(0,0);
	$r = x;
	return $r;
}(this));
haxe_io_FPHelper.LN2 = 0.6931471805599453;
js_html_compat_Uint8Array.BYTES_PER_ELEMENT = 1;
lime__$backend_html5_HTML5Window.dummyCharacter = "";
lime__$backend_html5_HTML5Window.windowID = 0;
lime_audio_openal_AL.NONE = 0;
lime_audio_openal_AL.FALSE = 0;
lime_audio_openal_AL.TRUE = 1;
lime_audio_openal_AL.SOURCE_RELATIVE = 514;
lime_audio_openal_AL.CONE_INNER_ANGLE = 4097;
lime_audio_openal_AL.CONE_OUTER_ANGLE = 4098;
lime_audio_openal_AL.PITCH = 4099;
lime_audio_openal_AL.POSITION = 4100;
lime_audio_openal_AL.DIRECTION = 4101;
lime_audio_openal_AL.VELOCITY = 4102;
lime_audio_openal_AL.LOOPING = 4103;
lime_audio_openal_AL.BUFFER = 4105;
lime_audio_openal_AL.GAIN = 4106;
lime_audio_openal_AL.MIN_GAIN = 4109;
lime_audio_openal_AL.MAX_GAIN = 4110;
lime_audio_openal_AL.ORIENTATION = 4111;
lime_audio_openal_AL.SOURCE_STATE = 4112;
lime_audio_openal_AL.INITIAL = 4113;
lime_audio_openal_AL.PLAYING = 4114;
lime_audio_openal_AL.PAUSED = 4115;
lime_audio_openal_AL.STOPPED = 4116;
lime_audio_openal_AL.BUFFERS_QUEUED = 4117;
lime_audio_openal_AL.BUFFERS_PROCESSED = 4118;
lime_audio_openal_AL.REFERENCE_DISTANCE = 4128;
lime_audio_openal_AL.ROLLOFF_FACTOR = 4129;
lime_audio_openal_AL.CONE_OUTER_GAIN = 4130;
lime_audio_openal_AL.MAX_DISTANCE = 4131;
lime_audio_openal_AL.SEC_OFFSET = 4132;
lime_audio_openal_AL.SAMPLE_OFFSET = 4133;
lime_audio_openal_AL.BYTE_OFFSET = 4134;
lime_audio_openal_AL.SOURCE_TYPE = 4135;
lime_audio_openal_AL.STATIC = 4136;
lime_audio_openal_AL.STREAMING = 4137;
lime_audio_openal_AL.UNDETERMINED = 4144;
lime_audio_openal_AL.FORMAT_MONO8 = 4352;
lime_audio_openal_AL.FORMAT_MONO16 = 4353;
lime_audio_openal_AL.FORMAT_STEREO8 = 4354;
lime_audio_openal_AL.FORMAT_STEREO16 = 4355;
lime_audio_openal_AL.FREQUENCY = 8193;
lime_audio_openal_AL.BITS = 8194;
lime_audio_openal_AL.CHANNELS = 8195;
lime_audio_openal_AL.SIZE = 8196;
lime_audio_openal_AL.NO_ERROR = 0;
lime_audio_openal_AL.INVALID_NAME = 40961;
lime_audio_openal_AL.INVALID_ENUM = 40962;
lime_audio_openal_AL.INVALID_VALUE = 40963;
lime_audio_openal_AL.INVALID_OPERATION = 40964;
lime_audio_openal_AL.OUT_OF_MEMORY = 40965;
lime_audio_openal_AL.VENDOR = 45057;
lime_audio_openal_AL.VERSION = 45058;
lime_audio_openal_AL.RENDERER = 45059;
lime_audio_openal_AL.EXTENSIONS = 45060;
lime_audio_openal_AL.DOPPLER_FACTOR = 49152;
lime_audio_openal_AL.SPEED_OF_SOUND = 49155;
lime_audio_openal_AL.DOPPLER_VELOCITY = 49153;
lime_audio_openal_AL.DISTANCE_MODEL = 53248;
lime_audio_openal_AL.INVERSE_DISTANCE = 53249;
lime_audio_openal_AL.INVERSE_DISTANCE_CLAMPED = 53250;
lime_audio_openal_AL.LINEAR_DISTANCE = 53251;
lime_audio_openal_AL.LINEAR_DISTANCE_CLAMPED = 53252;
lime_audio_openal_AL.EXPONENT_DISTANCE = 53253;
lime_audio_openal_AL.EXPONENT_DISTANCE_CLAMPED = 53254;
lime_audio_openal_ALC.FALSE = 0;
lime_audio_openal_ALC.TRUE = 1;
lime_audio_openal_ALC.FREQUENCY = 4103;
lime_audio_openal_ALC.REFRESH = 4104;
lime_audio_openal_ALC.SYNC = 4105;
lime_audio_openal_ALC.MONO_SOURCES = 4112;
lime_audio_openal_ALC.STEREO_SOURCES = 4113;
lime_audio_openal_ALC.NO_ERROR = 0;
lime_audio_openal_ALC.INVALID_DEVICE = 40961;
lime_audio_openal_ALC.INVALID_CONTEXT = 40962;
lime_audio_openal_ALC.INVALID_ENUM = 40963;
lime_audio_openal_ALC.INVALID_VALUE = 40964;
lime_audio_openal_ALC.OUT_OF_MEMORY = 40965;
lime_audio_openal_ALC.ATTRIBUTES_SIZE = 4098;
lime_audio_openal_ALC.ALL_ATTRIBUTES = 4099;
lime_audio_openal_ALC.DEFAULT_DEVICE_SPECIFIER = 4100;
lime_audio_openal_ALC.DEVICE_SPECIFIER = 4101;
lime_audio_openal_ALC.EXTENSIONS = 4102;
lime_audio_openal_ALC.ENUMERATE_ALL_EXT = 1;
lime_audio_openal_ALC.DEFAULT_ALL_DEVICES_SPECIFIER = 4114;
lime_audio_openal_ALC.ALL_DEVICES_SPECIFIER = 4115;
lime_graphics_Image.__base64Chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
lime_graphics_cairo__$CairoFTFontFace_CairoFTFontFace_$Impl_$.FT_LOAD_FORCE_AUTOHINT = 32;
lime_graphics_opengl_ExtensionPackedDepthStencil.DEPTH24_STENCIL8_EXT = 35056;
lime_graphics_opengl_GL.DEPTH_BUFFER_BIT = 256;
lime_graphics_opengl_GL.STENCIL_BUFFER_BIT = 1024;
lime_graphics_opengl_GL.COLOR_BUFFER_BIT = 16384;
lime_graphics_opengl_GL.POINTS = 0;
lime_graphics_opengl_GL.LINES = 1;
lime_graphics_opengl_GL.LINE_LOOP = 2;
lime_graphics_opengl_GL.LINE_STRIP = 3;
lime_graphics_opengl_GL.TRIANGLES = 4;
lime_graphics_opengl_GL.TRIANGLE_STRIP = 5;
lime_graphics_opengl_GL.TRIANGLE_FAN = 6;
lime_graphics_opengl_GL.ZERO = 0;
lime_graphics_opengl_GL.ONE = 1;
lime_graphics_opengl_GL.SRC_COLOR = 768;
lime_graphics_opengl_GL.ONE_MINUS_SRC_COLOR = 769;
lime_graphics_opengl_GL.SRC_ALPHA = 770;
lime_graphics_opengl_GL.ONE_MINUS_SRC_ALPHA = 771;
lime_graphics_opengl_GL.DST_ALPHA = 772;
lime_graphics_opengl_GL.ONE_MINUS_DST_ALPHA = 773;
lime_graphics_opengl_GL.DST_COLOR = 774;
lime_graphics_opengl_GL.ONE_MINUS_DST_COLOR = 775;
lime_graphics_opengl_GL.SRC_ALPHA_SATURATE = 776;
lime_graphics_opengl_GL.FUNC_ADD = 32774;
lime_graphics_opengl_GL.BLEND_EQUATION = 32777;
lime_graphics_opengl_GL.BLEND_EQUATION_RGB = 32777;
lime_graphics_opengl_GL.BLEND_EQUATION_ALPHA = 34877;
lime_graphics_opengl_GL.FUNC_SUBTRACT = 32778;
lime_graphics_opengl_GL.FUNC_REVERSE_SUBTRACT = 32779;
lime_graphics_opengl_GL.BLEND_DST_RGB = 32968;
lime_graphics_opengl_GL.BLEND_SRC_RGB = 32969;
lime_graphics_opengl_GL.BLEND_DST_ALPHA = 32970;
lime_graphics_opengl_GL.BLEND_SRC_ALPHA = 32971;
lime_graphics_opengl_GL.CONSTANT_COLOR = 32769;
lime_graphics_opengl_GL.ONE_MINUS_CONSTANT_COLOR = 32770;
lime_graphics_opengl_GL.CONSTANT_ALPHA = 32771;
lime_graphics_opengl_GL.ONE_MINUS_CONSTANT_ALPHA = 32772;
lime_graphics_opengl_GL.BLEND_COLOR = 32773;
lime_graphics_opengl_GL.ARRAY_BUFFER = 34962;
lime_graphics_opengl_GL.ELEMENT_ARRAY_BUFFER = 34963;
lime_graphics_opengl_GL.ARRAY_BUFFER_BINDING = 34964;
lime_graphics_opengl_GL.ELEMENT_ARRAY_BUFFER_BINDING = 34965;
lime_graphics_opengl_GL.STREAM_DRAW = 35040;
lime_graphics_opengl_GL.STATIC_DRAW = 35044;
lime_graphics_opengl_GL.DYNAMIC_DRAW = 35048;
lime_graphics_opengl_GL.BUFFER_SIZE = 34660;
lime_graphics_opengl_GL.BUFFER_USAGE = 34661;
lime_graphics_opengl_GL.CURRENT_VERTEX_ATTRIB = 34342;
lime_graphics_opengl_GL.FRONT = 1028;
lime_graphics_opengl_GL.BACK = 1029;
lime_graphics_opengl_GL.FRONT_AND_BACK = 1032;
lime_graphics_opengl_GL.CULL_FACE = 2884;
lime_graphics_opengl_GL.BLEND = 3042;
lime_graphics_opengl_GL.DITHER = 3024;
lime_graphics_opengl_GL.STENCIL_TEST = 2960;
lime_graphics_opengl_GL.DEPTH_TEST = 2929;
lime_graphics_opengl_GL.SCISSOR_TEST = 3089;
lime_graphics_opengl_GL.POLYGON_OFFSET_FILL = 32823;
lime_graphics_opengl_GL.SAMPLE_ALPHA_TO_COVERAGE = 32926;
lime_graphics_opengl_GL.SAMPLE_COVERAGE = 32928;
lime_graphics_opengl_GL.NO_ERROR = 0;
lime_graphics_opengl_GL.INVALID_ENUM = 1280;
lime_graphics_opengl_GL.INVALID_VALUE = 1281;
lime_graphics_opengl_GL.INVALID_OPERATION = 1282;
lime_graphics_opengl_GL.OUT_OF_MEMORY = 1285;
lime_graphics_opengl_GL.CW = 2304;
lime_graphics_opengl_GL.CCW = 2305;
lime_graphics_opengl_GL.LINE_WIDTH = 2849;
lime_graphics_opengl_GL.ALIASED_POINT_SIZE_RANGE = 33901;
lime_graphics_opengl_GL.ALIASED_LINE_WIDTH_RANGE = 33902;
lime_graphics_opengl_GL.CULL_FACE_MODE = 2885;
lime_graphics_opengl_GL.FRONT_FACE = 2886;
lime_graphics_opengl_GL.DEPTH_RANGE = 2928;
lime_graphics_opengl_GL.DEPTH_WRITEMASK = 2930;
lime_graphics_opengl_GL.DEPTH_CLEAR_VALUE = 2931;
lime_graphics_opengl_GL.DEPTH_FUNC = 2932;
lime_graphics_opengl_GL.STENCIL_CLEAR_VALUE = 2961;
lime_graphics_opengl_GL.STENCIL_FUNC = 2962;
lime_graphics_opengl_GL.STENCIL_FAIL = 2964;
lime_graphics_opengl_GL.STENCIL_PASS_DEPTH_FAIL = 2965;
lime_graphics_opengl_GL.STENCIL_PASS_DEPTH_PASS = 2966;
lime_graphics_opengl_GL.STENCIL_REF = 2967;
lime_graphics_opengl_GL.STENCIL_VALUE_MASK = 2963;
lime_graphics_opengl_GL.STENCIL_WRITEMASK = 2968;
lime_graphics_opengl_GL.STENCIL_BACK_FUNC = 34816;
lime_graphics_opengl_GL.STENCIL_BACK_FAIL = 34817;
lime_graphics_opengl_GL.STENCIL_BACK_PASS_DEPTH_FAIL = 34818;
lime_graphics_opengl_GL.STENCIL_BACK_PASS_DEPTH_PASS = 34819;
lime_graphics_opengl_GL.STENCIL_BACK_REF = 36003;
lime_graphics_opengl_GL.STENCIL_BACK_VALUE_MASK = 36004;
lime_graphics_opengl_GL.STENCIL_BACK_WRITEMASK = 36005;
lime_graphics_opengl_GL.VIEWPORT = 2978;
lime_graphics_opengl_GL.SCISSOR_BOX = 3088;
lime_graphics_opengl_GL.COLOR_CLEAR_VALUE = 3106;
lime_graphics_opengl_GL.COLOR_WRITEMASK = 3107;
lime_graphics_opengl_GL.UNPACK_ALIGNMENT = 3317;
lime_graphics_opengl_GL.PACK_ALIGNMENT = 3333;
lime_graphics_opengl_GL.MAX_TEXTURE_SIZE = 3379;
lime_graphics_opengl_GL.MAX_VIEWPORT_DIMS = 3386;
lime_graphics_opengl_GL.SUBPIXEL_BITS = 3408;
lime_graphics_opengl_GL.RED_BITS = 3410;
lime_graphics_opengl_GL.GREEN_BITS = 3411;
lime_graphics_opengl_GL.BLUE_BITS = 3412;
lime_graphics_opengl_GL.ALPHA_BITS = 3413;
lime_graphics_opengl_GL.DEPTH_BITS = 3414;
lime_graphics_opengl_GL.STENCIL_BITS = 3415;
lime_graphics_opengl_GL.POLYGON_OFFSET_UNITS = 10752;
lime_graphics_opengl_GL.POLYGON_OFFSET_FACTOR = 32824;
lime_graphics_opengl_GL.TEXTURE_BINDING_2D = 32873;
lime_graphics_opengl_GL.SAMPLE_BUFFERS = 32936;
lime_graphics_opengl_GL.SAMPLES = 32937;
lime_graphics_opengl_GL.SAMPLE_COVERAGE_VALUE = 32938;
lime_graphics_opengl_GL.SAMPLE_COVERAGE_INVERT = 32939;
lime_graphics_opengl_GL.COMPRESSED_TEXTURE_FORMATS = 34467;
lime_graphics_opengl_GL.DONT_CARE = 4352;
lime_graphics_opengl_GL.FASTEST = 4353;
lime_graphics_opengl_GL.NICEST = 4354;
lime_graphics_opengl_GL.GENERATE_MIPMAP_HINT = 33170;
lime_graphics_opengl_GL.BYTE = 5120;
lime_graphics_opengl_GL.UNSIGNED_BYTE = 5121;
lime_graphics_opengl_GL.SHORT = 5122;
lime_graphics_opengl_GL.UNSIGNED_SHORT = 5123;
lime_graphics_opengl_GL.INT = 5124;
lime_graphics_opengl_GL.UNSIGNED_INT = 5125;
lime_graphics_opengl_GL.FLOAT = 5126;
lime_graphics_opengl_GL.DEPTH_COMPONENT = 6402;
lime_graphics_opengl_GL.ALPHA = 6406;
lime_graphics_opengl_GL.RGB = 6407;
lime_graphics_opengl_GL.RGBA = 6408;
lime_graphics_opengl_GL.BGR_EXT = 32992;
lime_graphics_opengl_GL.BGRA_EXT = 32993;
lime_graphics_opengl_GL.LUMINANCE = 6409;
lime_graphics_opengl_GL.LUMINANCE_ALPHA = 6410;
lime_graphics_opengl_GL.UNSIGNED_SHORT_4_4_4_4 = 32819;
lime_graphics_opengl_GL.UNSIGNED_SHORT_5_5_5_1 = 32820;
lime_graphics_opengl_GL.UNSIGNED_SHORT_5_6_5 = 33635;
lime_graphics_opengl_GL.FRAGMENT_SHADER = 35632;
lime_graphics_opengl_GL.VERTEX_SHADER = 35633;
lime_graphics_opengl_GL.MAX_VERTEX_ATTRIBS = 34921;
lime_graphics_opengl_GL.MAX_VERTEX_UNIFORM_VECTORS = 36347;
lime_graphics_opengl_GL.MAX_VARYING_VECTORS = 36348;
lime_graphics_opengl_GL.MAX_COMBINED_TEXTURE_IMAGE_UNITS = 35661;
lime_graphics_opengl_GL.MAX_VERTEX_TEXTURE_IMAGE_UNITS = 35660;
lime_graphics_opengl_GL.MAX_TEXTURE_IMAGE_UNITS = 34930;
lime_graphics_opengl_GL.MAX_FRAGMENT_UNIFORM_VECTORS = 36349;
lime_graphics_opengl_GL.SHADER_TYPE = 35663;
lime_graphics_opengl_GL.DELETE_STATUS = 35712;
lime_graphics_opengl_GL.LINK_STATUS = 35714;
lime_graphics_opengl_GL.VALIDATE_STATUS = 35715;
lime_graphics_opengl_GL.ATTACHED_SHADERS = 35717;
lime_graphics_opengl_GL.ACTIVE_UNIFORMS = 35718;
lime_graphics_opengl_GL.ACTIVE_ATTRIBUTES = 35721;
lime_graphics_opengl_GL.SHADING_LANGUAGE_VERSION = 35724;
lime_graphics_opengl_GL.CURRENT_PROGRAM = 35725;
lime_graphics_opengl_GL.NEVER = 512;
lime_graphics_opengl_GL.LESS = 513;
lime_graphics_opengl_GL.EQUAL = 514;
lime_graphics_opengl_GL.LEQUAL = 515;
lime_graphics_opengl_GL.GREATER = 516;
lime_graphics_opengl_GL.NOTEQUAL = 517;
lime_graphics_opengl_GL.GEQUAL = 518;
lime_graphics_opengl_GL.ALWAYS = 519;
lime_graphics_opengl_GL.KEEP = 7680;
lime_graphics_opengl_GL.REPLACE = 7681;
lime_graphics_opengl_GL.INCR = 7682;
lime_graphics_opengl_GL.DECR = 7683;
lime_graphics_opengl_GL.INVERT = 5386;
lime_graphics_opengl_GL.INCR_WRAP = 34055;
lime_graphics_opengl_GL.DECR_WRAP = 34056;
lime_graphics_opengl_GL.VENDOR = 7936;
lime_graphics_opengl_GL.RENDERER = 7937;
lime_graphics_opengl_GL.VERSION = 7938;
lime_graphics_opengl_GL.NEAREST = 9728;
lime_graphics_opengl_GL.LINEAR = 9729;
lime_graphics_opengl_GL.NEAREST_MIPMAP_NEAREST = 9984;
lime_graphics_opengl_GL.LINEAR_MIPMAP_NEAREST = 9985;
lime_graphics_opengl_GL.NEAREST_MIPMAP_LINEAR = 9986;
lime_graphics_opengl_GL.LINEAR_MIPMAP_LINEAR = 9987;
lime_graphics_opengl_GL.TEXTURE_MAG_FILTER = 10240;
lime_graphics_opengl_GL.TEXTURE_MIN_FILTER = 10241;
lime_graphics_opengl_GL.TEXTURE_WRAP_S = 10242;
lime_graphics_opengl_GL.TEXTURE_WRAP_T = 10243;
lime_graphics_opengl_GL.TEXTURE_2D = 3553;
lime_graphics_opengl_GL.TEXTURE = 5890;
lime_graphics_opengl_GL.TEXTURE_CUBE_MAP = 34067;
lime_graphics_opengl_GL.TEXTURE_BINDING_CUBE_MAP = 34068;
lime_graphics_opengl_GL.TEXTURE_CUBE_MAP_POSITIVE_X = 34069;
lime_graphics_opengl_GL.TEXTURE_CUBE_MAP_NEGATIVE_X = 34070;
lime_graphics_opengl_GL.TEXTURE_CUBE_MAP_POSITIVE_Y = 34071;
lime_graphics_opengl_GL.TEXTURE_CUBE_MAP_NEGATIVE_Y = 34072;
lime_graphics_opengl_GL.TEXTURE_CUBE_MAP_POSITIVE_Z = 34073;
lime_graphics_opengl_GL.TEXTURE_CUBE_MAP_NEGATIVE_Z = 34074;
lime_graphics_opengl_GL.MAX_CUBE_MAP_TEXTURE_SIZE = 34076;
lime_graphics_opengl_GL.TEXTURE0 = 33984;
lime_graphics_opengl_GL.TEXTURE1 = 33985;
lime_graphics_opengl_GL.TEXTURE2 = 33986;
lime_graphics_opengl_GL.TEXTURE3 = 33987;
lime_graphics_opengl_GL.TEXTURE4 = 33988;
lime_graphics_opengl_GL.TEXTURE5 = 33989;
lime_graphics_opengl_GL.TEXTURE6 = 33990;
lime_graphics_opengl_GL.TEXTURE7 = 33991;
lime_graphics_opengl_GL.TEXTURE8 = 33992;
lime_graphics_opengl_GL.TEXTURE9 = 33993;
lime_graphics_opengl_GL.TEXTURE10 = 33994;
lime_graphics_opengl_GL.TEXTURE11 = 33995;
lime_graphics_opengl_GL.TEXTURE12 = 33996;
lime_graphics_opengl_GL.TEXTURE13 = 33997;
lime_graphics_opengl_GL.TEXTURE14 = 33998;
lime_graphics_opengl_GL.TEXTURE15 = 33999;
lime_graphics_opengl_GL.TEXTURE16 = 34000;
lime_graphics_opengl_GL.TEXTURE17 = 34001;
lime_graphics_opengl_GL.TEXTURE18 = 34002;
lime_graphics_opengl_GL.TEXTURE19 = 34003;
lime_graphics_opengl_GL.TEXTURE20 = 34004;
lime_graphics_opengl_GL.TEXTURE21 = 34005;
lime_graphics_opengl_GL.TEXTURE22 = 34006;
lime_graphics_opengl_GL.TEXTURE23 = 34007;
lime_graphics_opengl_GL.TEXTURE24 = 34008;
lime_graphics_opengl_GL.TEXTURE25 = 34009;
lime_graphics_opengl_GL.TEXTURE26 = 34010;
lime_graphics_opengl_GL.TEXTURE27 = 34011;
lime_graphics_opengl_GL.TEXTURE28 = 34012;
lime_graphics_opengl_GL.TEXTURE29 = 34013;
lime_graphics_opengl_GL.TEXTURE30 = 34014;
lime_graphics_opengl_GL.TEXTURE31 = 34015;
lime_graphics_opengl_GL.ACTIVE_TEXTURE = 34016;
lime_graphics_opengl_GL.REPEAT = 10497;
lime_graphics_opengl_GL.CLAMP_TO_EDGE = 33071;
lime_graphics_opengl_GL.MIRRORED_REPEAT = 33648;
lime_graphics_opengl_GL.FLOAT_VEC2 = 35664;
lime_graphics_opengl_GL.FLOAT_VEC3 = 35665;
lime_graphics_opengl_GL.FLOAT_VEC4 = 35666;
lime_graphics_opengl_GL.INT_VEC2 = 35667;
lime_graphics_opengl_GL.INT_VEC3 = 35668;
lime_graphics_opengl_GL.INT_VEC4 = 35669;
lime_graphics_opengl_GL.BOOL = 35670;
lime_graphics_opengl_GL.BOOL_VEC2 = 35671;
lime_graphics_opengl_GL.BOOL_VEC3 = 35672;
lime_graphics_opengl_GL.BOOL_VEC4 = 35673;
lime_graphics_opengl_GL.FLOAT_MAT2 = 35674;
lime_graphics_opengl_GL.FLOAT_MAT3 = 35675;
lime_graphics_opengl_GL.FLOAT_MAT4 = 35676;
lime_graphics_opengl_GL.SAMPLER_2D = 35678;
lime_graphics_opengl_GL.SAMPLER_CUBE = 35680;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_ENABLED = 34338;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_SIZE = 34339;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_STRIDE = 34340;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_TYPE = 34341;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_NORMALIZED = 34922;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_POINTER = 34373;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 34975;
lime_graphics_opengl_GL.VERTEX_PROGRAM_POINT_SIZE = 34370;
lime_graphics_opengl_GL.POINT_SPRITE = 34913;
lime_graphics_opengl_GL.COMPILE_STATUS = 35713;
lime_graphics_opengl_GL.LOW_FLOAT = 36336;
lime_graphics_opengl_GL.MEDIUM_FLOAT = 36337;
lime_graphics_opengl_GL.HIGH_FLOAT = 36338;
lime_graphics_opengl_GL.LOW_INT = 36339;
lime_graphics_opengl_GL.MEDIUM_INT = 36340;
lime_graphics_opengl_GL.HIGH_INT = 36341;
lime_graphics_opengl_GL.FRAMEBUFFER = 36160;
lime_graphics_opengl_GL.RENDERBUFFER = 36161;
lime_graphics_opengl_GL.RGBA4 = 32854;
lime_graphics_opengl_GL.RGB5_A1 = 32855;
lime_graphics_opengl_GL.RGB565 = 36194;
lime_graphics_opengl_GL.DEPTH_COMPONENT16 = 33189;
lime_graphics_opengl_GL.STENCIL_INDEX = 6401;
lime_graphics_opengl_GL.STENCIL_INDEX8 = 36168;
lime_graphics_opengl_GL.DEPTH_STENCIL = 34041;
lime_graphics_opengl_GL.RENDERBUFFER_WIDTH = 36162;
lime_graphics_opengl_GL.RENDERBUFFER_HEIGHT = 36163;
lime_graphics_opengl_GL.RENDERBUFFER_INTERNAL_FORMAT = 36164;
lime_graphics_opengl_GL.RENDERBUFFER_RED_SIZE = 36176;
lime_graphics_opengl_GL.RENDERBUFFER_GREEN_SIZE = 36177;
lime_graphics_opengl_GL.RENDERBUFFER_BLUE_SIZE = 36178;
lime_graphics_opengl_GL.RENDERBUFFER_ALPHA_SIZE = 36179;
lime_graphics_opengl_GL.RENDERBUFFER_DEPTH_SIZE = 36180;
lime_graphics_opengl_GL.RENDERBUFFER_STENCIL_SIZE = 36181;
lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = 36048;
lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = 36049;
lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = 36050;
lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 36051;
lime_graphics_opengl_GL.COLOR_ATTACHMENT0 = 36064;
lime_graphics_opengl_GL.DEPTH_ATTACHMENT = 36096;
lime_graphics_opengl_GL.STENCIL_ATTACHMENT = 36128;
lime_graphics_opengl_GL.DEPTH_STENCIL_ATTACHMENT = 33306;
lime_graphics_opengl_GL.NONE = 0;
lime_graphics_opengl_GL.FRAMEBUFFER_COMPLETE = 36053;
lime_graphics_opengl_GL.FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 36054;
lime_graphics_opengl_GL.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 36055;
lime_graphics_opengl_GL.FRAMEBUFFER_INCOMPLETE_DIMENSIONS = 36057;
lime_graphics_opengl_GL.FRAMEBUFFER_UNSUPPORTED = 36061;
lime_graphics_opengl_GL.FRAMEBUFFER_BINDING = 36006;
lime_graphics_opengl_GL.RENDERBUFFER_BINDING = 36007;
lime_graphics_opengl_GL.MAX_RENDERBUFFER_SIZE = 34024;
lime_graphics_opengl_GL.INVALID_FRAMEBUFFER_OPERATION = 1286;
lime_graphics_opengl_GL.UNPACK_FLIP_Y_WEBGL = 37440;
lime_graphics_opengl_GL.UNPACK_PREMULTIPLY_ALPHA_WEBGL = 37441;
lime_graphics_opengl_GL.CONTEXT_LOST_WEBGL = 37442;
lime_graphics_opengl_GL.UNPACK_COLORSPACE_CONVERSION_WEBGL = 37443;
lime_graphics_opengl_GL.BROWSER_DEFAULT_WEBGL = 37444;
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__identity = [1.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0];
lime_math__$Matrix4_Matrix4_$Impl_$.__identity = [1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0];
lime_system_BackgroundWorker.MESSAGE_COMPLETE = "__COMPLETE__";
lime_system_BackgroundWorker.MESSAGE_ERROR = "__ERROR__";
lime_system_System.__directories = new haxe_ds_IntMap();
lime_text__$TextDirection_TextDirection_$Impl_$.INVALID = 0;
lime_text__$TextDirection_TextDirection_$Impl_$.LEFT_TO_RIGHT = 4;
lime_text__$TextDirection_TextDirection_$Impl_$.RIGHT_TO_LEFT = 5;
lime_text__$TextDirection_TextDirection_$Impl_$.TOP_TO_BOTTOM = 6;
lime_text__$TextDirection_TextDirection_$Impl_$.BOTTOM_TO_TOP = 7;
lime_text__$TextScript_TextScript_$Impl_$.COMMON = "Zyyy";
lime_text__$TextScript_TextScript_$Impl_$.INHERITED = "Zinh";
lime_text__$TextScript_TextScript_$Impl_$.UNKNOWN = "Zzzz";
lime_text__$TextScript_TextScript_$Impl_$.ARABIC = "Arab";
lime_text__$TextScript_TextScript_$Impl_$.ARMENIAN = "Armn";
lime_text__$TextScript_TextScript_$Impl_$.BENGALI = "Beng";
lime_text__$TextScript_TextScript_$Impl_$.CYRILLIC = "Cyrl";
lime_text__$TextScript_TextScript_$Impl_$.DEVANAGARI = "Deva";
lime_text__$TextScript_TextScript_$Impl_$.GEORGIAN = "Geor";
lime_text__$TextScript_TextScript_$Impl_$.GREEK = "Grek";
lime_text__$TextScript_TextScript_$Impl_$.GUJARATI = "Gujr";
lime_text__$TextScript_TextScript_$Impl_$.GURMUKHI = "Guru";
lime_text__$TextScript_TextScript_$Impl_$.HANGUL = "Hang";
lime_text__$TextScript_TextScript_$Impl_$.HAN = "Hani";
lime_text__$TextScript_TextScript_$Impl_$.HEBREW = "Hebr";
lime_text__$TextScript_TextScript_$Impl_$.HIRAGANA = "Hira";
lime_text__$TextScript_TextScript_$Impl_$.KANNADA = "Knda";
lime_text__$TextScript_TextScript_$Impl_$.KATAKANA = "Kana";
lime_text__$TextScript_TextScript_$Impl_$.LAO = "Laoo";
lime_text__$TextScript_TextScript_$Impl_$.LATIN = "Latn";
lime_text__$TextScript_TextScript_$Impl_$.MALAYALAM = "Mlym";
lime_text__$TextScript_TextScript_$Impl_$.ORIYA = "Orya";
lime_text__$TextScript_TextScript_$Impl_$.TAMIL = "Taml";
lime_text__$TextScript_TextScript_$Impl_$.TELUGA = "Telu";
lime_text__$TextScript_TextScript_$Impl_$.THAI = "Thai";
lime_text__$TextScript_TextScript_$Impl_$.TIBETAN = "Tibt";
lime_text__$TextScript_TextScript_$Impl_$.BOPOMOFO = "Bopo";
lime_text__$TextScript_TextScript_$Impl_$.BRAILLE = "Brai";
lime_text__$TextScript_TextScript_$Impl_$.CANADIAN_SYLLABICS = "Cans";
lime_text__$TextScript_TextScript_$Impl_$.CHEROKEE = "Cher";
lime_text__$TextScript_TextScript_$Impl_$.ETHIOPIC = "Ethi";
lime_text__$TextScript_TextScript_$Impl_$.KHMER = "Khmr";
lime_text__$TextScript_TextScript_$Impl_$.MONGOLIAN = "Mong";
lime_text__$TextScript_TextScript_$Impl_$.MYANMAR = "Mymr";
lime_text__$TextScript_TextScript_$Impl_$.OGHAM = "Ogam";
lime_text__$TextScript_TextScript_$Impl_$.RUNIC = "Runr";
lime_text__$TextScript_TextScript_$Impl_$.SINHALA = "Sinh";
lime_text__$TextScript_TextScript_$Impl_$.SYRIAC = "Syrc";
lime_text__$TextScript_TextScript_$Impl_$.THAANA = "Thaa";
lime_text__$TextScript_TextScript_$Impl_$.YI = "Yiii";
lime_text__$TextScript_TextScript_$Impl_$.DESERET = "Dsrt";
lime_text__$TextScript_TextScript_$Impl_$.GOTHIC = "Goth";
lime_text__$TextScript_TextScript_$Impl_$.OLD_ITALIC = "Ital";
lime_text__$TextScript_TextScript_$Impl_$.BUHID = "Buhd";
lime_text__$TextScript_TextScript_$Impl_$.HANUNOO = "Hano";
lime_text__$TextScript_TextScript_$Impl_$.TAGALOG = "Tglg";
lime_text__$TextScript_TextScript_$Impl_$.TAGBANWA = "Tagb";
lime_text__$TextScript_TextScript_$Impl_$.CYPRIOT = "Cprt";
lime_text__$TextScript_TextScript_$Impl_$.LIMBU = "Limb";
lime_text__$TextScript_TextScript_$Impl_$.LINEAR_B = "Linb";
lime_text__$TextScript_TextScript_$Impl_$.OSMANYA = "Osma";
lime_text__$TextScript_TextScript_$Impl_$.SHAVIAN = "Shaw";
lime_text__$TextScript_TextScript_$Impl_$.TAI_LE = "Tale";
lime_text__$TextScript_TextScript_$Impl_$.UGARITIC = "Ugar";
lime_text__$TextScript_TextScript_$Impl_$.BUGINESE = "Bugi";
lime_text__$TextScript_TextScript_$Impl_$.COPTIC = "Copt";
lime_text__$TextScript_TextScript_$Impl_$.GLAGOLITIC = "Glag";
lime_text__$TextScript_TextScript_$Impl_$.KHAROSHTHI = "Khar";
lime_text__$TextScript_TextScript_$Impl_$.NEW_TAI_LUE = "Talu";
lime_text__$TextScript_TextScript_$Impl_$.OLD_PERSIAN = "Xpeo";
lime_text__$TextScript_TextScript_$Impl_$.SYLOTI_NAGRI = "Sylo";
lime_text__$TextScript_TextScript_$Impl_$.TIFINAGH = "Tfng";
lime_text__$TextScript_TextScript_$Impl_$.BALINESE = "Bali";
lime_text__$TextScript_TextScript_$Impl_$.CUNEIFORM = "Xsux";
lime_text__$TextScript_TextScript_$Impl_$.NKO = "Nkoo";
lime_text__$TextScript_TextScript_$Impl_$.PHAGS_PA = "Phag";
lime_text__$TextScript_TextScript_$Impl_$.PHOENICIAN = "Phnx";
lime_text__$TextScript_TextScript_$Impl_$.CARIAN = "Cari";
lime_text__$TextScript_TextScript_$Impl_$.CHAM = "Cham";
lime_text__$TextScript_TextScript_$Impl_$.KAYAH_LI = "Kali";
lime_text__$TextScript_TextScript_$Impl_$.LEPCHA = "Lepc";
lime_text__$TextScript_TextScript_$Impl_$.LYCIAN = "Lyci";
lime_text__$TextScript_TextScript_$Impl_$.LYDIAN = "Lydi";
lime_text__$TextScript_TextScript_$Impl_$.OL_CHIKI = "Olck";
lime_text__$TextScript_TextScript_$Impl_$.REJANG = "Rjng";
lime_text__$TextScript_TextScript_$Impl_$.SAURASHTRA = "Saur";
lime_text__$TextScript_TextScript_$Impl_$.SUNDANESE = "Sund";
lime_text__$TextScript_TextScript_$Impl_$.VAI = "Vaii";
lime_text__$TextScript_TextScript_$Impl_$.AVESTAN = "Avst";
lime_text__$TextScript_TextScript_$Impl_$.BAMUM = "Bamu";
lime_text__$TextScript_TextScript_$Impl_$.EGYPTIAN_HIEROGLYPHS = "Egyp";
lime_text__$TextScript_TextScript_$Impl_$.IMPERIAL_ARAMAIC = "Armi";
lime_text__$TextScript_TextScript_$Impl_$.INSCRIPTIONAL_PAHLAVI = "Phli";
lime_text__$TextScript_TextScript_$Impl_$.INSCRIPTIONAL_PARTHIAN = "Prti";
lime_text__$TextScript_TextScript_$Impl_$.JAVANESE = "Java";
lime_text__$TextScript_TextScript_$Impl_$.KAITHI = "Kthi";
lime_text__$TextScript_TextScript_$Impl_$.LISU = "Lisu";
lime_text__$TextScript_TextScript_$Impl_$.MEETEI_MAYEK = "Mtei";
lime_text__$TextScript_TextScript_$Impl_$.OLD_SOUTH_ARABIAN = "Sarb";
lime_text__$TextScript_TextScript_$Impl_$.OLD_TURKIC = "Orkh";
lime_text__$TextScript_TextScript_$Impl_$.SAMARITAN = "Samr";
lime_text__$TextScript_TextScript_$Impl_$.TAI_THAM = "Lana";
lime_text__$TextScript_TextScript_$Impl_$.TAI_VIET = "Tavt";
lime_text__$TextScript_TextScript_$Impl_$.BATAK = "Batk";
lime_text__$TextScript_TextScript_$Impl_$.BRAHMI = "Brah";
lime_text__$TextScript_TextScript_$Impl_$.MANDAIC = "Mand";
lime_text__$TextScript_TextScript_$Impl_$.CHAKMA = "Cakm";
lime_text__$TextScript_TextScript_$Impl_$.MEROITIC_CURSIVE = "Merc";
lime_text__$TextScript_TextScript_$Impl_$.MEROITIC_HIEROGLYPHS = "Mero";
lime_text__$TextScript_TextScript_$Impl_$.MIAO = "Plrd";
lime_text__$TextScript_TextScript_$Impl_$.SHARADA = "Shrd";
lime_text__$TextScript_TextScript_$Impl_$.SORA_SOMPENG = "Sora";
lime_text__$TextScript_TextScript_$Impl_$.TAKRI = "Takr";
lime_text__$TextScript_TextScript_$Impl_$.BASSA_VAH = "Bass";
lime_text__$TextScript_TextScript_$Impl_$.CAUCASIAN_ALBANIAN = "Aghb";
lime_text__$TextScript_TextScript_$Impl_$.DUPLOYAN = "Dupl";
lime_text__$TextScript_TextScript_$Impl_$.ELBASAN = "Elba";
lime_text__$TextScript_TextScript_$Impl_$.GRANTHA = "Gran";
lime_text__$TextScript_TextScript_$Impl_$.KHOJKI = "Khoj";
lime_text__$TextScript_TextScript_$Impl_$.KHUDAWADI = "Sind";
lime_text__$TextScript_TextScript_$Impl_$.LINEAR_A = "Lina";
lime_text__$TextScript_TextScript_$Impl_$.MAHAJANI = "Mahj";
lime_text__$TextScript_TextScript_$Impl_$.MANICHAEAN = "Mani";
lime_text__$TextScript_TextScript_$Impl_$.MENDE_KIKAKUI = "Mend";
lime_text__$TextScript_TextScript_$Impl_$.MODI = "Modi";
lime_text__$TextScript_TextScript_$Impl_$.MRO = "Mroo";
lime_text__$TextScript_TextScript_$Impl_$.NABATAEAN = "Nbat";
lime_text__$TextScript_TextScript_$Impl_$.OLD_NORTH_ARABIAN = "Narb";
lime_text__$TextScript_TextScript_$Impl_$.OLD_PERMIC = "Perm";
lime_text__$TextScript_TextScript_$Impl_$.PAHAWH_HMONG = "Hmng";
lime_text__$TextScript_TextScript_$Impl_$.PALMYRENE = "Palm";
lime_text__$TextScript_TextScript_$Impl_$.PAU_CIN_HAU = "Pauc";
lime_text__$TextScript_TextScript_$Impl_$.PSALTER_PAHLAVI = "Phlp";
lime_text__$TextScript_TextScript_$Impl_$.SIDDHAM = "Sidd";
lime_text__$TextScript_TextScript_$Impl_$.TIRHUTA = "Tirh";
lime_text__$TextScript_TextScript_$Impl_$.WARANG_CITI = "Wara";
lime_ui_Gamepad.devices = new haxe_ds_IntMap();
lime_ui_Gamepad.onConnect = new lime_app__$Event_$lime_$ui_$Gamepad_$Void();
lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.LEFT_X = 0;
lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.LEFT_Y = 1;
lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.RIGHT_X = 2;
lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.RIGHT_Y = 3;
lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.TRIGGER_LEFT = 4;
lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.TRIGGER_RIGHT = 5;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.A = 0;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.B = 1;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.X = 2;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.Y = 3;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.BACK = 4;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.GUIDE = 5;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.START = 6;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.LEFT_STICK = 7;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.RIGHT_STICK = 8;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.LEFT_SHOULDER = 9;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.RIGHT_SHOULDER = 10;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.DPAD_UP = 11;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.DPAD_DOWN = 12;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.DPAD_LEFT = 13;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.DPAD_RIGHT = 14;
lime_ui_Joystick.devices = new haxe_ds_IntMap();
lime_ui_Joystick.onConnect = new lime_app__$Event_$lime_$ui_$Joystick_$Void();
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.CENTER = 0;
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.DOWN = 4;
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.LEFT = 8;
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.RIGHT = 2;
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.UP = 1;
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.DOWN_LEFT = 12;
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.DOWN_RIGHT = 6;
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.UP_LEFT = 9;
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.UP_RIGHT = 3;
lime_ui__$KeyCode_KeyCode_$Impl_$.UNKNOWN = 0;
lime_ui__$KeyCode_KeyCode_$Impl_$.BACKSPACE = 8;
lime_ui__$KeyCode_KeyCode_$Impl_$.TAB = 9;
lime_ui__$KeyCode_KeyCode_$Impl_$.RETURN = 13;
lime_ui__$KeyCode_KeyCode_$Impl_$.ESCAPE = 27;
lime_ui__$KeyCode_KeyCode_$Impl_$.SPACE = 32;
lime_ui__$KeyCode_KeyCode_$Impl_$.EXCLAMATION = 33;
lime_ui__$KeyCode_KeyCode_$Impl_$.QUOTE = 34;
lime_ui__$KeyCode_KeyCode_$Impl_$.HASH = 35;
lime_ui__$KeyCode_KeyCode_$Impl_$.DOLLAR = 36;
lime_ui__$KeyCode_KeyCode_$Impl_$.PERCENT = 37;
lime_ui__$KeyCode_KeyCode_$Impl_$.AMPERSAND = 38;
lime_ui__$KeyCode_KeyCode_$Impl_$.SINGLE_QUOTE = 39;
lime_ui__$KeyCode_KeyCode_$Impl_$.LEFT_PARENTHESIS = 40;
lime_ui__$KeyCode_KeyCode_$Impl_$.RIGHT_PARENTHESIS = 41;
lime_ui__$KeyCode_KeyCode_$Impl_$.ASTERISK = 42;
lime_ui__$KeyCode_KeyCode_$Impl_$.PLUS = 43;
lime_ui__$KeyCode_KeyCode_$Impl_$.COMMA = 44;
lime_ui__$KeyCode_KeyCode_$Impl_$.MINUS = 45;
lime_ui__$KeyCode_KeyCode_$Impl_$.PERIOD = 46;
lime_ui__$KeyCode_KeyCode_$Impl_$.SLASH = 47;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_0 = 48;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_1 = 49;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_2 = 50;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_3 = 51;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_4 = 52;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_5 = 53;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_6 = 54;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_7 = 55;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_8 = 56;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_9 = 57;
lime_ui__$KeyCode_KeyCode_$Impl_$.COLON = 58;
lime_ui__$KeyCode_KeyCode_$Impl_$.SEMICOLON = 59;
lime_ui__$KeyCode_KeyCode_$Impl_$.LESS_THAN = 60;
lime_ui__$KeyCode_KeyCode_$Impl_$.EQUALS = 61;
lime_ui__$KeyCode_KeyCode_$Impl_$.GREATER_THAN = 62;
lime_ui__$KeyCode_KeyCode_$Impl_$.QUESTION = 63;
lime_ui__$KeyCode_KeyCode_$Impl_$.AT = 64;
lime_ui__$KeyCode_KeyCode_$Impl_$.LEFT_BRACKET = 91;
lime_ui__$KeyCode_KeyCode_$Impl_$.BACKSLASH = 92;
lime_ui__$KeyCode_KeyCode_$Impl_$.RIGHT_BRACKET = 93;
lime_ui__$KeyCode_KeyCode_$Impl_$.CARET = 94;
lime_ui__$KeyCode_KeyCode_$Impl_$.UNDERSCORE = 95;
lime_ui__$KeyCode_KeyCode_$Impl_$.GRAVE = 96;
lime_ui__$KeyCode_KeyCode_$Impl_$.A = 97;
lime_ui__$KeyCode_KeyCode_$Impl_$.B = 98;
lime_ui__$KeyCode_KeyCode_$Impl_$.C = 99;
lime_ui__$KeyCode_KeyCode_$Impl_$.D = 100;
lime_ui__$KeyCode_KeyCode_$Impl_$.E = 101;
lime_ui__$KeyCode_KeyCode_$Impl_$.F = 102;
lime_ui__$KeyCode_KeyCode_$Impl_$.G = 103;
lime_ui__$KeyCode_KeyCode_$Impl_$.H = 104;
lime_ui__$KeyCode_KeyCode_$Impl_$.I = 105;
lime_ui__$KeyCode_KeyCode_$Impl_$.J = 106;
lime_ui__$KeyCode_KeyCode_$Impl_$.K = 107;
lime_ui__$KeyCode_KeyCode_$Impl_$.L = 108;
lime_ui__$KeyCode_KeyCode_$Impl_$.M = 109;
lime_ui__$KeyCode_KeyCode_$Impl_$.N = 110;
lime_ui__$KeyCode_KeyCode_$Impl_$.O = 111;
lime_ui__$KeyCode_KeyCode_$Impl_$.P = 112;
lime_ui__$KeyCode_KeyCode_$Impl_$.Q = 113;
lime_ui__$KeyCode_KeyCode_$Impl_$.R = 114;
lime_ui__$KeyCode_KeyCode_$Impl_$.S = 115;
lime_ui__$KeyCode_KeyCode_$Impl_$.T = 116;
lime_ui__$KeyCode_KeyCode_$Impl_$.U = 117;
lime_ui__$KeyCode_KeyCode_$Impl_$.V = 118;
lime_ui__$KeyCode_KeyCode_$Impl_$.W = 119;
lime_ui__$KeyCode_KeyCode_$Impl_$.X = 120;
lime_ui__$KeyCode_KeyCode_$Impl_$.Y = 121;
lime_ui__$KeyCode_KeyCode_$Impl_$.Z = 122;
lime_ui__$KeyCode_KeyCode_$Impl_$.DELETE = 127;
lime_ui__$KeyCode_KeyCode_$Impl_$.CAPS_LOCK = 1073741881;
lime_ui__$KeyCode_KeyCode_$Impl_$.F1 = 1073741882;
lime_ui__$KeyCode_KeyCode_$Impl_$.F2 = 1073741883;
lime_ui__$KeyCode_KeyCode_$Impl_$.F3 = 1073741884;
lime_ui__$KeyCode_KeyCode_$Impl_$.F4 = 1073741885;
lime_ui__$KeyCode_KeyCode_$Impl_$.F5 = 1073741886;
lime_ui__$KeyCode_KeyCode_$Impl_$.F6 = 1073741887;
lime_ui__$KeyCode_KeyCode_$Impl_$.F7 = 1073741888;
lime_ui__$KeyCode_KeyCode_$Impl_$.F8 = 1073741889;
lime_ui__$KeyCode_KeyCode_$Impl_$.F9 = 1073741890;
lime_ui__$KeyCode_KeyCode_$Impl_$.F10 = 1073741891;
lime_ui__$KeyCode_KeyCode_$Impl_$.F11 = 1073741892;
lime_ui__$KeyCode_KeyCode_$Impl_$.F12 = 1073741893;
lime_ui__$KeyCode_KeyCode_$Impl_$.PRINT_SCREEN = 1073741894;
lime_ui__$KeyCode_KeyCode_$Impl_$.SCROLL_LOCK = 1073741895;
lime_ui__$KeyCode_KeyCode_$Impl_$.PAUSE = 1073741896;
lime_ui__$KeyCode_KeyCode_$Impl_$.INSERT = 1073741897;
lime_ui__$KeyCode_KeyCode_$Impl_$.HOME = 1073741898;
lime_ui__$KeyCode_KeyCode_$Impl_$.PAGE_UP = 1073741899;
lime_ui__$KeyCode_KeyCode_$Impl_$.END = 1073741901;
lime_ui__$KeyCode_KeyCode_$Impl_$.PAGE_DOWN = 1073741902;
lime_ui__$KeyCode_KeyCode_$Impl_$.RIGHT = 1073741903;
lime_ui__$KeyCode_KeyCode_$Impl_$.LEFT = 1073741904;
lime_ui__$KeyCode_KeyCode_$Impl_$.DOWN = 1073741905;
lime_ui__$KeyCode_KeyCode_$Impl_$.UP = 1073741906;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUM_LOCK = 1073741907;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_DIVIDE = 1073741908;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MULTIPLY = 1073741909;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MINUS = 1073741910;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_PLUS = 1073741911;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_ENTER = 1073741912;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_1 = 1073741913;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_2 = 1073741914;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_3 = 1073741915;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_4 = 1073741916;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_5 = 1073741917;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_6 = 1073741918;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_7 = 1073741919;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_8 = 1073741920;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_9 = 1073741921;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_0 = 1073741922;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_PERIOD = 1073741923;
lime_ui__$KeyCode_KeyCode_$Impl_$.APPLICATION = 1073741925;
lime_ui__$KeyCode_KeyCode_$Impl_$.POWER = 1073741926;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_EQUALS = 1073741927;
lime_ui__$KeyCode_KeyCode_$Impl_$.F13 = 1073741928;
lime_ui__$KeyCode_KeyCode_$Impl_$.F14 = 1073741929;
lime_ui__$KeyCode_KeyCode_$Impl_$.F15 = 1073741930;
lime_ui__$KeyCode_KeyCode_$Impl_$.F16 = 1073741931;
lime_ui__$KeyCode_KeyCode_$Impl_$.F17 = 1073741932;
lime_ui__$KeyCode_KeyCode_$Impl_$.F18 = 1073741933;
lime_ui__$KeyCode_KeyCode_$Impl_$.F19 = 1073741934;
lime_ui__$KeyCode_KeyCode_$Impl_$.F20 = 1073741935;
lime_ui__$KeyCode_KeyCode_$Impl_$.F21 = 1073741936;
lime_ui__$KeyCode_KeyCode_$Impl_$.F22 = 1073741937;
lime_ui__$KeyCode_KeyCode_$Impl_$.F23 = 1073741938;
lime_ui__$KeyCode_KeyCode_$Impl_$.F24 = 1073741939;
lime_ui__$KeyCode_KeyCode_$Impl_$.EXECUTE = 1073741940;
lime_ui__$KeyCode_KeyCode_$Impl_$.HELP = 1073741941;
lime_ui__$KeyCode_KeyCode_$Impl_$.MENU = 1073741942;
lime_ui__$KeyCode_KeyCode_$Impl_$.SELECT = 1073741943;
lime_ui__$KeyCode_KeyCode_$Impl_$.STOP = 1073741944;
lime_ui__$KeyCode_KeyCode_$Impl_$.AGAIN = 1073741945;
lime_ui__$KeyCode_KeyCode_$Impl_$.UNDO = 1073741946;
lime_ui__$KeyCode_KeyCode_$Impl_$.CUT = 1073741947;
lime_ui__$KeyCode_KeyCode_$Impl_$.COPY = 1073741948;
lime_ui__$KeyCode_KeyCode_$Impl_$.PASTE = 1073741949;
lime_ui__$KeyCode_KeyCode_$Impl_$.FIND = 1073741950;
lime_ui__$KeyCode_KeyCode_$Impl_$.MUTE = 1073741951;
lime_ui__$KeyCode_KeyCode_$Impl_$.VOLUME_UP = 1073741952;
lime_ui__$KeyCode_KeyCode_$Impl_$.VOLUME_DOWN = 1073741953;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_COMMA = 1073741957;
lime_ui__$KeyCode_KeyCode_$Impl_$.ALT_ERASE = 1073741977;
lime_ui__$KeyCode_KeyCode_$Impl_$.SYSTEM_REQUEST = 1073741978;
lime_ui__$KeyCode_KeyCode_$Impl_$.CANCEL = 1073741979;
lime_ui__$KeyCode_KeyCode_$Impl_$.CLEAR = 1073741980;
lime_ui__$KeyCode_KeyCode_$Impl_$.PRIOR = 1073741981;
lime_ui__$KeyCode_KeyCode_$Impl_$.RETURN2 = 1073741982;
lime_ui__$KeyCode_KeyCode_$Impl_$.SEPARATOR = 1073741983;
lime_ui__$KeyCode_KeyCode_$Impl_$.OUT = 1073741984;
lime_ui__$KeyCode_KeyCode_$Impl_$.OPER = 1073741985;
lime_ui__$KeyCode_KeyCode_$Impl_$.CLEAR_AGAIN = 1073741986;
lime_ui__$KeyCode_KeyCode_$Impl_$.CRSEL = 1073741987;
lime_ui__$KeyCode_KeyCode_$Impl_$.EXSEL = 1073741988;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_00 = 1073742000;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_000 = 1073742001;
lime_ui__$KeyCode_KeyCode_$Impl_$.THOUSAND_SEPARATOR = 1073742002;
lime_ui__$KeyCode_KeyCode_$Impl_$.DECIMAL_SEPARATOR = 1073742003;
lime_ui__$KeyCode_KeyCode_$Impl_$.CURRENCY_UNIT = 1073742004;
lime_ui__$KeyCode_KeyCode_$Impl_$.CURRENCY_SUBUNIT = 1073742005;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_LEFT_PARENTHESIS = 1073742006;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_RIGHT_PARENTHESIS = 1073742007;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_LEFT_BRACE = 1073742008;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_RIGHT_BRACE = 1073742009;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_TAB = 1073742010;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_BACKSPACE = 1073742011;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_A = 1073742012;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_B = 1073742013;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_C = 1073742014;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_D = 1073742015;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_E = 1073742016;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_F = 1073742017;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_XOR = 1073742018;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_POWER = 1073742019;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_PERCENT = 1073742020;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_LESS_THAN = 1073742021;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_GREATER_THAN = 1073742022;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_AMPERSAND = 1073742023;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_DOUBLE_AMPERSAND = 1073742024;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_VERTICAL_BAR = 1073742025;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_DOUBLE_VERTICAL_BAR = 1073742026;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_COLON = 1073742027;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_HASH = 1073742028;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_SPACE = 1073742029;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_AT = 1073742030;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_EXCLAMATION = 1073742031;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MEM_STORE = 1073742032;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MEM_RECALL = 1073742033;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MEM_CLEAR = 1073742034;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MEM_ADD = 1073742035;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MEM_SUBTRACT = 1073742036;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MEM_MULTIPLY = 1073742037;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MEM_DIVIDE = 1073742038;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_PLUS_MINUS = 1073742039;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_CLEAR = 1073742040;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_CLEAR_ENTRY = 1073742041;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_BINARY = 1073742042;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_OCTAL = 1073742043;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_DECIMAL = 1073742044;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_HEXADECIMAL = 1073742045;
lime_ui__$KeyCode_KeyCode_$Impl_$.LEFT_CTRL = 1073742048;
lime_ui__$KeyCode_KeyCode_$Impl_$.LEFT_SHIFT = 1073742049;
lime_ui__$KeyCode_KeyCode_$Impl_$.LEFT_ALT = 1073742050;
lime_ui__$KeyCode_KeyCode_$Impl_$.LEFT_META = 1073742051;
lime_ui__$KeyCode_KeyCode_$Impl_$.RIGHT_CTRL = 1073742052;
lime_ui__$KeyCode_KeyCode_$Impl_$.RIGHT_SHIFT = 1073742053;
lime_ui__$KeyCode_KeyCode_$Impl_$.RIGHT_ALT = 1073742054;
lime_ui__$KeyCode_KeyCode_$Impl_$.RIGHT_META = 1073742055;
lime_ui__$KeyCode_KeyCode_$Impl_$.MODE = 1073742081;
lime_ui__$KeyCode_KeyCode_$Impl_$.AUDIO_NEXT = 1073742082;
lime_ui__$KeyCode_KeyCode_$Impl_$.AUDIO_PREVIOUS = 1073742083;
lime_ui__$KeyCode_KeyCode_$Impl_$.AUDIO_STOP = 1073742084;
lime_ui__$KeyCode_KeyCode_$Impl_$.AUDIO_PLAY = 1073742085;
lime_ui__$KeyCode_KeyCode_$Impl_$.AUDIO_MUTE = 1073742086;
lime_ui__$KeyCode_KeyCode_$Impl_$.MEDIA_SELECT = 1073742087;
lime_ui__$KeyCode_KeyCode_$Impl_$.WWW = 1073742088;
lime_ui__$KeyCode_KeyCode_$Impl_$.MAIL = 1073742089;
lime_ui__$KeyCode_KeyCode_$Impl_$.CALCULATOR = 1073742090;
lime_ui__$KeyCode_KeyCode_$Impl_$.COMPUTER = 1073742091;
lime_ui__$KeyCode_KeyCode_$Impl_$.APP_CONTROL_SEARCH = 1073742092;
lime_ui__$KeyCode_KeyCode_$Impl_$.APP_CONTROL_HOME = 1073742093;
lime_ui__$KeyCode_KeyCode_$Impl_$.APP_CONTROL_BACK = 1073742094;
lime_ui__$KeyCode_KeyCode_$Impl_$.APP_CONTROL_FORWARD = 1073742095;
lime_ui__$KeyCode_KeyCode_$Impl_$.APP_CONTROL_STOP = 1073742096;
lime_ui__$KeyCode_KeyCode_$Impl_$.APP_CONTROL_REFRESH = 1073742097;
lime_ui__$KeyCode_KeyCode_$Impl_$.APP_CONTROL_BOOKMARKS = 1073742098;
lime_ui__$KeyCode_KeyCode_$Impl_$.BRIGHTNESS_DOWN = 1073742099;
lime_ui__$KeyCode_KeyCode_$Impl_$.BRIGHTNESS_UP = 1073742100;
lime_ui__$KeyCode_KeyCode_$Impl_$.DISPLAY_SWITCH = 1073742101;
lime_ui__$KeyCode_KeyCode_$Impl_$.BACKLIGHT_TOGGLE = 1073742102;
lime_ui__$KeyCode_KeyCode_$Impl_$.BACKLIGHT_DOWN = 1073742103;
lime_ui__$KeyCode_KeyCode_$Impl_$.BACKLIGHT_UP = 1073742104;
lime_ui__$KeyCode_KeyCode_$Impl_$.EJECT = 1073742105;
lime_ui__$KeyCode_KeyCode_$Impl_$.SLEEP = 1073742106;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.NONE = 0;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.LEFT_SHIFT = 1;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.RIGHT_SHIFT = 2;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.LEFT_CTRL = 64;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.RIGHT_CTRL = 128;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.LEFT_ALT = 256;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.RIGHT_ALT = 512;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.LEFT_META = 1024;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.RIGHT_META = 2048;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.NUM_LOCK = 4096;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.CAPS_LOCK = 8192;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.MODE = 16384;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.CTRL = 192;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.SHIFT = 3;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.ALT = 768;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.META = 3072;
lime_ui_Touch.onEnd = new lime_app__$Event_$lime_$ui_$Touch_$Void();
lime_ui_Touch.onMove = new lime_app__$Event_$lime_$ui_$Touch_$Void();
lime_ui_Touch.onStart = new lime_app__$Event_$lime_$ui_$Touch_$Void();
lime_utils_Assets.cache = new lime_utils_AssetCache();
lime_utils_Assets.libraries = new haxe_ds_StringMap();
lime_utils_Assets.onChange = new lime_app__$Event_$Void_$Void();
lime_utils__$Bytes_Bytes_$Impl_$.cffi_lime_bytes_from_data_pointer = (function($this) {
	var $r;
	var inValue = lime_system_CFFI.load("lime","lime_bytes_from_data_pointer",2,false);
	$r = inValue;
	return $r;
}(this));
lime_utils__$Bytes_Bytes_$Impl_$.cffi_lime_bytes_get_data_pointer = (function($this) {
	var $r;
	var inValue = lime_system_CFFI.load("lime","lime_bytes_get_data_pointer",1,false);
	$r = inValue;
	return $r;
}(this));
lime_utils__$Bytes_Bytes_$Impl_$.cffi_lime_bytes_read_file = (function($this) {
	var $r;
	var inValue = lime_system_CFFI.load("lime","lime_bytes_read_file",2,false);
	$r = inValue;
	return $r;
}(this));
lime_utils__$Float32Array_Float32Array_$Impl_$.BYTES_PER_ELEMENT = 4;
lime_utils__$Int16Array_Int16Array_$Impl_$.BYTES_PER_ELEMENT = 2;
lime_utils__$Int32Array_Int32Array_$Impl_$.BYTES_PER_ELEMENT = 4;
lime_utils__$Log_LogLevel_$Impl_$.NONE = 0;
lime_utils__$Log_LogLevel_$Impl_$.ERROR = 1;
lime_utils__$Log_LogLevel_$Impl_$.WARN = 2;
lime_utils__$Log_LogLevel_$Impl_$.INFO = 3;
lime_utils__$Log_LogLevel_$Impl_$.DEBUG = 4;
lime_utils__$Log_LogLevel_$Impl_$.VERBOSE = 5;
lime_utils__$UInt32Array_UInt32Array_$Impl_$.BYTES_PER_ELEMENT = 4;
lime_utils__$UInt8Array_UInt8Array_$Impl_$.BYTES_PER_ELEMENT = 1;
objects_BodyObject.DESPAWN_TURNS = 20;
openfl_Assets.cache = new openfl_AssetCache();
openfl_Assets.dispatcher = new openfl_events_EventDispatcher();
openfl_Lib.current = new openfl_display_MovieClip();
openfl_Lib.__sentWarnings = new haxe_ds_StringMap();
openfl__$internal_renderer_DrawCommandBuffer.empty = new openfl__$internal_renderer_DrawCommandBuffer();
openfl__$internal_renderer_cairo_CairoGraphics.SIN45 = 0.70710678118654752440084436210485;
openfl__$internal_renderer_cairo_CairoGraphics.TAN22 = 0.4142135623730950488016887242097;
openfl__$internal_renderer_cairo_CairoGraphics.fillCommands = new openfl__$internal_renderer_DrawCommandBuffer();
openfl__$internal_renderer_cairo_CairoGraphics.strokeCommands = new openfl__$internal_renderer_DrawCommandBuffer();
openfl__$internal_renderer_canvas_CanvasGraphics.SIN45 = 0.70710678118654752440084436210485;
openfl__$internal_renderer_canvas_CanvasGraphics.TAN22 = 0.4142135623730950488016887242097;
openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands = new openfl__$internal_renderer_DrawCommandBuffer();
openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands = new openfl__$internal_renderer_DrawCommandBuffer();
openfl__$internal_stage3D_AGALConverter.limitedProfile = true;
openfl__$internal_stage3D_Context3DStateCache.FLOATS_PER_REGISTER = 4;
openfl__$internal_stage3D_Context3DStateCache.MAX_NUM_REGISTERS = 1024;
openfl__$internal_stage3D_Context3DStateCache.disableCache = true;
openfl__$internal_stage3D_GLUtils.debug = false;
openfl__$internal_swf_SWFLite.instances = new haxe_ds_StringMap();
openfl__$internal_text_TextEngine.UTF8_TAB = 9;
openfl__$internal_text_TextEngine.UTF8_ENDLINE = 10;
openfl__$internal_text_TextEngine.UTF8_SPACE = 32;
openfl__$internal_text_TextEngine.UTF8_HYPHEN = 45;
openfl__$internal_text_TextEngine.__defaultFonts = new haxe_ds_StringMap();
openfl__$internal_utils_PerlinNoise.P = [151,160,137,91,90,15,131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,8,99,37,240,21,10,23,190,6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,35,11,32,57,177,33,88,237,149,56,87,174,20,125,136,171,168,68,175,74,165,71,134,139,48,27,166,77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,55,46,245,40,244,102,143,54,65,25,63,161,1,216,80,73,209,76,132,187,208,89,18,169,200,196,135,130,116,188,159,86,164,100,109,198,173,186,3,64,52,217,226,250,124,123,5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,189,28,42,223,183,170,213,119,248,152,2,44,154,163,70,221,153,101,155,167,43,172,9,129,22,39,253,19,98,108,110,79,113,224,232,178,185,112,104,218,246,97,228,251,34,242,193,238,210,144,12,191,179,162,241,81,51,145,235,249,14,239,107,49,192,214,31,181,199,106,157,184,84,204,176,115,121,50,45,127,4,150,254,138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180,151,160,137,91,90,15,131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,8,99,37,240,21,10,23,190,6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,35,11,32,57,177,33,88,237,149,56,87,174,20,125,136,171,168,68,175,74,165,71,134,139,48,27,166,77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,55,46,245,40,244,102,143,54,65,25,63,161,1,216,80,73,209,76,132,187,208,89,18,169,200,196,135,130,116,188,159,86,164,100,109,198,173,186,3,64,52,217,226,250,124,123,5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,189,28,42,223,183,170,213,119,248,152,2,44,154,163,70,221,153,101,155,167,43,172,9,129,22,39,253,19,98,108,110,79,113,224,232,178,185,112,104,218,246,97,228,251,34,242,193,238,210,144,12,191,179,162,241,81,51,145,235,249,14,239,107,49,192,214,31,181,199,106,157,184,84,204,176,115,121,50,45,127,4,150,254,138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180];
openfl_display__$BlendMode_BlendMode_$Impl_$.ADD = 0;
openfl_display__$BlendMode_BlendMode_$Impl_$.ALPHA = 1;
openfl_display__$BlendMode_BlendMode_$Impl_$.DARKEN = 2;
openfl_display__$BlendMode_BlendMode_$Impl_$.DIFFERENCE = 3;
openfl_display__$BlendMode_BlendMode_$Impl_$.ERASE = 4;
openfl_display__$BlendMode_BlendMode_$Impl_$.HARDLIGHT = 5;
openfl_display__$BlendMode_BlendMode_$Impl_$.INVERT = 6;
openfl_display__$BlendMode_BlendMode_$Impl_$.LAYER = 7;
openfl_display__$BlendMode_BlendMode_$Impl_$.LIGHTEN = 8;
openfl_display__$BlendMode_BlendMode_$Impl_$.MULTIPLY = 9;
openfl_display__$BlendMode_BlendMode_$Impl_$.NORMAL = 10;
openfl_display__$BlendMode_BlendMode_$Impl_$.OVERLAY = 11;
openfl_display__$BlendMode_BlendMode_$Impl_$.SCREEN = 12;
openfl_display__$BlendMode_BlendMode_$Impl_$.SHADER = 13;
openfl_display__$BlendMode_BlendMode_$Impl_$.SUBTRACT = 14;
openfl_display__$CapsStyle_CapsStyle_$Impl_$.NONE = 0;
openfl_display__$CapsStyle_CapsStyle_$Impl_$.ROUND = 1;
openfl_display__$CapsStyle_CapsStyle_$Impl_$.SQUARE = 2;
openfl_display__$GradientType_GradientType_$Impl_$.LINEAR = 0;
openfl_display__$GradientType_GradientType_$Impl_$.RADIAL = 1;
openfl_display__$GraphicsPathWinding_GraphicsPathWinding_$Impl_$.EVEN_ODD = 0;
openfl_display__$GraphicsPathWinding_GraphicsPathWinding_$Impl_$.NON_ZERO = 1;
openfl_display__$InterpolationMethod_InterpolationMethod_$Impl_$.LINEAR_RGB = 0;
openfl_display__$InterpolationMethod_InterpolationMethod_$Impl_$.RGB = 1;
openfl_display__$JointStyle_JointStyle_$Impl_$.BEVEL = 0;
openfl_display__$JointStyle_JointStyle_$Impl_$.MITER = 1;
openfl_display__$JointStyle_JointStyle_$Impl_$.ROUND = 2;
openfl_display__$LineScaleMode_LineScaleMode_$Impl_$.HORIZONTAL = 0;
openfl_display__$LineScaleMode_LineScaleMode_$Impl_$.NONE = 1;
openfl_display__$LineScaleMode_LineScaleMode_$Impl_$.NORMAL = 2;
openfl_display__$LineScaleMode_LineScaleMode_$Impl_$.VERTICAL = 3;
openfl_display_LoaderInfo.__rootURL = window.document.URL;
openfl_display_OpenGLView.CONTEXT_LOST = "glcontextlost";
openfl_display_OpenGLView.CONTEXT_RESTORED = "glcontextrestored";
openfl_display__$PixelSnapping_PixelSnapping_$Impl_$.ALWAYS = 0;
openfl_display__$PixelSnapping_PixelSnapping_$Impl_$.AUTO = 1;
openfl_display__$PixelSnapping_PixelSnapping_$Impl_$.NEVER = 2;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.BOOL = 0;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.BOOL2 = 1;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.BOOL3 = 2;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.BOOL4 = 3;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.FLOAT = 4;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.FLOAT2 = 5;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.FLOAT3 = 6;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.FLOAT4 = 7;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.INT = 8;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.INT2 = 9;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.INT3 = 10;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.INT4 = 11;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.MATRIX2X2 = 12;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.MATRIX2X3 = 13;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.MATRIX2X4 = 14;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.MATRIX3X2 = 15;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.MATRIX3X3 = 16;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.MATRIX3X4 = 17;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.MATRIX4X2 = 18;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.MATRIX4X3 = 19;
openfl_display__$ShaderParameterType_ShaderParameterType_$Impl_$.MATRIX4X4 = 20;
openfl_display__$ShaderPrecision_ShaderPrecision_$Impl_$.FAST = 0;
openfl_display__$ShaderPrecision_ShaderPrecision_$Impl_$.FULL = 1;
openfl_display__$SpreadMethod_SpreadMethod_$Impl_$.PAD = 0;
openfl_display__$SpreadMethod_SpreadMethod_$Impl_$.REFLECT = 1;
openfl_display__$SpreadMethod_SpreadMethod_$Impl_$.REPEAT = 2;
openfl_display__$StageAlign_StageAlign_$Impl_$.BOTTOM = 0;
openfl_display__$StageAlign_StageAlign_$Impl_$.BOTTOM_LEFT = 1;
openfl_display__$StageAlign_StageAlign_$Impl_$.BOTTOM_RIGHT = 2;
openfl_display__$StageAlign_StageAlign_$Impl_$.LEFT = 3;
openfl_display__$StageAlign_StageAlign_$Impl_$.RIGHT = 4;
openfl_display__$StageAlign_StageAlign_$Impl_$.TOP = 5;
openfl_display__$StageAlign_StageAlign_$Impl_$.TOP_LEFT = 6;
openfl_display__$StageAlign_StageAlign_$Impl_$.TOP_RIGHT = 7;
openfl_display__$StageDisplayState_StageDisplayState_$Impl_$.FULL_SCREEN = 0;
openfl_display__$StageDisplayState_StageDisplayState_$Impl_$.FULL_SCREEN_INTERACTIVE = 1;
openfl_display__$StageDisplayState_StageDisplayState_$Impl_$.NORMAL = 2;
openfl_display__$StageQuality_StageQuality_$Impl_$.BEST = 0;
openfl_display__$StageQuality_StageQuality_$Impl_$.HIGH = 1;
openfl_display__$StageQuality_StageQuality_$Impl_$.LOW = 2;
openfl_display__$StageQuality_StageQuality_$Impl_$.MEDIUM = 3;
openfl_display__$StageScaleMode_StageScaleMode_$Impl_$.EXACT_FIT = 0;
openfl_display__$StageScaleMode_StageScaleMode_$Impl_$.NO_BORDER = 1;
openfl_display__$StageScaleMode_StageScaleMode_$Impl_$.NO_SCALE = 2;
openfl_display__$StageScaleMode_StageScaleMode_$Impl_$.SHOW_ALL = 3;
openfl_display__$TriangleCulling_TriangleCulling_$Impl_$.NEGATIVE = 0;
openfl_display__$TriangleCulling_TriangleCulling_$Impl_$.NONE = 1;
openfl_display__$TriangleCulling_TriangleCulling_$Impl_$.POSITIVE = 2;
openfl_display3D_Context3D.supportsVideoTexture = true;
openfl_display3D_Context3D.MAX_SAMPLERS = 8;
openfl_display3D_Context3D.MAX_ATTRIBUTES = 16;
openfl_display3D_Context3D.MAX_PROGRAM_REGISTERS = 128;
openfl_display3D_Context3D.__stateCache = new openfl__$internal_stage3D_Context3DStateCache();
openfl_display3D__$Context3D_Context3DTelemetry_$Impl_$.DRAW_CALLS = 0;
openfl_display3D__$Context3D_Context3DTelemetry_$Impl_$.COUNT_INDEX_BUFFER = 1;
openfl_display3D__$Context3D_Context3DTelemetry_$Impl_$.COUNT_VERTEX_BUFFER = 2;
openfl_display3D__$Context3D_Context3DTelemetry_$Impl_$.COUNT_TEXTURE = 3;
openfl_display3D__$Context3D_Context3DTelemetry_$Impl_$.COUNT_TEXTURE_COMPRESSED = 4;
openfl_display3D__$Context3D_Context3DTelemetry_$Impl_$.COUNT_PROGRAM = 5;
openfl_display3D__$Context3D_Context3DTelemetry_$Impl_$.MEM_INDEX_BUFFER = 6;
openfl_display3D__$Context3D_Context3DTelemetry_$Impl_$.MEM_VERTEX_BUFFER = 7;
openfl_display3D__$Context3D_Context3DTelemetry_$Impl_$.MEM_TEXTURE = 8;
openfl_display3D__$Context3D_Context3DTelemetry_$Impl_$.MEM_TEXTURE_COMPRESSED = 9;
openfl_display3D__$Context3D_Context3DTelemetry_$Impl_$.MEM_PROGRAM = 10;
openfl_display3D__$Context3D_Context3DTelemetry_$Impl_$.$length = 11;
openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$.DESTINATION_ALPHA = 0;
openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$.DESTINATION_COLOR = 1;
openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$.ONE = 2;
openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$.ONE_MINUS_DESTINATION_ALPHA = 3;
openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$.ONE_MINUS_DESTINATION_COLOR = 4;
openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$.ONE_MINUS_SOURCE_ALPHA = 5;
openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$.ONE_MINUS_SOURCE_COLOR = 6;
openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$.SOURCE_ALPHA = 7;
openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$.SOURCE_COLOR = 8;
openfl_display3D__$Context3DBlendFactor_Context3DBlendFactor_$Impl_$.ZERO = 9;
openfl_display3D__$Context3DBufferUsage_Context3DBufferUsage_$Impl_$.DYNAMIC_DRAW = 0;
openfl_display3D__$Context3DBufferUsage_Context3DBufferUsage_$Impl_$.STATIC_DRAW = 1;
openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.ALWAYS = 0;
openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.EQUAL = 1;
openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.GREATER = 2;
openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.GREATER_EQUAL = 3;
openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.LESS = 4;
openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.LESS_EQUAL = 5;
openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.NEVER = 6;
openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.NOT_EQUAL = 7;
openfl_display3D__$Context3DMipFilter_Context3DMipFilter_$Impl_$.MIPLINEAR = 0;
openfl_display3D__$Context3DMipFilter_Context3DMipFilter_$Impl_$.MIPNEAREST = 1;
openfl_display3D__$Context3DMipFilter_Context3DMipFilter_$Impl_$.MIPNONE = 2;
openfl_display3D__$Context3DProfile_Context3DProfile_$Impl_$.BASELINE = 0;
openfl_display3D__$Context3DProfile_Context3DProfile_$Impl_$.BASELINE_CONSTRAINED = 1;
openfl_display3D__$Context3DProfile_Context3DProfile_$Impl_$.BASELINE_EXTENDED = 2;
openfl_display3D__$Context3DProfile_Context3DProfile_$Impl_$.STANDARD = 3;
openfl_display3D__$Context3DProfile_Context3DProfile_$Impl_$.STANDARD_CONSTRAINED = 4;
openfl_display3D__$Context3DProgramType_Context3DProgramType_$Impl_$.FRAGMENT = 0;
openfl_display3D__$Context3DProgramType_Context3DProgramType_$Impl_$.VERTEX = 1;
openfl_display3D__$Context3DRenderMode_Context3DRenderMode_$Impl_$.AUTO = 0;
openfl_display3D__$Context3DRenderMode_Context3DRenderMode_$Impl_$.SOFTWARE = 1;
openfl_display3D__$Context3DStencilAction_Context3DStencilAction_$Impl_$.DECREMENT_SATURATE = 0;
openfl_display3D__$Context3DStencilAction_Context3DStencilAction_$Impl_$.DECREMENT_WRAP = 1;
openfl_display3D__$Context3DStencilAction_Context3DStencilAction_$Impl_$.INCREMENT_SATURATE = 2;
openfl_display3D__$Context3DStencilAction_Context3DStencilAction_$Impl_$.INCREMENT_WRAP = 3;
openfl_display3D__$Context3DStencilAction_Context3DStencilAction_$Impl_$.INVERT = 4;
openfl_display3D__$Context3DStencilAction_Context3DStencilAction_$Impl_$.KEEP = 5;
openfl_display3D__$Context3DStencilAction_Context3DStencilAction_$Impl_$.SET = 6;
openfl_display3D__$Context3DStencilAction_Context3DStencilAction_$Impl_$.ZERO = 7;
openfl_display3D__$Context3DTextureFilter_Context3DTextureFilter_$Impl_$.ANISOTROPIC16X = 0;
openfl_display3D__$Context3DTextureFilter_Context3DTextureFilter_$Impl_$.ANISOTROPIC2X = 1;
openfl_display3D__$Context3DTextureFilter_Context3DTextureFilter_$Impl_$.ANISOTROPIC4X = 2;
openfl_display3D__$Context3DTextureFilter_Context3DTextureFilter_$Impl_$.ANISOTROPIC8X = 3;
openfl_display3D__$Context3DTextureFilter_Context3DTextureFilter_$Impl_$.LINEAR = 4;
openfl_display3D__$Context3DTextureFilter_Context3DTextureFilter_$Impl_$.NEAREST = 5;
openfl_display3D__$Context3DTextureFormat_Context3DTextureFormat_$Impl_$.BGR_PACKED = 0;
openfl_display3D__$Context3DTextureFormat_Context3DTextureFormat_$Impl_$.BGRA = 1;
openfl_display3D__$Context3DTextureFormat_Context3DTextureFormat_$Impl_$.BGRA_PACKED = 2;
openfl_display3D__$Context3DTextureFormat_Context3DTextureFormat_$Impl_$.COMPRESSED = 3;
openfl_display3D__$Context3DTextureFormat_Context3DTextureFormat_$Impl_$.COMPRESSED_ALPHA = 4;
openfl_display3D__$Context3DTextureFormat_Context3DTextureFormat_$Impl_$.RGBA_HALF_FLOAT = 5;
openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$.BACK = 0;
openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$.FRONT = 1;
openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$.FRONT_AND_BACK = 2;
openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$.NONE = 3;
openfl_display3D__$Context3DVertexBufferFormat_Context3DVertexBufferFormat_$Impl_$.BYTES_4 = 0;
openfl_display3D__$Context3DVertexBufferFormat_Context3DVertexBufferFormat_$Impl_$.FLOAT_1 = 1;
openfl_display3D__$Context3DVertexBufferFormat_Context3DVertexBufferFormat_$Impl_$.FLOAT_2 = 2;
openfl_display3D__$Context3DVertexBufferFormat_Context3DVertexBufferFormat_$Impl_$.FLOAT_3 = 3;
openfl_display3D__$Context3DVertexBufferFormat_Context3DVertexBufferFormat_$Impl_$.FLOAT_4 = 4;
openfl_display3D__$Context3DWrapMode_Context3DWrapMode_$Impl_$.CLAMP = 0;
openfl_display3D__$Context3DWrapMode_Context3DWrapMode_$Impl_$.CLAMP_U_REPEAT_V = 1;
openfl_display3D__$Context3DWrapMode_Context3DWrapMode_$Impl_$.REPEAT = 2;
openfl_display3D__$Context3DWrapMode_Context3DWrapMode_$Impl_$.REPEAT_U_CLAMP_V = 3;
openfl_display3D_Program3D.verbose = lime_utils_Log.level == 5;
openfl_display3D_textures_Texture.__lowMemoryMode = false;
openfl_errors_Error.DEFAULT_TO_STRING = "Error";
openfl_events_ActivityEvent.ACTIVITY = "activity";
openfl_events_TextEvent.LINK = "link";
openfl_events_TextEvent.TEXT_INPUT = "textInput";
openfl_events_ErrorEvent.ERROR = "error";
openfl_events_FocusEvent.FOCUS_IN = "focusIn";
openfl_events_FocusEvent.FOCUS_OUT = "focusOut";
openfl_events_FocusEvent.KEY_FOCUS_CHANGE = "keyFocusChange";
openfl_events_FocusEvent.MOUSE_FOCUS_CHANGE = "mouseFocusChange";
openfl_events_FullScreenEvent.FULL_SCREEN = "fullScreen";
openfl_events_FullScreenEvent.FULL_SCREEN_INTERACTIVE_ACCEPTED = "fullScreenInteractiveAccepted";
openfl_events_GameInputEvent.DEVICE_ADDED = "deviceAdded";
openfl_events_GameInputEvent.DEVICE_REMOVED = "deviceRemoved";
openfl_events_GameInputEvent.DEVICE_UNUSABLE = "deviceUnusable";
openfl_events_HTTPStatusEvent.HTTP_RESPONSE_STATUS = "httpResponseStatus";
openfl_events_HTTPStatusEvent.HTTP_STATUS = "httpStatus";
openfl_events_IOErrorEvent.IO_ERROR = "ioError";
openfl_events_KeyboardEvent.KEY_DOWN = "keyDown";
openfl_events_KeyboardEvent.KEY_UP = "keyUp";
openfl_events_MouseEvent.CLICK = "click";
openfl_events_MouseEvent.DOUBLE_CLICK = "doubleClick";
openfl_events_MouseEvent.MIDDLE_CLICK = "middleClick";
openfl_events_MouseEvent.MIDDLE_MOUSE_DOWN = "middleMouseDown";
openfl_events_MouseEvent.MIDDLE_MOUSE_UP = "middleMouseUp";
openfl_events_MouseEvent.MOUSE_DOWN = "mouseDown";
openfl_events_MouseEvent.MOUSE_MOVE = "mouseMove";
openfl_events_MouseEvent.MOUSE_OUT = "mouseOut";
openfl_events_MouseEvent.MOUSE_OVER = "mouseOver";
openfl_events_MouseEvent.MOUSE_UP = "mouseUp";
openfl_events_MouseEvent.MOUSE_WHEEL = "mouseWheel";
openfl_events_MouseEvent.RIGHT_CLICK = "rightClick";
openfl_events_MouseEvent.RIGHT_MOUSE_DOWN = "rightMouseDown";
openfl_events_MouseEvent.RIGHT_MOUSE_UP = "rightMouseUp";
openfl_events_MouseEvent.ROLL_OUT = "rollOut";
openfl_events_MouseEvent.ROLL_OVER = "rollOver";
openfl_events_NetStatusEvent.NET_STATUS = "netStatus";
openfl_events_ProgressEvent.PROGRESS = "progress";
openfl_events_ProgressEvent.SOCKET_DATA = "socketData";
openfl_events_SecurityErrorEvent.SECURITY_ERROR = "securityError";
openfl_events_TimerEvent.TIMER = "timer";
openfl_events_TimerEvent.TIMER_COMPLETE = "timerComplete";
openfl_events_TouchEvent.TOUCH_BEGIN = "touchBegin";
openfl_events_TouchEvent.TOUCH_END = "touchEnd";
openfl_events_TouchEvent.TOUCH_MOVE = "touchMove";
openfl_events_TouchEvent.TOUCH_OUT = "touchOut";
openfl_events_TouchEvent.TOUCH_OVER = "touchOver";
openfl_events_TouchEvent.TOUCH_ROLL_OUT = "touchRollOut";
openfl_events_TouchEvent.TOUCH_ROLL_OVER = "touchRollOver";
openfl_events_TouchEvent.TOUCH_TAP = "touchTap";
openfl_events_UncaughtErrorEvent.UNCAUGHT_ERROR = "uncaughtError";
openfl_filters_BlurFilter.__blurShader = new openfl_filters__$BlurFilter_BlurShader();
openfl_filters_ColorMatrixFilter.__colorMatrixShader = new openfl_filters__$ColorMatrixFilter_ColorMatrixShader();
openfl_filters_GlowFilter.__glowShader = new openfl_filters__$GlowFilter_GlowShader();
openfl_geom__$Orientation3D_Orientation3D_$Impl_$.AXIS_ANGLE = 0;
openfl_geom__$Orientation3D_Orientation3D_$Impl_$.EULER_ANGLES = 1;
openfl_geom__$Orientation3D_Orientation3D_$Impl_$.QUATERNION = 2;
openfl_media_SoundMixer.MAX_ACTIVE_CHANNELS = 32;
openfl_media_SoundMixer.__soundChannels = [];
openfl_media_SoundMixer.__soundTransform = new openfl_media_SoundTransform();
openfl_net_NetConnection.CONNECT_SUCCESS = "connectSuccess";
openfl_net__$URLLoaderDataFormat_URLLoaderDataFormat_$Impl_$.BINARY = 0;
openfl_net__$URLLoaderDataFormat_URLLoaderDataFormat_$Impl_$.TEXT = 1;
openfl_net__$URLLoaderDataFormat_URLLoaderDataFormat_$Impl_$.VARIABLES = 2;
openfl_system_ApplicationDomain.currentDomain = new openfl_system_ApplicationDomain(null);
openfl_system_SecurityDomain.currentDomain = new openfl_system_SecurityDomain();
openfl_text__$AntiAliasType_AntiAliasType_$Impl_$.ADVANCED = 0;
openfl_text__$AntiAliasType_AntiAliasType_$Impl_$.NORMAL = 1;
openfl_text__$FontStyle_FontStyle_$Impl_$.BOLD = 0;
openfl_text__$FontStyle_FontStyle_$Impl_$.BOLD_ITALIC = 1;
openfl_text__$FontStyle_FontStyle_$Impl_$.ITALIC = 2;
openfl_text__$FontStyle_FontStyle_$Impl_$.REGULAR = 3;
openfl_text__$FontType_FontType_$Impl_$.DEVICE = 0;
openfl_text__$FontType_FontType_$Impl_$.EMBEDDED = 1;
openfl_text__$FontType_FontType_$Impl_$.EMBEDDED_CFF = 2;
openfl_text__$GridFitType_GridFitType_$Impl_$.NONE = 0;
openfl_text__$GridFitType_GridFitType_$Impl_$.PIXEL = 1;
openfl_text__$GridFitType_GridFitType_$Impl_$.SUBPIXEL = 2;
openfl_text_TextField.__regexAlign = new EReg("align=(\"([^\"]+)\"|'([^']+)')","i");
openfl_text_TextField.__regexColor = new EReg("color=(\"#([^\"]+)\"|'#([^']+)')","i");
openfl_text_TextField.__regexBlockIndent = new EReg("blockindent=(\"([^\"]+)\"|'([^']+)')","i");
openfl_text_TextField.__regexBreakTag = new EReg("<br\\s*/?>","gi");
openfl_text_TextField.__regexEntities = [new EReg("&quot;","g"),new EReg("&apos;","g"),new EReg("&amp;","g"),new EReg("&lt;","g"),new EReg("&gt;","g")];
openfl_text_TextField.__regexFace = new EReg("face=(\"([^\"]+)\"|'([^']+)')","i");
openfl_text_TextField.__regexHTMLTag = new EReg("<.*?>","g");
openfl_text_TextField.__regexIndent = new EReg(" indent=(\"([^\"]+)\"|'([^']+)')","i");
openfl_text_TextField.__regexLeading = new EReg("leading=(\"([^\"]+)\"|'([^']+)')","i");
openfl_text_TextField.__regexLeftMargin = new EReg("leftmargin=(\"([^\"]+)\"|'([^']+)')","i");
openfl_text_TextField.__regexRightMargin = new EReg("rightmargin=(\"([^\"]+)\"|'([^']+)')","i");
openfl_text_TextField.__regexTabStops = new EReg("tabstops=(\"([^\"]+)\"|'([^']+)')","i");
openfl_text_TextField.__regexSize = new EReg("size=(\"([^\"]+)\"|'([^']+)')","i");
openfl_text__$TextFieldAutoSize_TextFieldAutoSize_$Impl_$.CENTER = 0;
openfl_text__$TextFieldAutoSize_TextFieldAutoSize_$Impl_$.LEFT = 1;
openfl_text__$TextFieldAutoSize_TextFieldAutoSize_$Impl_$.NONE = 2;
openfl_text__$TextFieldAutoSize_TextFieldAutoSize_$Impl_$.RIGHT = 3;
openfl_text__$TextFieldType_TextFieldType_$Impl_$.DYNAMIC = 0;
openfl_text__$TextFieldType_TextFieldType_$Impl_$.INPUT = 1;
openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$.CENTER = 0;
openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$.END = 1;
openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$.JUSTIFY = 2;
openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$.LEFT = 3;
openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$.RIGHT = 4;
openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$.START = 5;
openfl_ui_GameInput.isSupported = true;
openfl_ui_GameInput.numDevices = 0;
openfl_ui_GameInput.__deviceList = [];
openfl_ui_GameInput.__devices = new haxe_ds_ObjectMap();
openfl_ui_GameInput.__instances = [];
openfl_ui_GameInputDevice.MAX_BUFFER_SIZE = 32000;
openfl_ui_Keyboard.NUMBER_0 = 48;
openfl_ui_Keyboard.NUMBER_1 = 49;
openfl_ui_Keyboard.NUMBER_2 = 50;
openfl_ui_Keyboard.NUMBER_3 = 51;
openfl_ui_Keyboard.NUMBER_4 = 52;
openfl_ui_Keyboard.NUMBER_5 = 53;
openfl_ui_Keyboard.NUMBER_6 = 54;
openfl_ui_Keyboard.NUMBER_7 = 55;
openfl_ui_Keyboard.NUMBER_8 = 56;
openfl_ui_Keyboard.NUMBER_9 = 57;
openfl_ui_Keyboard.A = 65;
openfl_ui_Keyboard.B = 66;
openfl_ui_Keyboard.C = 67;
openfl_ui_Keyboard.D = 68;
openfl_ui_Keyboard.E = 69;
openfl_ui_Keyboard.F = 70;
openfl_ui_Keyboard.G = 71;
openfl_ui_Keyboard.H = 72;
openfl_ui_Keyboard.I = 73;
openfl_ui_Keyboard.J = 74;
openfl_ui_Keyboard.K = 75;
openfl_ui_Keyboard.L = 76;
openfl_ui_Keyboard.M = 77;
openfl_ui_Keyboard.N = 78;
openfl_ui_Keyboard.O = 79;
openfl_ui_Keyboard.P = 80;
openfl_ui_Keyboard.Q = 81;
openfl_ui_Keyboard.R = 82;
openfl_ui_Keyboard.S = 83;
openfl_ui_Keyboard.T = 84;
openfl_ui_Keyboard.U = 85;
openfl_ui_Keyboard.V = 86;
openfl_ui_Keyboard.W = 87;
openfl_ui_Keyboard.X = 88;
openfl_ui_Keyboard.Y = 89;
openfl_ui_Keyboard.Z = 90;
openfl_ui_Keyboard.NUMPAD_0 = 96;
openfl_ui_Keyboard.NUMPAD_1 = 97;
openfl_ui_Keyboard.NUMPAD_2 = 98;
openfl_ui_Keyboard.NUMPAD_3 = 99;
openfl_ui_Keyboard.NUMPAD_4 = 100;
openfl_ui_Keyboard.NUMPAD_5 = 101;
openfl_ui_Keyboard.NUMPAD_6 = 102;
openfl_ui_Keyboard.NUMPAD_7 = 103;
openfl_ui_Keyboard.NUMPAD_8 = 104;
openfl_ui_Keyboard.NUMPAD_9 = 105;
openfl_ui_Keyboard.NUMPAD_MULTIPLY = 106;
openfl_ui_Keyboard.NUMPAD_ADD = 107;
openfl_ui_Keyboard.NUMPAD_ENTER = 108;
openfl_ui_Keyboard.NUMPAD_SUBTRACT = 109;
openfl_ui_Keyboard.NUMPAD_DECIMAL = 110;
openfl_ui_Keyboard.NUMPAD_DIVIDE = 111;
openfl_ui_Keyboard.F1 = 112;
openfl_ui_Keyboard.F2 = 113;
openfl_ui_Keyboard.F3 = 114;
openfl_ui_Keyboard.F4 = 115;
openfl_ui_Keyboard.F5 = 116;
openfl_ui_Keyboard.F6 = 117;
openfl_ui_Keyboard.F7 = 118;
openfl_ui_Keyboard.F8 = 119;
openfl_ui_Keyboard.F9 = 120;
openfl_ui_Keyboard.F10 = 121;
openfl_ui_Keyboard.F11 = 122;
openfl_ui_Keyboard.F12 = 123;
openfl_ui_Keyboard.F13 = 124;
openfl_ui_Keyboard.F14 = 125;
openfl_ui_Keyboard.F15 = 126;
openfl_ui_Keyboard.BACKSPACE = 8;
openfl_ui_Keyboard.TAB = 9;
openfl_ui_Keyboard.ALTERNATE = 18;
openfl_ui_Keyboard.ENTER = 13;
openfl_ui_Keyboard.COMMAND = 15;
openfl_ui_Keyboard.SHIFT = 16;
openfl_ui_Keyboard.CONTROL = 17;
openfl_ui_Keyboard.BREAK = 19;
openfl_ui_Keyboard.CAPS_LOCK = 20;
openfl_ui_Keyboard.NUMPAD = 21;
openfl_ui_Keyboard.ESCAPE = 27;
openfl_ui_Keyboard.SPACE = 32;
openfl_ui_Keyboard.PAGE_UP = 33;
openfl_ui_Keyboard.PAGE_DOWN = 34;
openfl_ui_Keyboard.END = 35;
openfl_ui_Keyboard.HOME = 36;
openfl_ui_Keyboard.LEFT = 37;
openfl_ui_Keyboard.RIGHT = 39;
openfl_ui_Keyboard.UP = 38;
openfl_ui_Keyboard.DOWN = 40;
openfl_ui_Keyboard.INSERT = 45;
openfl_ui_Keyboard.DELETE = 46;
openfl_ui_Keyboard.NUMLOCK = 144;
openfl_ui_Keyboard.SEMICOLON = 186;
openfl_ui_Keyboard.EQUAL = 187;
openfl_ui_Keyboard.COMMA = 188;
openfl_ui_Keyboard.MINUS = 189;
openfl_ui_Keyboard.PERIOD = 190;
openfl_ui_Keyboard.SLASH = 191;
openfl_ui_Keyboard.BACKQUOTE = 192;
openfl_ui_Keyboard.LEFTBRACKET = 219;
openfl_ui_Keyboard.BACKSLASH = 220;
openfl_ui_Keyboard.RIGHTBRACKET = 221;
openfl_ui_Keyboard.QUOTE = 222;
openfl_ui_Mouse.supportsCursor = true;
openfl_ui_Mouse.supportsNativeCursor = true;
openfl_ui_Mouse.__cursor = "auto";
openfl_ui__$MultitouchInputMode_MultitouchInputMode_$Impl_$.GESTURE = 0;
openfl_ui__$MultitouchInputMode_MultitouchInputMode_$Impl_$.NONE = 1;
openfl_ui__$MultitouchInputMode_MultitouchInputMode_$Impl_$.TOUCH_POINT = 2;
openfl_utils__$CompressionAlgorithm_CompressionAlgorithm_$Impl_$.DEFLATE = 0;
openfl_utils__$CompressionAlgorithm_CompressionAlgorithm_$Impl_$.LZMA = 1;
openfl_utils__$CompressionAlgorithm_CompressionAlgorithm_$Impl_$.ZLIB = 2;
openfl_utils__$Endian_Endian_$Impl_$.BIG_ENDIAN = 0;
openfl_utils__$Endian_Endian_$Impl_$.LITTLE_ENDIAN = 1;
scenario_NPC._maxID = 0;
scenario_GoalsAlienCrashLanding.map = (function($this) {
	var $r;
	var _g = new haxe_ds_EnumValueMap();
	_g.set(_$Goal.SCENARIO_ALIEN_FIND_SHIP,{ id : _$Goal.SCENARIO_ALIEN_FIND_SHIP, name : "Find your ship", note : "You need to find out where your ship is. It should contain more useful information.", messageReceive : "Now I remember. I came here on a ship from somewhere far away. But where is it now?", messageComplete : "Now I know its location. I should enter it and find out more about myself.", onReceive : function(game,player) {
		var ev = game.timeline._eventsMap.get("alienShipStudy");
		var area = ev.location.area;
		var obj = area.addEventObject({ name : "spaceship", action : { id : "enterShip", type : _$PlayerActionType.ACTION_OBJECT, name : "Enter Spaceship", energy : 0}, onAction : function(game1,player1,id) {
			if(!Lambda.has(game1.goals._listCurrent,_$Goal.SCENARIO_ALIEN_ENTER_SHIP)) {
				game1.goals.receive(_$Goal.SCENARIO_ALIEN_FIND_SHIP,true);
				game1.goals.complete(_$Goal.SCENARIO_ALIEN_FIND_SHIP,true);
			}
			game1.goals.complete(_$Goal.SCENARIO_ALIEN_ENTER_SHIP);
			var ev1 = game1.timeline._eventsMap.get("alienMission");
			ev1.isHidden = false;
			var _g1 = 0;
			var _g2 = ev1.notes;
			while(_g1 < _g2.length) {
				var n = _g2[_g1];
				++_g1;
				n.isKnown = true;
			}
			game1.timeline.update();
		}});
		game.timeline.setVar("spaceShipObjectID",obj.id);
		game.timeline.setVar("spaceShipObject",obj);
	}, onComplete : function(game2,player2) {
		game2.goals.receive(_$Goal.SCENARIO_ALIEN_ENTER_SHIP);
	}});
	_g.set(_$Goal.SCENARIO_ALIEN_SAVE_ALIEN,{ id : _$Goal.SCENARIO_ALIEN_SAVE_ALIEN, name : "Save your original host", note : "Your original host survived. You need to find it.", messageReceive : "My original host still functions. I will need to find it and retrieve it.", messageComplete : "I feel some attachment to it."});
	_g.set(_$Goal.SCENARIO_ALIEN_ENTER_SHIP,{ id : _$Goal.SCENARIO_ALIEN_ENTER_SHIP, name : "Enter the ship", note : "You need to enter the ship and activate the onboard computer.", messageComplete : "The onboard computer recognizes your signature and allows you to enter the ship. " + "Spending some time on the computer you remember what was your initial goal on this planet. " + "You have a mission. You need to complete it.", onComplete : function(game3,player3) {
		if(game3.timeline._variables.get("alienMissionType") == "abduction") game3.goals.receive(_$Goal.SCENARIO_ALIEN_MISSION_ABDUCTION);
	}});
	_g.set(_$Goal.SCENARIO_ALIEN_MISSION_ABDUCTION,{ id : _$Goal.SCENARIO_ALIEN_MISSION_ABDUCTION, name : "Mission: Abduction", note : "You need to locate the target host and invade it.", messageComplete : "Target invaded. I need to return to my spaceship.", onTurn : function(game4,player4) {
		if(player4.state == _$PlayerState.PLR_STATE_HOST && player4.host.npc != null && player4.host.npc.id == game4.timeline.getIntVar("missionTargetID")) game4.goals.complete(_$Goal.SCENARIO_ALIEN_MISSION_ABDUCTION);
	}, onReceive : function(game5,player5) {
		var area1 = game5.region.getRandomWithType(_$AreaType.AREA_CITY_HIGH,true);
		var npc = new scenario_NPC(game5);
		npc.event = null;
		npc.job = "corporate executive";
		npc.jobKnown = true;
		npc.type = "civilian";
		npc.area = area1;
		area1.npc.add(npc);
		game5.timeline.setVar("missionTargetID",npc.id);
		var goal = game5.goals.getInfo(_$Goal.SCENARIO_ALIEN_MISSION_ABDUCTION);
		goal.note += " Target location: (" + area1.x + "," + area1.y + ")";
	}, onComplete : function(game6,player6) {
		game6.goals.receive(_$Goal.SCENARIO_ALIEN_MISSION_ABDUCTION_GO_SPACESHIP);
	}});
	_g.set(_$Goal.SCENARIO_ALIEN_MISSION_ABDUCTION_GO_SPACESHIP,{ id : _$Goal.SCENARIO_ALIEN_MISSION_ABDUCTION_GO_SPACESHIP, name : "Mission: Abduction", note : "You need to bring the target host to the spaceship.", messageComplete : "Mission accomplished. I can return to the HQ now. Goodbye, Earth. For now.", messageFailure : "Mission failed. I will return to the HQ now.", onTurn : function(game7,player7) {
		if(player7.state != _$PlayerState.PLR_STATE_HOST || player7.host.npc == null || player7.host.npc.id != game7.timeline.getIntVar("missionTargetID")) game7.goals.fail(_$Goal.SCENARIO_ALIEN_MISSION_ABDUCTION_GO_SPACESHIP);
	}, onReceive : function(game8,player8) {
		var obj1 = game8.timeline._variables.get("spaceShipObject");
		obj1.eventOnAction = function(game9,player9,id1) {
			game9.goals.complete(_$Goal.SCENARIO_ALIEN_MISSION_ABDUCTION_GO_SPACESHIP);
		};
	}, onComplete : function(game10,player10) {
		game10.finish("win","scenario");
	}, onFailure : function(game11,player11) {
		game11.goals.receive(_$Goal.SCENARIO_ALIEN_MISSION_FAILURE_GO_SPACESHIP);
	}});
	_g.set(_$Goal.SCENARIO_ALIEN_MISSION_FAILURE_GO_SPACESHIP,{ id : _$Goal.SCENARIO_ALIEN_MISSION_FAILURE_GO_SPACESHIP, name : "Return to spaceship", note : "You need to return to the spaceship.", messageComplete : "Returning to the HQ now.", onReceive : function(game12,player12) {
		var obj2 = game12.timeline._variables.get("spaceShipObject");
		obj2.eventOnAction = function(game13,player13,id2) {
			game13.goals.complete(_$Goal.SCENARIO_ALIEN_MISSION_FAILURE_GO_SPACESHIP);
		};
	}, onComplete : function(game14,player14) {
		game14.finish("win","scenario");
	}});
	$r = _g;
	return $r;
}(this));
ApplicationMain.main();
})(typeof console != "undefined" ? console : {log:function(){}}, typeof window != "undefined" ? window : exports, typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
