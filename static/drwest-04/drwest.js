// Generated by Haxe 3.4.7
(function ($global) { "use strict";
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var CellObject = function(g,xv,yv,dontAdd) {
	this.game = g;
	this.x = xv;
	this.y = yv;
	this.map = this.game.map;
	this.ui = this.game.ui;
	this.turns = 0;
	this.skip = false;
	this.life = 1;
	this.state = "idle";
	this.subtype = null;
	this.isQuest = false;
	this.message = "";
	if(dontAdd == null || dontAdd == false) {
		this.map.objects.add(this);
		this.map.get(this.x,this.y).object = this;
	}
};
CellObject.__name__ = ["CellObject"];
CellObject.prototype = {
	hit: function(o) {
	}
	,alert: function(ax,ay) {
	}
	,die: function() {
		this.map.objects.remove(this);
		this.map.get(this.x,this.y).object = null;
	}
	,move: function(nx,ny) {
		this.map.get(this.x,this.y).object = null;
		this.x = nx;
		this.y = ny;
		this.map.get(this.x,this.y).object = this;
		this.onMove();
	}
	,onMove: function() {
	}
	,activate: function(p) {
		return false;
	}
	,getNote: function() {
		var p1 = this.subtype == null ? this.type : this.subtype;
		var p2 = this.state != "idle" ? " (" + this.state + ")" : "";
		var p3 = "";
		var _g1 = 0;
		var _g = this.life;
		while(_g1 < _g) {
			var i = _g1++;
			p3 += "*";
		}
		return p1 + p2 + " " + p3;
	}
	,getMessage: function() {
		return this.message;
	}
	,getImage: function() {
		return this.type;
	}
	,ai: function() {
	}
	,__class__: CellObject
};
var Body = function(g,xv,yv) {
	CellObject.call(this,g,xv,yv);
	this.type = "body";
	this.freshness = 3;
	this.quality = 1 + (Math.random() * 2 | 0);
};
Body.__name__ = ["Body"];
Body.__super__ = CellObject;
Body.prototype = $extend(CellObject.prototype,{
	testSolution: function(player) {
		this.die();
		this.game.stats.bodiesTested++;
		if(100 * Math.random() < 45 - 15 * this.quality) {
			this.map.addMessage(this.x,this.y,"You test a new solution on the body... Nothing happens.");
			return true;
		}
		var mod = 0;
		var tmp = 100 * Math.random();
		var c = 10 + 40 * (this.quality - 1) - player.theory * 2;
		if(c < 2) {
			c = 2;
		}
		if(tmp < c) {
			player.theory++;
			mod = 1;
			if(this.quality == 3 && player.theory < 10) {
				player.theory++;
				mod = 2;
			}
			if(player.theory > 10) {
				player.theory = 10;
			}
		}
		var spawnOk = false;
		if(100 * Math.random() < 70) {
			spawnOk = true;
			var cell = this.map.findEmpty(player.lab.x - 3,player.lab.y - 3,player.lab.w + 6,player.lab.h + 6);
			if(cell == null) {
				console.log("no empty spots near lab");
				return true;
			}
			var o = new Reanimated(this.game,cell.x,cell.y);
			o.life = 3 + (player.theory / 3 | 0);
			o.level = 1 + (player.theory / 3 | 0);
			this.game.stats.bodiesReanimated++;
		}
		this.map.addMessage(this.x,this.y,(spawnOk ? "With the new solution the body is reanimated! " : "You have failed to reanimate the body. ") + (mod > 0 ? "[Theory +" + mod + "]" : ""),mod > 0 ? { isImportant : true} : { });
		return true;
	}
	,activate: function(player) {
		if(this.map.get(this.x,this.y).subtype == "lab" || player.theory >= 10) {
			return false;
		}
		var nx = -1;
		var ny = -1;
		var _g1 = player.lab.y;
		var _g = player.lab.y + player.lab.h;
		while(_g1 < _g) {
			var yy = _g1++;
			var _g3 = player.lab.x;
			var _g2 = player.lab.x + player.lab.w;
			while(_g3 < _g2) {
				var xx = _g3++;
				if(this.map.get(xx,yy).object == null) {
					nx = xx;
					ny = yy;
					break;
				}
			}
			if(nx != -1) {
				break;
			}
		}
		if(nx == -1) {
			this.map.addMessage(this.x,this.y,"Your laboratory is full!");
			return false;
		}
		this.map.addMessage(this.x,this.y,"You bring the specimen to your laboratory.");
		this.game.panic += 10;
		this.map.removeMessage(nx,ny);
		this.move(nx,ny);
		this.map.paint();
		this.ui.paintStatus();
		return false;
	}
	,ai: function() {
		if(this.map.get(this.x,this.y).subtype == "lab") {
			this.testSolution(this.game.player);
			return;
		}
		this.freshness--;
		if(this.freshness == 0) {
			this.die();
		}
	}
	,getImage: function() {
		return "body" + this.quality;
	}
	,getNote: function() {
		return "body (F " + this.freshness + ",Q " + this.quality + ")";
	}
	,__class__: Body
});
var Cell = function(g) {
	this.game = g;
	this.map = this.game.map;
	this.ui = this.game.ui;
};
Cell.__name__ = ["Cell"];
Cell.prototype = {
	paint: function(screen,isSelected,rect) {
		var x1 = 3 + this.x * UI.cellSize;
		var x2 = 3 + this.x * UI.cellSize + UI.cellSize;
		var y1 = 2 + this.y * UI.cellSize;
		var y2 = 2 + this.y * UI.cellSize + UI.cellSize;
		if(!(x1 >= rect.x && x1 < rect.x + rect.w && y1 >= rect.y && y1 < rect.y + rect.h) && !(x2 > rect.x && x2 <= rect.x + rect.w && y2 > rect.y && y2 <= rect.y + rect.h)) {
			return;
		}
		var xx = 5 + this.x * UI.cellSize;
		var yy = 7 + this.y * UI.cellSize;
		var skipBG = false;
		if(this.type == "building" && (this.x != this.building.x || this.y != this.building.y)) {
			skipBG = true;
		}
		var sym = "tile_" + this.type;
		if(this.subtype != null) {
			sym = "tile_" + this.subtype;
		}
		var w = UI.cellSize;
		var h = UI.cellSize;
		if(this.type == "building") {
			w = this.building.w * UI.cellSize;
			h = this.building.h * UI.cellSize;
			if(this.subtype != null) {
				sym = "building_" + this.subtype;
			} else {
				sym = "building" + this.building.w + "x" + this.building.h;
			}
		}
		var _this = this.ui.images;
		var img = __map_reserved[sym] != null ? _this.getReserved(sym) : _this.h[sym];
		if(img == null) {
			console.log(sym);
			var _this1 = this.ui.images;
			if(__map_reserved["undefined"] != null) {
				img = _this1.getReserved("undefined");
			} else {
				img = _this1.h["undefined"];
			}
		}
		if(!skipBG) {
			screen.drawImage(img,xx,yy,w,h);
		}
		if(this.object != null) {
			sym = "object_" + this.object.getImage();
			var _this2 = this.ui.images;
			if(__map_reserved[sym] != null) {
				img = _this2.getReserved(sym);
			} else {
				img = _this2.h[sym];
			}
			screen.drawImage(img,xx,yy,UI.cellSize,UI.cellSize);
		}
		this.paintMessage(screen,xx,yy);
		if(this.map.hasMarker(this.x,this.y)) {
			this.paintMarker(screen,xx,yy);
		}
	}
	,paintMarker: function(screen,xx,yy) {
		var oldFont = screen.font;
		screen.fillStyle = "rgba(0, 0, 0, 0.7)";
		screen.font = (UI.cellSize / 1.5 | 0) + "px Verdana";
		var metrics = screen.measureText("!");
		screen.fillRect(xx + 6,yy + 6,metrics.width + 4,metrics.width * 2);
		var m = this.map.markers.first();
		screen.fillStyle = "red";
		var sym = "!";
		screen.fillStyle = "#ff0000";
		screen.fillText(sym,xx + 8,yy + 8);
		screen.font = oldFont;
	}
	,paintMessage: function(screen,xx,yy) {
		var msg = this.map.getMessage(this.x,this.y);
		if(msg == null) {
			return;
		}
		var oldFont = screen.font;
		screen.fillStyle = "rgba(0, 0, 0, 0.7)";
		screen.font = (UI.cellSize / 2 | 0) + "px Verdana";
		var metrics = screen.measureText("?");
		screen.fillRect(xx + 8,yy + 8,metrics.width + 4,metrics.width * 2);
		screen.fillStyle = msg.isImportant ? "#ffff00" : "#aaaa00";
		var sym = msg.isImportant ? "!" : "?";
		screen.fillText(sym,xx + 10,yy + 10);
		screen.font = oldFont;
	}
	,paintSelected: function(screen) {
		if(this.game.isFinished) {
			return;
		}
		screen.fillStyle = "#333333";
		screen.fillRect(3 + this.x * UI.cellSize,2 + this.y * UI.cellSize,UI.cellSize,UI.cellSize);
	}
	,distance: function(c) {
		var dx = this.x - c.x;
		var dy = this.y - c.y;
		return Math.sqrt(dx * dx + dy * dy) | 0;
	}
	,activate: function() {
		if(this.map.hasMarker(this.x,this.y)) {
			var m = this.map.getMarker(this.x,this.y);
			this.map.markers.remove(m);
		} else if(this.object != null) {
			var endTurn = this.object.activate(this.game.player);
			if(endTurn) {
				this.game.endTurn();
			} else {
				this.game.map.paint();
			}
		} else if(this.isWalkable() && this.map.markers.length < 1 + (this.game.player.theory / 3 | 0) && !this.map.hasMarker(this.x,this.y)) {
			var o = new Marker(this.game,this.x,this.y);
			this.map.markers.add(o);
		} else {
			return;
		}
		this.game.map.paint();
	}
	,hasAdjacentVisible: function() {
		var _g = 0;
		while(_g < 4) {
			var i = _g++;
			var c = this.map.get(this.x + Cell.dx[i],this.y + Cell.dy[i]);
			if(c == null || !c.isVisible) {
				continue;
			}
			return true;
		}
		return false;
	}
	,isWalkable: function() {
		if(this.object != null) {
			return false;
		}
		return Reflect.field(Cell.walkable,this.type);
	}
	,hasAdjacentWalkable: function() {
		var _g = 0;
		while(_g < 8) {
			var i = _g++;
			var c = this.map.get(this.x + Cell.dx[i],this.y + Cell.dy[i]);
			if(c == null || !c.isWalkable() || !c.isVisible) {
				continue;
			}
			return true;
		}
		return false;
	}
	,repaint: function() {
		this.game.map.paint(UI.getRect(this.x,this.y,0));
	}
	,getNote: function() {
		var s = "";
		if(this.object != null) {
			s = this.object.getNote();
		} else if(this.building != null) {
			s = this.building.name;
		} else if(this.subtype != null) {
			s = this.subtype;
		} else {
			s = this.type;
		}
		return s;
	}
	,__class__: Cell
};
var Creature = function(g,xv,yv) {
	CellObject.call(this,g,xv,yv);
	this.type = "creature";
};
Creature.__name__ = ["Creature"];
Creature.__super__ = CellObject;
Creature.prototype = $extend(CellObject.prototype,{
	ai: function() {
		this.aiDefaultCreature();
	}
	,aiDefaultCreature: function() {
		if(Math.random() < 0.2) {
			this.aiChangeRandomDirection();
		}
		var c = this.map.get(this.x + GameMap.dirx[this.direction],this.y + GameMap.diry[this.direction]);
		if(c == null || !c.isWalkable()) {
			this.aiChangeRandomDirection();
			return;
		} else {
			this.move(this.x + GameMap.dirx[this.direction],this.y + GameMap.diry[this.direction]);
		}
	}
	,aiChangeRandomDirection: function() {
		var cnt = 0;
		while(true) {
			var dir = Math.random() * GameMap.dirx.length | 0;
			var c = this.map.get(this.x + GameMap.dirx[dir],this.y + GameMap.diry[dir]);
			++cnt;
			if(cnt > 50) {
				break;
			}
			if(c == null || !c.isWalkable()) {
				continue;
			}
			this.direction = dir;
			break;
		}
	}
	,aiFindAdjacentObject: function(t,isOutside) {
		var _g1 = 0;
		var _g = GameMap.dirx.length;
		while(_g1 < _g) {
			var i = _g1++;
			var c = this.map.get(this.x + GameMap.dirx[i],this.y + GameMap.diry[i]);
			if(c == null || c.object == null || c.object.type != t || c.type == "building" && isOutside) {
				continue;
			}
			return c;
		}
		return null;
	}
	,aiFindRandomObject: function(t,radius) {
		var _g1 = -radius;
		var _g = radius;
		while(_g1 < _g) {
			var yy = _g1++;
			var _g3 = -radius;
			var _g2 = radius;
			while(_g3 < _g2) {
				var xx = _g3++;
				var c = this.map.get(this.x + xx,this.y + yy);
				if(c == null || c.object == null || c.object.type != t) {
					continue;
				}
				return c;
			}
		}
		return null;
	}
	,aiFindRandomMarker: function(radius) {
		var _g_head = this.map.markers.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var m = val;
			if(m.x >= this.x - radius && m.x <= this.x + radius && m.y >= this.y - radius && m.y <= this.y + radius) {
				return m;
			}
		}
		return null;
	}
	,aiMoveTo: function(xx,yy) {
		var dx = xx - this.x;
		var dy = yy - this.y;
		if(dx < 0) {
			dx = -1;
		} else if(dx > 0) {
			dx = 1;
		}
		if(dy < 0) {
			dy = -1;
		} else if(dy > 0) {
			dy = 1;
		}
		var dir = 0;
		var _g = 1;
		while(_g < 9) {
			var i = _g++;
			if(dx == Creature.dirNumX[i] && dy == Creature.dirNumY[i]) {
				dir = i;
				break;
			}
		}
		var c = this.map.get(this.x + dx,this.y + dy);
		if(c == null || !c.isWalkable() || c.object != null) {
			var dir2 = Creature.dirSecondary[dir][0];
			c = this.map.get(this.x + Creature.dirNumX[dir2],this.y + Creature.dirNumY[dir2]);
			if(c == null || !c.isWalkable() || c.object != null) {
				var dir3 = Creature.dirSecondary[dir][1];
				c = this.map.get(this.x + Creature.dirNumX[dir3],this.y + Creature.dirNumY[dir3]);
				if(c == null || !c.isWalkable() || c.object != null) {
					return;
				} else {
					dir = dir3;
				}
			} else {
				dir = dir2;
			}
		}
		this.move(c.x,c.y);
	}
	,aiAlertAroundMe: function() {
		var _g1 = this.y - 2;
		var _g = this.y + 2;
		while(_g1 < _g) {
			var yy = _g1++;
			var _g3 = this.x - 2;
			var _g2 = this.x + 2;
			while(_g3 < _g2) {
				var xx = _g3++;
				var c = this.map.get(xx,yy);
				if(c == null || c.object == null || c.object.type != "human" || c.object == this) {
					continue;
				}
				var o = c.object;
				o.alert(this.x,this.y);
				this.game.panic++;
			}
		}
	}
	,aiCallForHelp: function(ax,ay) {
		if(this.map.getObjectCount("human","cop") >= 10) {
			return;
		}
		this.game.queue("spawn.cop",{ x : ax, y : ay},2);
	}
	,__class__: Creature
});
var Human = function(g,xv,yv) {
	Creature.call(this,g,xv,yv);
	this.type = "human";
	this.name = "human";
	this.subtype = "human";
	this.quality = 1;
	if(Math.random() < 0.2) {
		this.quality++;
	}
	if(Math.random() < 0.1) {
		this.quality++;
	}
	this.timerAlerted = 0;
};
Human.__name__ = ["Human"];
Human.__super__ = Creature;
Human.prototype = $extend(Creature.prototype,{
	ai: function() {
		if(this.state == "alerted") {
			this.timerAlerted--;
		}
		if(this.state == "alerted" && this.timerAlerted <= 0) {
			this.state = "idle";
		}
		this.aiDefaultCreature();
	}
	,hit: function(who) {
		if(who.type != "reanimated") {
			return;
		}
		this.life--;
		this.isHit = true;
		if(this.life > 0) {
			this.alert(who.x,who.y);
		}
		this.aiAlertAroundMe();
		if(this.life > 0) {
			return;
		}
		this.die();
		this.game.stats.humansDead++;
		this.game.panic += 10;
		var o = new Body(this.game,this.x,this.y);
		o.quality = this.quality;
		o.skip = true;
	}
	,alert: function(ax,ay) {
		this.timerAlerted = 5;
		if(this.state == "alerted") {
			return;
		}
		this.state = "alerted";
		this.map.addMessage(this.x,this.y,"Authorities have been notified!");
		this.aiCallForHelp(ax,ay);
		this.aiCallForHelp(ax,ay);
	}
	,getMessage: function() {
		if(this.isQuest) {
			return this.message;
		} else if(this.state == "alerted") {
			return "\"Good lord, I'm so scared!\"";
		} else {
			return "";
		}
	}
	,getImage: function() {
		if(this.isQuest) {
			return "human_quest";
		}
		if(this.state == "alerted") {
			return "human_alerted" + this.quality;
		}
		return "human" + this.quality;
	}
	,getNote: function() {
		var p3 = "";
		var _g1 = 0;
		var _g = this.life;
		while(_g1 < _g) {
			var i = _g1++;
			p3 += "*";
		}
		return this.name + " (BQ " + this.quality + ") " + p3;
	}
	,__class__: Human
});
var Cop = function(g,xv,yv) {
	Human.call(this,g,xv,yv);
	this.subtype = "cop";
	this.name = "officer";
	this.life = 2;
	this.skip = true;
	this.state = "alerted";
	this.timerAlerted = 3;
};
Cop.__name__ = ["Cop"];
Cop.__super__ = Human;
Cop.prototype = $extend(Human.prototype,{
	ai: function() {
		if(this.state == "alerted") {
			this.timerAlerted--;
		}
		if(this.state == "alerted" && this.timerAlerted <= 0) {
			this.state = "idle";
		}
		if(this.state == "idle" && Math.random() < 0.7) {
			this.die();
			return;
		}
		var c = this.aiFindAdjacentObject("reanimated",false);
		if(c != null) {
			this.map.addMessage(this.x,this.y,"Officer attacks the reanimated.");
			c.object.hit(this);
			return;
		}
		var c1 = this.aiFindRandomObject("reanimated",5);
		if(c1 != null) {
			this.aiMoveTo(c1.x,c1.y);
			return;
		}
		this.aiDefaultCreature();
	}
	,hit: function(who) {
		if(who.type != "reanimated") {
			return;
		}
		if(Std.random(100) < 60 || this.game.aggressionFlag) {
			this.life--;
		}
		this.isHit = true;
		this.aiAlertAroundMe();
		this.aiCallForHelp(this.x,this.y);
		if(this.life > 0) {
			return;
		}
		this.die();
		this.game.stats.copsDead++;
		if(this.game.stats.copsDead > this.game.map.copsTotal) {
			this.game.stats.copsDead = this.game.map.copsTotal;
		}
		this.game.panic += 15;
		var o = new Body(this.game,this.x,this.y);
		o.skip = true;
	}
	,alert: function(ax,ay) {
		this.timerAlerted = 3;
		if(this.state == "alerted") {
			return;
		}
		this.state = "alerted";
	}
	,getMessage: function() {
		if(this.state == "alerted") {
			if(this.aiFindAdjacentObject("reanimated",false) != null) {
				return "\"You won't get away with this!\"";
			} else {
				return "\"Where's that damn perpetrator?\"";
			}
		} else {
			return "\"Dum-de-dum, patrolling around.\"";
		}
	}
	,getImage: function() {
		return "cop";
	}
	,getNote: function() {
		var p3 = "";
		var _g1 = 0;
		var _g = this.life;
		while(_g1 < _g) {
			var i = _g1++;
			p3 += "*";
		}
		return "officer (BQ " + this.quality + ") " + p3;
	}
	,__class__: Cop
});
var quests_Quest = function(g) {
	this.game = g;
	this.map = this.game.map;
	this.id = "_dummy";
	this.turnsPassed = 0;
};
quests_Quest.__name__ = ["quests","Quest"];
quests_Quest.check = function(game) {
	return false;
};
quests_Quest.prototype = {
	spawnQuestMarker: function(x,y,name,tag,message) {
		var o = new QuestMarker(this.game,x,y,this);
		o.name = name;
		o.message = message;
		o.questTag = tag;
	}
	,message: function(str) {
		this.game.ui.alert(str);
	}
	,finish: function() {
		var _g_head = this.map.objects.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var o = val;
			if(o.quest == this) {
				o.die();
			}
		}
		this.game.quests.remove(this);
	}
	,start: function() {
	}
	,activate: function(o) {
	}
	,tick: function() {
	}
	,__class__: quests_Quest
};
var quests_WaxHeadedVisitor = function(g) {
	quests_Quest.call(this,g);
	this.id = "waxHeadedVisitor";
};
quests_WaxHeadedVisitor.__name__ = ["quests","WaxHeadedVisitor"];
quests_WaxHeadedVisitor.check = function(game) {
	if(game.player.theory < 2) {
		return false;
	}
	return true;
};
quests_WaxHeadedVisitor.__super__ = quests_Quest;
quests_WaxHeadedVisitor.prototype = $extend(quests_Quest.prototype,{
	start: function() {
		var c = this.game.map.findEmpty(this.game.player.lab.x - 1,this.game.player.lab.y - 1,this.game.player.lab.w + 2,this.game.player.lab.h + 2);
		if(c == null) {
			return;
		}
		var o = new QuestMarker(this.game,c.x,c.y,this);
		o.name = "wax-headed visitor";
		o.message = "There is a wax-headed visitor near the laboratory...";
		o.questTag = "_markerStart";
	}
	,activate: function(o) {
		if(o.questTag == "_markerStart") {
			this.game.ui.alert("The wax-headed visitor praises your work, offers you a peculiar device describing it as a boon in your research and leaves.");
			o.die();
			var o1 = new QuestMarker(this.game,o.x,o.y,this);
			o1.name = "whirring device";
			o1.message = "A whirring cylindrical device.";
			o1.questTag = "_object";
		} else if(o.questTag == "_object") {
			this.game.ui.alert("You bring the whirring device to your laboratory. It's time to get to work. [+ Aggression Effect]");
			this.game.aggressionFlag = true;
			o.die();
			this.finish();
		}
	}
	,tick: function() {
		if(this.turnsPassed >= 3) {
			var o = this.map.getQuestObject(this,"_markerStart");
			if(o != null) {
				this.game.ui.alert("You decide to ignore the visitor.");
			} else {
				o = this.map.getQuestObject(this,"_object");
				if(o != null) {
					this.game.ui.alert("You decide to ignore the visitor's gift.");
				}
			}
			o.die();
			this.finish();
			return;
		}
	}
	,__class__: quests_WaxHeadedVisitor
});
var quests_AnxiousAssistant = function(g) {
	quests_Quest.call(this,g);
	this.id = "anxiousAssistant";
};
quests_AnxiousAssistant.__name__ = ["quests","AnxiousAssistant"];
quests_AnxiousAssistant.check = function(game) {
	if(game.map.get_reanimated() == 0 || game.player.theory < 5) {
		return false;
	}
	var c = game.map.get(game.player.lab.x,game.player.lab.y);
	if(c.object != null) {
		return false;
	}
	return true;
};
quests_AnxiousAssistant.__super__ = quests_Quest;
quests_AnxiousAssistant.prototype = $extend(quests_Quest.prototype,{
	start: function() {
		var o = new QuestMarker(this.game,this.game.player.lab.x,this.game.player.lab.y,this);
		o.name = "anxious assistant";
		o.message = "Your assistant is behaving weird lately...";
		o.questTag = "_markerStart";
	}
	,activate: function(o) {
		if(o.questTag == "_markerStart") {
			this.game.ui.alert("Your assistant seems to have a problem with your research. It's time to dispose of him. Lead any reanimated close to him.");
			o.die();
			var o1 = new Human(this.game,this.game.player.lab.x,this.game.player.lab.y);
			o1.quality = 3;
			o1.name = "assistant";
			o1.message = "He does not yet suspect what awaits him.";
			o1.isQuest = true;
			o1.quest = this;
			o1.questTag = "_assistant";
			o1.ai = function() {
			};
		}
	}
	,tick: function() {
		if(this.turnsPassed > 5) {
			this.game.ui.alert("Your assistant has become mentally unstable and had to be sent to the appropriate institution. [Suspicion +1].");
			this.game.player.suspicion++;
			this.finish();
			return;
		}
		var o = this.map.getQuestObject(this,"_markerStart");
		if(o != null) {
			return;
		}
		var o1 = this.map.getQuestObject(this,"_assistant");
		if(o1 != null) {
			return;
		}
		this.game.ui.alert("You have managed to obtain a very fresh specimen...");
		this.finish();
	}
	,__class__: quests_AnxiousAssistant
});
var quests_NosyReporter = function(g) {
	quests_Quest.call(this,g);
	this.id = "nosyReporter";
};
quests_NosyReporter.__name__ = ["quests","NosyReporter"];
quests_NosyReporter.check = function(game) {
	if(game.map.get_reanimated() == 0 || game.player.theory < 2) {
		return false;
	}
	return true;
};
quests_NosyReporter.__super__ = quests_Quest;
quests_NosyReporter.prototype = $extend(quests_Quest.prototype,{
	start: function() {
		var c = this.game.map.findEmpty(this.game.player.lab.x - 3,this.game.player.lab.y - 3,this.game.player.lab.w + 6,this.game.player.lab.h + 6);
		var o = new QuestMarker(this.game,c.x,c.y,this);
		o.name = "nosy reporter";
		o.message = "A reporter is snooping around your laboratory...";
		o.questTag = "_markerStart";
	}
	,activate: function(o) {
		if(o.questTag == "_markerStart") {
			this.game.ui.alert("A nosy reporter from out of town walks around the laboratory asking questions. You need to deal with this risk of exposure.");
			o.die();
			var c = this.game.map.findEmpty(this.game.player.lab.x - 3,this.game.player.lab.y - 3,this.game.player.lab.w + 6,this.game.player.lab.h + 6);
			var o1 = new Human(this.game,c.x,c.y);
			o1.quality = 3;
			o1.name = "reporter";
			o1.message = "\"I need to find a scoop in this lousy town.\"";
			o1.isQuest = true;
			o1.quest = this;
			o1.questTag = "_reporter";
		}
	}
	,tick: function() {
		if(this.turnsPassed > 10) {
			this.game.ui.alert("The reporter has been able to dig up some revealing information about your research drawing unwanted attention. [Suspicion +1].");
			this.game.player.suspicion++;
			this.finish();
			return;
		}
		var o = this.map.getQuestObject(this,"_markerStart");
		if(o != null) {
			return;
		}
		var o1 = this.map.getQuestObject(this,"_reporter");
		if(o1 != null) {
			return;
		}
		this.game.ui.alert("This reporter won't bother you again.");
		this.finish();
	}
	,__class__: quests_NosyReporter
});
var quests_LabEventGeneric = function(g) {
	quests_Quest.call(this,g);
	this.id = "labEvent";
};
quests_LabEventGeneric.__name__ = ["quests","LabEventGeneric"];
quests_LabEventGeneric.check = function(game) {
	if(game.player.theory < 2) {
		return false;
	}
	var c = game.map.get(game.player.lab.x,game.player.lab.y);
	if(c.object != null) {
		return false;
	}
	return true;
};
quests_LabEventGeneric.__super__ = quests_Quest;
quests_LabEventGeneric.prototype = $extend(quests_Quest.prototype,{
	start: function() {
		var o = new QuestMarker(this.game,this.game.player.lab.x,this.game.player.lab.y,this);
		o.name = "laboratory event";
		o.message = "There is something happening in the laboratory...";
		o.questTag = "_markerStart";
	}
	,activate: function(o) {
		if(o.questTag != "_markerStart") {
			return;
		}
		var rnd = Std.random(100);
		var rnd2 = Std.random(100);
		var cnt = 7;
		var avg = 100.0 / cnt;
		var chance = 15;
		if(rnd < avg) {
			this.game.ui.alert("It seems some of your equipment is faulty... " + (rnd2 < chance ? "and it's broken in the middle of an experiment delaying your research! [Theory -1]" : "but you manage to stop the experiment just in time."));
			if(rnd2 < chance) {
				this.game.player.theory -= 1;
			}
		} else if(rnd < avg * 2) {
			this.game.ui.alert("Equipment ordered earlier is finally delivered to your laboratory... " + (rnd2 < chance ? "and it gives a huge bonus to your research! [Theory +1]" : "but it falls short of your expectations."));
			if(rnd2 < chance) {
				this.game.player.theory += 1;
			}
		} else if(rnd < avg * 3) {
			this.game.ui.alert("Your assistant mixes up dangerously explosive chemicals used in research... " + (rnd2 < chance ? "and it produces a loud explosion alerting the neighbours! [Suspicion +1]" : "but fortunately nobody is around at this time."));
			if(rnd2 < chance) {
				this.game.player.suspicion += 1;
			}
		} else if(rnd < avg * 4) {
			this.game.ui.alert("Experimental chemicals ordered by mail finally make it to your laboratory... " + (rnd2 < chance ? "and they give a huge bonus to your research! [Theory +1]" : "but they fall short of your expectations."));
			if(rnd2 < chance) {
				this.game.player.theory += 1;
			}
		} else if(rnd < avg * 5) {
			this.game.ui.alert("Chatting with your assistant you find yourself in the mood for a lecture... " + (rnd2 < chance ? "and after an hour of discussing your theory you feel new ideas forming in your brain! [Theory +1]" : "but even after repeating yourself over and over he fails to grasp your theory."));
			if(rnd2 < chance) {
				this.game.player.theory += 1;
			}
		} else if(rnd < avg * 6) {
			this.game.ui.alert("Reading the fresh medicine journal... " + (rnd2 < chance ? "you feel new ideas forming in your brain! [Theory +1]" : "you find nothing of interest."));
			if(rnd2 < chance) {
				this.game.player.theory += 1;
			}
		} else if(rnd < avg * 7) {
			this.game.ui.alert("Browsing through the mail... " + (rnd2 < chance ? "you find a strange letter from a person you don't know discussing your research with a high degree of knowledge." : "you find nothing of interest."));
			if(rnd2 < chance) {
				var _this = this.game.questVariables;
				if(__map_reserved["strangeLetterReceived"] != null) {
					_this.setReserved("strangeLetterReceived",1);
				} else {
					_this.h["strangeLetterReceived"] = 1;
				}
			}
		}
		o.die();
		this.finish();
	}
	,tick: function() {
		if(this.turnsPassed > 1) {
			this.finish();
		}
	}
	,__class__: quests_LabEventGeneric
});
var Game = function() {
	this.ui = new UI(this);
	this.map = new GameMap(this);
	this.tasks = new List();
	this.aggressionFlag = false;
	var _this = this.ui;
	var hasPlayed = getCookie("hasPlayed");
	if(hasPlayed == null) {
		this.ui.alert("Welcome, Dr. West.<br><br>" + "If this is your first time playing, please take the time to read the " + "<a target=_blank href='http://code.google.com/p/drwest/wiki/Manual'>Manual</a> before playing.");
	}
	var _this1 = this.ui;
	setCookie("hasPlayed","1",new Date(2015, 0, 0, 0, 0, 0, 0));
	this.restart();
};
Game.__name__ = ["Game"];
Game.main = function() {
	Game.instance = new Game();
};
Game.prototype = {
	queue: function(type,params,turns) {
		var t = { type : type, params : params, turns : turns};
		this.tasks.add(t);
	}
	,endTurn: function() {
		if(this.isFinished) {
			return;
		}
		this.map.clearMessages();
		this.taskHandler();
		this.ui.tip("");
		var _g_head = this.quests.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var q = val;
			q.turnsPassed++;
			q.tick();
		}
		var _g_head1 = this.map.objects.h;
		while(_g_head1 != null) {
			var val1 = _g_head1.item;
			_g_head1 = _g_head1.next;
			var o = val1;
			o.turns++;
			if(!o.skip) {
				o.ai();
			} else {
				o.skip = false;
			}
		}
		this.handlePoliceStation();
		this.map.paint();
		this.ui.paintStatus();
		this.checkFinish();
		if(this.isFinished) {
			return;
		}
		this.handlePanic();
		this.map.spawnOnCemetery();
		this.spawnQuests();
		this.turns++;
		this.map.paint();
		this.ui.paintStatus();
	}
	,spawnQuests: function() {
		var prob = 0.1;
		var rnd = Math.random();
		if(rnd > prob) {
			return;
		}
		var _g = 0;
		var _g1 = Game.possibleQuests;
		while(_g < _g1.length) {
			var cl = _g1[_g];
			++_g;
			var ok = true;
			var _g2_head = this.quests.h;
			while(_g2_head != null) {
				var val = _g2_head.item;
				_g2_head = _g2_head.next;
				var qqq = val;
				if(Type.getClassName(qqq == null ? null : js_Boot.getClass(qqq)) == Type.getClassName(cl)) {
					ok = false;
					break;
				}
			}
			if(!ok) {
				continue;
			}
			var ok1 = true;
			if(!cl.isRepeatable) {
				var _g2_head1 = this.questsCompleted.h;
				while(_g2_head1 != null) {
					var val1 = _g2_head1.item;
					_g2_head1 = _g2_head1.next;
					var qqcl = val1;
					if(Type.getClassName(cl) == Type.getClassName(qqcl)) {
						ok1 = false;
						break;
					}
				}
				if(!ok1) {
					continue;
				}
			}
			var ok2 = Reflect.field(cl,"check").apply(cl,[this]);
			if(!ok2) {
				continue;
			}
			var q = Type.createInstance(cl,[this]);
			this.quests.add(q);
			q.start();
			this.questsCompleted.add(cl);
			return;
		}
	}
	,handlePoliceStation: function() {
		if(this.map.police.reanimated == 0) {
			return;
		}
		var _g1 = 0;
		var _g = this.map.police.reanimated;
		while(_g1 < _g) {
			var i = _g1++;
			if(Std.random(100) < 75) {
				this.stats.copsDead++;
				this.panic += 20;
				this.map.addMessage(this.map.police.x,this.map.police.y,"An officer goes down in the station.");
			}
			if(Std.random(100) < 50) {
				this.map.police.reanimated--;
				this.stats.reanimatedDestroyed++;
				this.map.addMessage(this.map.police.x,this.map.police.y,"Reanimated has been put down.");
			}
		}
	}
	,handlePanic: function() {
		var cnt = this.map.getObjectCount("human","human");
		var max = this.map.width * this.map.height / 18 | 0;
		if(cnt < max * 0.35) {
			if(!this.isPanic) {
				this.ui.alert("The town is in panic! The authorities order the police to be on constant patrol.");
			}
			this.isPanic = true;
		}
		if(!this.isPanic) {
			return;
		}
		var _g = 0;
		while(_g < 4) {
			var i = _g++;
			var c = this.map.findEmpty(this.map.police.x - 2,this.map.police.y - 2,this.map.police.w + 4,this.map.police.h + 4);
			this.queue("spawn.cop",{ x : c.x, y : c.y},1);
		}
	}
	,taskHandler: function() {
		var _g_head = this.tasks.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var t = val;
			t.turns--;
			if(t.turns > 0) {
				continue;
			}
			var copCount = this.map.getObjectCount("human","cop");
			if(t.type == "spawn.cop" && copCount < 10 && this.map.copsTotal - this.stats.copsDead - copCount > 0) {
				var x = t.params.x;
				var y = t.params.y;
				var cell = this.map.findEmpty(x - 1,y - 1,2,2);
				if(cell != null) {
					var o = new Cop(this,cell.x,cell.y);
					this.ui.msg("Authorities arrive on the scene.");
				}
			}
			this.tasks.remove(t);
		}
	}
	,finish: function(isVictory,reason) {
		this.isFinished = true;
		var _this = this.ui;
		var action = isVictory ? "winGame" : "loseGame";
		var label = reason;
		var value = this.turns;
		action = "drwest " + action + " " + Game.version;
		if(label == null) {
			label = "";
		}
		if(value == null) {
			value = 0;
		}
		pageTracker._trackEvent("Dr West",action,label,value);
		this.ui.finish(isVictory,reason);
	}
	,checkFinish: function() {
		if(this.stats.copsDead >= this.map.copsTotal) {
			this.finish(true,"police");
			return;
		} else if(this.player.theory >= 10) {
			this.finish(true,"theory");
			return;
		}
		var _g1 = this.player.lab.y - 1;
		var _g = this.player.lab.y + this.player.lab.h + 1;
		while(_g1 < _g) {
			var y = _g1++;
			var _g3 = this.player.lab.x - 1;
			var _g2 = this.player.lab.x + this.player.lab.w + 1;
			while(_g3 < _g2) {
				var x = _g3++;
				var c = this.map.get(x,y);
				if(c == null || c.object == null || c.object.type != "human" || c.object.subtype != "cop") {
					continue;
				}
				this.player.suspicion++;
			}
		}
		if(this.player.suspicion >= 3) {
			this.player.suspicion = 3;
			this.ui.paintStatus();
			this.finish(false,"suspicion");
		}
	}
	,restart: function() {
		var _this = this.ui;
		var action = "startGame";
		var label = null;
		var value = null;
		action = "drwest " + action + " " + Game.version;
		if(label == null) {
			label = "";
		}
		if(value == null) {
			value = 0;
		}
		pageTracker._trackEvent("Dr West",action,label,value);
		this.tasks.clear();
		this.stats = { humansDead : 0, copsDead : 0, bodiesTested : 0, bodiesReanimated : 0, reanimatedDestroyed : 0};
		this.isFinished = false;
		this.aggressionFlag = false;
		this.turns = 0;
		this.panic = 0;
		this.isPanic = false;
		this.player = new Player(this);
		this.quests = new List();
		this.questsCompleted = new List();
		this.questVariables = new haxe_ds_StringMap();
		this.map.generate();
		this.map.paint();
		this.ui.paintStatus();
	}
	,__class__: Game
};
var GameMap = function(g) {
	this.game = g;
	this.ui = this.game.ui;
	this.width = UI.mapWidth;
	this.height = UI.mapHeight;
};
GameMap.__name__ = ["GameMap"];
GameMap.prototype = {
	addMessage: function(x,y,text,params) {
		if(params == null) {
			params = { };
		}
		if(params.isImportant == null) {
			params.isImportant = false;
		}
		var m = { x : x, y : y, text : text, isImportant : params.isImportant};
		var _this = this.messages;
		var key = "" + x + "," + y;
		if(__map_reserved[key] != null) {
			_this.setReserved(key,m);
		} else {
			_this.h[key] = m;
		}
	}
	,removeMessage: function(x,y) {
		this.messages.remove("" + x + "," + y);
	}
	,getMessage: function(x,y) {
		var _this = this.messages;
		var key = "" + x + "," + y;
		if(__map_reserved[key] != null) {
			return _this.getReserved(key);
		} else {
			return _this.h[key];
		}
	}
	,clearMessages: function() {
		var m = this.messages.keys();
		while(m.hasNext()) {
			var m1 = m.next();
			this.messages.remove(m1);
		}
	}
	,generate: function() {
		this.cells = new haxe_ds_StringMap();
		this.objects = new List();
		this.markers = new List();
		this.messages = new haxe_ds_StringMap();
		this.buildings = [];
		this.copsTotal = this.width * this.height / 22 + Math.random() * 10 | 0;
		var _g1 = 0;
		var _g = this.height;
		while(_g1 < _g) {
			var y = _g1++;
			var _g3 = 0;
			var _g2 = this.width;
			while(_g3 < _g2) {
				var x = _g3++;
				var cell = new Cell(this.game);
				cell.x = x;
				cell.y = y;
				cell.type = "grass";
				var _this = this.cells;
				var key = x + "," + y;
				if(__map_reserved[key] != null) {
					_this.setReserved(key,cell);
				} else {
					_this.h[key] = cell;
				}
			}
		}
		var _g11 = 0;
		var _g4 = this.height;
		while(_g11 < _g4) {
			var y1 = _g11++;
			var _g31 = 0;
			var _g21 = this.width;
			while(_g31 < _g21) {
				var x1 = _g31++;
				var cell1 = this.get(x1,y1);
				if(Math.random() < 0.05) {
					cell1.type = "tree";
				}
				cell1.isVisible = true;
				if(cell1.x == 1 + (this.width / 3 | 0) && Math.random() < 0.3) {
					cell1.type = "grass";
				}
				var _this1 = this.cells;
				var key1 = x1 + "," + y1;
				if(__map_reserved[key1] != null) {
					_this1.setReserved(key1,cell1);
				} else {
					_this1.h[key1] = cell1;
				}
			}
		}
		this.generateBuildings();
		this.generateCreatures();
	}
	,generateBuildings: function() {
		var bldg = [];
		var _g1 = 0;
		var _g = this.height;
		while(_g1 < _g) {
			var y = _g1++;
			var _g3 = 0;
			var _g2 = this.width;
			while(_g3 < _g2) {
				var x = _g3++;
				var cell = this.get(x,y);
				if(Math.random() > 0.2) {
					continue;
				}
				var sx = 2 + (Math.random() * 3 | 0);
				var sy = 2 + (Math.random() * 3 | 0);
				if(x + sx > this.width) {
					sx = this.width - x;
				}
				if(y + sy > this.height) {
					sy = this.height - y;
				}
				if(x + sx > this.width || y + sy > this.height) {
					continue;
				}
				if(sx < 2 || sy < 2) {
					continue;
				}
				var ok = true;
				var _g5 = -1;
				var _g4 = sy + 2;
				while(_g5 < _g4) {
					var dy = _g5++;
					var _g7 = -1;
					var _g6 = sx + 2;
					while(_g7 < _g6) {
						var dx = _g7++;
						var _g8 = 0;
						while(_g8 < bldg.length) {
							var b = bldg[_g8];
							++_g8;
							if(x + dx > b.x && x + dx < b.x + b.w && y + dy > b.y && y + dy < b.y + b.h) {
								ok = false;
								break;
							}
						}
						if(!ok) {
							break;
						}
					}
				}
				if(!ok) {
					continue;
				}
				var b1 = { x : x, y : y, w : sx, h : sy, t : null, name : null, reanimated : 0};
				bldg.push(b1);
			}
		}
		var types = ["lab","cemetery","police"];
		var _g9 = 0;
		while(_g9 < types.length) {
			var t = types[_g9];
			++_g9;
			var n = 0;
			var loop = 0;
			while(loop < 100) {
				n = Math.random() * bldg.length | 0;
				if(bldg[n].w < 3 || bldg[n].h < 3) {
					continue;
				}
				if(t == "lab" && bldg[n].x >= 2 && bldg[n].y >= 2 && bldg[n].x + bldg[n].w <= this.width - 2 && bldg[n].y + bldg[n].h <= this.height - 2) {
					continue;
				}
				if(bldg[n].t == null) {
					break;
				}
			}
			var b2 = bldg[n];
			b2.t = t;
			if(t == "lab") {
				b2.w = 2;
				b2.h = 2;
				b2.name = "laboratory";
			} else if(t == "police") {
				b2.w = 3;
				b2.h = 3;
				b2.name = "police station";
			} else if(t == "cemetery") {
				b2.w = 3;
				b2.h = 2;
				b2.name = "cemetery";
			}
		}
		var cnt = 0;
		var _g10 = 0;
		while(_g10 < bldg.length) {
			var b3 = bldg[_g10];
			++_g10;
			var _g21 = 0;
			var _g11 = b3.h;
			while(_g21 < _g11) {
				var dy1 = _g21++;
				var _g41 = 0;
				var _g31 = b3.w;
				while(_g41 < _g31) {
					var dx1 = _g41++;
					var cell1 = this.get(b3.x + dx1,b3.y + dy1);
					if(cell1 == null) {
						continue;
					}
					cell1.type = "building";
					cell1.subtype = b3.t;
					cell1.building = b3;
				}
			}
			if(b3.t == "lab") {
				this.game.player.lab = b3;
			} else if(b3.t == "cemetery") {
				this.cemetery = b3;
			} else if(b3.t == "police") {
				this.police = b3;
			}
			++cnt;
		}
		this.buildings = bldg;
	}
	,generateCreatures: function() {
		var cnt = this.width * this.height / 18 | 0;
		var _g1 = 0;
		var _g = cnt;
		while(_g1 < _g) {
			var i = _g1++;
			var x = 0;
			var y = 0;
			while(true) {
				x = Math.random() * this.width | 0;
				y = Math.random() * this.height | 0;
				var cell = this.get(x,y);
				if(cell.type == "building" || cell.object != null) {
					continue;
				}
				if(x >= this.game.player.lab.x - 2 && x <= this.game.player.lab.x + this.game.player.lab.w + 2 && y >= this.game.player.lab.y - 2 && y <= this.game.player.lab.y + this.game.player.lab.h + 2) {
					continue;
				}
				break;
			}
			var c = new Human(this.game,x,y);
			c.aiChangeRandomDirection();
		}
	}
	,spawnPatients: function() {
		var cnt = this.width * this.height / 120 | 0;
		var _g1 = 0;
		var _g = cnt;
		while(_g1 < _g) {
			var i = _g1++;
			if(Math.random() < 0.8) {
				continue;
			}
			var x = 0;
			var y = 0;
			while(true) {
				x = Math.random() * this.width | 0;
				y = Math.random() * this.height | 0;
				var cell = this.get(x,y);
				if(cell.type != "building" || cell.object != null || cell.subtype != null) {
					continue;
				}
				break;
			}
			var o = new Patient(this.game,x,y);
		}
	}
	,spawnOnCemetery: function() {
		var cnt = 2;
		var _g1 = 0;
		var _g = cnt;
		while(_g1 < _g) {
			var i = _g1++;
			if(Math.random() > 0.2) {
				continue;
			}
			var x = this.cemetery.x + (Math.random() * this.cemetery.w | 0);
			var y = this.cemetery.y + (Math.random() * this.cemetery.h | 0);
			var o = new Body(this.game,x,y);
			o.quality = 1;
			o.freshness = 2;
			if(Math.random() < 0.2) {
				o.quality++;
			}
			if(Math.random() < 0.2) {
				o.freshness++;
			}
		}
	}
	,findEmpty: function(x,y,w,h) {
		var cell = null;
		var cnt = 0;
		while(true) {
			++cnt;
			if(cnt > 200) {
				return null;
			}
			var nx = x + (Math.random() * w | 0);
			var ny = y + (Math.random() * h | 0);
			if(nx >= this.width || ny >= this.height || nx < 0 || ny < 0) {
				continue;
			}
			cell = this.get(nx,ny);
			if(cell.object != null || !cell.isWalkable()) {
				continue;
			}
			return cell;
		}
	}
	,hasMarker: function(x,y) {
		var _g_head = this.markers.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var m = val;
			if(m.x == x && m.y == y) {
				return true;
			}
		}
		return false;
	}
	,getMarker: function(x,y) {
		var _g_head = this.markers.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var m = val;
			if(m.x == x && m.y == y) {
				return m;
			}
		}
		return null;
	}
	,getQuestObject: function(q,tag) {
		var _g_head = this.objects.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var o = val;
			if(o.quest == q && o.questTag == tag) {
				return o;
			}
		}
		return null;
	}
	,hasAlerted: function() {
		var _g_head = this.objects.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var o = val;
			if(o.type == "human" && o.state == "alerted") {
				return true;
			}
		}
		return false;
	}
	,hasReanimated: function() {
		var _g_head = this.objects.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var o = val;
			if(o.type == "reanimated") {
				return true;
			}
		}
		return false;
	}
	,get_reanimated: function() {
		var cnt = 0;
		var _g_head = this.objects.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var o = val;
			if(o.type == "reanimated") {
				++cnt;
			}
		}
		return cnt;
	}
	,paint: function(rect) {
		var el = window.document.getElementById("map");
		var map = el.getContext("2d",null);
		map.font = UI.cellSize - 3 + "px Verdana";
		map.fillStyle = "black";
		map.textBaseline = "top";
		if(rect == null) {
			rect = { x : 0, y : 0, w : 1000, h : 740};
		}
		if(rect.x < 0) {
			rect.x = 0;
		}
		if(rect.y < 0) {
			rect.y = 0;
		}
		map.fillRect(rect.x,rect.y,rect.w,rect.h);
		if(this.cells == null) {
			return;
		}
		var _g1 = 0;
		var _g = this.height;
		while(_g1 < _g) {
			var y = _g1++;
			var _g3 = 0;
			var _g2 = this.width;
			while(_g3 < _g2) {
				var x = _g3++;
				var cell = this.get(x,y);
				cell.paint(map,false,rect);
			}
		}
		this.paintPolice(map);
	}
	,paintPolice: function(map) {
		map.font = (UI.cellSize / 2 | 0) + "px Verdana";
		var text = this.copsTotal - this.game.stats.copsDead + " / " + this.copsTotal;
		var metrics = map.measureText(text);
		var xx = UI.cellSize * this.police.x + (UI.cellSize * this.police.w - metrics.width) / 2;
		var yy = UI.cellSize * this.police.y + 50;
		map.fillStyle = "rgba(0, 0, 0, 0.7)";
		var m2 = map.measureText("?");
		map.fillRect(xx - 4,yy - 8,metrics.width + 8,m2.width * 2 + 8);
		map.fillStyle = "white";
		map.fillText(text,xx,yy);
		if(this.game.map.police.reanimated > 0) {
			map.fillStyle = "#ff3333";
			map.fillText("" + this.game.map.police.reanimated,xx,yy + 30);
		}
	}
	,getObjectCount: function(type,subtype) {
		var cnt = 0;
		var _g_head = this.objects.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var o = val;
			if(o.type == type && (subtype == null || o.subtype == subtype)) {
				++cnt;
			}
		}
		return cnt;
	}
	,get: function(x,y) {
		var _this = this.cells;
		var key = x + "," + y;
		if(__map_reserved[key] != null) {
			return _this.getReserved(key);
		} else {
			return _this.h[key];
		}
	}
	,__class__: GameMap
};
var HxOverrides = function() { };
HxOverrides.__name__ = ["HxOverrides"];
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
var List = function() {
	this.length = 0;
};
List.__name__ = ["List"];
List.prototype = {
	add: function(item) {
		var x = new _$List_ListNode(item,null);
		if(this.h == null) {
			this.h = x;
		} else {
			this.q.next = x;
		}
		this.q = x;
		this.length++;
	}
	,first: function() {
		if(this.h == null) {
			return null;
		} else {
			return this.h.item;
		}
	}
	,clear: function() {
		this.h = null;
		this.q = null;
		this.length = 0;
	}
	,remove: function(v) {
		var prev = null;
		var l = this.h;
		while(l != null) {
			if(l.item == v) {
				if(prev == null) {
					this.h = l.next;
				} else {
					prev.next = l.next;
				}
				if(this.q == l) {
					this.q = prev;
				}
				this.length--;
				return true;
			}
			prev = l;
			l = l.next;
		}
		return false;
	}
	,__class__: List
};
var _$List_ListNode = function(item,next) {
	this.item = item;
	this.next = next;
};
_$List_ListNode.__name__ = ["_List","ListNode"];
_$List_ListNode.prototype = {
	__class__: _$List_ListNode
};
var Marker = function(g,xv,yv) {
	CellObject.call(this,g,xv,yv,true);
	this.type = "marker";
	this.life = 0;
};
Marker.__name__ = ["Marker"];
Marker.__super__ = CellObject;
Marker.prototype = $extend(CellObject.prototype,{
	activate: function(p) {
		this.die();
		return false;
	}
	,__class__: Marker
});
Math.__name__ = ["Math"];
var Patient = function(g,xv,yv) {
	CellObject.call(this,g,xv,yv);
	this.type = "patient";
};
Patient.__name__ = ["Patient"];
Patient.__super__ = CellObject;
Patient.prototype = $extend(CellObject.prototype,{
	ai: function() {
		if(!this.isSick && this.turns >= 2) {
			if(Math.random() < 0.7) {
				this.die();
			} else {
				this.isSick = true;
				this.turns = 0;
			}
		} else if(this.isSick && this.turns >= 2) {
			this.die();
			var o = new Body(this.game,this.x,this.y);
			o.skip = true;
		}
	}
	,activate: function(player) {
		this.die();
		player.money++;
		this.ui.msg("Grateful patient gives you money for the treatment.");
		return true;
	}
	,getNote: function() {
		if(this.isSick) {
			return "sick patient";
		} else {
			return this.type;
		}
	}
	,__class__: Patient
});
var Player = function(g) {
	this.game = g;
	this.money = 0;
	this.theory = 1;
	this.suspicion = 0;
};
Player.__name__ = ["Player"];
Player.prototype = {
	getMaxMarkers: function() {
		return 1 + (this.theory / 3 | 0);
	}
	,getTheoryChance: function(quality) {
		var c = 10 + 40 * (quality - 1) - this.theory * 2;
		if(c < 2) {
			c = 2;
		}
		return c;
	}
	,__class__: Player
};
var QuestMarker = function(g,xv,yv,q) {
	CellObject.call(this,g,xv,yv);
	this.type = "quest";
	this.subtype = "quest";
	this.isQuest = true;
	this.quest = q;
};
QuestMarker.__name__ = ["QuestMarker"];
QuestMarker.__super__ = CellObject;
QuestMarker.prototype = $extend(CellObject.prototype,{
	activate: function(p) {
		this.quest.activate(this);
		return false;
	}
	,getNote: function() {
		return this.name;
	}
	,__class__: QuestMarker
});
var Reanimated = function(g,xv,yv) {
	Creature.call(this,g,xv,yv);
	this.type = "reanimated";
	this.name = "reanimated";
	this.level = 1;
	this.life = 3;
};
Reanimated.__name__ = ["Reanimated"];
Reanimated.__super__ = Creature;
Reanimated.prototype = $extend(Creature.prototype,{
	hit: function(who) {
		this.life--;
		if(this.life > 0) {
			return;
		}
		this.die();
		this.game.stats.reanimatedDestroyed++;
		this.map.addMessage(this.x,this.y,"Reanimated has been put down.");
	}
	,ai: function() {
		var c = null;
		if(this.game.aggressionFlag) {
			c = this.aiFindAdjacentObject("reanimated",false);
			if(c != null && Std.random(100) > 50) {
				c = null;
			}
		}
		if(c == null) {
			c = this.aiFindAdjacentObject("human",false);
		}
		if(c != null) {
			this.map.addMessage(this.x,this.y,"The reanimated attack" + (c.object.type != "reanimated" ? "s " + c.object.name : " each other") + ".");
			c.object.hit(this);
			return;
		}
		if(this.level > 1) {
			var c1 = this.aiFindAdjacentObject("body",true);
			if(c1 != null) {
				this.map.addMessage(this.x,this.y,"The reanimated hungrily devours the body.");
				this.aiAlertAroundMe();
				c1.object.die();
				this.life = 2 + this.level;
				return;
			}
		}
		if(this.game.aggressionFlag) {
			var b = this.game.map.police;
			var nearStation = false;
			var _g1 = 0;
			var _g = GameMap.dirx.length;
			while(_g1 < _g) {
				var i = _g1++;
				var cell = this.game.map.get(this.x + GameMap.dirx[i],this.y + GameMap.diry[i]);
				if(cell == null || cell.building != this.game.map.police) {
					continue;
				}
				nearStation = true;
				break;
			}
			if(nearStation) {
				this.game.map.police.reanimated++;
				this.map.addMessage(this.x,this.y,"The reanimated enters the police station.");
				this.die();
				return;
			}
		}
		var m = this.aiFindRandomMarker(2);
		if(m != null) {
			this.aiMoveTo(m.x,m.y);
			return;
		}
		this.aiDefaultCreature();
	}
	,onMove: function() {
		var m = this.map.getMarker(this.x,this.y);
		if(m != null) {
			this.map.markers.remove(m);
		}
	}
	,getNote: function() {
		var p1 = this.subtype == null ? this.type : this.subtype;
		var p2 = this.state != "idle" ? " (" + this.state + ")" : "";
		var p3 = "";
		var _g1 = 0;
		var _g = this.life;
		while(_g1 < _g) {
			var i = _g1++;
			p3 += "*";
		}
		return p1 + " [" + this.level + "]" + p2 + " " + p3;
	}
	,__class__: Reanimated
});
var Reflect = function() { };
Reflect.__name__ = ["Reflect"];
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		return null;
	}
};
var Std = function() { };
Std.__name__ = ["Std"];
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.random = function(x) {
	if(x <= 0) {
		return 0;
	} else {
		return Math.floor(Math.random() * x);
	}
};
var Type = function() { };
Type.__name__ = ["Type"];
Type.getClassName = function(c) {
	var a = c.__name__;
	if(a == null) {
		return null;
	}
	return a.join(".");
};
Type.createInstance = function(cl,args) {
	var _g = args.length;
	switch(_g) {
	case 0:
		return new cl();
	case 1:
		return new cl(args[0]);
	case 2:
		return new cl(args[0],args[1]);
	case 3:
		return new cl(args[0],args[1],args[2]);
	case 4:
		return new cl(args[0],args[1],args[2],args[3]);
	case 5:
		return new cl(args[0],args[1],args[2],args[3],args[4]);
	case 6:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5]);
	case 7:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6]);
	case 8:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7]);
	case 9:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8]);
	case 10:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9]);
	case 11:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9],args[10]);
	case 12:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9],args[10],args[11]);
	case 13:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9],args[10],args[11],args[12]);
	case 14:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9],args[10],args[11],args[12],args[13]);
	default:
		throw new js__$Boot_HaxeError("Too many arguments");
	}
};
var UI = function(g) {
	this.game = g;
	window.document.onkeydown = $bind(this,this.onKey);
	window.document.getElementById("version").innerHTML = Game.version;
	window.document.getElementById("map").onclick = $bind(this,this.onMapClick);
	window.document.getElementById("map").onmousemove = $bind(this,this.onMapMove);
	window.document.getElementById("restart").onclick = $bind(this,this.onRestart);
	var f = $bind(this,this.tooltip);
	var tmp = function() {
		f("Restart");
	};
	window.document.getElementById("restart").onmouseenter = tmp;
	window.document.getElementById("restart").onmouseleave = $bind(this,this.clearMessage);
	window.document.getElementById("endTurn").onclick = $bind(this,this.onEndTurn);
	var f1 = $bind(this,this.tooltip);
	var tmp1 = function() {
		f1("EndTurn");
	};
	window.document.getElementById("endTurn").onmouseenter = tmp1;
	window.document.getElementById("endTurn").onmouseleave = $bind(this,this.clearMessage);
	this.msgLocked = false;
	var map = window.document.getElementById("map");
	if(!map.getContext) {
		window.alert("No canvas available. Please use a canvas-compatible browser like Mozilla Firefox 3.5+ or Google Chrome.");
	}
	this.alertWindow = window.document.createElement("alertWindow");
	this.alertWindow.style.visibility = "hidden";
	this.alertWindow.style.position = "absolute";
	this.alertWindow.style.zIndex = "20";
	this.alertWindow.style.width = "600px";
	this.alertWindow.style.height = "250px";
	this.alertWindow.style.left = "200px";
	this.alertWindow.style.top = "250px";
	this.alertWindow.style.background = "#222";
	this.alertWindow.style.border = "4px double #ffffff";
	window.document.body.appendChild(this.alertWindow);
	this.alertText = window.document.createElement("alertText");
	this.alertText.style.overflow = "auto";
	this.alertText.style.position = "absolute";
	this.alertText.style.left = "10px";
	this.alertText.style.top = "10px";
	this.alertText.style.width = "580px";
	this.alertText.style.height = "200px";
	this.alertText.style.background = "#111";
	this.alertText.style.border = "1px solid #777";
	this.alertWindow.appendChild(this.alertText);
	var status = window.document.getElementById("status");
	status.innerHTML = "<table width=100%><tr>" + "<td halign=left id=statusTheory>" + "<td halign=left id=statusSuspicion>" + "<td halign=left id=statusMarkers>" + "<td halign=left id=statusChance>" + "<td halign=left><span id=statusPanic style='color:#ee1111'></span>" + "<td halign=left><span id=statusAggression style='color:#22eeee'></span>" + "<td halign=right><p id=statusTurns style='text-align:right; margin-right:5'>" + "</table>";
	var _g = 0;
	var _g1 = ["Theory","Suspicion","Markers","Chance","Panic","Aggression","Turns"];
	while(_g < _g1.length) {
		var el = _g1[_g];
		++_g;
		var tmp2 = window.document;
		var tmp3 = (function(el1,f2) {
			return function() {
				f2[0](el1[0]);
			};
		})([el],[$bind(this,this.tooltip)]);
		tmp2.getElementById("status" + el).onmouseenter = tmp3;
		window.document.getElementById("status" + el).onmouseleave = $bind(this,this.clearMessage);
	}
	var alertClose = this.createCloseButton(this.alertWindow,260,215,"alertClose");
	alertClose.onclick = $bind(this,this.onAlertCloseClick);
	this.loadImages();
};
UI.__name__ = ["UI"];
UI.getRect = function(x,y,radius) {
	var rect = { x : 3 + (x - radius) * UI.cellSize, y : 2 + (y - radius) * UI.cellSize, w : UI.cellSize * radius * 2, h : UI.cellSize * radius * 2};
	if(radius == 0) {
		rect.w = UI.cellSize;
		rect.h = UI.cellSize;
	}
	return rect;
};
UI.e = function(s) {
	return window.document.getElementById(s);
};
UI.prototype = {
	tooltip: function(el) {
		var s = null;
		if(el == "Theory") {
			s = "Current theory progress. You win when it reaches 10.";
		} else if(el == "Suspicion") {
			s = "Current authorities suspicion. You lose when it reaches 3.";
		} else if(el == "Markers") {
			s = "Maximum amount of markers to control the reanimated with.";
		} else if(el == "Chance") {
			s = "Chance of theory progress on bodies with quality 1/2/3.";
		} else if(el == "Panic") {
			s = "The town is in panic! Police patrols near the station.";
		} else if(el == "Aggression") {
			s = "The reanimated are aggressive. Read more in hints.";
		} else if(el == "Turns") {
			s = "The amount of turns passed since game start.";
		} else if(el == "EndTurn") {
			s = "Press to end game turn.";
		} else if(el == "Restart") {
			s = "Press to restart the game.";
		}
		this.msg(s);
	}
	,clearMessage: function() {
		this.msg("");
	}
	,loadImages: function() {
		this.images = new haxe_ds_StringMap();
		var imgnames = ["tile_building","tile_cemetery","tile_grass","tile_lab","tile_police","tile_tree","undefined","object_body1","object_body3","object_human1","object_human3","object_human_alerted2","object_quest","object_body2","object_cop","object_human2","object_human_alerted1","object_human_alerted3","object_human_quest","object_reanimated","building2x2","building2x3","building2x4","building3x2","building3x3","building3x4","building4x2","building4x3","building4x4","building_cemetery","building_lab","building_police"];
		var _g = 0;
		while(_g < imgnames.length) {
			var nm = imgnames[_g];
			++_g;
			var img = new Image();
			img.onload = $bind(this,this.onLoadImage);
			img.src = "images/" + nm + ".png";
			var _this = this.images;
			if(__map_reserved[nm] != null) {
				_this.setReserved(nm,img);
			} else {
				_this.h[nm] = img;
			}
		}
	}
	,onLoadImage: function() {
		this.game.map.paint();
	}
	,onKey: function(ev) {
		var key = ev.keyCode;
		if(ev.keyCode == 69 || ev.keyCode == 32) {
			this.onEndTurn(null);
		}
		if(ev.keyCode == 32) {
			ev.stopPropagation();
			ev.cancelBubble = true;
			ev.preventDefault();
		}
	}
	,createCloseButton: function(container,x,y,name) {
		var b = window.document.createElement(name);
		b.innerHTML = "<b>Close</b>";
		b.style.fontSize = "20px";
		b.style.position = "absolute";
		b.style.width = "80px";
		b.style.height = "25px";
		b.style.left = x + "px";
		b.style.top = y + "px";
		b.style.background = "#111";
		b.style.border = "1px outset #777";
		b.style.cursor = "pointer";
		b.style.textAlign = "center";
		container.appendChild(b);
		return b;
	}
	,onAlertCloseClick: function(event) {
		this.alertWindow.style.visibility = "hidden";
	}
	,onRestart: function(event) {
		this.msgLocked = false;
		this.msg("",false);
		this.game.restart();
	}
	,onEndTurn: function(event) {
		if(this.alertWindow.style.visibility == "visible") {
			return;
		}
		this.msgLocked = false;
		this.msg("",false);
		this.game.endTurn();
	}
	,onMapClick: function(event) {
		if(this.game.isFinished) {
			return;
		}
		if(this.msgLocked) {
			this.msgLocked = false;
			this.msg("",false);
		}
		var map = window.document.getElementById("map");
		var x = event.clientX - map.offsetLeft - 14;
		var y = event.clientY - map.offsetTop - 14;
		var cellX = (x - 5) / UI.cellSize | 0;
		var cellY = (y - 7) / UI.cellSize | 0;
		var cell = this.game.map.get(cellX,cellY);
		if(cell != null) {
			cell.activate();
		}
		this.justClicked = true;
		this.paintStatus();
	}
	,onMapMove: function(event) {
		if(this.justClicked) {
			this.justClicked = false;
			return;
		}
		if(this.game.isFinished) {
			return;
		}
		var map = window.document.getElementById("map");
		var x = event.clientX - map.offsetLeft - 14;
		var y = event.clientY - map.offsetTop - 14;
		this.cursorX = (x - 5) / UI.cellSize | 0;
		this.cursorY = (y - 7) / UI.cellSize | 0;
		var cell = this.game.map.get(this.cursorX,this.cursorY);
		if(cell != null && cell.isVisible) {
			this.tip(cell.getNote());
			var m = this.game.map.getMessage(cell.x,cell.y);
			if(m != null) {
				this.msg(m.text);
			} else if(cell.object != null) {
				this.msg(cell.object.getMessage());
			} else if(this.game.map.hasMarker(cell.x,cell.y)) {
				this.msg("This marker will attract reanimated if they are close enough. ");
			} else if(cell.building == this.game.map.police) {
				var s_b = "";
				s_b += Std.string("There are " + (this.game.map.copsTotal - this.game.stats.copsDead) + " officers left");
				if(this.game.map.police.reanimated > 0) {
					s_b += Std.string(". " + this.game.map.police.reanimated + " reanimated ");
					if(this.game.map.police.reanimated == 1) {
						s_b += "is";
					} else {
						s_b += "are";
					}
					s_b += " in the building.";
				} else {
					s_b += " to protect the town.";
				}
				this.msg(s_b);
			} else if(cell.building == this.game.map.cemetery) {
				this.msg("The town cemetery is your main source of bodies.");
			} else if(cell.building == this.game.player.lab) {
				this.msg("Macabre science is being done here!");
			} else {
				this.msg("");
			}
		} else {
			this.tip("");
			this.msg("");
		}
		this.prevX = x;
		this.prevY = y;
	}
	,msg: function(s,isLocked) {
		if(isLocked == null) {
			isLocked = true;
		}
		if(this.msgLocked && !isLocked) {
			return;
		}
		if(isLocked) {
			this.msgLocked = true;
		}
		window.document.getElementById("msg").innerHTML = "<center>" + s + "</center>";
	}
	,tip: function(s) {
		window.document.getElementById("tip").innerHTML = s;
	}
	,paintStatus: function() {
		window.document.getElementById("statusTheory").innerHTML = "Theory: " + this.game.player.theory;
		window.document.getElementById("statusSuspicion").innerHTML = "Suspicion: " + this.game.player.suspicion;
		var tmp = 1 + (this.game.player.theory / 3 | 0);
		window.document.getElementById("statusMarkers").innerHTML = "Markers: " + tmp;
		var c = 10 - this.game.player.theory * 2;
		if(c < 2) {
			c = 2;
		}
		var c1 = 50 - this.game.player.theory * 2;
		if(c1 < 2) {
			c1 = 2;
		}
		var c2 = 90 - this.game.player.theory * 2;
		if(c2 < 2) {
			c2 = 2;
		}
		window.document.getElementById("statusChance").innerHTML = "Chance: " + c + "% / " + c1 + "% / " + c2 + "%";
		var tmp1 = this.game.isPanic ? "PANIC!" : "";
		window.document.getElementById("statusPanic").innerHTML = tmp1;
		var tmp2 = this.game.aggressionFlag ? "AG" : "";
		window.document.getElementById("statusAggression").innerHTML = tmp2;
		window.document.getElementById("statusTurns").innerHTML = "Turns: " + this.game.turns;
	}
	,finish: function(isVictory,reason) {
		var el = window.document.getElementById("map");
		var map = el.getContext("2d",null);
		map.font = UI.cellSize - 4 + "px Verdana";
		map.fillStyle = "rgba(0, 0, 0, 0.7)";
		map.fillRect(0,0,el.width,el.height);
		map.fillStyle = "white";
		var text = "";
		if(isVictory) {
			var result = "";
			if(reason == "police") {
				result = "removed the official obstacles";
			} else if(reason == "theory") {
				result = "proven your theory";
			}
			text = "You have " + result + " in " + this.game.turns + " turns!";
		} else {
			text = "You have been found out...";
		}
		var metrics = map.measureText(text);
		var x = (el.width - metrics.width) / 2;
		var y = (el.height - UI.cellSize) / 2;
		map.fillText(text,x,y);
		var font = 0.4 * UI.cellSize | 0;
		map.font = font + "px Verdana";
		map.fillStyle = "yellow";
		var i = 0;
		map.fillText(this.game.stats.humansDead + " citizens died during the course of these horrible events.",10,y + 70);
		map.fillText(this.game.stats.copsDead + " police officers died fulfilling their duty.",10,y + 70 + (font + 10) * ++i);
		map.fillText(this.game.stats.bodiesTested + " different solutions were tested on the specimens.",10,y + 70 + (font + 10) * ++i);
		map.fillText(this.game.stats.bodiesReanimated + " specimens were successfully reanimated.",10,y + 70 + (font + 10) * ++i);
		map.fillText(this.game.stats.reanimatedDestroyed + " reanimated bodies were put down by the police.",10,y + 70 + (font + 10) * ++i);
		if(this.game.aggressionFlag) {
			map.fillText("The reanimated were aggressive.",10,y + 70 + (font + 10) * ++i);
		}
	}
	,track: function(action,label,value) {
		action = "drwest " + action + " " + Game.version;
		if(label == null) {
			label = "";
		}
		if(value == null) {
			value = 0;
		}
		pageTracker._trackEvent("Dr West",action,label,value);
	}
	,alert: function(s) {
		this.alertText.innerHTML = "<center>" + s + "</center>";
		this.alertWindow.style.visibility = "visible";
	}
	,getVar: function(name) {
		return getCookie(name);
	}
	,setVar: function(name,val) {
		return setCookie(name,val,new Date(2015, 0, 0, 0, 0, 0, 0));
	}
	,__class__: UI
};
var haxe_IMap = function() { };
haxe_IMap.__name__ = ["haxe","IMap"];
var haxe_ds_StringMap = function() {
	this.h = { };
};
haxe_ds_StringMap.__name__ = ["haxe","ds","StringMap"];
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
	,remove: function(key) {
		if(__map_reserved[key] != null) {
			key = "$" + key;
			if(this.rh == null || !this.rh.hasOwnProperty(key)) {
				return false;
			}
			delete(this.rh[key]);
			return true;
		} else {
			if(!this.h.hasOwnProperty(key)) {
				return false;
			}
			delete(this.h[key]);
			return true;
		}
	}
	,keys: function() {
		return HxOverrides.iter(this.arrayKeys());
	}
	,arrayKeys: function() {
		var out = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) {
			out.push(key);
		}
		}
		if(this.rh != null) {
			for( var key in this.rh ) {
			if(key.charCodeAt(0) == 36) {
				out.push(key.substr(1));
			}
			}
		}
		return out;
	}
	,__class__: haxe_ds_StringMap
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	this.message = String(val);
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.__name__ = ["js","_Boot","HaxeError"];
js__$Boot_HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	__class__: js__$Boot_HaxeError
});
var js_Boot = function() { };
js_Boot.__name__ = ["js","Boot"];
js_Boot.getClass = function(o) {
	if((o instanceof Array) && o.__enum__ == null) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0 ? "," : "") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
String.prototype.__class__ = String;
String.__name__ = ["String"];
Array.__name__ = ["Array"];
var __map_reserved = {};
Cell.walkable = { grass : true, building : false, swamp : true, water : false, tree : false};
Cell.dx = [1,-1,0,0,1,-1,1,-1];
Cell.dy = [0,0,1,-1,1,-1,-1,1];
Creature.dirNumX = [0,-1,0,1,-1,0,1,-1,0,1];
Creature.dirNumY = [0,1,1,1,0,0,0,-1,-1,-1];
Creature.dirSecondary = [[0,0],[2,4],[1,3],[2,6],[1,7],[0,0],[3,9],[4,8],[7,9],[6,8]];
quests_Quest.isRepeatable = false;
quests_WaxHeadedVisitor.isRepeatable = false;
quests_AnxiousAssistant.isRepeatable = false;
quests_NosyReporter.isRepeatable = false;
quests_LabEventGeneric.isRepeatable = true;
Game.version = "v4";
Game.possibleQuests = [quests_WaxHeadedVisitor,quests_AnxiousAssistant,quests_NosyReporter,quests_LabEventGeneric];
GameMap.dirx = [-1,-1,-1,0,0,1,1,1];
GameMap.diry = [-1,0,1,-1,1,-1,0,1];
UI.cellSize = 40;
UI.mapWidth = 25;
UI.mapHeight = 16;
UI.repaintRadius = 3;
js_Boot.__toStr = ({ }).toString;
Game.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
